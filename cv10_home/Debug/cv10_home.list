
cv10_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019054  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f328  08019204  08019204  00029204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802852c  0802852c  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  0802852c  0802852c  0003852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028534  08028534  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028534  08028534  00038534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028538  08028538  00038538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0802853c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f934  200001f0  0802872c  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb24  0802872c  0004fb24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000486ba  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000848a  00000000  00000000  000888da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025c0  00000000  00000000  00090d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023d8  00000000  00000000  00093328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034841  00000000  00000000  00095700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030096  00000000  00000000  000c9f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001018e9  00000000  00000000  000f9fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb8c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a31c  00000000  00000000  001fb93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080191ec 	.word	0x080191ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	080191ec 	.word	0x080191ec

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 ff43 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81f 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8df 	bl	80007c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f885 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060a:	f000 f8ad 	bl	8000768 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x44>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f004 fcaf 	bl	8004f88 <osThreadCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <main+0x48>)
 800062e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f004 fc93 	bl	8004f5a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x40>
 8000636:	bf00      	nop
 8000638:	08019210 	.word	0x08019210
 800063c:	20008da8 	.word	0x20008da8

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f017 fe2c 	bl	80182ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fb2d 	bl	8002d24 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f948 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd86 	bl	8003204 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f931 	bl	8000964 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f003 f9bc 	bl	8003ac8 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f905 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20008dac 	.word	0x20008dac
 8000764:	40004800 	.word	0x40004800

08000768 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2204      	movs	r2, #4
 8000778:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2202      	movs	r2, #2
 800077e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	f002 f99d 	bl	8002aea <HAL_PCD_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8d5 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20008dec 	.word	0x20008dec

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_GPIO_Init+0x148>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4a      	ldr	r2, [pc, #296]	; (800090c <MX_GPIO_Init+0x148>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b48      	ldr	r3, [pc, #288]	; (800090c <MX_GPIO_Init+0x148>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_GPIO_Init+0x148>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a43      	ldr	r2, [pc, #268]	; (800090c <MX_GPIO_Init+0x148>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b41      	ldr	r3, [pc, #260]	; (800090c <MX_GPIO_Init+0x148>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b3d      	ldr	r3, [pc, #244]	; (800090c <MX_GPIO_Init+0x148>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3c      	ldr	r2, [pc, #240]	; (800090c <MX_GPIO_Init+0x148>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3a      	ldr	r3, [pc, #232]	; (800090c <MX_GPIO_Init+0x148>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_GPIO_Init+0x148>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a35      	ldr	r2, [pc, #212]	; (800090c <MX_GPIO_Init+0x148>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b33      	ldr	r3, [pc, #204]	; (800090c <MX_GPIO_Init+0x148>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <MX_GPIO_Init+0x148>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <MX_GPIO_Init+0x148>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_GPIO_Init+0x148>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_GPIO_Init+0x148>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <MX_GPIO_Init+0x148>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_GPIO_Init+0x148>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f244 0181 	movw	r1, #16513	; 0x4081
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x14c>)
 800088a:	f002 f915 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	4820      	ldr	r0, [pc, #128]	; (8000914 <MX_GPIO_Init+0x150>)
 8000894:	f002 f910 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_GPIO_Init+0x154>)
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_GPIO_Init+0x158>)
 80008ae:	f001 ff41 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4811      	ldr	r0, [pc, #68]	; (8000910 <MX_GPIO_Init+0x14c>)
 80008cc:	f001 ff32 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x150>)
 80008e8:	f001 ff24 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_GPIO_Init+0x150>)
 8000900:	f001 ff18 	bl	8002734 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400
 8000914:	40021800 	.word	0x40021800
 8000918:	10110000 	.word	0x10110000
 800091c:	40020800 	.word	0x40020800

08000920 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000928:	f003 ff46 	bl	80047b8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Initialize tcp echo server */
  tcpecho_init();
 800092c:	f000 fa8a 	bl	8000e44 <tcpecho_init>

  /* Initialize HTTP server */
  httpd_init();
 8000930:	f00a fc22 	bl	800b178 <httpd_init>

  /* Initialize telnet */
  telnet_init();
 8000934:	f000 fd68 	bl	8001408 <telnet_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f004 fb71 	bl	8005020 <osDelay>
 800093e:	e7fb      	b.n	8000938 <StartDefaultTask+0x18>

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 fdb9 	bl	80014c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010000 	.word	0x40010000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x54>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_MspInit+0x54>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x54>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x54>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 fe7f 	bl	80016bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12c      	bne.n	8000a48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a44:	f001 fe76 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004800 	.word	0x40004800
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7c:	d13f      	bne.n	8000afe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aac:	230a      	movs	r3, #10
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ab8:	f001 fe3c 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ad2:	f001 fe2f 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2019      	movs	r0, #25
 8000b26:	f000 fdc9 	bl	80016bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 fde2 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fd46 	bl	80035e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b5c:	f002 fd30 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8000b60:	4603      	mov	r3, r0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_InitTick+0xa8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0xac>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_InitTick+0xb0>)
 8000b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_InitTick+0xac>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_InitTick+0xac>)
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_InitTick+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_InitTick+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_InitTick+0xac>)
 8000b96:	f002 fd59 	bl	800364c <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_InitTick+0xac>)
 8000ba2:	f002 fd88 	bl	80036b6 <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	200091f4 	.word	0x200091f4
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfe:	f002 fd7e 	bl	80036fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200091f4 	.word	0x200091f4

08000c0c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <ETH_IRQHandler+0x10>)
 8000c12:	f001 f963 	bl	8001edc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000ab48 	.word	0x2000ab48

08000c20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
	}

return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	e009      	b.n	8000c80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbf1      	blt.n	8000c6c <_write+0x12>
	}
	return len;
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <_close>:

int _close(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	return -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	605a      	str	r2, [r3, #4]
	return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <_isatty>:

int _isatty(int file)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x50>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x16>
		heap_end = &end;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <_sbrk+0x50>)
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <_sbrk+0x54>)
 8000d10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <_sbrk+0x50>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <_sbrk+0x50>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	466a      	mov	r2, sp
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d905      	bls.n	8000d32 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <_sbrk+0x58>)
 8000d28:	220c      	movs	r2, #12
 8000d2a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	e006      	b.n	8000d40 <_sbrk+0x44>
	}

	heap_end += incr;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <_sbrk+0x50>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <_sbrk+0x50>)
 8000d3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000460 	.word	0x20000460
 8000d50:	2000fb28 	.word	0x2000fb28
 8000d54:	2000fb1c 	.word	0x2000fb1c

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <SystemInit+0x28>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <SystemInit+0x28>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SystemInit+0x28>)
 8000d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d72:	609a      	str	r2, [r3, #8]
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2010      	movs	r0, #16
 8000d92:	f007 f869 	bl	8007e68 <netconn_new_with_proto_and_callback>
 8000d96:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d04e      	beq.n	8000e3c <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d9e:	2207      	movs	r2, #7
 8000da0:	2100      	movs	r1, #0
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f007 f91a 	bl	8007fdc <netconn_bind>
 8000da8:	4603      	mov	r3, r0
 8000daa:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000dac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d13f      	bne.n	8000e34 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000db4:	21ff      	movs	r1, #255	; 0xff
 8000db6:	69f8      	ldr	r0, [r7, #28]
 8000db8:	f007 f948 	bl	800804c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	69f8      	ldr	r0, [r7, #28]
 8000dc4:	f007 f96e 	bl	80080a4 <netconn_accept>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000dcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f3      	bne.n	8000dbc <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dd4:	e01b      	b.n	8000e0e <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	f107 020a 	add.w	r2, r7, #10
 8000ddc:	f107 010c 	add.w	r1, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f009 f8fb 	bl	8009fdc <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	897b      	ldrh	r3, [r7, #10]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2301      	movs	r3, #1
 8000df4:	f007 fbd8 	bl	80085a8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f009 f938 	bl	800a070 <netbuf_next>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dae7      	bge.n	8000dd6 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f009 f8c7 	bl	8009f9c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f107 0210 	add.w	r2, r7, #16
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 fb4c 	bl	80084b4 <netconn_recv>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0d9      	beq.n	8000dd6 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f007 fcc1 	bl	80087ac <netconn_close>
          netconn_delete(newconn);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f8b9 	bl	8007fa4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e32:	e7c3      	b.n	8000dbc <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f007 f8b4 	bl	8007fa4 <netconn_delete>
    }
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e52:	2200      	movs	r2, #0
 8000e54:	4903      	ldr	r1, [pc, #12]	; (8000e64 <tcpecho_init+0x20>)
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <tcpecho_init+0x24>)
 8000e58:	f017 f986 	bl	8018168 <sys_thread_new>
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08000d85 	.word	0x08000d85
 8000e68:	0801922c 	.word	0x0801922c

08000e6c <telnet_process_command>:



/*-----------------------------------------------------------------------------------*/
static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	static char txt [CMD_BUFFER_LEN];
	char *token;
	char *saveptr;

	token = strtok_r(cmd, " ", &saveptr);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	49aa      	ldr	r1, [pc, #680]	; (8001128 <telnet_process_command+0x2bc>)
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f017 facf 	bl	8018422 <strtok_r>
 8000e84:	60f8      	str	r0, [r7, #12]
	if (strcasecmp(token, "HELLO") == 0)
 8000e86:	49a9      	ldr	r1, [pc, #676]	; (800112c <telnet_process_command+0x2c0>)
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f017 fa63 	bl	8018354 <strcasecmp>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10e      	bne.n	8000eb2 <telnet_process_command+0x46>
	{
		sprintf (txt, "OK\n");
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <telnet_process_command+0x2c4>)
 8000e96:	4aa7      	ldr	r2, [pc, #668]	; (8001134 <telnet_process_command+0x2c8>)
 8000e98:	601a      	str	r2, [r3, #0]
		netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000e9a:	48a5      	ldr	r0, [pc, #660]	; (8001130 <telnet_process_command+0x2c4>)
 8000e9c:	f7ff f9b2 	bl	8000204 <strlen>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	49a1      	ldr	r1, [pc, #644]	; (8001130 <telnet_process_command+0x2c4>)
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f007 fb7c 	bl	80085a8 <netconn_write_partly>
			sprintf(txt,"OK nesviti\n");
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
			token = strtok_r(NULL, " ", &saveptr);
		}
	}
}
 8000eb0:	e1f6      	b.n	80012a0 <telnet_process_command+0x434>
	else if (strcasecmp(token, "STATUS") == 0) // status
 8000eb2:	49a1      	ldr	r1, [pc, #644]	; (8001138 <telnet_process_command+0x2cc>)
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f017 fa4d 	bl	8018354 <strcasecmp>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d17c      	bne.n	8000fba <telnet_process_command+0x14e>
		if (HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin) == 1)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	489e      	ldr	r0, [pc, #632]	; (800113c <telnet_process_command+0x2d0>)
 8000ec4:	f001 fde0 	bl	8002a88 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d110      	bne.n	8000ef0 <telnet_process_command+0x84>
			sprintf (txt, "LED1 sviti\n");
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <telnet_process_command+0x2c4>)
 8000ed0:	4a9b      	ldr	r2, [pc, #620]	; (8001140 <telnet_process_command+0x2d4>)
 8000ed2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000ed8:	4895      	ldr	r0, [pc, #596]	; (8001130 <telnet_process_command+0x2c4>)
 8000eda:	f7ff f993 	bl	8000204 <strlen>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4992      	ldr	r1, [pc, #584]	; (8001130 <telnet_process_command+0x2c4>)
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f007 fb5d 	bl	80085a8 <netconn_write_partly>
 8000eee:	e010      	b.n	8000f12 <telnet_process_command+0xa6>
			sprintf (txt, "LED1 nesviti\n");
 8000ef0:	4a8f      	ldr	r2, [pc, #572]	; (8001130 <telnet_process_command+0x2c4>)
 8000ef2:	4b94      	ldr	r3, [pc, #592]	; (8001144 <telnet_process_command+0x2d8>)
 8000ef4:	4614      	mov	r4, r2
 8000ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef8:	c407      	stmia	r4!, {r0, r1, r2}
 8000efa:	8023      	strh	r3, [r4, #0]
		    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000efc:	488c      	ldr	r0, [pc, #560]	; (8001130 <telnet_process_command+0x2c4>)
 8000efe:	f7ff f981 	bl	8000204 <strlen>
 8000f02:	4602      	mov	r2, r0
 8000f04:	2300      	movs	r3, #0
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4989      	ldr	r1, [pc, #548]	; (8001130 <telnet_process_command+0x2c4>)
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f007 fb4b 	bl	80085a8 <netconn_write_partly>
		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 1)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	4889      	ldr	r0, [pc, #548]	; (800113c <telnet_process_command+0x2d0>)
 8000f16:	f001 fdb7 	bl	8002a88 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d110      	bne.n	8000f42 <telnet_process_command+0xd6>
			sprintf (txt, "LED2 sviti\n");
 8000f20:	4b83      	ldr	r3, [pc, #524]	; (8001130 <telnet_process_command+0x2c4>)
 8000f22:	4a89      	ldr	r2, [pc, #548]	; (8001148 <telnet_process_command+0x2dc>)
 8000f24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000f2a:	4881      	ldr	r0, [pc, #516]	; (8001130 <telnet_process_command+0x2c4>)
 8000f2c:	f7ff f96a 	bl	8000204 <strlen>
 8000f30:	4602      	mov	r2, r0
 8000f32:	2300      	movs	r3, #0
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	497d      	ldr	r1, [pc, #500]	; (8001130 <telnet_process_command+0x2c4>)
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f007 fb34 	bl	80085a8 <netconn_write_partly>
 8000f40:	e010      	b.n	8000f64 <telnet_process_command+0xf8>
			sprintf (txt, "LED2 nesviti\n");
 8000f42:	4a7b      	ldr	r2, [pc, #492]	; (8001130 <telnet_process_command+0x2c4>)
 8000f44:	4b81      	ldr	r3, [pc, #516]	; (800114c <telnet_process_command+0x2e0>)
 8000f46:	4614      	mov	r4, r2
 8000f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4a:	c407      	stmia	r4!, {r0, r1, r2}
 8000f4c:	8023      	strh	r3, [r4, #0]
		    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000f4e:	4878      	ldr	r0, [pc, #480]	; (8001130 <telnet_process_command+0x2c4>)
 8000f50:	f7ff f958 	bl	8000204 <strlen>
 8000f54:	4602      	mov	r2, r0
 8000f56:	2300      	movs	r3, #0
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	4974      	ldr	r1, [pc, #464]	; (8001130 <telnet_process_command+0x2c4>)
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f007 fb22 	bl	80085a8 <netconn_write_partly>
		if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == 1)
 8000f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f68:	4874      	ldr	r0, [pc, #464]	; (800113c <telnet_process_command+0x2d0>)
 8000f6a:	f001 fd8d 	bl	8002a88 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d110      	bne.n	8000f96 <telnet_process_command+0x12a>
			sprintf (txt, "LED3 sviti\n");
 8000f74:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <telnet_process_command+0x2c4>)
 8000f76:	4a76      	ldr	r2, [pc, #472]	; (8001150 <telnet_process_command+0x2e4>)
 8000f78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000f7e:	486c      	ldr	r0, [pc, #432]	; (8001130 <telnet_process_command+0x2c4>)
 8000f80:	f7ff f940 	bl	8000204 <strlen>
 8000f84:	4602      	mov	r2, r0
 8000f86:	2300      	movs	r3, #0
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	4968      	ldr	r1, [pc, #416]	; (8001130 <telnet_process_command+0x2c4>)
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	f007 fb0a 	bl	80085a8 <netconn_write_partly>
}
 8000f94:	e184      	b.n	80012a0 <telnet_process_command+0x434>
			sprintf (txt, "LED3 nesviti\n");
 8000f96:	4a66      	ldr	r2, [pc, #408]	; (8001130 <telnet_process_command+0x2c4>)
 8000f98:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <telnet_process_command+0x2e8>)
 8000f9a:	4614      	mov	r4, r2
 8000f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa0:	8023      	strh	r3, [r4, #0]
		    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000fa2:	4863      	ldr	r0, [pc, #396]	; (8001130 <telnet_process_command+0x2c4>)
 8000fa4:	f7ff f92e 	bl	8000204 <strlen>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	495f      	ldr	r1, [pc, #380]	; (8001130 <telnet_process_command+0x2c4>)
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f007 faf8 	bl	80085a8 <netconn_write_partly>
}
 8000fb8:	e172      	b.n	80012a0 <telnet_process_command+0x434>
	else if (strcasecmp(token, "LED1") == 0) // LED1
 8000fba:	4967      	ldr	r1, [pc, #412]	; (8001158 <telnet_process_command+0x2ec>)
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f017 f9c9 	bl	8018354 <strcasecmp>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d166      	bne.n	8001096 <telnet_process_command+0x22a>
		sprintf(txt, "LED1 - ON/OFF\n");
 8000fc8:	4a59      	ldr	r2, [pc, #356]	; (8001130 <telnet_process_command+0x2c4>)
 8000fca:	4b64      	ldr	r3, [pc, #400]	; (800115c <telnet_process_command+0x2f0>)
 8000fcc:	4614      	mov	r4, r2
 8000fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fd2:	8023      	strh	r3, [r4, #0]
 8000fd4:	3402      	adds	r4, #2
 8000fd6:	0c1b      	lsrs	r3, r3, #16
 8000fd8:	7023      	strb	r3, [r4, #0]
		netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8000fda:	4855      	ldr	r0, [pc, #340]	; (8001130 <telnet_process_command+0x2c4>)
 8000fdc:	f7ff f912 	bl	8000204 <strlen>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	4951      	ldr	r1, [pc, #324]	; (8001130 <telnet_process_command+0x2c4>)
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f007 fadc 	bl	80085a8 <netconn_write_partly>
		token = strtok_r (NULL, " ", &saveptr);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	494c      	ldr	r1, [pc, #304]	; (8001128 <telnet_process_command+0x2bc>)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f017 fa12 	bl	8018422 <strtok_r>
 8000ffe:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0) //ON
 8001000:	4957      	ldr	r1, [pc, #348]	; (8001160 <telnet_process_command+0x2f4>)
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f017 f9a6 	bl	8018354 <strcasecmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11d      	bne.n	800104a <telnet_process_command+0x1de>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	2101      	movs	r1, #1
 8001012:	484a      	ldr	r0, [pc, #296]	; (800113c <telnet_process_command+0x2d0>)
 8001014:	f001 fd50 	bl	8002ab8 <HAL_GPIO_WritePin>
			sprintf(txt, "OK sviti\n");
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <telnet_process_command+0x2c4>)
 800101a:	4a52      	ldr	r2, [pc, #328]	; (8001164 <telnet_process_command+0x2f8>)
 800101c:	ca07      	ldmia	r2, {r0, r1, r2}
 800101e:	c303      	stmia	r3!, {r0, r1}
 8001020:	801a      	strh	r2, [r3, #0]
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8001022:	4843      	ldr	r0, [pc, #268]	; (8001130 <telnet_process_command+0x2c4>)
 8001024:	f7ff f8ee 	bl	8000204 <strlen>
 8001028:	4602      	mov	r2, r0
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	493f      	ldr	r1, [pc, #252]	; (8001130 <telnet_process_command+0x2c4>)
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f007 fab8 	bl	80085a8 <netconn_write_partly>
			token = strtok_r(NULL, " ", &saveptr);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	461a      	mov	r2, r3
 800103e:	493a      	ldr	r1, [pc, #232]	; (8001128 <telnet_process_command+0x2bc>)
 8001040:	2000      	movs	r0, #0
 8001042:	f017 f9ee 	bl	8018422 <strtok_r>
 8001046:	60f8      	str	r0, [r7, #12]
}
 8001048:	e12a      	b.n	80012a0 <telnet_process_command+0x434>
		else if (strcasecmp(token, "OFF") == 0) //OFF
 800104a:	4947      	ldr	r1, [pc, #284]	; (8001168 <telnet_process_command+0x2fc>)
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f017 f981 	bl	8018354 <strcasecmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	f040 8123 	bne.w	80012a0 <telnet_process_command+0x434>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2101      	movs	r1, #1
 800105e:	4837      	ldr	r0, [pc, #220]	; (800113c <telnet_process_command+0x2d0>)
 8001060:	f001 fd2a 	bl	8002ab8 <HAL_GPIO_WritePin>
			sprintf(txt,"OK nesviti\n");
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <telnet_process_command+0x2c4>)
 8001066:	4a41      	ldr	r2, [pc, #260]	; (800116c <telnet_process_command+0x300>)
 8001068:	ca07      	ldmia	r2, {r0, r1, r2}
 800106a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 800106e:	4830      	ldr	r0, [pc, #192]	; (8001130 <telnet_process_command+0x2c4>)
 8001070:	f7ff f8c8 	bl	8000204 <strlen>
 8001074:	4602      	mov	r2, r0
 8001076:	2300      	movs	r3, #0
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	492c      	ldr	r1, [pc, #176]	; (8001130 <telnet_process_command+0x2c4>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f007 fa92 	bl	80085a8 <netconn_write_partly>
			token = strtok_r(NULL, " ", &saveptr);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	461a      	mov	r2, r3
 800108a:	4927      	ldr	r1, [pc, #156]	; (8001128 <telnet_process_command+0x2bc>)
 800108c:	2000      	movs	r0, #0
 800108e:	f017 f9c8 	bl	8018422 <strtok_r>
 8001092:	60f8      	str	r0, [r7, #12]
}
 8001094:	e104      	b.n	80012a0 <telnet_process_command+0x434>
	else if (strcasecmp(token, "LED2") == 0) //LED2
 8001096:	4936      	ldr	r1, [pc, #216]	; (8001170 <telnet_process_command+0x304>)
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f017 f95b 	bl	8018354 <strcasecmp>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f040 808f 	bne.w	80011c4 <telnet_process_command+0x358>
		sprintf(txt, "LED2 - ON/OFF\n");
 80010a6:	4a22      	ldr	r2, [pc, #136]	; (8001130 <telnet_process_command+0x2c4>)
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <telnet_process_command+0x308>)
 80010aa:	4614      	mov	r4, r2
 80010ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ae:	c407      	stmia	r4!, {r0, r1, r2}
 80010b0:	8023      	strh	r3, [r4, #0]
 80010b2:	3402      	adds	r4, #2
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	7023      	strb	r3, [r4, #0]
	    netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <telnet_process_command+0x2c4>)
 80010ba:	f7ff f8a3 	bl	8000204 <strlen>
 80010be:	4602      	mov	r2, r0
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	491a      	ldr	r1, [pc, #104]	; (8001130 <telnet_process_command+0x2c4>)
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f007 fa6d 	bl	80085a8 <netconn_write_partly>
		token = strtok_r(NULL, " ", &saveptr);
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	461a      	mov	r2, r3
 80010d4:	4914      	ldr	r1, [pc, #80]	; (8001128 <telnet_process_command+0x2bc>)
 80010d6:	2000      	movs	r0, #0
 80010d8:	f017 f9a3 	bl	8018422 <strtok_r>
 80010dc:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 80010de:	4920      	ldr	r1, [pc, #128]	; (8001160 <telnet_process_command+0x2f4>)
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f017 f937 	bl	8018354 <strcasecmp>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d145      	bne.n	8001178 <telnet_process_command+0x30c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4812      	ldr	r0, [pc, #72]	; (800113c <telnet_process_command+0x2d0>)
 80010f2:	f001 fce1 	bl	8002ab8 <HAL_GPIO_WritePin>
			sprintf(txt, "OK sviti\n");
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <telnet_process_command+0x2c4>)
 80010f8:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <telnet_process_command+0x2f8>)
 80010fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fc:	c303      	stmia	r3!, {r0, r1}
 80010fe:	801a      	strh	r2, [r3, #0]
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <telnet_process_command+0x2c4>)
 8001102:	f7ff f87f 	bl	8000204 <strlen>
 8001106:	4602      	mov	r2, r0
 8001108:	2300      	movs	r3, #0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <telnet_process_command+0x2c4>)
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f007 fa49 	bl	80085a8 <netconn_write_partly>
			token = strtok_r(NULL, " ", &saveptr);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	461a      	mov	r2, r3
 800111c:	4902      	ldr	r1, [pc, #8]	; (8001128 <telnet_process_command+0x2bc>)
 800111e:	2000      	movs	r0, #0
 8001120:	f017 f97f 	bl	8018422 <strtok_r>
 8001124:	60f8      	str	r0, [r7, #12]
}
 8001126:	e0bb      	b.n	80012a0 <telnet_process_command+0x434>
 8001128:	0801923c 	.word	0x0801923c
 800112c:	08019240 	.word	0x08019240
 8001130:	20000464 	.word	0x20000464
 8001134:	000a4b4f 	.word	0x000a4b4f
 8001138:	08019248 	.word	0x08019248
 800113c:	40020400 	.word	0x40020400
 8001140:	08019250 	.word	0x08019250
 8001144:	0801925c 	.word	0x0801925c
 8001148:	0801926c 	.word	0x0801926c
 800114c:	08019278 	.word	0x08019278
 8001150:	08019288 	.word	0x08019288
 8001154:	08019294 	.word	0x08019294
 8001158:	080192a4 	.word	0x080192a4
 800115c:	080192ac 	.word	0x080192ac
 8001160:	080192bc 	.word	0x080192bc
 8001164:	080192c0 	.word	0x080192c0
 8001168:	080192cc 	.word	0x080192cc
 800116c:	080192d0 	.word	0x080192d0
 8001170:	080192dc 	.word	0x080192dc
 8001174:	080192e4 	.word	0x080192e4
		else if (strcasecmp(token, "OFF") == 0)
 8001178:	494b      	ldr	r1, [pc, #300]	; (80012a8 <telnet_process_command+0x43c>)
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f017 f8ea 	bl	8018354 <strcasecmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 808c 	bne.w	80012a0 <telnet_process_command+0x434>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	4847      	ldr	r0, [pc, #284]	; (80012ac <telnet_process_command+0x440>)
 800118e:	f001 fc93 	bl	8002ab8 <HAL_GPIO_WritePin>
			sprintf(txt,"OK nesviti\n");
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <telnet_process_command+0x444>)
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <telnet_process_command+0x448>)
 8001196:	ca07      	ldmia	r2, {r0, r1, r2}
 8001198:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 800119c:	4844      	ldr	r0, [pc, #272]	; (80012b0 <telnet_process_command+0x444>)
 800119e:	f7ff f831 	bl	8000204 <strlen>
 80011a2:	4602      	mov	r2, r0
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	4941      	ldr	r1, [pc, #260]	; (80012b0 <telnet_process_command+0x444>)
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f007 f9fb 	bl	80085a8 <netconn_write_partly>
			token = strtok_r(NULL, " ", &saveptr);
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	461a      	mov	r2, r3
 80011b8:	493f      	ldr	r1, [pc, #252]	; (80012b8 <telnet_process_command+0x44c>)
 80011ba:	2000      	movs	r0, #0
 80011bc:	f017 f931 	bl	8018422 <strtok_r>
 80011c0:	60f8      	str	r0, [r7, #12]
}
 80011c2:	e06d      	b.n	80012a0 <telnet_process_command+0x434>
	else if (strcasecmp(token, "LED3") == 0) //LED3
 80011c4:	493d      	ldr	r1, [pc, #244]	; (80012bc <telnet_process_command+0x450>)
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f017 f8c4 	bl	8018354 <strcasecmp>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d166      	bne.n	80012a0 <telnet_process_command+0x434>
		sprintf(txt, "LED3 - ON/OFF\n");
 80011d2:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <telnet_process_command+0x444>)
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <telnet_process_command+0x454>)
 80011d6:	4614      	mov	r4, r2
 80011d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011da:	c407      	stmia	r4!, {r0, r1, r2}
 80011dc:	8023      	strh	r3, [r4, #0]
 80011de:	3402      	adds	r4, #2
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	7023      	strb	r3, [r4, #0]
		netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 80011e4:	4832      	ldr	r0, [pc, #200]	; (80012b0 <telnet_process_command+0x444>)
 80011e6:	f7ff f80d 	bl	8000204 <strlen>
 80011ea:	4602      	mov	r2, r0
 80011ec:	2300      	movs	r3, #0
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	492f      	ldr	r1, [pc, #188]	; (80012b0 <telnet_process_command+0x444>)
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f007 f9d7 	bl	80085a8 <netconn_write_partly>
		token = strtok_r(NULL, " ", &saveptr);
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	461a      	mov	r2, r3
 8001200:	492d      	ldr	r1, [pc, #180]	; (80012b8 <telnet_process_command+0x44c>)
 8001202:	2000      	movs	r0, #0
 8001204:	f017 f90d 	bl	8018422 <strtok_r>
 8001208:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 800120a:	492e      	ldr	r1, [pc, #184]	; (80012c4 <telnet_process_command+0x458>)
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f017 f8a1 	bl	8018354 <strcasecmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11e      	bne.n	8001256 <telnet_process_command+0x3ea>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121e:	4823      	ldr	r0, [pc, #140]	; (80012ac <telnet_process_command+0x440>)
 8001220:	f001 fc4a 	bl	8002ab8 <HAL_GPIO_WritePin>
			sprintf(txt, "OK sviti\n");
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <telnet_process_command+0x444>)
 8001226:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <telnet_process_command+0x45c>)
 8001228:	ca07      	ldmia	r2, {r0, r1, r2}
 800122a:	c303      	stmia	r3!, {r0, r1}
 800122c:	801a      	strh	r2, [r3, #0]
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 800122e:	4820      	ldr	r0, [pc, #128]	; (80012b0 <telnet_process_command+0x444>)
 8001230:	f7fe ffe8 	bl	8000204 <strlen>
 8001234:	4602      	mov	r2, r0
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	491c      	ldr	r1, [pc, #112]	; (80012b0 <telnet_process_command+0x444>)
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f007 f9b2 	bl	80085a8 <netconn_write_partly>
			token = strtok_r(NULL, " ", &saveptr);
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	461a      	mov	r2, r3
 800124a:	491b      	ldr	r1, [pc, #108]	; (80012b8 <telnet_process_command+0x44c>)
 800124c:	2000      	movs	r0, #0
 800124e:	f017 f8e8 	bl	8018422 <strtok_r>
 8001252:	60f8      	str	r0, [r7, #12]
}
 8001254:	e024      	b.n	80012a0 <telnet_process_command+0x434>
		else if (strcasecmp(token, "OFF") == 0)
 8001256:	4914      	ldr	r1, [pc, #80]	; (80012a8 <telnet_process_command+0x43c>)
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f017 f87b 	bl	8018354 <strcasecmp>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d11d      	bne.n	80012a0 <telnet_process_command+0x434>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4810      	ldr	r0, [pc, #64]	; (80012ac <telnet_process_command+0x440>)
 800126c:	f001 fc24 	bl	8002ab8 <HAL_GPIO_WritePin>
			sprintf(txt,"OK nesviti\n");
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <telnet_process_command+0x444>)
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <telnet_process_command+0x448>)
 8001274:	ca07      	ldmia	r2, {r0, r1, r2}
 8001276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			netconn_write(conn, txt, strlen(txt), NETCONN_COPY);
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <telnet_process_command+0x444>)
 800127c:	f7fe ffc2 	bl	8000204 <strlen>
 8001280:	4602      	mov	r2, r0
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	4909      	ldr	r1, [pc, #36]	; (80012b0 <telnet_process_command+0x444>)
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f007 f98c 	bl	80085a8 <netconn_write_partly>
			token = strtok_r(NULL, " ", &saveptr);
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	461a      	mov	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <telnet_process_command+0x44c>)
 8001298:	2000      	movs	r0, #0
 800129a:	f017 f8c2 	bl	8018422 <strtok_r>
 800129e:	60f8      	str	r0, [r7, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	080192cc 	.word	0x080192cc
 80012ac:	40020400 	.word	0x40020400
 80012b0:	20000464 	.word	0x20000464
 80012b4:	080192d0 	.word	0x080192d0
 80012b8:	0801923c 	.word	0x0801923c
 80012bc:	080192f4 	.word	0x080192f4
 80012c0:	080192fc 	.word	0x080192fc
 80012c4:	080192bc 	.word	0x080192bc
 80012c8:	080192c0 	.word	0x080192c0

080012cc <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <telnet_byte_available+0x64>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	2bfe      	cmp	r3, #254	; 0xfe
 80012de:	d810      	bhi.n	8001302 <telnet_byte_available+0x36>
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b1f      	cmp	r3, #31
 80012e4:	d90d      	bls.n	8001302 <telnet_byte_available+0x36>
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db09      	blt.n	8001302 <telnet_byte_available+0x36>
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <telnet_byte_available+0x64>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	b291      	uxth	r1, r2
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <telnet_byte_available+0x64>)
 80012f8:	8011      	strh	r1, [r2, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <telnet_byte_available+0x68>)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b0a      	cmp	r3, #10
 8001306:	d002      	beq.n	800130e <telnet_byte_available+0x42>
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b0d      	cmp	r3, #13
 800130c:	d10c      	bne.n	8001328 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <telnet_byte_available+0x64>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <telnet_byte_available+0x68>)
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <telnet_byte_available+0x68>)
 800131e:	f7ff fda5 	bl	8000e6c <telnet_process_command>
		cnt = 0;
 8001322:	4b03      	ldr	r3, [pc, #12]	; (8001330 <telnet_byte_available+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	}
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000564 	.word	0x20000564
 8001334:	20000568 	.word	0x20000568

08001338 <telnet_thread>:


static void telnet_thread(void *arg)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2010      	movs	r0, #16
 8001346:	f006 fd8f 	bl	8007e68 <netconn_new_with_proto_and_callback>
 800134a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d055      	beq.n	80013fe <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 23. */
    err = netconn_bind(conn, NULL, 23);
 8001352:	2217      	movs	r2, #23
 8001354:	2100      	movs	r1, #0
 8001356:	69f8      	ldr	r0, [r7, #28]
 8001358:	f006 fe40 	bl	8007fdc <netconn_bind>
 800135c:	4603      	mov	r3, r0
 800135e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8001360:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d146      	bne.n	80013f6 <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8001368:	21ff      	movs	r1, #255	; 0xff
 800136a:	69f8      	ldr	r0, [r7, #28]
 800136c:	f006 fe6e 	bl	800804c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	69f8      	ldr	r0, [r7, #28]
 8001378:	f006 fe94 	bl	80080a4 <netconn_accept>
 800137c:	4603      	mov	r3, r0
 800137e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001380:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f3      	bne.n	8001370 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001388:	e022      	b.n	80013d0 <telnet_thread+0x98>
          {
            do 
            {
            	netbuf_data(buf, &data, &len);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f107 020a 	add.w	r2, r7, #10
 8001390:	f107 010c 	add.w	r1, r7, #12
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fe21 	bl	8009fdc <netbuf_data>
            	while (len--) telnet_byte_available((uintptr_t)data++, newconn);
 800139a:	e008      	b.n	80013ae <telnet_thread+0x76>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60fa      	str	r2, [r7, #12]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff8f 	bl	80012cc <telnet_byte_available>
 80013ae:	897b      	ldrh	r3, [r7, #10]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	b292      	uxth	r2, r2
 80013b4:	817a      	strh	r2, [r7, #10]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <telnet_thread+0x64>
          
            } 
            while (netbuf_next(buf) >= 0);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4618      	mov	r0, r3
 80013be:	f008 fe57 	bl	800a070 <netbuf_next>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dae0      	bge.n	800138a <telnet_thread+0x52>
          
            netbuf_delete(buf);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f008 fde6 	bl	8009f9c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f107 0210 	add.w	r2, r7, #16
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 f86b 	bl	80084b4 <netconn_recv>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0d2      	beq.n	800138a <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 f9e0 	bl	80087ac <netconn_close>
          netconn_delete(newconn);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fdd8 	bl	8007fa4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 80013f4:	e7bc      	b.n	8001370 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 fdd3 	bl	8007fa4 <netconn_delete>
    }
  }
}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 800140e:	2304      	movs	r3, #4
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	2200      	movs	r2, #0
 8001418:	4903      	ldr	r1, [pc, #12]	; (8001428 <telnet_init+0x20>)
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <telnet_init+0x24>)
 800141c:	f016 fea4 	bl	8018168 <sys_thread_new>
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	08001339 	.word	0x08001339
 800142c:	0801930c 	.word	0x0801930c

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001436:	e003      	b.n	8001440 <LoopCopyDataInit>

08001438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800143a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800143c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800143e:	3104      	adds	r1, #4

08001440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001448:	d3f6      	bcc.n	8001438 <CopyDataInit>
  ldr  r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800144c:	e002      	b.n	8001454 <LoopFillZerobss>

0800144e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800144e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001450:	f842 3b04 	str.w	r3, [r2], #4

08001454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001458:	d3f9      	bcc.n	800144e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145a:	f7ff fc7d 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f016 fec7 	bl	80181f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff f8c7 	bl	80005f4 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001468:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800146c:	0802853c 	.word	0x0802853c
  ldr  r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001474:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001478:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800147c:	2000fb24 	.word	0x2000fb24

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f8fa 	bl	80016a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fb2c 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fa5c 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20009234 	.word	0x20009234

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20009234 	.word	0x20009234

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_Delay+0x40>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ff4c 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ce:	f7ff ff61 	bl	8001594 <__NVIC_GetPriorityGrouping>
 80016d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	6978      	ldr	r0, [r7, #20]
 80016da:	f7ff ffb1 	bl	8001640 <NVIC_EncodePriority>
 80016de:	4602      	mov	r2, r0
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff80 	bl	80015ec <__NVIC_SetPriority>
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff54 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001720:	4baa      	ldr	r3, [pc, #680]	; (80019cc <HAL_ETH_Init+0x2bc>)
 8001722:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e185      	b.n	8001a42 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f003 f876 	bl	800483c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b9e      	ldr	r3, [pc, #632]	; (80019d0 <HAL_ETH_Init+0x2c0>)
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	4a9d      	ldr	r2, [pc, #628]	; (80019d0 <HAL_ETH_Init+0x2c0>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175e:	6453      	str	r3, [r2, #68]	; 0x44
 8001760:	4b9b      	ldr	r3, [pc, #620]	; (80019d0 <HAL_ETH_Init+0x2c0>)
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800176c:	4b99      	ldr	r3, [pc, #612]	; (80019d4 <HAL_ETH_Init+0x2c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a98      	ldr	r2, [pc, #608]	; (80019d4 <HAL_ETH_Init+0x2c4>)
 8001772:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001776:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001778:	4b96      	ldr	r3, [pc, #600]	; (80019d4 <HAL_ETH_Init+0x2c4>)
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4994      	ldr	r1, [pc, #592]	; (80019d4 <HAL_ETH_Init+0x2c4>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800179e:	f7ff fea7 	bl	80014f0 <HAL_GetTick>
 80017a2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017a4:	e011      	b.n	80017ca <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80017a6:	f7ff fea3 	bl	80014f0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b4:	d909      	bls.n	80017ca <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e13b      	b.n	8001a42 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e4      	bne.n	80017a6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f023 031c 	bic.w	r3, r3, #28
 80017ea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017ec:	f001 fec8 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80017f0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4a78      	ldr	r2, [pc, #480]	; (80019d8 <HAL_ETH_Init+0x2c8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d908      	bls.n	800180c <HAL_ETH_Init+0xfc>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4a77      	ldr	r2, [pc, #476]	; (80019dc <HAL_ETH_Init+0x2cc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d804      	bhi.n	800180c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e027      	b.n	800185c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4a73      	ldr	r2, [pc, #460]	; (80019dc <HAL_ETH_Init+0x2cc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d908      	bls.n	8001826 <HAL_ETH_Init+0x116>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	4a72      	ldr	r2, [pc, #456]	; (80019e0 <HAL_ETH_Init+0x2d0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d804      	bhi.n	8001826 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f043 030c 	orr.w	r3, r3, #12
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	e01a      	b.n	800185c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4a6d      	ldr	r2, [pc, #436]	; (80019e0 <HAL_ETH_Init+0x2d0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d903      	bls.n	8001836 <HAL_ETH_Init+0x126>
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4a6c      	ldr	r2, [pc, #432]	; (80019e4 <HAL_ETH_Init+0x2d4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d911      	bls.n	800185a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4a6a      	ldr	r2, [pc, #424]	; (80019e4 <HAL_ETH_Init+0x2d4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d908      	bls.n	8001850 <HAL_ETH_Init+0x140>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <HAL_ETH_Init+0x2d8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d804      	bhi.n	8001850 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e005      	b.n	800185c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	e000      	b.n	800185c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800185a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fc19 	bl	80020a2 <HAL_ETH_WritePHYRegister>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800187a:	6939      	ldr	r1, [r7, #16]
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fca5 	bl	80021cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0d9      	b.n	8001a42 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800188e:	20ff      	movs	r0, #255	; 0xff
 8001890:	f7ff fe3a 	bl	8001508 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a7 	beq.w	80019ec <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800189e:	f7ff fe27 	bl	80014f0 <HAL_GetTick>
 80018a2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	461a      	mov	r2, r3
 80018aa:	2101      	movs	r1, #1
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fb90 	bl	8001fd2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80018b2:	f7ff fe1d 	bl	80014f0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d90f      	bls.n	80018e4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fc7e 	bl	80021cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0ae      	b.n	8001a42 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0da      	beq.n	80018a4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80018ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f2:	2100      	movs	r1, #0
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fbd4 	bl	80020a2 <HAL_ETH_WritePHYRegister>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00b      	beq.n	8001918 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fc60 	bl	80021cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001914:	2301      	movs	r3, #1
 8001916:	e094      	b.n	8001a42 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fdea 	bl	80014f0 <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	461a      	mov	r2, r3
 8001924:	2101      	movs	r1, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fb53 	bl	8001fd2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800192c:	f7ff fde0 	bl	80014f0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d90f      	bls.n	800195e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001942:	6939      	ldr	r1, [r7, #16]
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fc41 	bl	80021cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e071      	b.n	8001a42 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0da      	beq.n	800191e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	461a      	mov	r2, r3
 800196e:	211f      	movs	r1, #31
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fb2e 	bl	8001fd2 <HAL_ETH_ReadPHYRegister>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001980:	6939      	ldr	r1, [r7, #16]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fc22 	bl	80021cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001990:	2301      	movs	r3, #1
 8001992:	e056      	b.n	8001a42 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e002      	b.n	80019ae <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	e037      	b.n	8001a30 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	e032      	b.n	8001a30 <HAL_ETH_Init+0x320>
 80019ca:	bf00      	nop
 80019cc:	03938700 	.word	0x03938700
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	01312cff 	.word	0x01312cff
 80019dc:	02160ebf 	.word	0x02160ebf
 80019e0:	039386ff 	.word	0x039386ff
 80019e4:	05f5e0ff 	.word	0x05f5e0ff
 80019e8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 fb4c 	bl	80020a2 <HAL_ETH_WritePHYRegister>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a14:	6939      	ldr	r1, [r7, #16]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fbd8 	bl	80021cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e00c      	b.n	8001a42 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001a28:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001a2c:	f7ff fd6c 	bl	8001508 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001a30:	6939      	ldr	r1, [r7, #16]
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fbca 	bl	80021cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop

08001a4c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_ETH_DMATxDescListInit+0x20>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e052      	b.n	8001b12 <HAL_ETH_DMATxDescListInit+0xc6>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e030      	b.n	8001aea <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	015b      	lsls	r3, r3, #5
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	4413      	add	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a98:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d208      	bcs.n	8001ade <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	015b      	lsls	r3, r3, #5
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	e002      	b.n	8001ae4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3ca      	bcc.n	8001a88 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	3310      	adds	r3, #16
 8001afe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b087      	sub	sp, #28
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ETH_DMARxDescListInit+0x20>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e056      	b.n	8001bec <HAL_ETH_DMARxDescListInit+0xce>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e034      	b.n	8001bc4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	015b      	lsls	r3, r3, #5
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4413      	add	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b6a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b72:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	461a      	mov	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d208      	bcs.n	8001bb8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	015b      	lsls	r3, r3, #5
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	4413      	add	r3, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	e002      	b.n	8001bbe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d3c6      	bcc.n	8001b5a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ETH_TransmitFrame+0x24>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e0cd      	b.n	8001db8 <HAL_ETH_TransmitFrame+0x1c0>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0b8      	b.n	8001db8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da09      	bge.n	8001c64 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2212      	movs	r2, #18
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0a9      	b.n	8001db8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d915      	bls.n	8001c9a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	0a9b      	lsrs	r3, r3, #10
 8001c78:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e001      	b.n	8001c9e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11c      	bne.n	8001cde <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001cb2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cbe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cce:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cdc:	e04b      	b.n	8001d76 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e044      	b.n	8001d6e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d08:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d12:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d116      	bne.n	8001d4c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001d2c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001d32:	fb02 f203 	mul.w	r2, r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001d3e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d4a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d5a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3b6      	bcc.n	8001ce4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	3314      	adds	r3, #20
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00d      	beq.n	8001da6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	3314      	adds	r3, #20
 8001d94:	2204      	movs	r2, #4
 8001d96:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	3304      	adds	r3, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	ac02b00b 	.word	0xac02b00b
 8001dc8:	fffffa0c 	.word	0xfffffa0c

08001dcc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e074      	b.n	8001ed0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001df6:	e05a      	b.n	8001eae <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0c:	d10d      	bne.n	8001e2a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
 8001e28:	e041      	b.n	8001eae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e4e:	e02e      	b.n	8001eae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d103      	bne.n	8001e72 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e7e:	1f1a      	subs	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e010      	b.n	8001ed0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db02      	blt.n	8001ebe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d99c      	bls.n	8001df8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	3314      	adds	r3, #20
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d112      	bne.n	8001f1e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f002 fd6d 	bl	80049d8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	3314      	adds	r3, #20
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f1c:	e01b      	b.n	8001f56 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f26:	3314      	adds	r3, #20
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d111      	bne.n	8001f56 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f839 	bl	8001faa <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	3314      	adds	r3, #20
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5e:	3314      	adds	r3, #20
 8001f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f64:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	3314      	adds	r3, #20
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7a:	d112      	bne.n	8001fa2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f81e 	bl	8001fbe <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8a:	3314      	adds	r3, #20
 8001f8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f90:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b82      	cmp	r3, #130	; 0x82
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e050      	b.n	800209a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2282      	movs	r2, #130	; 0x82
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 031c 	and.w	r3, r3, #28
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8a1b      	ldrh	r3, [r3, #16]
 8002014:	02db      	lsls	r3, r3, #11
 8002016:	b29b      	uxth	r3, r3
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	019b      	lsls	r3, r3, #6
 8002022:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0302 	bic.w	r3, r3, #2
 8002032:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002044:	f7ff fa54 	bl	80014f0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800204a:	e015      	b.n	8002078 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800204c:	f7ff fa50 	bl	80014f0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d309      	bcc.n	8002070 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e014      	b.n	800209a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e4      	bne.n	800204c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	460b      	mov	r3, r1
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b42      	cmp	r3, #66	; 0x42
 80020c2:	d101      	bne.n	80020c8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
 80020c6:	e04e      	b.n	8002166 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2242      	movs	r2, #66	; 0x42
 80020cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 031c 	and.w	r3, r3, #28
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8a1b      	ldrh	r3, [r3, #16]
 80020e4:	02db      	lsls	r3, r3, #11
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800211e:	f7ff f9e7 	bl	80014f0 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002124:	e015      	b.n	8002152 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002126:	f7ff f9e3 	bl	80014f0 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d309      	bcc.n	800214a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e00d      	b.n	8002166 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e4      	bne.n	8002126 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_ETH_Start+0x16>
 8002180:	2302      	movs	r3, #2
 8002182:	e01f      	b.n	80021c4 <HAL_ETH_Start+0x56>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa1b 	bl	80025d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa35 	bl	800260a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fa7f 	bl	80026a4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fa4c 	bl	8002644 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fa61 	bl	8002674 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0b0      	sub	sp, #192	; 0xc0
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002216:	663b      	str	r3, [r7, #96]	; 0x60
 8002218:	e001      	b.n	800221e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800221e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002222:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002228:	2300      	movs	r3, #0
 800222a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002238:	2340      	movs	r3, #64	; 0x40
 800223a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80022a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a4:	4bac      	ldr	r3, [pc, #688]	; (8002558 <ETH_MACDMAConfig+0x38c>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80022ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80022b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80022b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80022b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80022b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80022be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80022c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80022c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80022d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80022e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002300:	2001      	movs	r0, #1
 8002302:	f7ff f901 	bl	8001508 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800230e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002310:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002314:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002318:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800231a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800231e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002324:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002326:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800232a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800232c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002330:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002334:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800233c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800233e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff f8dc 	bl	8001508 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002358:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002362:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800236c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002380:	4013      	ands	r3, r2
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800238a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800238c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002390:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002396:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800239c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800239e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80023a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80023a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80023a8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80023aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff f89d 	bl	8001508 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7ff f888 	bl	8001508 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002400:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002414:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002426:	2304      	movs	r3, #4
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800242a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800243c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002446:	2300      	movs	r3, #0
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800244a:	2300      	movs	r3, #0
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	3318      	adds	r3, #24
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800245e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002462:	4b3e      	ldr	r3, [pc, #248]	; (800255c <ETH_MACDMAConfig+0x390>)
 8002464:	4013      	ands	r3, r2
 8002466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800246a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800246c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800246e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002470:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002472:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002474:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002476:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002478:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800247a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800247c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800247e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002480:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002482:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002486:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800248a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800248c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249e:	3318      	adds	r3, #24
 80024a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ae:	3318      	adds	r3, #24
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7ff f826 	bl	8001508 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c4:	3318      	adds	r3, #24
 80024c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80024e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002504:	2001      	movs	r0, #1
 8002506:	f7fe ffff 	bl	8001508 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002516:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10f      	bne.n	8002540 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002528:	331c      	adds	r3, #28
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800253c:	331c      	adds	r3, #28
 800253e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	461a      	mov	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f809 	bl	8002560 <ETH_MACAddressConfig>
}
 800254e:	bf00      	nop
 8002550:	37c0      	adds	r7, #192	; 0xc0
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	ff20810f 	.word	0xff20810f
 800255c:	f8de3f23 	.word	0xf8de3f23

08002560 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3305      	adds	r3, #5
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	3204      	adds	r2, #4
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <ETH_MACAddressConfig+0x68>)
 8002582:	4413      	add	r3, r2
 8002584:	461a      	mov	r2, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3303      	adds	r3, #3
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	061a      	lsls	r2, r3, #24
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3302      	adds	r3, #2
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3301      	adds	r3, #1
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	4313      	orrs	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <ETH_MACAddressConfig+0x6c>)
 80025b2:	4413      	add	r3, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40028040 	.word	0x40028040
 80025cc:	40028044 	.word	0x40028044

080025d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0208 	orr.w	r2, r2, #8
 80025ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025f4:	2001      	movs	r0, #1
 80025f6:	f000 f87f 	bl	80026f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0204 	orr.w	r2, r2, #4
 8002624:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800262e:	2001      	movs	r0, #1
 8002630:	f000 f862 	bl	80026f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	3318      	adds	r3, #24
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002664:	3318      	adds	r3, #24
 8002666:	601a      	str	r2, [r3, #0]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002684:	3318      	adds	r3, #24
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0202 	orr.w	r2, r2, #2
 8002690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002694:	3318      	adds	r3, #24
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	3318      	adds	r3, #24
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	3318      	adds	r3, #24
 80026ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d4:	3318      	adds	r3, #24
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 f80c 	bl	80026f8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ea:	3318      	adds	r3, #24
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <ETH_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <ETH_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002714:	bf00      	nop
  } 
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <ETH_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000000 	.word	0x20000000
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e177      	b.n	8002a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 8166 	bne.w	8002a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00b      	beq.n	800278e <HAL_GPIO_Init+0x5a>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002782:	2b11      	cmp	r3, #17
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b12      	cmp	r3, #18
 800278c:	d130      	bne.n	80027f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0201 	and.w	r2, r3, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0xfc>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b12      	cmp	r3, #18
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80c0 	beq.w	8002a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_GPIO_Init+0x320>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a64      	ldr	r2, [pc, #400]	; (8002a54 <HAL_GPIO_Init+0x320>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <HAL_GPIO_Init+0x320>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a60      	ldr	r2, [pc, #384]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_GPIO_Init+0x328>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d037      	beq.n	8002972 <HAL_GPIO_Init+0x23e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x32c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d031      	beq.n	800296e <HAL_GPIO_Init+0x23a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a55      	ldr	r2, [pc, #340]	; (8002a64 <HAL_GPIO_Init+0x330>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x236>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_GPIO_Init+0x334>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x232>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a53      	ldr	r2, [pc, #332]	; (8002a6c <HAL_GPIO_Init+0x338>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x22e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_GPIO_Init+0x33c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x22a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <HAL_GPIO_Init+0x340>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x226>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a50      	ldr	r2, [pc, #320]	; (8002a78 <HAL_GPIO_Init+0x344>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x222>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4f      	ldr	r2, [pc, #316]	; (8002a7c <HAL_GPIO_Init+0x348>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x21e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_GPIO_Init+0x34c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x21a>
 800294a:	2309      	movs	r3, #9
 800294c:	e012      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800294e:	230a      	movs	r3, #10
 8002950:	e010      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002952:	2308      	movs	r3, #8
 8002954:	e00e      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002956:	2307      	movs	r3, #7
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800295a:	2306      	movs	r3, #6
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x240>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x240>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4934      	ldr	r1, [pc, #208]	; (8002a58 <HAL_GPIO_Init+0x324>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_GPIO_Init+0x350>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_GPIO_Init+0x350>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_GPIO_Init+0x350>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e0:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_GPIO_Init+0x350>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_GPIO_Init+0x350>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <HAL_GPIO_Init+0x350>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <HAL_GPIO_Init+0x350>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <HAL_GPIO_Init+0x350>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae84 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3724      	adds	r7, #36	; 0x24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40013800 	.word	0x40013800
 8002a5c:	40020000 	.word	0x40020000
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40021400 	.word	0x40021400
 8002a74:	40021800 	.word	0x40021800
 8002a78:	40021c00 	.word	0x40021c00
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40022400 	.word	0x40022400
 8002a84:	40013c00 	.word	0x40013c00

08002a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e001      	b.n	8002aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aec:	b08f      	sub	sp, #60	; 0x3c
 8002aee:	af0a      	add	r7, sp, #40	; 0x28
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e10f      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd ffa0 	bl	8000a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 fbef 	bl	800431e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	687e      	ldr	r6, [r7, #4]
 8002b48:	466d      	mov	r5, sp
 8002b4a:	f106 0410 	add.w	r4, r6, #16
 8002b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b5e:	1d33      	adds	r3, r6, #4
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	f001 fb7a 	bl	800425c <USB_CoreInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0d0      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fbdd 	bl	8004340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e04a      	b.n	8002c22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	; 0x3d
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333c      	adds	r3, #60	; 0x3c
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	b298      	uxth	r0, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3342      	adds	r3, #66	; 0x42
 8002bc8:	4602      	mov	r2, r0
 8002bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	333f      	adds	r3, #63	; 0x3f
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3344      	adds	r3, #68	; 0x44
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3350      	adds	r3, #80	; 0x50
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3af      	bcc.n	8002b8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e044      	b.n	8002cbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3b5      	bcc.n	8002c32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	687e      	ldr	r6, [r7, #4]
 8002cce:	466d      	mov	r5, sp
 8002cd0:	f106 0410 	add.w	r4, r6, #16
 8002cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce4:	1d33      	adds	r3, r6, #4
 8002ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	f001 fb53 	bl	8004394 <USB_DevInit>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e00d      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 fd02 	bl	800471e <USB_DevDisconnect>

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e25b      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d075      	beq.n	8002e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d42:	4ba3      	ldr	r3, [pc, #652]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d00c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4ba0      	ldr	r3, [pc, #640]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d112      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5a:	4b9d      	ldr	r3, [pc, #628]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	4b99      	ldr	r3, [pc, #612]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d05b      	beq.n	8002e2c <HAL_RCC_OscConfig+0x108>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d157      	bne.n	8002e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e236      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCC_OscConfig+0x74>
 8002d8a:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a90      	ldr	r2, [pc, #576]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x98>
 8002da2:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a8a      	ldr	r2, [pc, #552]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a87      	ldr	r2, [pc, #540]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb0>
 8002dbc:	4b84      	ldr	r3, [pc, #528]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a83      	ldr	r2, [pc, #524]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a80      	ldr	r2, [pc, #512]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fb88 	bl	80014f0 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fb84 	bl	80014f0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1fb      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xc0>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fb74 	bl	80014f0 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fb70 	bl	80014f0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1e7      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b6c      	ldr	r3, [pc, #432]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0xe8>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d063      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3a:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b62      	ldr	r3, [pc, #392]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x152>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1bb      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4952      	ldr	r1, [pc, #328]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e03a      	b.n	8002f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b4f      	ldr	r3, [pc, #316]	; (8002fd4 <HAL_RCC_OscConfig+0x2b0>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fb29 	bl	80014f0 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fb25 	bl	80014f0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e19c      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4940      	ldr	r1, [pc, #256]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed6:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <HAL_RCC_OscConfig+0x2b0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fb08 	bl	80014f0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fb04 	bl	80014f0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e17b      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d030      	beq.n	8002f70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_RCC_OscConfig+0x2b4>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fae8 	bl	80014f0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe fae4 	bl	80014f0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e15b      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x200>
 8002f42:	e015      	b.n	8002f70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_RCC_OscConfig+0x2b4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fad1 	bl	80014f0 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe facd 	bl	80014f0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e144      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a0 	beq.w	80030be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x2b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d121      	bne.n	8002ffe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCC_OscConfig+0x2b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <HAL_RCC_OscConfig+0x2b8>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fa93 	bl	80014f0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	e011      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2ce>
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	42470000 	.word	0x42470000
 8002fd8:	42470e80 	.word	0x42470e80
 8002fdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fe fa86 	bl	80014f0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0fd      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_RCC_OscConfig+0x4d4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x2f0>
 8003006:	4b7d      	ldr	r3, [pc, #500]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a7c      	ldr	r2, [pc, #496]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e01c      	b.n	800304e <HAL_RCC_OscConfig+0x32a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b05      	cmp	r3, #5
 800301a:	d10c      	bne.n	8003036 <HAL_RCC_OscConfig+0x312>
 800301c:	4b77      	ldr	r3, [pc, #476]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a76      	ldr	r2, [pc, #472]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	4b74      	ldr	r3, [pc, #464]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a73      	ldr	r2, [pc, #460]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	e00b      	b.n	800304e <HAL_RCC_OscConfig+0x32a>
 8003036:	4b71      	ldr	r3, [pc, #452]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	4a70      	ldr	r2, [pc, #448]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	; 0x70
 8003042:	4b6e      	ldr	r3, [pc, #440]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a6d      	ldr	r2, [pc, #436]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d015      	beq.n	8003082 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003056:	f7fe fa4b 	bl	80014f0 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe fa47 	bl	80014f0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0bc      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	4b61      	ldr	r3, [pc, #388]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ee      	beq.n	800305e <HAL_RCC_OscConfig+0x33a>
 8003080:	e014      	b.n	80030ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe fa35 	bl	80014f0 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe fa31 	bl	80014f0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0a6      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a0:	4b56      	ldr	r3, [pc, #344]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ee      	bne.n	800308a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b52      	ldr	r3, [pc, #328]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a51      	ldr	r2, [pc, #324]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8092 	beq.w	80031ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c8:	4b4c      	ldr	r3, [pc, #304]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d05c      	beq.n	800318e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d141      	bne.n	8003160 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <HAL_RCC_OscConfig+0x4dc>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fa05 	bl	80014f0 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fa01 	bl	80014f0 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e078      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fc:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	019b      	lsls	r3, r3, #6
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	4933      	ldr	r1, [pc, #204]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x4dc>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f9da 	bl	80014f0 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe f9d6 	bl	80014f0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04d      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003152:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x41c>
 800315e:	e045      	b.n	80031ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x4dc>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fe f9c3 	bl	80014f0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe f9bf 	bl	80014f0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e036      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x44a>
 800318c:	e02e      	b.n	80031ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e029      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_RCC_OscConfig+0x4d8>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d115      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c2:	4013      	ands	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10d      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d106      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40007000 	.word	0x40007000
 80031fc:	40023800 	.word	0x40023800
 8003200:	42470060 	.word	0x42470060

08003204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cc      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d90c      	bls.n	8003240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b65      	ldr	r3, [pc, #404]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b63      	ldr	r3, [pc, #396]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b8      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003258:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800327a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327c:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	494d      	ldr	r1, [pc, #308]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d044      	beq.n	8003324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d119      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e07f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e067      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4934      	ldr	r1, [pc, #208]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f4:	f7fe f8fc 	bl	80014f0 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7fe f8f8 	bl	80014f0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e04f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	4b2b      	ldr	r3, [pc, #172]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 020c 	and.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	429a      	cmp	r2, r3
 8003322:	d1eb      	bne.n	80032fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d20c      	bcs.n	800334c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e032      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4916      	ldr	r1, [pc, #88]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800338a:	f000 f821 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800338e:	4601      	mov	r1, r0
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	5cd3      	ldrb	r3, [r2, r3]
 800339e:	fa21 f303 	lsr.w	r3, r1, r3
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fbb0 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023c00 	.word	0x40023c00
 80033c0:	40023800 	.word	0x40023800
 80033c4:	0801ce58 	.word	0x0801ce58
 80033c8:	20000000 	.word	0x20000000
 80033cc:	20000004 	.word	0x20000004

080033d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	2300      	movs	r3, #0
 80033e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d007      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x32>
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d008      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x38>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 80b4 	bne.w	8003564 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033fe:	60bb      	str	r3, [r7, #8]
       break;
 8003400:	e0b3      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003402:	4b5e      	ldr	r3, [pc, #376]	; (800357c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003404:	60bb      	str	r3, [r7, #8]
      break;
 8003406:	e0b0      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003408:	4b5a      	ldr	r3, [pc, #360]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003412:	4b58      	ldr	r3, [pc, #352]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04a      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341e:	4b55      	ldr	r3, [pc, #340]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	f04f 0400 	mov.w	r4, #0
 8003428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	ea03 0501 	and.w	r5, r3, r1
 8003434:	ea04 0602 	and.w	r6, r4, r2
 8003438:	4629      	mov	r1, r5
 800343a:	4632      	mov	r2, r6
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f04f 0400 	mov.w	r4, #0
 8003444:	0154      	lsls	r4, r2, #5
 8003446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800344a:	014b      	lsls	r3, r1, #5
 800344c:	4619      	mov	r1, r3
 800344e:	4622      	mov	r2, r4
 8003450:	1b49      	subs	r1, r1, r5
 8003452:	eb62 0206 	sbc.w	r2, r2, r6
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	f04f 0400 	mov.w	r4, #0
 800345e:	0194      	lsls	r4, r2, #6
 8003460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003464:	018b      	lsls	r3, r1, #6
 8003466:	1a5b      	subs	r3, r3, r1
 8003468:	eb64 0402 	sbc.w	r4, r4, r2
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	00e2      	lsls	r2, r4, #3
 8003476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800347a:	00d9      	lsls	r1, r3, #3
 800347c:	460b      	mov	r3, r1
 800347e:	4614      	mov	r4, r2
 8003480:	195b      	adds	r3, r3, r5
 8003482:	eb44 0406 	adc.w	r4, r4, r6
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	0262      	lsls	r2, r4, #9
 8003490:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003494:	0259      	lsls	r1, r3, #9
 8003496:	460b      	mov	r3, r1
 8003498:	4614      	mov	r4, r2
 800349a:	4618      	mov	r0, r3
 800349c:	4621      	mov	r1, r4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f04f 0400 	mov.w	r4, #0
 80034a4:	461a      	mov	r2, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	f7fc ff0a 	bl	80002c0 <__aeabi_uldivmod>
 80034ac:	4603      	mov	r3, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e049      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	f04f 0400 	mov.w	r4, #0
 80034be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	ea03 0501 	and.w	r5, r3, r1
 80034ca:	ea04 0602 	and.w	r6, r4, r2
 80034ce:	4629      	mov	r1, r5
 80034d0:	4632      	mov	r2, r6
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	f04f 0400 	mov.w	r4, #0
 80034da:	0154      	lsls	r4, r2, #5
 80034dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034e0:	014b      	lsls	r3, r1, #5
 80034e2:	4619      	mov	r1, r3
 80034e4:	4622      	mov	r2, r4
 80034e6:	1b49      	subs	r1, r1, r5
 80034e8:	eb62 0206 	sbc.w	r2, r2, r6
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	f04f 0400 	mov.w	r4, #0
 80034f4:	0194      	lsls	r4, r2, #6
 80034f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034fa:	018b      	lsls	r3, r1, #6
 80034fc:	1a5b      	subs	r3, r3, r1
 80034fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	00e2      	lsls	r2, r4, #3
 800350c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003510:	00d9      	lsls	r1, r3, #3
 8003512:	460b      	mov	r3, r1
 8003514:	4614      	mov	r4, r2
 8003516:	195b      	adds	r3, r3, r5
 8003518:	eb44 0406 	adc.w	r4, r4, r6
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	02a2      	lsls	r2, r4, #10
 8003526:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800352a:	0299      	lsls	r1, r3, #10
 800352c:	460b      	mov	r3, r1
 800352e:	4614      	mov	r4, r2
 8003530:	4618      	mov	r0, r3
 8003532:	4621      	mov	r1, r4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f04f 0400 	mov.w	r4, #0
 800353a:	461a      	mov	r2, r3
 800353c:	4623      	mov	r3, r4
 800353e:	f7fc febf 	bl	80002c0 <__aeabi_uldivmod>
 8003542:	4603      	mov	r3, r0
 8003544:	460c      	mov	r4, r1
 8003546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	3301      	adds	r3, #1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	60bb      	str	r3, [r7, #8]
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003566:	60bb      	str	r3, [r7, #8]
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	68bb      	ldr	r3, [r7, #8]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	007a1200 	.word	0x007a1200

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_RCC_GetHCLKFreq+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000000 	.word	0x20000000

08003598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800359c:	f7ff fff0 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035a0:	4601      	mov	r1, r0
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0a9b      	lsrs	r3, r3, #10
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4a03      	ldr	r2, [pc, #12]	; (80035bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	0801ce68 	.word	0x0801ce68

080035c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c4:	f7ff ffdc 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c8:	4601      	mov	r1, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0b5b      	lsrs	r3, r3, #13
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	0801ce68 	.word	0x0801ce68

080035e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	220f      	movs	r2, #15
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_RCC_GetClockConfig+0x60>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40023c00 	.word	0x40023c00

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e01d      	b.n	800369a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f815 	bl	80036a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 f968 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d007      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d122      	bne.n	800375a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d11b      	bne.n	800375a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0202 	mvn.w	r2, #2
 800372a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8ee 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003746:	e005      	b.n	8003754 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8e0 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8f1 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d122      	bne.n	80037ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d11b      	bne.n	80037ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0204 	mvn.w	r2, #4
 800377e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8c4 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 800379a:	e005      	b.n	80037a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8b6 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8c7 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d122      	bne.n	8003802 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0208 	mvn.w	r2, #8
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f89a 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 80037ee:	e005      	b.n	80037fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f88c 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f89d 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d122      	bne.n	8003856 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d11b      	bne.n	8003856 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0210 	mvn.w	r2, #16
 8003826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2208      	movs	r2, #8
 800382c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f870 	bl	8003922 <HAL_TIM_IC_CaptureCallback>
 8003842:	e005      	b.n	8003850 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f862 	bl	800390e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f873 	bl	8003936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10e      	bne.n	8003882 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0201 	mvn.w	r2, #1
 800387a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fd f85f 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d10e      	bne.n	80038ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d107      	bne.n	80038ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f903 	bl	8003ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	d10e      	bne.n	80038da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d107      	bne.n	80038da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f838 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d10e      	bne.n	8003906 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d107      	bne.n	8003906 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f06f 0220 	mvn.w	r2, #32
 80038fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8cd 	bl	8003aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a40      	ldr	r2, [pc, #256]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3d      	ldr	r2, [pc, #244]	; (8003a78 <TIM_Base_SetConfig+0x118>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <TIM_Base_SetConfig+0x11c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3b      	ldr	r2, [pc, #236]	; (8003a80 <TIM_Base_SetConfig+0x120>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d027      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <TIM_Base_SetConfig+0x118>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d023      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <TIM_Base_SetConfig+0x11c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <TIM_Base_SetConfig+0x120>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <TIM_Base_SetConfig+0x128>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <TIM_Base_SetConfig+0x12c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <TIM_Base_SetConfig+0x130>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a25      	ldr	r2, [pc, #148]	; (8003a94 <TIM_Base_SetConfig+0x134>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <TIM_Base_SetConfig+0x138>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <TIM_Base_SetConfig+0x13c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <TIM_Base_SetConfig+0x114>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_Base_SetConfig+0xf8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <TIM_Base_SetConfig+0x124>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40010400 	.word	0x40010400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800
 8003a94:	40001800 	.word	0x40001800
 8003a98:	40001c00 	.word	0x40001c00
 8003a9c:	40002000 	.word	0x40002000

08003aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e03f      	b.n	8003b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fc ff6c 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f829 	bl	8003b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ba6:	f023 030c 	bic.w	r3, r3, #12
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	f040 818b 	bne.w	8003eec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4ac1      	ldr	r2, [pc, #772]	; (8003ee0 <UART_SetConfig+0x37c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d005      	beq.n	8003bec <UART_SetConfig+0x88>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4abf      	ldr	r2, [pc, #764]	; (8003ee4 <UART_SetConfig+0x380>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f040 80bd 	bne.w	8003d66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7ff fce8 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	461d      	mov	r5, r3
 8003bf6:	f04f 0600 	mov.w	r6, #0
 8003bfa:	46a8      	mov	r8, r5
 8003bfc:	46b1      	mov	r9, r6
 8003bfe:	eb18 0308 	adds.w	r3, r8, r8
 8003c02:	eb49 0409 	adc.w	r4, r9, r9
 8003c06:	4698      	mov	r8, r3
 8003c08:	46a1      	mov	r9, r4
 8003c0a:	eb18 0805 	adds.w	r8, r8, r5
 8003c0e:	eb49 0906 	adc.w	r9, r9, r6
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c26:	4688      	mov	r8, r1
 8003c28:	4691      	mov	r9, r2
 8003c2a:	eb18 0005 	adds.w	r0, r8, r5
 8003c2e:	eb49 0106 	adc.w	r1, r9, r6
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	461d      	mov	r5, r3
 8003c38:	f04f 0600 	mov.w	r6, #0
 8003c3c:	196b      	adds	r3, r5, r5
 8003c3e:	eb46 0406 	adc.w	r4, r6, r6
 8003c42:	461a      	mov	r2, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	f7fc fb3b 	bl	80002c0 <__aeabi_uldivmod>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4ba5      	ldr	r3, [pc, #660]	; (8003ee8 <UART_SetConfig+0x384>)
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	461d      	mov	r5, r3
 8003c60:	f04f 0600 	mov.w	r6, #0
 8003c64:	46a9      	mov	r9, r5
 8003c66:	46b2      	mov	sl, r6
 8003c68:	eb19 0309 	adds.w	r3, r9, r9
 8003c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c70:	4699      	mov	r9, r3
 8003c72:	46a2      	mov	sl, r4
 8003c74:	eb19 0905 	adds.w	r9, r9, r5
 8003c78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c7c:	f04f 0100 	mov.w	r1, #0
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c90:	4689      	mov	r9, r1
 8003c92:	4692      	mov	sl, r2
 8003c94:	eb19 0005 	adds.w	r0, r9, r5
 8003c98:	eb4a 0106 	adc.w	r1, sl, r6
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	f04f 0600 	mov.w	r6, #0
 8003ca6:	196b      	adds	r3, r5, r5
 8003ca8:	eb46 0406 	adc.w	r4, r6, r6
 8003cac:	461a      	mov	r2, r3
 8003cae:	4623      	mov	r3, r4
 8003cb0:	f7fc fb06 	bl	80002c0 <__aeabi_uldivmod>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b8b      	ldr	r3, [pc, #556]	; (8003ee8 <UART_SetConfig+0x384>)
 8003cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	2164      	movs	r1, #100	; 0x64
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3332      	adds	r3, #50	; 0x32
 8003cce:	4a86      	ldr	r2, [pc, #536]	; (8003ee8 <UART_SetConfig+0x384>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cdc:	4498      	add	r8, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	f04f 0600 	mov.w	r6, #0
 8003ce6:	46a9      	mov	r9, r5
 8003ce8:	46b2      	mov	sl, r6
 8003cea:	eb19 0309 	adds.w	r3, r9, r9
 8003cee:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf2:	4699      	mov	r9, r3
 8003cf4:	46a2      	mov	sl, r4
 8003cf6:	eb19 0905 	adds.w	r9, r9, r5
 8003cfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d12:	4689      	mov	r9, r1
 8003d14:	4692      	mov	sl, r2
 8003d16:	eb19 0005 	adds.w	r0, r9, r5
 8003d1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	461d      	mov	r5, r3
 8003d24:	f04f 0600 	mov.w	r6, #0
 8003d28:	196b      	adds	r3, r5, r5
 8003d2a:	eb46 0406 	adc.w	r4, r6, r6
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4623      	mov	r3, r4
 8003d32:	f7fc fac5 	bl	80002c0 <__aeabi_uldivmod>
 8003d36:	4603      	mov	r3, r0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <UART_SetConfig+0x384>)
 8003d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2164      	movs	r1, #100	; 0x64
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	3332      	adds	r3, #50	; 0x32
 8003d50:	4a65      	ldr	r2, [pc, #404]	; (8003ee8 <UART_SetConfig+0x384>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	f003 0207 	and.w	r2, r3, #7
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4442      	add	r2, r8
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	e26f      	b.n	8004246 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d66:	f7ff fc17 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 8003d6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	461d      	mov	r5, r3
 8003d70:	f04f 0600 	mov.w	r6, #0
 8003d74:	46a8      	mov	r8, r5
 8003d76:	46b1      	mov	r9, r6
 8003d78:	eb18 0308 	adds.w	r3, r8, r8
 8003d7c:	eb49 0409 	adc.w	r4, r9, r9
 8003d80:	4698      	mov	r8, r3
 8003d82:	46a1      	mov	r9, r4
 8003d84:	eb18 0805 	adds.w	r8, r8, r5
 8003d88:	eb49 0906 	adc.w	r9, r9, r6
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003da0:	4688      	mov	r8, r1
 8003da2:	4691      	mov	r9, r2
 8003da4:	eb18 0005 	adds.w	r0, r8, r5
 8003da8:	eb49 0106 	adc.w	r1, r9, r6
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	461d      	mov	r5, r3
 8003db2:	f04f 0600 	mov.w	r6, #0
 8003db6:	196b      	adds	r3, r5, r5
 8003db8:	eb46 0406 	adc.w	r4, r6, r6
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	f7fc fa7e 	bl	80002c0 <__aeabi_uldivmod>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <UART_SetConfig+0x384>)
 8003dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	461d      	mov	r5, r3
 8003dda:	f04f 0600 	mov.w	r6, #0
 8003dde:	46a9      	mov	r9, r5
 8003de0:	46b2      	mov	sl, r6
 8003de2:	eb19 0309 	adds.w	r3, r9, r9
 8003de6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dea:	4699      	mov	r9, r3
 8003dec:	46a2      	mov	sl, r4
 8003dee:	eb19 0905 	adds.w	r9, r9, r5
 8003df2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df6:	f04f 0100 	mov.w	r1, #0
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e0a:	4689      	mov	r9, r1
 8003e0c:	4692      	mov	sl, r2
 8003e0e:	eb19 0005 	adds.w	r0, r9, r5
 8003e12:	eb4a 0106 	adc.w	r1, sl, r6
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	f04f 0600 	mov.w	r6, #0
 8003e20:	196b      	adds	r3, r5, r5
 8003e22:	eb46 0406 	adc.w	r4, r6, r6
 8003e26:	461a      	mov	r2, r3
 8003e28:	4623      	mov	r3, r4
 8003e2a:	f7fc fa49 	bl	80002c0 <__aeabi_uldivmod>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <UART_SetConfig+0x384>)
 8003e36:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	3332      	adds	r3, #50	; 0x32
 8003e48:	4a27      	ldr	r2, [pc, #156]	; (8003ee8 <UART_SetConfig+0x384>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e56:	4498      	add	r8, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	f04f 0600 	mov.w	r6, #0
 8003e60:	46a9      	mov	r9, r5
 8003e62:	46b2      	mov	sl, r6
 8003e64:	eb19 0309 	adds.w	r3, r9, r9
 8003e68:	eb4a 040a 	adc.w	r4, sl, sl
 8003e6c:	4699      	mov	r9, r3
 8003e6e:	46a2      	mov	sl, r4
 8003e70:	eb19 0905 	adds.w	r9, r9, r5
 8003e74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e8c:	4689      	mov	r9, r1
 8003e8e:	4692      	mov	sl, r2
 8003e90:	eb19 0005 	adds.w	r0, r9, r5
 8003e94:	eb4a 0106 	adc.w	r1, sl, r6
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	f04f 0600 	mov.w	r6, #0
 8003ea2:	196b      	adds	r3, r5, r5
 8003ea4:	eb46 0406 	adc.w	r4, r6, r6
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	f7fc fa08 	bl	80002c0 <__aeabi_uldivmod>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <UART_SetConfig+0x384>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <UART_SetConfig+0x384>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	f003 0207 	and.w	r2, r3, #7
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4442      	add	r2, r8
 8003edc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ede:	e1b2      	b.n	8004246 <UART_SetConfig+0x6e2>
 8003ee0:	40011000 	.word	0x40011000
 8003ee4:	40011400 	.word	0x40011400
 8003ee8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4ad7      	ldr	r2, [pc, #860]	; (8004250 <UART_SetConfig+0x6ec>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d005      	beq.n	8003f02 <UART_SetConfig+0x39e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4ad6      	ldr	r2, [pc, #856]	; (8004254 <UART_SetConfig+0x6f0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	f040 80d1 	bne.w	80040a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f02:	f7ff fb5d 	bl	80035c0 <HAL_RCC_GetPCLK2Freq>
 8003f06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	f04f 0b00 	mov.w	fp, #0
 8003f10:	46d0      	mov	r8, sl
 8003f12:	46d9      	mov	r9, fp
 8003f14:	eb18 0308 	adds.w	r3, r8, r8
 8003f18:	eb49 0409 	adc.w	r4, r9, r9
 8003f1c:	4698      	mov	r8, r3
 8003f1e:	46a1      	mov	r9, r4
 8003f20:	eb18 080a 	adds.w	r8, r8, sl
 8003f24:	eb49 090b 	adc.w	r9, r9, fp
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f3c:	4688      	mov	r8, r1
 8003f3e:	4691      	mov	r9, r2
 8003f40:	eb1a 0508 	adds.w	r5, sl, r8
 8003f44:	eb4b 0609 	adc.w	r6, fp, r9
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	f04f 0400 	mov.w	r4, #0
 8003f5a:	0094      	lsls	r4, r2, #2
 8003f5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	461a      	mov	r2, r3
 8003f64:	4623      	mov	r3, r4
 8003f66:	4628      	mov	r0, r5
 8003f68:	4631      	mov	r1, r6
 8003f6a:	f7fc f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	461a      	mov	r2, r3
 8003f74:	4bb8      	ldr	r3, [pc, #736]	; (8004258 <UART_SetConfig+0x6f4>)
 8003f76:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	469b      	mov	fp, r3
 8003f84:	f04f 0c00 	mov.w	ip, #0
 8003f88:	46d9      	mov	r9, fp
 8003f8a:	46e2      	mov	sl, ip
 8003f8c:	eb19 0309 	adds.w	r3, r9, r9
 8003f90:	eb4a 040a 	adc.w	r4, sl, sl
 8003f94:	4699      	mov	r9, r3
 8003f96:	46a2      	mov	sl, r4
 8003f98:	eb19 090b 	adds.w	r9, r9, fp
 8003f9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb4:	4689      	mov	r9, r1
 8003fb6:	4692      	mov	sl, r2
 8003fb8:	eb1b 0509 	adds.w	r5, fp, r9
 8003fbc:	eb4c 060a 	adc.w	r6, ip, sl
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f04f 0400 	mov.w	r4, #0
 8003fd2:	0094      	lsls	r4, r2, #2
 8003fd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4623      	mov	r3, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	f7fc f96d 	bl	80002c0 <__aeabi_uldivmod>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b9a      	ldr	r3, [pc, #616]	; (8004258 <UART_SetConfig+0x6f4>)
 8003fee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2164      	movs	r1, #100	; 0x64
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a95      	ldr	r2, [pc, #596]	; (8004258 <UART_SetConfig+0x6f4>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	4498      	add	r8, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	469b      	mov	fp, r3
 8004012:	f04f 0c00 	mov.w	ip, #0
 8004016:	46d9      	mov	r9, fp
 8004018:	46e2      	mov	sl, ip
 800401a:	eb19 0309 	adds.w	r3, r9, r9
 800401e:	eb4a 040a 	adc.w	r4, sl, sl
 8004022:	4699      	mov	r9, r3
 8004024:	46a2      	mov	sl, r4
 8004026:	eb19 090b 	adds.w	r9, r9, fp
 800402a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800403a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800403e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004042:	4689      	mov	r9, r1
 8004044:	4692      	mov	sl, r2
 8004046:	eb1b 0509 	adds.w	r5, fp, r9
 800404a:	eb4c 060a 	adc.w	r6, ip, sl
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4619      	mov	r1, r3
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	f04f 0400 	mov.w	r4, #0
 8004060:	0094      	lsls	r4, r2, #2
 8004062:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004066:	008b      	lsls	r3, r1, #2
 8004068:	461a      	mov	r2, r3
 800406a:	4623      	mov	r3, r4
 800406c:	4628      	mov	r0, r5
 800406e:	4631      	mov	r1, r6
 8004070:	f7fc f926 	bl	80002c0 <__aeabi_uldivmod>
 8004074:	4603      	mov	r3, r0
 8004076:	460c      	mov	r4, r1
 8004078:	461a      	mov	r2, r3
 800407a:	4b77      	ldr	r3, [pc, #476]	; (8004258 <UART_SetConfig+0x6f4>)
 800407c:	fba3 1302 	umull	r1, r3, r3, r2
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	2164      	movs	r1, #100	; 0x64
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	3332      	adds	r3, #50	; 0x32
 800408e:	4a72      	ldr	r2, [pc, #456]	; (8004258 <UART_SetConfig+0x6f4>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4442      	add	r2, r8
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	e0d0      	b.n	8004246 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80040a4:	f7ff fa78 	bl	8003598 <HAL_RCC_GetPCLK1Freq>
 80040a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	469a      	mov	sl, r3
 80040ae:	f04f 0b00 	mov.w	fp, #0
 80040b2:	46d0      	mov	r8, sl
 80040b4:	46d9      	mov	r9, fp
 80040b6:	eb18 0308 	adds.w	r3, r8, r8
 80040ba:	eb49 0409 	adc.w	r4, r9, r9
 80040be:	4698      	mov	r8, r3
 80040c0:	46a1      	mov	r9, r4
 80040c2:	eb18 080a 	adds.w	r8, r8, sl
 80040c6:	eb49 090b 	adc.w	r9, r9, fp
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040de:	4688      	mov	r8, r1
 80040e0:	4691      	mov	r9, r2
 80040e2:	eb1a 0508 	adds.w	r5, sl, r8
 80040e6:	eb4b 0609 	adc.w	r6, fp, r9
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4619      	mov	r1, r3
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	f04f 0400 	mov.w	r4, #0
 80040fc:	0094      	lsls	r4, r2, #2
 80040fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004102:	008b      	lsls	r3, r1, #2
 8004104:	461a      	mov	r2, r3
 8004106:	4623      	mov	r3, r4
 8004108:	4628      	mov	r0, r5
 800410a:	4631      	mov	r1, r6
 800410c:	f7fc f8d8 	bl	80002c0 <__aeabi_uldivmod>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	461a      	mov	r2, r3
 8004116:	4b50      	ldr	r3, [pc, #320]	; (8004258 <UART_SetConfig+0x6f4>)
 8004118:	fba3 2302 	umull	r2, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	469b      	mov	fp, r3
 8004126:	f04f 0c00 	mov.w	ip, #0
 800412a:	46d9      	mov	r9, fp
 800412c:	46e2      	mov	sl, ip
 800412e:	eb19 0309 	adds.w	r3, r9, r9
 8004132:	eb4a 040a 	adc.w	r4, sl, sl
 8004136:	4699      	mov	r9, r3
 8004138:	46a2      	mov	sl, r4
 800413a:	eb19 090b 	adds.w	r9, r9, fp
 800413e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004156:	4689      	mov	r9, r1
 8004158:	4692      	mov	sl, r2
 800415a:	eb1b 0509 	adds.w	r5, fp, r9
 800415e:	eb4c 060a 	adc.w	r6, ip, sl
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4619      	mov	r1, r3
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	0094      	lsls	r4, r2, #2
 8004176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800417a:	008b      	lsls	r3, r1, #2
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	4628      	mov	r0, r5
 8004182:	4631      	mov	r1, r6
 8004184:	f7fc f89c 	bl	80002c0 <__aeabi_uldivmod>
 8004188:	4603      	mov	r3, r0
 800418a:	460c      	mov	r4, r1
 800418c:	461a      	mov	r2, r3
 800418e:	4b32      	ldr	r3, [pc, #200]	; (8004258 <UART_SetConfig+0x6f4>)
 8004190:	fba3 1302 	umull	r1, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	2164      	movs	r1, #100	; 0x64
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	3332      	adds	r3, #50	; 0x32
 80041a2:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <UART_SetConfig+0x6f4>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ae:	4498      	add	r8, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	469b      	mov	fp, r3
 80041b4:	f04f 0c00 	mov.w	ip, #0
 80041b8:	46d9      	mov	r9, fp
 80041ba:	46e2      	mov	sl, ip
 80041bc:	eb19 0309 	adds.w	r3, r9, r9
 80041c0:	eb4a 040a 	adc.w	r4, sl, sl
 80041c4:	4699      	mov	r9, r3
 80041c6:	46a2      	mov	sl, r4
 80041c8:	eb19 090b 	adds.w	r9, r9, fp
 80041cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041e4:	4689      	mov	r9, r1
 80041e6:	4692      	mov	sl, r2
 80041e8:	eb1b 0509 	adds.w	r5, fp, r9
 80041ec:	eb4c 060a 	adc.w	r6, ip, sl
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4619      	mov	r1, r3
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	f04f 0400 	mov.w	r4, #0
 8004202:	0094      	lsls	r4, r2, #2
 8004204:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004208:	008b      	lsls	r3, r1, #2
 800420a:	461a      	mov	r2, r3
 800420c:	4623      	mov	r3, r4
 800420e:	4628      	mov	r0, r5
 8004210:	4631      	mov	r1, r6
 8004212:	f7fc f855 	bl	80002c0 <__aeabi_uldivmod>
 8004216:	4603      	mov	r3, r0
 8004218:	460c      	mov	r4, r1
 800421a:	461a      	mov	r2, r3
 800421c:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <UART_SetConfig+0x6f4>)
 800421e:	fba3 1302 	umull	r1, r3, r3, r2
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2164      	movs	r1, #100	; 0x64
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	; 0x32
 8004230:	4a09      	ldr	r2, [pc, #36]	; (8004258 <UART_SetConfig+0x6f4>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4442      	add	r2, r8
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	e7ff      	b.n	8004246 <UART_SetConfig+0x6e2>
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f

0800425c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800425c:	b084      	sub	sp, #16
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	f107 001c 	add.w	r0, r7, #28
 800426a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2b01      	cmp	r3, #1
 8004272:	d122      	bne.n	80042ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa4e 	bl	8004750 <USB_CoreReset>
 80042b4:	4603      	mov	r3, r0
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e01a      	b.n	80042f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa42 	bl	8004750 <USB_CoreReset>
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
 80042e2:	e005      	b.n	80042f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10b      	bne.n	800430e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f043 0206 	orr.w	r2, r3, #6
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800431a:	b004      	add	sp, #16
 800431c:	4770      	bx	lr

0800431e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e00b      	b.n	8004384 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	e001      	b.n	8004384 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e003      	b.n	800438c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004384:	2032      	movs	r0, #50	; 0x32
 8004386:	f7fd f8bf 	bl	8001508 <HAL_Delay>

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004394:	b084      	sub	sp, #16
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e009      	b.n	80043c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3340      	adds	r3, #64	; 0x40
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0e      	cmp	r3, #14
 80043cc:	d9f2      	bls.n	80043b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11c      	bne.n	800440e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f043 0302 	orr.w	r3, r3, #2
 80043e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
 800440c:	e00b      	b.n	8004426 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	4619      	mov	r1, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004440:	461a      	mov	r2, r3
 8004442:	680b      	ldr	r3, [r1, #0]
 8004444:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10c      	bne.n	8004466 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004452:	2100      	movs	r1, #0
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f949 	bl	80046ec <USB_SetDevSpeed>
 800445a:	e008      	b.n	800446e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800445c:	2101      	movs	r1, #1
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f944 	bl	80046ec <USB_SetDevSpeed>
 8004464:	e003      	b.n	800446e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004466:	2103      	movs	r1, #3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f93f 	bl	80046ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800446e:	2110      	movs	r1, #16
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8f3 	bl	800465c <USB_FlushTxFifo>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f911 	bl	80046a8 <USB_FlushRxFifo>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	461a      	mov	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e043      	b.n	8004542 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d0:	d118      	bne.n	8004504 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e013      	b.n	8004516 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	461a      	mov	r2, r3
 80044fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e008      	b.n	8004516 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	461a      	mov	r2, r3
 8004512:	2300      	movs	r3, #0
 8004514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	2300      	movs	r3, #0
 8004526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	461a      	mov	r2, r3
 8004536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800453a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3301      	adds	r3, #1
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3b7      	bcc.n	80044ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	e043      	b.n	80045d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004566:	d118      	bne.n	800459a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e013      	b.n	80045ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e008      	b.n	80045ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d3b7      	bcc.n	8004550 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004600:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f043 0210 	orr.w	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <USB_DevInit+0x2c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f043 0208 	orr.w	r2, r3, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004640:	f043 0304 	orr.w	r3, r3, #4
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004654:	b004      	add	sp, #16
 8004656:	4770      	bx	lr
 8004658:	803c3800 	.word	0x803c3800

0800465c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3301      	adds	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <USB_FlushTxFifo+0x48>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e006      	b.n	8004696 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b20      	cmp	r3, #32
 8004692:	d0f0      	beq.n	8004676 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	00030d40 	.word	0x00030d40

080046a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2210      	movs	r2, #16
 80046b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3301      	adds	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <USB_FlushRxFifo+0x40>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d0f0      	beq.n	80046ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	00030d40 	.word	0x00030d40

080046ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800473e:	2003      	movs	r0, #3
 8004740:	f7fc fee2 	bl	8001508 <HAL_Delay>

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <USB_CoreReset+0x64>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e01b      	b.n	80047a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	daf2      	bge.n	800475c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f043 0201 	orr.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <USB_CoreReset+0x64>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d0f0      	beq.n	8004786 <USB_CoreReset+0x36>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	00030d40 	.word	0x00030d40

080047b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80047be:	2100      	movs	r1, #0
 80047c0:	2000      	movs	r0, #0
 80047c2:	f005 fdef 	bl	800a3a4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80047c6:	4b17      	ldr	r3, [pc, #92]	; (8004824 <MX_LWIP_Init+0x6c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <MX_LWIP_Init+0x70>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <MX_LWIP_Init+0x74>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <MX_LWIP_Init+0x78>)
 80047da:	9302      	str	r3, [sp, #8]
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <MX_LWIP_Init+0x7c>)
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <MX_LWIP_Init+0x74>)
 80047e6:	4a10      	ldr	r2, [pc, #64]	; (8004828 <MX_LWIP_Init+0x70>)
 80047e8:	490e      	ldr	r1, [pc, #56]	; (8004824 <MX_LWIP_Init+0x6c>)
 80047ea:	4813      	ldr	r0, [pc, #76]	; (8004838 <MX_LWIP_Init+0x80>)
 80047ec:	f007 fa54 	bl	800bc98 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80047f0:	4811      	ldr	r0, [pc, #68]	; (8004838 <MX_LWIP_Init+0x80>)
 80047f2:	f007 fc07 	bl	800c004 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <MX_LWIP_Init+0x80>)
 80047f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004808:	480b      	ldr	r0, [pc, #44]	; (8004838 <MX_LWIP_Init+0x80>)
 800480a:	f007 fc0b 	bl	800c024 <netif_set_up>
 800480e:	e002      	b.n	8004816 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004810:	4809      	ldr	r0, [pc, #36]	; (8004838 <MX_LWIP_Init+0x80>)
 8004812:	f007 fc73 	bl	800c0fc <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004816:	4808      	ldr	r0, [pc, #32]	; (8004838 <MX_LWIP_Init+0x80>)
 8004818:	f00f fd54 	bl	80142c4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800481c:	bf00      	nop
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	2000926c 	.word	0x2000926c
 8004828:	20009270 	.word	0x20009270
 800482c:	20009274 	.word	0x20009274
 8004830:	0800a2b5 	.word	0x0800a2b5
 8004834:	08004e9d 	.word	0x08004e9d
 8004838:	20009238 	.word	0x20009238

0800483c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a59      	ldr	r2, [pc, #356]	; (80049c0 <HAL_ETH_MspInit+0x184>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f040 80ac 	bne.w	80049b8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004860:	2300      	movs	r3, #0
 8004862:	623b      	str	r3, [r7, #32]
 8004864:	4b57      	ldr	r3, [pc, #348]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4a56      	ldr	r2, [pc, #344]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 800486a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800486e:	6313      	str	r3, [r2, #48]	; 0x30
 8004870:	4b54      	ldr	r3, [pc, #336]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	4a4f      	ldr	r2, [pc, #316]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 8004886:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800488a:	6313      	str	r3, [r2, #48]	; 0x30
 800488c:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	4a48      	ldr	r2, [pc, #288]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048a6:	6313      	str	r3, [r2, #48]	; 0x30
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	6313      	str	r3, [r2, #48]	; 0x30
 80048c4:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	4a3a      	ldr	r2, [pc, #232]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6313      	str	r3, [r2, #48]	; 0x30
 80048e0:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	4a33      	ldr	r2, [pc, #204]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048f6:	f043 0302 	orr.w	r3, r3, #2
 80048fa:	6313      	str	r3, [r2, #48]	; 0x30
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004908:	2300      	movs	r3, #0
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 8004912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004916:	6313      	str	r3, [r2, #48]	; 0x30
 8004918:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <HAL_ETH_MspInit+0x188>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004924:	2332      	movs	r3, #50	; 0x32
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004930:	2303      	movs	r3, #3
 8004932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004934:	230b      	movs	r3, #11
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800493c:	4619      	mov	r1, r3
 800493e:	4822      	ldr	r0, [pc, #136]	; (80049c8 <HAL_ETH_MspInit+0x18c>)
 8004940:	f7fd fef8 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004944:	2386      	movs	r3, #134	; 0x86
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004948:	2302      	movs	r3, #2
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004950:	2303      	movs	r3, #3
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004954:	230b      	movs	r3, #11
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800495c:	4619      	mov	r1, r3
 800495e:	481b      	ldr	r0, [pc, #108]	; (80049cc <HAL_ETH_MspInit+0x190>)
 8004960:	f7fd fee8 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496a:	2302      	movs	r3, #2
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004972:	2303      	movs	r3, #3
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004976:	230b      	movs	r3, #11
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800497a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497e:	4619      	mov	r1, r3
 8004980:	4813      	ldr	r0, [pc, #76]	; (80049d0 <HAL_ETH_MspInit+0x194>)
 8004982:	f7fd fed7 	bl	8002734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004986:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004994:	2303      	movs	r3, #3
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004998:	230b      	movs	r3, #11
 800499a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800499c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049a0:	4619      	mov	r1, r3
 80049a2:	480c      	ldr	r0, [pc, #48]	; (80049d4 <HAL_ETH_MspInit+0x198>)
 80049a4:	f7fd fec6 	bl	8002734 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	2105      	movs	r1, #5
 80049ac:	203d      	movs	r0, #61	; 0x3d
 80049ae:	f7fc fe85 	bl	80016bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80049b2:	203d      	movs	r0, #61	; 0x3d
 80049b4:	f7fc fe9e 	bl	80016f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80049b8:	bf00      	nop
 80049ba:	3738      	adds	r7, #56	; 0x38
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40028000 	.word	0x40028000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020000 	.word	0x40020000
 80049d0:	40020400 	.word	0x40020400
 80049d4:	40021800 	.word	0x40021800

080049d8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <HAL_ETH_RxCpltCallback+0x1c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fc4d 	bl	8005284 <osSemaphoreRelease>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000668 	.word	0x20000668

080049f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80049f8:	b5b0      	push	{r4, r5, r7, lr}
 80049fa:	b090      	sub	sp, #64	; 0x40
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a04:	4b5c      	ldr	r3, [pc, #368]	; (8004b78 <low_level_init+0x180>)
 8004a06:	4a5d      	ldr	r2, [pc, #372]	; (8004b7c <low_level_init+0x184>)
 8004a08:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	; (8004b78 <low_level_init+0x180>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004a10:	4b59      	ldr	r3, [pc, #356]	; (8004b78 <low_level_init+0x180>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004a22:	23e1      	movs	r3, #225	; 0xe1
 8004a24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004a28:	23fe      	movs	r3, #254	; 0xfe
 8004a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8004a2e:	23ec      	movs	r3, #236	; 0xec
 8004a30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004a3a:	4a4f      	ldr	r2, [pc, #316]	; (8004b78 <low_level_init+0x180>)
 8004a3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a40:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004a42:	4b4d      	ldr	r3, [pc, #308]	; (8004b78 <low_level_init+0x180>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004a48:	4b4b      	ldr	r3, [pc, #300]	; (8004b78 <low_level_init+0x180>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004a4e:	4b4a      	ldr	r3, [pc, #296]	; (8004b78 <low_level_init+0x180>)
 8004a50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a54:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a56:	4848      	ldr	r0, [pc, #288]	; (8004b78 <low_level_init+0x180>)
 8004a58:	f7fc fe5a 	bl	8001710 <HAL_ETH_Init>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	4a40      	ldr	r2, [pc, #256]	; (8004b80 <low_level_init+0x188>)
 8004a80:	4940      	ldr	r1, [pc, #256]	; (8004b84 <low_level_init+0x18c>)
 8004a82:	483d      	ldr	r0, [pc, #244]	; (8004b78 <low_level_init+0x180>)
 8004a84:	f7fc ffe2 	bl	8001a4c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004a88:	2304      	movs	r3, #4
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	; (8004b88 <low_level_init+0x190>)
 8004a8c:	493f      	ldr	r1, [pc, #252]	; (8004b8c <low_level_init+0x194>)
 8004a8e:	483a      	ldr	r0, [pc, #232]	; (8004b78 <low_level_init+0x180>)
 8004a90:	f7fd f845 	bl	8001b1e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2206      	movs	r2, #6
 8004a98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004a9c:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <low_level_init+0x180>)
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004aa8:	4b33      	ldr	r3, [pc, #204]	; (8004b78 <low_level_init+0x180>)
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	785a      	ldrb	r2, [r3, #1]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <low_level_init+0x180>)
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	789a      	ldrb	r2, [r3, #2]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <low_level_init+0x180>)
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	78da      	ldrb	r2, [r3, #3]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004acc:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <low_level_init+0x180>)
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	791a      	ldrb	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <low_level_init+0x180>)
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	795a      	ldrb	r2, [r3, #5]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004aea:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af2:	f043 030a 	orr.w	r3, r3, #10
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004afe:	2300      	movs	r3, #0
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b02:	2300      	movs	r3, #0
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fb37 	bl	8005180 <osSemaphoreCreate>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b1e      	ldr	r3, [pc, #120]	; (8004b90 <low_level_init+0x198>)
 8004b16:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <low_level_init+0x19c>)
 8004b1a:	f107 040c 	add.w	r4, r7, #12
 8004b1e:	461d      	mov	r5, r3
 8004b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004b2c:	f107 030c 	add.w	r3, r7, #12
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa28 	bl	8004f88 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004b38:	480f      	ldr	r0, [pc, #60]	; (8004b78 <low_level_init+0x180>)
 8004b3a:	f7fd fb18 	bl	800216e <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004b3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b42:	461a      	mov	r2, r3
 8004b44:	211d      	movs	r1, #29
 8004b46:	480c      	ldr	r0, [pc, #48]	; (8004b78 <low_level_init+0x180>)
 8004b48:	f7fd fa43 	bl	8001fd2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f043 030b 	orr.w	r3, r3, #11
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	461a      	mov	r2, r3
 8004b58:	211d      	movs	r1, #29
 8004b5a:	4807      	ldr	r0, [pc, #28]	; (8004b78 <low_level_init+0x180>)
 8004b5c:	f7fd faa1 	bl	80020a2 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004b60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b64:	461a      	mov	r2, r3
 8004b66:	211d      	movs	r1, #29
 8004b68:	4803      	ldr	r0, [pc, #12]	; (8004b78 <low_level_init+0x180>)
 8004b6a:	f7fd fa32 	bl	8001fd2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004b6e:	bf00      	nop
 8004b70:	3740      	adds	r7, #64	; 0x40
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bdb0      	pop	{r4, r5, r7, pc}
 8004b76:	bf00      	nop
 8004b78:	2000ab48 	.word	0x2000ab48
 8004b7c:	40028000 	.word	0x40028000
 8004b80:	2000ab90 	.word	0x2000ab90
 8004b84:	20009278 	.word	0x20009278
 8004b88:	200092f8 	.word	0x200092f8
 8004b8c:	2000aac8 	.word	0x2000aac8
 8004b90:	20000668 	.word	0x20000668
 8004b94:	08019324 	.word	0x08019324

08004b98 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <low_level_output+0x138>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004bba:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <low_level_output+0x138>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	e05a      	b.n	8004c80 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da03      	bge.n	8004bda <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004bd2:	23f8      	movs	r3, #248	; 0xf8
 8004bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004bd8:	e05c      	b.n	8004c94 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	895b      	ldrh	r3, [r3, #10]
 8004bde:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004be4:	e02f      	b.n	8004c46 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	18d0      	adds	r0, r2, r3
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	18d1      	adds	r1, r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f013 fb4a 	bl	8018296 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	da03      	bge.n	8004c18 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004c10:	23f8      	movs	r3, #248	; 0xf8
 8004c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004c16:	e03d      	b.n	8004c94 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004c28:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c34:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c40:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d8c8      	bhi.n	8004be6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	18d0      	adds	r0, r2, r3
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4413      	add	r3, r2
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4619      	mov	r1, r3
 8004c66:	f013 fb16 	bl	8018296 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1a1      	bne.n	8004bca <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	4811      	ldr	r0, [pc, #68]	; (8004cd0 <low_level_output+0x138>)
 8004c8a:	f7fc ffb5 	bl	8001bf8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <low_level_output+0x138>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <low_level_output+0x138>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb0:	3314      	adds	r3, #20
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <low_level_output+0x138>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3728      	adds	r7, #40	; 0x28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	2000ab48 	.word	0x2000ab48

08004cd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08c      	sub	sp, #48	; 0x30
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004cf8:	484f      	ldr	r0, [pc, #316]	; (8004e38 <low_level_input+0x164>)
 8004cfa:	f7fd f867 	bl	8001dcc <HAL_ETH_GetReceivedFrame_IT>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <low_level_input+0x34>
  
    return NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e092      	b.n	8004e2e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004d08:	4b4b      	ldr	r3, [pc, #300]	; (8004e38 <low_level_input+0x164>)
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004d0e:	4b4a      	ldr	r3, [pc, #296]	; (8004e38 <low_level_input+0x164>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004d14:	89fb      	ldrh	r3, [r7, #14]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004d1a:	89fb      	ldrh	r3, [r7, #14]
 8004d1c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004d20:	4619      	mov	r1, r3
 8004d22:	2000      	movs	r0, #0
 8004d24:	f007 fad4 	bl	800c2d0 <pbuf_alloc>
 8004d28:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d04b      	beq.n	8004dc8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004d30:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <low_level_input+0x164>)
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3e:	e040      	b.n	8004dc2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	895b      	ldrh	r3, [r3, #10]
 8004d44:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004d4a:	e021      	b.n	8004d90 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	18d0      	adds	r0, r2, r3
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	18d1      	adds	r1, r2, r3
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004d60:	3304      	adds	r3, #4
 8004d62:	461a      	mov	r2, r3
 8004d64:	f013 fa97 	bl	8018296 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004d7e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d8a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d8d6      	bhi.n	8004d4c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	18d0      	adds	r0, r2, r3
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4619      	mov	r1, r3
 8004db0:	f013 fa71 	bl	8018296 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1bb      	bne.n	8004d40 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <low_level_input+0x164>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	e00b      	b.n	8004dec <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3301      	adds	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <low_level_input+0x164>)
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3ee      	bcc.n	8004dd4 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <low_level_input+0x164>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <low_level_input+0x164>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e04:	3314      	adds	r3, #20
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <low_level_input+0x164>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e18:	3314      	adds	r3, #20
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <low_level_input+0x164>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e26:	3308      	adds	r3, #8
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3730      	adds	r7, #48	; 0x30
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000ab48 	.word	0x2000ab48

08004e3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <ethernetif_input+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f9c9 	bl	80051e8 <osSemaphoreWait>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f5      	bne.n	8004e48 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8004e5c:	480e      	ldr	r0, [pc, #56]	; (8004e98 <ethernetif_input+0x5c>)
 8004e5e:	f013 f967 	bl	8018130 <sys_mutex_lock>
        p = low_level_input( netif );
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff ff36 	bl	8004cd4 <low_level_input>
 8004e68:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	4798      	blx	r3
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f007 fd05 	bl	800c890 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004e86:	4804      	ldr	r0, [pc, #16]	; (8004e98 <ethernetif_input+0x5c>)
 8004e88:	f013 f961 	bl	801814e <sys_mutex_unlock>
      } while(p!=NULL);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e4      	bne.n	8004e5c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e92:	e7d9      	b.n	8004e48 <ethernetif_input+0xc>
 8004e94:	20000668 	.word	0x20000668
 8004e98:	2000c3a0 	.word	0x2000c3a0

08004e9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <ethernetif_init+0x1c>
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <ethernetif_init+0x48>)
 8004eac:	f240 2235 	movw	r2, #565	; 0x235
 8004eb0:	490d      	ldr	r1, [pc, #52]	; (8004ee8 <ethernetif_init+0x4c>)
 8004eb2:	480e      	ldr	r0, [pc, #56]	; (8004eec <ethernetif_init+0x50>)
 8004eb4:	f013 fa02 	bl	80182bc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2273      	movs	r2, #115	; 0x73
 8004ebc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2274      	movs	r2, #116	; 0x74
 8004ec4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <ethernetif_init+0x54>)
 8004ecc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <ethernetif_init+0x58>)
 8004ed2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fd8f 	bl	80049f8 <low_level_init>

  return ERR_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	08019340 	.word	0x08019340
 8004ee8:	0801935c 	.word	0x0801935c
 8004eec:	0801936c 	.word	0x0801936c
 8004ef0:	08016115 	.word	0x08016115
 8004ef4:	08004b99 	.word	0x08004b99

08004ef8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004efc:	f7fc faf8 	bl	80014f0 <HAL_GetTick>
 8004f00:	4603      	mov	r3, r0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f18:	2b84      	cmp	r3, #132	; 0x84
 8004f1a:	d005      	beq.n	8004f28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	3303      	adds	r3, #3
 8004f26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f3c:	f3ef 8305 	mrs	r3, IPSR
 8004f40:	607b      	str	r3, [r7, #4]
  return(result);
 8004f42:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f5e:	f001 fd07 	bl	8006970 <vTaskStartScheduler>
  
  return osOK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004f6c:	f7ff ffe3 	bl	8004f36 <inHandlerMode>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004f76:	f001 fe13 	bl	8006ba0 <xTaskGetTickCountFromISR>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	e002      	b.n	8004f84 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004f7e:	f001 fdff 	bl	8006b80 <xTaskGetTickCount>
 8004f82:	4603      	mov	r3, r0
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af04      	add	r7, sp, #16
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d020      	beq.n	8004fdc <osThreadCreate+0x54>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01c      	beq.n	8004fdc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685c      	ldr	r4, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691e      	ldr	r6, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ffa6 	bl	8004f06 <makeFreeRtosPriority>
 8004fba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc4:	9202      	str	r2, [sp, #8]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	9100      	str	r1, [sp, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f001 fb09 	bl	80065e8 <xTaskCreateStatic>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	e01c      	b.n	8005016 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685c      	ldr	r4, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe8:	b29e      	uxth	r6, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ff88 	bl	8004f06 <makeFreeRtosPriority>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	f107 030c 	add.w	r3, r7, #12
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	9200      	str	r2, [sp, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4632      	mov	r2, r6
 8005004:	4629      	mov	r1, r5
 8005006:	4620      	mov	r0, r4
 8005008:	f001 fb48 	bl	800669c <xTaskCreate>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	e000      	b.n	8005018 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005020 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <osDelay+0x16>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	e000      	b.n	8005038 <osDelay+0x18>
 8005036:	2301      	movs	r3, #1
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fc65 	bl	8006908 <vTaskDelay>
  
  return osOK;
 800503e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4619      	mov	r1, r3
 800505e:	2001      	movs	r0, #1
 8005060:	f000 fc7f 	bl	8005962 <xQueueCreateMutexStatic>
 8005064:	4603      	mov	r3, r0
 8005066:	e003      	b.n	8005070 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005068:	2001      	movs	r0, #1
 800506a:	f000 fc62 	bl	8005932 <xQueueCreateMutex>
 800506e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005070:	4618      	mov	r0, r3
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <osMutexWait+0x18>
    return osErrorParameter;
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	e03a      	b.n	8005106 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d103      	bne.n	80050a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e009      	b.n	80050b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <osMutexWait+0x40>
      ticks = 1;
 80050b4:	2301      	movs	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050b8:	f7ff ff3d 	bl	8004f36 <inHandlerMode>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d017      	beq.n	80050f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	461a      	mov	r2, r3
 80050c8:	2100      	movs	r1, #0
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f860 	bl	8006190 <xQueueReceiveFromISR>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <osMutexWait+0x62>
      return osErrorOS;
 80050d6:	23ff      	movs	r3, #255	; 0xff
 80050d8:	e015      	b.n	8005106 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d011      	beq.n	8005104 <osMutexWait+0x8c>
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <osMutexWait+0x98>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	e008      	b.n	8005104 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 ff43 	bl	8005f80 <xQueueSemaphoreTake>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <osMutexWait+0x8c>
    return osErrorOS;
 8005100:	23ff      	movs	r3, #255	; 0xff
 8005102:	e000      	b.n	8005106 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005124:	f7ff ff07 	bl	8004f36 <inHandlerMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d016      	beq.n	800515c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fdbd 	bl	8005cb4 <xQueueGiveFromISR>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d001      	beq.n	8005144 <osMutexRelease+0x30>
      return osErrorOS;
 8005140:	23ff      	movs	r3, #255	; 0xff
 8005142:	e017      	b.n	8005174 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d013      	beq.n	8005172 <osMutexRelease+0x5e>
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <osMutexRelease+0x68>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	e00a      	b.n	8005172 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800515c:	2300      	movs	r3, #0
 800515e:	2200      	movs	r2, #0
 8005160:	2100      	movs	r1, #0
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fc18 	bl	8005998 <xQueueGenericSend>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800516e:	23ff      	movs	r3, #255	; 0xff
 8005170:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005172:	68fb      	ldr	r3, [r7, #12]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d010      	beq.n	80051b4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10b      	bne.n	80051b0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	2303      	movs	r3, #3
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	2100      	movs	r1, #0
 80051a6:	2001      	movs	r0, #1
 80051a8:	f000 fad8 	bl	800575c <xQueueGenericCreateStatic>
 80051ac:	4603      	mov	r3, r0
 80051ae:	e016      	b.n	80051de <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e014      	b.n	80051de <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d110      	bne.n	80051dc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80051ba:	2203      	movs	r2, #3
 80051bc:	2100      	movs	r1, #0
 80051be:	2001      	movs	r0, #1
 80051c0:	f000 fb3f 	bl	8005842 <xQueueGenericCreate>
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <osSemaphoreCreate+0x58>
 80051cc:	2300      	movs	r3, #0
 80051ce:	2200      	movs	r2, #0
 80051d0:	2100      	movs	r1, #0
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fbe0 	bl	8005998 <xQueueGenericSend>
      return sema;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	e000      	b.n	80051de <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80051dc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	e03a      	b.n	8005276 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d103      	bne.n	8005214 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e009      	b.n	8005228 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <osSemaphoreWait+0x40>
      ticks = 1;
 8005224:	2301      	movs	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005228:	f7ff fe85 	bl	8004f36 <inHandlerMode>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	461a      	mov	r2, r3
 8005238:	2100      	movs	r1, #0
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 ffa8 	bl	8006190 <xQueueReceiveFromISR>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005246:	23ff      	movs	r3, #255	; 0xff
 8005248:	e015      	b.n	8005276 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d011      	beq.n	8005274 <osSemaphoreWait+0x8c>
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <osSemaphoreWait+0x98>)
 8005252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	e008      	b.n	8005274 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fe8b 	bl	8005f80 <xQueueSemaphoreTake>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d001      	beq.n	8005274 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005270:	23ff      	movs	r3, #255	; 0xff
 8005272:	e000      	b.n	8005276 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005290:	2300      	movs	r3, #0
 8005292:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005294:	f7ff fe4f 	bl	8004f36 <inHandlerMode>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d016      	beq.n	80052cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800529e:	f107 0308 	add.w	r3, r7, #8
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fd05 	bl	8005cb4 <xQueueGiveFromISR>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80052b0:	23ff      	movs	r3, #255	; 0xff
 80052b2:	e017      	b.n	80052e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d013      	beq.n	80052e2 <osSemaphoreRelease+0x5e>
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <osSemaphoreRelease+0x68>)
 80052bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	e00a      	b.n	80052e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80052cc:	2300      	movs	r3, #0
 80052ce:	2200      	movs	r2, #0
 80052d0:	2100      	movs	r1, #0
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fb60 	bl	8005998 <xQueueGenericSend>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80052de:	23ff      	movs	r3, #255	; 0xff
 80052e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052f8:	f7ff fe1d 	bl	8004f36 <inHandlerMode>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005302:	2382      	movs	r3, #130	; 0x82
 8005304:	e003      	b.n	800530e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fff9 	bl	80062fe <vQueueDelete>

  return osOK; 
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	b085      	sub	sp, #20
 800531a:	af02      	add	r7, sp, #8
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d012      	beq.n	800534e <osMessageCreate+0x38>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6859      	ldr	r1, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68dc      	ldr	r4, [r3, #12]
 8005340:	2300      	movs	r3, #0
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4623      	mov	r3, r4
 8005346:	f000 fa09 	bl	800575c <xQueueGenericCreateStatic>
 800534a:	4603      	mov	r3, r0
 800534c:	e008      	b.n	8005360 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	4619      	mov	r1, r3
 800535a:	f000 fa72 	bl	8005842 <xQueueGenericCreate>
 800535e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bd90      	pop	{r4, r7, pc}

08005368 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <osMessagePut+0x1e>
    ticks = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005386:	f7ff fdd6 	bl	8004f36 <inHandlerMode>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d018      	beq.n	80053c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005390:	f107 0210 	add.w	r2, r7, #16
 8005394:	f107 0108 	add.w	r1, r7, #8
 8005398:	2300      	movs	r3, #0
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fbf6 	bl	8005b8c <xQueueGenericSendFromISR>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d001      	beq.n	80053aa <osMessagePut+0x42>
      return osErrorOS;
 80053a6:	23ff      	movs	r3, #255	; 0xff
 80053a8:	e018      	b.n	80053dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d014      	beq.n	80053da <osMessagePut+0x72>
 80053b0:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <osMessagePut+0x7c>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	e00b      	b.n	80053da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80053c2:	f107 0108 	add.w	r1, r7, #8
 80053c6:	2300      	movs	r3, #0
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fae4 	bl	8005998 <xQueueGenericSend>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <osMessagePut+0x72>
      return osErrorOS;
 80053d6:	23ff      	movs	r3, #255	; 0xff
 80053d8:	e000      	b.n	80053dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b08b      	sub	sp, #44	; 0x2c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	617b      	str	r3, [r7, #20]
    return event;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	461c      	mov	r4, r3
 800540a:	f107 0314 	add.w	r3, r7, #20
 800540e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005416:	e054      	b.n	80054c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005418:	2300      	movs	r3, #0
 800541a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d103      	bne.n	8005430 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005428:	f04f 33ff 	mov.w	r3, #4294967295
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	e009      	b.n	8005444 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <osMessageGet+0x5c>
      ticks = 1;
 8005440:	2301      	movs	r3, #1
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005444:	f7ff fd77 	bl	8004f36 <inHandlerMode>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01c      	beq.n	8005488 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800544e:	f107 0220 	add.w	r2, r7, #32
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	68b8      	ldr	r0, [r7, #8]
 800545c:	f000 fe98 	bl	8006190 <xQueueReceiveFromISR>
 8005460:	4603      	mov	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d102      	bne.n	800546c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005466:	2310      	movs	r3, #16
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e001      	b.n	8005470 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01d      	beq.n	80054b2 <osMessageGet+0xca>
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <osMessageGet+0xe4>)
 8005478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	e014      	b.n	80054b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	3304      	adds	r3, #4
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	4619      	mov	r1, r3
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f000 fc98 	bl	8005dc8 <xQueueReceive>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d102      	bne.n	80054a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800549e:	2310      	movs	r3, #16
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e006      	b.n	80054b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <osMessageGet+0xc6>
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <osMessageGet+0xc8>
 80054ae:	2340      	movs	r3, #64	; 0x40
 80054b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	461c      	mov	r4, r3
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	372c      	adds	r7, #44	; 0x2c
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd90      	pop	{r4, r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80054d8:	f7ff fd2d 	bl	8004f36 <inHandlerMode>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 feee 	bl	80062c4 <uxQueueMessagesWaitingFromISR>
 80054e8:	4603      	mov	r3, r0
 80054ea:	e003      	b.n	80054f4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fecc 	bl	800628a <uxQueueMessagesWaiting>
 80054f2:	4603      	mov	r3, r0
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005504:	f7ff fd17 	bl	8004f36 <inHandlerMode>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <osMessageDelete+0x16>
    return osErrorISR;
 800550e:	2382      	movs	r3, #130	; 0x82
 8005510:	e003      	b.n	800551a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fef3 	bl	80062fe <vQueueDelete>

  return osOK; 
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f103 0208 	add.w	r2, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f103 0208 	add.w	r2, r3, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f103 0208 	add.w	r2, r3, #8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d103      	bne.n	80055e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e00c      	b.n	80055fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3308      	adds	r3, #8
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e002      	b.n	80055f2 <vListInsert+0x2e>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d2f6      	bcs.n	80055ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6892      	ldr	r2, [r2, #8]
 800564c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6852      	ldr	r2, [r2, #4]
 8005656:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d103      	bne.n	800566a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1e5a      	subs	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	e7fe      	b.n	80056b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80056b4:	f002 f8ca 	bl	800784c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	68f9      	ldr	r1, [r7, #12]
 80056c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	441a      	add	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	3b01      	subs	r3, #1
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	441a      	add	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	22ff      	movs	r2, #255	; 0xff
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	22ff      	movs	r2, #255	; 0xff
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d114      	bne.n	8005734 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01a      	beq.n	8005748 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3310      	adds	r3, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fb8a 	bl	8006e30 <xTaskRemoveFromEventList>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <xQueueGenericReset+0xcc>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	e009      	b.n	8005748 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3310      	adds	r3, #16
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fef2 	bl	8005522 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3324      	adds	r3, #36	; 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff feed 	bl	8005522 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005748:	f002 f8ae 	bl	80078a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800574c:	2301      	movs	r3, #1
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08e      	sub	sp, #56	; 0x38
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <xQueueGenericCreateStatic+0x28>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
 8005782:	e7fe      	b.n	8005782 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <xQueueGenericCreateStatic+0x42>
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
 800579c:	e7fe      	b.n	800579c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <xQueueGenericCreateStatic+0x4e>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <xQueueGenericCreateStatic+0x52>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <xQueueGenericCreateStatic+0x54>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <xQueueGenericCreateStatic+0x6c>
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	e7fe      	b.n	80057c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d102      	bne.n	80057d4 <xQueueGenericCreateStatic+0x78>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <xQueueGenericCreateStatic+0x7c>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <xQueueGenericCreateStatic+0x7e>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <xQueueGenericCreateStatic+0x96>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057f2:	2348      	movs	r3, #72	; 0x48
 80057f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b48      	cmp	r3, #72	; 0x48
 80057fa:	d009      	beq.n	8005810 <xQueueGenericCreateStatic+0xb4>
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e7fe      	b.n	800580e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005810:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005824:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f844 	bl	80058c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800583a:	4618      	mov	r0, r3
 800583c:	3730      	adds	r7, #48	; 0x30
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005842:	b580      	push	{r7, lr}
 8005844:	b08a      	sub	sp, #40	; 0x28
 8005846:	af02      	add	r7, sp, #8
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <xQueueGenericCreate+0x28>
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	e7fe      	b.n	8005868 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005870:	2300      	movs	r3, #0
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	e004      	b.n	8005880 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	fb02 f303 	mul.w	r3, r2, r3
 800587e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	3348      	adds	r3, #72	; 0x48
 8005884:	4618      	mov	r0, r3
 8005886:	f002 f8fb 	bl	8007a80 <pvPortMalloc>
 800588a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d011      	beq.n	80058b6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	3348      	adds	r3, #72	; 0x48
 800589a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058a4:	79fa      	ldrb	r2, [r7, #7]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	4613      	mov	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f805 	bl	80058c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058b6:	69bb      	ldr	r3, [r7, #24]
	}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3720      	adds	r7, #32
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e002      	b.n	80058e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ee:	2101      	movs	r1, #1
 80058f0:	69b8      	ldr	r0, [r7, #24]
 80058f2:	f7ff fecb 	bl	800568c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800591e:	2300      	movs	r3, #0
 8005920:	2200      	movs	r2, #0
 8005922:	2100      	movs	r1, #0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f837 	bl	8005998 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800593c:	2301      	movs	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	461a      	mov	r2, r3
 8005948:	6939      	ldr	r1, [r7, #16]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff ff79 	bl	8005842 <xQueueGenericCreate>
 8005950:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ffd3 	bl	80058fe <prvInitialiseMutex>

		return xNewQueue;
 8005958:	68fb      	ldr	r3, [r7, #12]
	}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005962:	b580      	push	{r7, lr}
 8005964:	b088      	sub	sp, #32
 8005966:	af02      	add	r7, sp, #8
 8005968:	4603      	mov	r3, r0
 800596a:	6039      	str	r1, [r7, #0]
 800596c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800596e:	2301      	movs	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	6978      	ldr	r0, [r7, #20]
 8005982:	f7ff feeb 	bl	800575c <xQueueGenericCreateStatic>
 8005986:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff ffb8 	bl	80058fe <prvInitialiseMutex>

		return xNewQueue;
 800598e:	68fb      	ldr	r3, [r7, #12]
	}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08e      	sub	sp, #56	; 0x38
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059a6:	2300      	movs	r3, #0
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <xQueueGenericSend+0x30>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c6:	e7fe      	b.n	80059c6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <xQueueGenericSend+0x3e>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <xQueueGenericSend+0x42>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <xQueueGenericSend+0x44>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <xQueueGenericSend+0x5c>
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	e7fe      	b.n	80059f2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d103      	bne.n	8005a02 <xQueueGenericSend+0x6a>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <xQueueGenericSend+0x6e>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <xQueueGenericSend+0x70>
 8005a06:	2300      	movs	r3, #0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <xQueueGenericSend+0x88>
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	e7fe      	b.n	8005a1e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a20:	f001 fbbc 	bl	800719c <xTaskGetSchedulerState>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <xQueueGenericSend+0x98>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <xQueueGenericSend+0x9c>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <xQueueGenericSend+0x9e>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <xQueueGenericSend+0xb6>
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e7fe      	b.n	8005a4c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a4e:	f001 fefd 	bl	800784c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <xQueueGenericSend+0xcc>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d129      	bne.n	8005ab8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a6a:	f000 fc82 	bl	8006372 <prvCopyDataToQueue>
 8005a6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	3324      	adds	r3, #36	; 0x24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 f9d7 	bl	8006e30 <xTaskRemoveFromEventList>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a88:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <xQueueGenericSend+0x1f0>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	e00a      	b.n	8005ab0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005aa0:	4b39      	ldr	r3, [pc, #228]	; (8005b88 <xQueueGenericSend+0x1f0>)
 8005aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ab0:	f001 fefa 	bl	80078a8 <vPortExitCritical>
				return pdPASS;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e063      	b.n	8005b80 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005abe:	f001 fef3 	bl	80078a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e05c      	b.n	8005b80 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005acc:	f107 0314 	add.w	r3, r7, #20
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fa0f 	bl	8006ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ada:	f001 fee5 	bl	80078a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ade:	f000 ffa5 	bl	8006a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae2:	f001 feb3 	bl	800784c <vPortEnterCritical>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d103      	bne.n	8005afc <xQueueGenericSend+0x164>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b02:	b25b      	sxtb	r3, r3
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d103      	bne.n	8005b12 <xQueueGenericSend+0x17a>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b12:	f001 fec9 	bl	80078a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b16:	1d3a      	adds	r2, r7, #4
 8005b18:	f107 0314 	add.w	r3, r7, #20
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 f9fe 	bl	8006f20 <xTaskCheckForTimeOut>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d124      	bne.n	8005b74 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b2c:	f000 fd19 	bl	8006562 <prvIsQueueFull>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d018      	beq.n	8005b68 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	3310      	adds	r3, #16
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 f952 	bl	8006de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b46:	f000 fca4 	bl	8006492 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b4a:	f000 ff7d 	bl	8006a48 <xTaskResumeAll>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f af7c 	bne.w	8005a4e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <xQueueGenericSend+0x1f0>)
 8005b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	e772      	b.n	8005a4e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6a:	f000 fc92 	bl	8006492 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b6e:	f000 ff6b 	bl	8006a48 <xTaskResumeAll>
 8005b72:	e76c      	b.n	8005a4e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b76:	f000 fc8c 	bl	8006492 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7a:	f000 ff65 	bl	8006a48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3738      	adds	r7, #56	; 0x38
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08e      	sub	sp, #56	; 0x38
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d109      	bne.n	8005bb8 <xQueueGenericSendFromISR+0x2c>
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb6:	e7fe      	b.n	8005bb6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <xQueueGenericSendFromISR+0x3a>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <xQueueGenericSendFromISR+0x3e>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <xQueueGenericSendFromISR+0x40>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <xQueueGenericSendFromISR+0x58>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	e7fe      	b.n	8005be2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d103      	bne.n	8005bf2 <xQueueGenericSendFromISR+0x66>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <xQueueGenericSendFromISR+0x6a>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <xQueueGenericSendFromISR+0x6c>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <xQueueGenericSendFromISR+0x84>
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e7fe      	b.n	8005c0e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c10:	f001 fef8 	bl	8007a04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c14:	f3ef 8211 	mrs	r2, BASEPRI
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	61ba      	str	r2, [r7, #24]
 8005c2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <xQueueGenericSendFromISR+0xb6>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d12c      	bne.n	8005c9c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c52:	f000 fb8e 	bl	8006372 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c56:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d112      	bne.n	8005c86 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d016      	beq.n	8005c96 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	3324      	adds	r3, #36	; 0x24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f8df 	bl	8006e30 <xTaskRemoveFromEventList>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e007      	b.n	8005c96 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	b25a      	sxtb	r2, r3
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c96:	2301      	movs	r3, #1
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c9a:	e001      	b.n	8005ca0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3738      	adds	r7, #56	; 0x38
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08e      	sub	sp, #56	; 0x38
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d109      	bne.n	8005cdc <xQueueGiveFromISR+0x28>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	e7fe      	b.n	8005cda <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <xQueueGiveFromISR+0x44>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e7fe      	b.n	8005cf6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <xQueueGiveFromISR+0x54>
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <xQueueGiveFromISR+0x58>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <xQueueGiveFromISR+0x5a>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <xQueueGiveFromISR+0x72>
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e7fe      	b.n	8005d24 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d26:	f001 fe6d 	bl	8007a04 <vPortValidateInterruptPriority>
	__asm volatile
 8005d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	617a      	str	r2, [r7, #20]
 8005d40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d22b      	bcs.n	8005dae <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d112      	bne.n	8005d98 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	3324      	adds	r3, #36	; 0x24
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f856 	bl	8006e30 <xTaskRemoveFromEventList>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e007      	b.n	8005da8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	b25a      	sxtb	r2, r3
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	e001      	b.n	8005db2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	637b      	str	r3, [r7, #52]	; 0x34
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3738      	adds	r7, #56	; 0x38
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <xQueueReceive+0x2e>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	e7fe      	b.n	8005df4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d103      	bne.n	8005e04 <xQueueReceive+0x3c>
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <xQueueReceive+0x40>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <xQueueReceive+0x42>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <xQueueReceive+0x5a>
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	e7fe      	b.n	8005e20 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e22:	f001 f9bb 	bl	800719c <xTaskGetSchedulerState>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <xQueueReceive+0x6a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <xQueueReceive+0x6e>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <xQueueReceive+0x70>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <xQueueReceive+0x88>
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e7fe      	b.n	8005e4e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e50:	f001 fcfc 	bl	800784c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01f      	beq.n	8005ea0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e64:	f000 faef 	bl	8006446 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	1e5a      	subs	r2, r3, #1
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 ffd7 	bl	8006e30 <xTaskRemoveFromEventList>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e88:	4b3c      	ldr	r3, [pc, #240]	; (8005f7c <xQueueReceive+0x1b4>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e98:	f001 fd06 	bl	80078a8 <vPortExitCritical>
				return pdPASS;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e069      	b.n	8005f74 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ea6:	f001 fcff 	bl	80078a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e062      	b.n	8005f74 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eb4:	f107 0310 	add.w	r3, r7, #16
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f81b 	bl	8006ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ec2:	f001 fcf1 	bl	80078a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ec6:	f000 fdb1 	bl	8006a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eca:	f001 fcbf 	bl	800784c <vPortEnterCritical>
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d103      	bne.n	8005ee4 <xQueueReceive+0x11c>
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eea:	b25b      	sxtb	r3, r3
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d103      	bne.n	8005efa <xQueueReceive+0x132>
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005efa:	f001 fcd5 	bl	80078a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005efe:	1d3a      	adds	r2, r7, #4
 8005f00:	f107 0310 	add.w	r3, r7, #16
 8005f04:	4611      	mov	r1, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f80a 	bl	8006f20 <xTaskCheckForTimeOut>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d123      	bne.n	8005f5a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f14:	f000 fb0f 	bl	8006536 <prvIsQueueEmpty>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d017      	beq.n	8005f4e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	3324      	adds	r3, #36	; 0x24
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 ff5e 	bl	8006de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2e:	f000 fab0 	bl	8006492 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f32:	f000 fd89 	bl	8006a48 <xTaskResumeAll>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d189      	bne.n	8005e50 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <xQueueReceive+0x1b4>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	e780      	b.n	8005e50 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f50:	f000 fa9f 	bl	8006492 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f54:	f000 fd78 	bl	8006a48 <xTaskResumeAll>
 8005f58:	e77a      	b.n	8005e50 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5c:	f000 fa99 	bl	8006492 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f60:	f000 fd72 	bl	8006a48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f66:	f000 fae6 	bl	8006536 <prvIsQueueEmpty>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f43f af6f 	beq.w	8005e50 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3730      	adds	r7, #48	; 0x30
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <xQueueSemaphoreTake+0x30>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	e7fe      	b.n	8005fae <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <xQueueSemaphoreTake+0x4c>
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e7fe      	b.n	8005fca <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fcc:	f001 f8e6 	bl	800719c <xTaskGetSchedulerState>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <xQueueSemaphoreTake+0x5c>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <xQueueSemaphoreTake+0x60>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <xQueueSemaphoreTake+0x62>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <xQueueSemaphoreTake+0x7a>
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ffa:	f001 fc27 	bl	800784c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	2b00      	cmp	r3, #0
 8006008:	d024      	beq.n	8006054 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	1e5a      	subs	r2, r3, #1
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800601a:	f001 fa79 	bl	8007510 <pvTaskIncrementMutexHeldCount>
 800601e:	4602      	mov	r2, r0
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00f      	beq.n	800604c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	3310      	adds	r3, #16
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fefd 	bl	8006e30 <xTaskRemoveFromEventList>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800603c:	4b53      	ldr	r3, [pc, #332]	; (800618c <xQueueSemaphoreTake+0x20c>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800604c:	f001 fc2c 	bl	80078a8 <vPortExitCritical>
				return pdPASS;
 8006050:	2301      	movs	r3, #1
 8006052:	e096      	b.n	8006182 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d110      	bne.n	800607c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <xQueueSemaphoreTake+0xf4>
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	e7fe      	b.n	8006072 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006074:	f001 fc18 	bl	80078a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006078:	2300      	movs	r3, #0
 800607a:	e082      	b.n	8006182 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006082:	f107 030c 	add.w	r3, r7, #12
 8006086:	4618      	mov	r0, r3
 8006088:	f000 ff34 	bl	8006ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006090:	f001 fc0a 	bl	80078a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006094:	f000 fcca 	bl	8006a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006098:	f001 fbd8 	bl	800784c <vPortEnterCritical>
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d103      	bne.n	80060b2 <xQueueSemaphoreTake+0x132>
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060b8:	b25b      	sxtb	r3, r3
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d103      	bne.n	80060c8 <xQueueSemaphoreTake+0x148>
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c8:	f001 fbee 	bl	80078a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060cc:	463a      	mov	r2, r7
 80060ce:	f107 030c 	add.w	r3, r7, #12
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 ff23 	bl	8006f20 <xTaskCheckForTimeOut>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d132      	bne.n	8006146 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060e2:	f000 fa28 	bl	8006536 <prvIsQueueEmpty>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d026      	beq.n	800613a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80060f4:	f001 fbaa 	bl	800784c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f86b 	bl	80071d8 <xTaskPriorityInherit>
 8006102:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006104:	f001 fbd0 	bl	80078a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fe69 	bl	8006de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006118:	f000 f9bb 	bl	8006492 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800611c:	f000 fc94 	bl	8006a48 <xTaskResumeAll>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	f47f af69 	bne.w	8005ffa <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006128:	4b18      	ldr	r3, [pc, #96]	; (800618c <xQueueSemaphoreTake+0x20c>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	e75f      	b.n	8005ffa <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800613a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800613c:	f000 f9a9 	bl	8006492 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006140:	f000 fc82 	bl	8006a48 <xTaskResumeAll>
 8006144:	e759      	b.n	8005ffa <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006148:	f000 f9a3 	bl	8006492 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800614c:	f000 fc7c 	bl	8006a48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006152:	f000 f9f0 	bl	8006536 <prvIsQueueEmpty>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	f43f af4e 	beq.w	8005ffa <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00d      	beq.n	8006180 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006164:	f001 fb72 	bl	800784c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800616a:	f000 f8ea 	bl	8006342 <prvGetDisinheritPriorityAfterTimeout>
 800616e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006176:	4618      	mov	r0, r3
 8006178:	f001 f932 	bl	80073e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800617c:	f001 fb94 	bl	80078a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006180:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006182:	4618      	mov	r0, r3
 8006184:	3738      	adds	r7, #56	; 0x38
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08e      	sub	sp, #56	; 0x38
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <xQueueReceiveFromISR+0x2a>
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	e7fe      	b.n	80061b8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <xQueueReceiveFromISR+0x38>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <xQueueReceiveFromISR+0x3c>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <xQueueReceiveFromISR+0x3e>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <xQueueReceiveFromISR+0x56>
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	e7fe      	b.n	80061e4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061e6:	f001 fc0d 	bl	8007a04 <vPortValidateInterruptPriority>
	__asm volatile
 80061ea:	f3ef 8211 	mrs	r2, BASEPRI
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61ba      	str	r2, [r7, #24]
 8006200:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006202:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d02f      	beq.n	8006272 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006220:	f000 f911 	bl	8006446 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	1e5a      	subs	r2, r3, #1
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800622c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d112      	bne.n	800625c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	3310      	adds	r3, #16
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fdf4 	bl	8006e30 <xTaskRemoveFromEventList>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e007      	b.n	800626c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800625c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006260:	3301      	adds	r3, #1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	b25a      	sxtb	r2, r3
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800626c:	2301      	movs	r3, #1
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
 8006270:	e001      	b.n	8006276 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006272:	2300      	movs	r3, #0
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	613b      	str	r3, [r7, #16]
	__asm volatile
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006282:	4618      	mov	r0, r3
 8006284:	3738      	adds	r7, #56	; 0x38
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	e7fe      	b.n	80062aa <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80062ac:	f001 face 	bl	800784c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80062b6:	f001 faf7 	bl	80078a8 <vPortExitCritical>

	return uxReturn;
 80062ba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <uxQueueMessagesWaitingFromISR+0x26>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e7fe      	b.n	80062e8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80062f0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80062f2:	4618      	mov	r0, r3
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <vQueueDelete+0x26>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	e7fe      	b.n	8006322 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f935 	bl	8006594 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f001 fc65 	bl	8007c04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f1c3 0307 	rsb	r3, r3, #7
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e001      	b.n	8006364 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006364:	68fb      	ldr	r3, [r7, #12]
	}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10d      	bne.n	80063ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d14d      	bne.n	8006434 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 ff9b 	bl	80072d8 <xTaskPriorityDisinherit>
 80063a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	609a      	str	r2, [r3, #8]
 80063aa:	e043      	b.n	8006434 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d119      	bne.n	80063e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6858      	ldr	r0, [r3, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	461a      	mov	r2, r3
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	f011 ff6a 	bl	8018296 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	441a      	add	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d32b      	bcc.n	8006434 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	605a      	str	r2, [r3, #4]
 80063e4:	e026      	b.n	8006434 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68d8      	ldr	r0, [r3, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	461a      	mov	r2, r3
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	f011 ff50 	bl	8018296 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	425b      	negs	r3, r3
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d207      	bcs.n	8006422 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	425b      	negs	r3, r3
 800641c:	441a      	add	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d105      	bne.n	8006434 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3b01      	subs	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800643c:	697b      	ldr	r3, [r7, #20]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d018      	beq.n	800648a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	441a      	add	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d303      	bcc.n	800647a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68d9      	ldr	r1, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	461a      	mov	r2, r3
 8006484:	6838      	ldr	r0, [r7, #0]
 8006486:	f011 ff06 	bl	8018296 <memcpy>
	}
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800649a:	f001 f9d7 	bl	800784c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064a6:	e011      	b.n	80064cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d012      	beq.n	80064d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fcbb 	bl	8006e30 <xTaskRemoveFromEventList>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064c0:	f000 fd8e 	bl	8006fe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	dce9      	bgt.n	80064a8 <prvUnlockQueue+0x16>
 80064d4:	e000      	b.n	80064d8 <prvUnlockQueue+0x46>
					break;
 80064d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064e0:	f001 f9e2 	bl	80078a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064e4:	f001 f9b2 	bl	800784c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f0:	e011      	b.n	8006516 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d012      	beq.n	8006520 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3310      	adds	r3, #16
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fc96 	bl	8006e30 <xTaskRemoveFromEventList>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800650a:	f000 fd69 	bl	8006fe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	3b01      	subs	r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dce9      	bgt.n	80064f2 <prvUnlockQueue+0x60>
 800651e:	e000      	b.n	8006522 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006520:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	22ff      	movs	r2, #255	; 0xff
 8006526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800652a:	f001 f9bd 	bl	80078a8 <vPortExitCritical>
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800653e:	f001 f985 	bl	800784c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800654a:	2301      	movs	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e001      	b.n	8006554 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006554:	f001 f9a8 	bl	80078a8 <vPortExitCritical>

	return xReturn;
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800656a:	f001 f96f 	bl	800784c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	429a      	cmp	r2, r3
 8006578:	d102      	bne.n	8006580 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e001      	b.n	8006584 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006584:	f001 f990 	bl	80078a8 <vPortExitCritical>

	return xReturn;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e016      	b.n	80065d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80065a2:	4a10      	ldr	r2, [pc, #64]	; (80065e4 <vQueueUnregisterQueue+0x50>)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10b      	bne.n	80065ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <vQueueUnregisterQueue+0x50>)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2100      	movs	r1, #0
 80065b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80065bc:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <vQueueUnregisterQueue+0x50>)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4413      	add	r3, r2
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]
				break;
 80065c8:	e005      	b.n	80065d6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b07      	cmp	r3, #7
 80065d4:	d9e5      	bls.n	80065a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	2000c360 	.word	0x2000c360

080065e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08e      	sub	sp, #56	; 0x38
 80065ec:	af04      	add	r7, sp, #16
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <xTaskCreateStatic+0x28>
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	623b      	str	r3, [r7, #32]
 800660e:	e7fe      	b.n	800660e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <xTaskCreateStatic+0x42>
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	e7fe      	b.n	8006628 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800662a:	2354      	movs	r3, #84	; 0x54
 800662c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b54      	cmp	r3, #84	; 0x54
 8006632:	d009      	beq.n	8006648 <xTaskCreateStatic+0x60>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	e7fe      	b.n	8006646 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006648:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <xTaskCreateStatic+0xa6>
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01b      	beq.n	800668e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800665e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006668:	2300      	movs	r3, #0
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f850 	bl	8006726 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006688:	f000 f8d4 	bl	8006834 <prvAddNewTaskToReadyList>
 800668c:	e001      	b.n	8006692 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006692:	697b      	ldr	r3, [r7, #20]
	}
 8006694:	4618      	mov	r0, r3
 8006696:	3728      	adds	r7, #40	; 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08c      	sub	sp, #48	; 0x30
 80066a0:	af04      	add	r7, sp, #16
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f9e5 	bl	8007a80 <pvPortMalloc>
 80066b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066be:	2054      	movs	r0, #84	; 0x54
 80066c0:	f001 f9de 	bl	8007a80 <pvPortMalloc>
 80066c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
 80066d2:	e005      	b.n	80066e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066d4:	6978      	ldr	r0, [r7, #20]
 80066d6:	f001 fa95 	bl	8007c04 <vPortFree>
 80066da:	e001      	b.n	80066e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d017      	beq.n	8006716 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	2300      	movs	r3, #0
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	9302      	str	r3, [sp, #8]
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f80e 	bl	8006726 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800670a:	69f8      	ldr	r0, [r7, #28]
 800670c:	f000 f892 	bl	8006834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006710:	2301      	movs	r3, #1
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e002      	b.n	800671c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800671c:	69bb      	ldr	r3, [r7, #24]
	}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b088      	sub	sp, #32
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800673e:	3b01      	subs	r3, #1
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f023 0307 	bic.w	r3, r3, #7
 800674c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <prvInitialiseNewTask+0x46>
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	e7fe      	b.n	800676a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01f      	beq.n	80067b2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	e012      	b.n	800679e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	7819      	ldrb	r1, [r3, #0]
 8006780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	3334      	adds	r3, #52	; 0x34
 8006788:	460a      	mov	r2, r1
 800678a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d006      	beq.n	80067a6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d9e9      	bls.n	8006778 <prvInitialiseNewTask+0x52>
 80067a4:	e000      	b.n	80067a8 <prvInitialiseNewTask+0x82>
			{
				break;
 80067a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b0:	e003      	b.n	80067ba <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	2b06      	cmp	r3, #6
 80067be:	d901      	bls.n	80067c4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067c0:	2306      	movs	r3, #6
 80067c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	2200      	movs	r2, #0
 80067d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fec1 	bl	8005562 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	3318      	adds	r3, #24
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe febc 	bl	8005562 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	f1c3 0207 	rsb	r2, r3, #7
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	2200      	movs	r2, #0
 8006804:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	68f9      	ldr	r1, [r7, #12]
 8006812:	69b8      	ldr	r0, [r7, #24]
 8006814:	f000 fef6 	bl	8007604 <pxPortInitialiseStack>
 8006818:	4602      	mov	r2, r0
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800682a:	bf00      	nop
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800683c:	f001 f806 	bl	800784c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006840:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <prvAddNewTaskToReadyList+0xb8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	4a29      	ldr	r2, [pc, #164]	; (80068ec <prvAddNewTaskToReadyList+0xb8>)
 8006848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800684a:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006852:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006858:	4b24      	ldr	r3, [pc, #144]	; (80068ec <prvAddNewTaskToReadyList+0xb8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d110      	bne.n	8006882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006860:	f000 fbe2 	bl	8007028 <prvInitialiseTaskLists>
 8006864:	e00d      	b.n	8006882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <prvAddNewTaskToReadyList+0xc0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	429a      	cmp	r2, r3
 800687a:	d802      	bhi.n	8006882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800687c:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <prvAddNewTaskToReadyList+0xc4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <prvAddNewTaskToReadyList+0xc4>)
 800688a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <prvAddNewTaskToReadyList+0xc8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4313      	orrs	r3, r2
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <prvAddNewTaskToReadyList+0xc8>)
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <prvAddNewTaskToReadyList+0xcc>)
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fe fe61 	bl	800557c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068ba:	f000 fff5 	bl	80078a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <prvAddNewTaskToReadyList+0xc0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvAddNewTaskToReadyList+0xbc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d207      	bcs.n	80068e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <prvAddNewTaskToReadyList+0xd0>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	2000076c 	.word	0x2000076c
 80068f0:	2000066c 	.word	0x2000066c
 80068f4:	20000778 	.word	0x20000778
 80068f8:	20000788 	.word	0x20000788
 80068fc:	20000774 	.word	0x20000774
 8006900:	20000670 	.word	0x20000670
 8006904:	e000ed04 	.word	0xe000ed04

08006908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <vTaskDelay+0x60>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <vTaskDelay+0x2e>
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	e7fe      	b.n	8006934 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006936:	f000 f879 	bl	8006a2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800693a:	2100      	movs	r1, #0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fdfb 	bl	8007538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006942:	f000 f881 	bl	8006a48 <xTaskResumeAll>
 8006946:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <vTaskDelay+0x64>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000794 	.word	0x20000794
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800697e:	463a      	mov	r2, r7
 8006980:	1d39      	adds	r1, r7, #4
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	4618      	mov	r0, r3
 8006988:	f7f9 fe1a 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	460a      	mov	r2, r1
 800699e:	491d      	ldr	r1, [pc, #116]	; (8006a14 <vTaskStartScheduler+0xa4>)
 80069a0:	481d      	ldr	r0, [pc, #116]	; (8006a18 <vTaskStartScheduler+0xa8>)
 80069a2:	f7ff fe21 	bl	80065e8 <xTaskCreateStatic>
 80069a6:	4602      	mov	r2, r0
 80069a8:	4b1c      	ldr	r3, [pc, #112]	; (8006a1c <vTaskStartScheduler+0xac>)
 80069aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069ac:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <vTaskStartScheduler+0xac>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e001      	b.n	80069be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d115      	bne.n	80069f0 <vTaskStartScheduler+0x80>
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069d6:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <vTaskStartScheduler+0xb0>)
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <vTaskStartScheduler+0xb4>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <vTaskStartScheduler+0xb8>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ea:	f000 fe91 	bl	8007710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ee:	e00d      	b.n	8006a0c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d109      	bne.n	8006a0c <vTaskStartScheduler+0x9c>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e7fe      	b.n	8006a0a <vTaskStartScheduler+0x9a>
}
 8006a0c:	bf00      	nop
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	08019394 	.word	0x08019394
 8006a18:	08006ff9 	.word	0x08006ff9
 8006a1c:	20000790 	.word	0x20000790
 8006a20:	2000078c 	.word	0x2000078c
 8006a24:	20000778 	.word	0x20000778
 8006a28:	20000770 	.word	0x20000770

08006a2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <vTaskSuspendAll+0x18>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a03      	ldr	r2, [pc, #12]	; (8006a44 <vTaskSuspendAll+0x18>)
 8006a38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006a3a:	bf00      	nop
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20000794 	.word	0x20000794

08006a48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a56:	4b41      	ldr	r3, [pc, #260]	; (8006b5c <xTaskResumeAll+0x114>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <xTaskResumeAll+0x2a>
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	e7fe      	b.n	8006a70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a72:	f000 feeb 	bl	800784c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a76:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <xTaskResumeAll+0x114>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	4a37      	ldr	r2, [pc, #220]	; (8006b5c <xTaskResumeAll+0x114>)
 8006a7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a80:	4b36      	ldr	r3, [pc, #216]	; (8006b5c <xTaskResumeAll+0x114>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d161      	bne.n	8006b4c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a88:	4b35      	ldr	r3, [pc, #212]	; (8006b60 <xTaskResumeAll+0x118>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05d      	beq.n	8006b4c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a90:	e02e      	b.n	8006af0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a92:	4b34      	ldr	r3, [pc, #208]	; (8006b64 <xTaskResumeAll+0x11c>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fdc9 	bl	8005636 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fdc4 	bl	8005636 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <xTaskResumeAll+0x120>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <xTaskResumeAll+0x120>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a27      	ldr	r2, [pc, #156]	; (8006b6c <xTaskResumeAll+0x124>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe fd50 	bl	800557c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <xTaskResumeAll+0x128>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006aea:	4b22      	ldr	r3, [pc, #136]	; (8006b74 <xTaskResumeAll+0x12c>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006af0:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <xTaskResumeAll+0x11c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1cc      	bne.n	8006a92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006afe:	f000 fb2d 	bl	800715c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <xTaskResumeAll+0x130>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b0e:	f000 f859 	bl	8006bc4 <xTaskIncrementTick>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006b18:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <xTaskResumeAll+0x12c>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f1      	bne.n	8006b0e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <xTaskResumeAll+0x130>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b30:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <xTaskResumeAll+0x12c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <xTaskResumeAll+0x134>)
 8006b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b4c:	f000 feac 	bl	80078a8 <vPortExitCritical>

	return xAlreadyYielded;
 8006b50:	68bb      	ldr	r3, [r7, #8]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000794 	.word	0x20000794
 8006b60:	2000076c 	.word	0x2000076c
 8006b64:	2000072c 	.word	0x2000072c
 8006b68:	20000774 	.word	0x20000774
 8006b6c:	20000670 	.word	0x20000670
 8006b70:	2000066c 	.word	0x2000066c
 8006b74:	20000780 	.word	0x20000780
 8006b78:	2000077c 	.word	0x2000077c
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <xTaskGetTickCount+0x1c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b8c:	687b      	ldr	r3, [r7, #4]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000770 	.word	0x20000770

08006ba0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ba6:	f000 ff2d 	bl	8007a04 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <xTaskGetTickCountFromISR+0x20>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bb4:	683b      	ldr	r3, [r7, #0]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000770 	.word	0x20000770

08006bc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bce:	4b4e      	ldr	r3, [pc, #312]	; (8006d08 <xTaskIncrementTick+0x144>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 8087 	bne.w	8006ce6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bd8:	4b4c      	ldr	r3, [pc, #304]	; (8006d0c <xTaskIncrementTick+0x148>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006be0:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <xTaskIncrementTick+0x148>)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d11f      	bne.n	8006c2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bec:	4b48      	ldr	r3, [pc, #288]	; (8006d10 <xTaskIncrementTick+0x14c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <xTaskIncrementTick+0x46>
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	e7fe      	b.n	8006c08 <xTaskIncrementTick+0x44>
 8006c0a:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <xTaskIncrementTick+0x14c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <xTaskIncrementTick+0x150>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a3e      	ldr	r2, [pc, #248]	; (8006d10 <xTaskIncrementTick+0x14c>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	4a3e      	ldr	r2, [pc, #248]	; (8006d14 <xTaskIncrementTick+0x150>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4b3e      	ldr	r3, [pc, #248]	; (8006d18 <xTaskIncrementTick+0x154>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	4a3c      	ldr	r2, [pc, #240]	; (8006d18 <xTaskIncrementTick+0x154>)
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	f000 fa98 	bl	800715c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c2c:	4b3b      	ldr	r3, [pc, #236]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d348      	bcc.n	8006cc8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <xTaskIncrementTick+0x14c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c40:	4b36      	ldr	r3, [pc, #216]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295
 8006c46:	601a      	str	r2, [r3, #0]
					break;
 8006c48:	e03e      	b.n	8006cc8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4a:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <xTaskIncrementTick+0x14c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d203      	bcs.n	8006c6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c62:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <xTaskIncrementTick+0x158>)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c68:	e02e      	b.n	8006cc8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fce1 	bl	8005636 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	3318      	adds	r3, #24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fcd8 	bl	8005636 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	409a      	lsls	r2, r3
 8006c8e:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <xTaskIncrementTick+0x15c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	4a22      	ldr	r2, [pc, #136]	; (8006d20 <xTaskIncrementTick+0x15c>)
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4a1f      	ldr	r2, [pc, #124]	; (8006d24 <xTaskIncrementTick+0x160>)
 8006ca6:	441a      	add	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f7fe fc64 	bl	800557c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <xTaskIncrementTick+0x164>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d3b9      	bcc.n	8006c36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc6:	e7b6      	b.n	8006c36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cc8:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <xTaskIncrementTick+0x164>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cce:	4915      	ldr	r1, [pc, #84]	; (8006d24 <xTaskIncrementTick+0x160>)
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d907      	bls.n	8006cf0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e004      	b.n	8006cf0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <xTaskIncrementTick+0x168>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	4a0f      	ldr	r2, [pc, #60]	; (8006d2c <xTaskIncrementTick+0x168>)
 8006cee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <xTaskIncrementTick+0x16c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006cfc:	697b      	ldr	r3, [r7, #20]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000794 	.word	0x20000794
 8006d0c:	20000770 	.word	0x20000770
 8006d10:	20000724 	.word	0x20000724
 8006d14:	20000728 	.word	0x20000728
 8006d18:	20000784 	.word	0x20000784
 8006d1c:	2000078c 	.word	0x2000078c
 8006d20:	20000774 	.word	0x20000774
 8006d24:	20000670 	.word	0x20000670
 8006d28:	2000066c 	.word	0x2000066c
 8006d2c:	2000077c 	.word	0x2000077c
 8006d30:	20000780 	.word	0x20000780

08006d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <vTaskSwitchContext+0xa0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d42:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <vTaskSwitchContext+0xa4>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d48:	e03e      	b.n	8006dc8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <vTaskSwitchContext+0xa4>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d50:	4b22      	ldr	r3, [pc, #136]	; (8006ddc <vTaskSwitchContext+0xa8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	fab3 f383 	clz	r3, r3
 8006d5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	f1c3 031f 	rsb	r3, r3, #31
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	491e      	ldr	r1, [pc, #120]	; (8006de0 <vTaskSwitchContext+0xac>)
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	e7fe      	b.n	8006d8c <vTaskSwitchContext+0x58>
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <vTaskSwitchContext+0xac>)
 8006d9a:	4413      	add	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	3308      	adds	r3, #8
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d104      	bne.n	8006dbe <vTaskSwitchContext+0x8a>
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4a07      	ldr	r2, [pc, #28]	; (8006de4 <vTaskSwitchContext+0xb0>)
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	20000794 	.word	0x20000794
 8006dd8:	20000780 	.word	0x20000780
 8006ddc:	20000774 	.word	0x20000774
 8006de0:	20000670 	.word	0x20000670
 8006de4:	2000066c 	.word	0x2000066c

08006de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d109      	bne.n	8006e0c <vTaskPlaceOnEventList+0x24>
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e7fe      	b.n	8006e0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <vTaskPlaceOnEventList+0x44>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3318      	adds	r3, #24
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fe fbd5 	bl	80055c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	6838      	ldr	r0, [r7, #0]
 8006e1e:	f000 fb8b 	bl	8007538 <prvAddCurrentTaskToDelayedList>
}
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000066c 	.word	0x2000066c

08006e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <xTaskRemoveFromEventList+0x2a>
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e7fe      	b.n	8006e58 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fbe9 	bl	8005636 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e64:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <xTaskRemoveFromEventList+0xac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11c      	bne.n	8006ea6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fbe0 	bl	8005636 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <xTaskRemoveFromEventList+0xb0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <xTaskRemoveFromEventList+0xb0>)
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4a13      	ldr	r2, [pc, #76]	; (8006ee4 <xTaskRemoveFromEventList+0xb4>)
 8006e96:	441a      	add	r2, r3
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	f7fe fb6c 	bl	800557c <vListInsertEnd>
 8006ea4:	e005      	b.n	8006eb2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3318      	adds	r3, #24
 8006eaa:	4619      	mov	r1, r3
 8006eac:	480e      	ldr	r0, [pc, #56]	; (8006ee8 <xTaskRemoveFromEventList+0xb8>)
 8006eae:	f7fe fb65 	bl	800557c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <xTaskRemoveFromEventList+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d905      	bls.n	8006ecc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <xTaskRemoveFromEventList+0xc0>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e001      	b.n	8006ed0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ed0:	697b      	ldr	r3, [r7, #20]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000794 	.word	0x20000794
 8006ee0:	20000774 	.word	0x20000774
 8006ee4:	20000670 	.word	0x20000670
 8006ee8:	2000072c 	.word	0x2000072c
 8006eec:	2000066c 	.word	0x2000066c
 8006ef0:	20000780 	.word	0x20000780

08006ef4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <vTaskInternalSetTimeOutState+0x24>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <vTaskInternalSetTimeOutState+0x28>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	605a      	str	r2, [r3, #4]
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	20000784 	.word	0x20000784
 8006f1c:	20000770 	.word	0x20000770

08006f20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d109      	bne.n	8006f44 <xTaskCheckForTimeOut+0x24>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e7fe      	b.n	8006f42 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <xTaskCheckForTimeOut+0x3e>
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e7fe      	b.n	8006f5c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006f5e:	f000 fc75 	bl	800784c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <xTaskCheckForTimeOut+0xb8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d102      	bne.n	8006f82 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
 8006f80:	e023      	b.n	8006fca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <xTaskCheckForTimeOut+0xbc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d007      	beq.n	8006f9e <xTaskCheckForTimeOut+0x7e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d302      	bcc.n	8006f9e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e015      	b.n	8006fca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d20b      	bcs.n	8006fc0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ff9d 	bl	8006ef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	e004      	b.n	8006fca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fca:	f000 fc6d 	bl	80078a8 <vPortExitCritical>

	return xReturn;
 8006fce:	69fb      	ldr	r3, [r7, #28]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000770 	.word	0x20000770
 8006fdc:	20000784 	.word	0x20000784

08006fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <vTaskMissedYield+0x14>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
}
 8006fea:	bf00      	nop
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20000780 	.word	0x20000780

08006ff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007000:	f000 f852 	bl	80070a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <prvIdleTask+0x28>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d9f9      	bls.n	8007000 <prvIdleTask+0x8>
			{
				taskYIELD();
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <prvIdleTask+0x2c>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800701c:	e7f0      	b.n	8007000 <prvIdleTask+0x8>
 800701e:	bf00      	nop
 8007020:	20000670 	.word	0x20000670
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800702e:	2300      	movs	r3, #0
 8007030:	607b      	str	r3, [r7, #4]
 8007032:	e00c      	b.n	800704e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <prvInitialiseTaskLists+0x60>)
 8007040:	4413      	add	r3, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fa6d 	bl	8005522 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b06      	cmp	r3, #6
 8007052:	d9ef      	bls.n	8007034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007054:	480d      	ldr	r0, [pc, #52]	; (800708c <prvInitialiseTaskLists+0x64>)
 8007056:	f7fe fa64 	bl	8005522 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800705a:	480d      	ldr	r0, [pc, #52]	; (8007090 <prvInitialiseTaskLists+0x68>)
 800705c:	f7fe fa61 	bl	8005522 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007060:	480c      	ldr	r0, [pc, #48]	; (8007094 <prvInitialiseTaskLists+0x6c>)
 8007062:	f7fe fa5e 	bl	8005522 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007066:	480c      	ldr	r0, [pc, #48]	; (8007098 <prvInitialiseTaskLists+0x70>)
 8007068:	f7fe fa5b 	bl	8005522 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800706c:	480b      	ldr	r0, [pc, #44]	; (800709c <prvInitialiseTaskLists+0x74>)
 800706e:	f7fe fa58 	bl	8005522 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007072:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <prvInitialiseTaskLists+0x78>)
 8007074:	4a05      	ldr	r2, [pc, #20]	; (800708c <prvInitialiseTaskLists+0x64>)
 8007076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <prvInitialiseTaskLists+0x7c>)
 800707a:	4a05      	ldr	r2, [pc, #20]	; (8007090 <prvInitialiseTaskLists+0x68>)
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000670 	.word	0x20000670
 800708c:	200006fc 	.word	0x200006fc
 8007090:	20000710 	.word	0x20000710
 8007094:	2000072c 	.word	0x2000072c
 8007098:	20000740 	.word	0x20000740
 800709c:	20000758 	.word	0x20000758
 80070a0:	20000724 	.word	0x20000724
 80070a4:	20000728 	.word	0x20000728

080070a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ae:	e019      	b.n	80070e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070b0:	f000 fbcc 	bl	800784c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <prvCheckTasksWaitingTermination+0x4c>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fab8 	bl	8005636 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <prvCheckTasksWaitingTermination+0x50>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <prvCheckTasksWaitingTermination+0x50>)
 80070ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070d0:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <prvCheckTasksWaitingTermination+0x54>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <prvCheckTasksWaitingTermination+0x54>)
 80070d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070da:	f000 fbe5 	bl	80078a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f80e 	bl	8007100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <prvCheckTasksWaitingTermination+0x54>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e1      	bne.n	80070b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000740 	.word	0x20000740
 80070f8:	2000076c 	.word	0x2000076c
 80070fc:	20000754 	.word	0x20000754

08007100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800710e:	2b00      	cmp	r3, #0
 8007110:	d108      	bne.n	8007124 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fd74 	bl	8007c04 <vPortFree>
				vPortFree( pxTCB );
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fd71 	bl	8007c04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007122:	e017      	b.n	8007154 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800712a:	2b01      	cmp	r3, #1
 800712c:	d103      	bne.n	8007136 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fd68 	bl	8007c04 <vPortFree>
	}
 8007134:	e00e      	b.n	8007154 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800713c:	2b02      	cmp	r3, #2
 800713e:	d009      	beq.n	8007154 <prvDeleteTCB+0x54>
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e7fe      	b.n	8007152 <prvDeleteTCB+0x52>
	}
 8007154:	bf00      	nop
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007162:	4b0c      	ldr	r3, [pc, #48]	; (8007194 <prvResetNextTaskUnblockTime+0x38>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <prvResetNextTaskUnblockTime+0x3c>)
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007174:	e008      	b.n	8007188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b07      	ldr	r3, [pc, #28]	; (8007194 <prvResetNextTaskUnblockTime+0x38>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4a04      	ldr	r2, [pc, #16]	; (8007198 <prvResetNextTaskUnblockTime+0x3c>)
 8007186:	6013      	str	r3, [r2, #0]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	20000724 	.word	0x20000724
 8007198:	2000078c 	.word	0x2000078c

0800719c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071a2:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <xTaskGetSchedulerState+0x34>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071aa:	2301      	movs	r3, #1
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	e008      	b.n	80071c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b0:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <xTaskGetSchedulerState+0x38>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071b8:	2302      	movs	r3, #2
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	e001      	b.n	80071c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071c2:	687b      	ldr	r3, [r7, #4]
	}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000778 	.word	0x20000778
 80071d4:	20000794 	.word	0x20000794

080071d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d069      	beq.n	80072c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f2:	4b36      	ldr	r3, [pc, #216]	; (80072cc <xTaskPriorityInherit+0xf4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d259      	bcs.n	80072b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	db06      	blt.n	8007212 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007204:	4b31      	ldr	r3, [pc, #196]	; (80072cc <xTaskPriorityInherit+0xf4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	f1c3 0207 	rsb	r2, r3, #7
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6959      	ldr	r1, [r3, #20]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4a2b      	ldr	r2, [pc, #172]	; (80072d0 <xTaskPriorityInherit+0xf8>)
 8007224:	4413      	add	r3, r2
 8007226:	4299      	cmp	r1, r3
 8007228:	d13a      	bne.n	80072a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	3304      	adds	r3, #4
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fa01 	bl	8005636 <uxListRemove>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d115      	bne.n	8007266 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	4924      	ldr	r1, [pc, #144]	; (80072d0 <xTaskPriorityInherit+0xf8>)
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xTaskPriorityInherit+0x8e>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	2201      	movs	r2, #1
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	43da      	mvns	r2, r3
 800725c:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <xTaskPriorityInherit+0xfc>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4013      	ands	r3, r2
 8007262:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <xTaskPriorityInherit+0xfc>)
 8007264:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007266:	4b19      	ldr	r3, [pc, #100]	; (80072cc <xTaskPriorityInherit+0xf4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	2201      	movs	r2, #1
 8007276:	409a      	lsls	r2, r3
 8007278:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <xTaskPriorityInherit+0xfc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4313      	orrs	r3, r2
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <xTaskPriorityInherit+0xfc>)
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <xTaskPriorityInherit+0xf8>)
 8007290:	441a      	add	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fe f96f 	bl	800557c <vListInsertEnd>
 800729e:	e004      	b.n	80072aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <xTaskPriorityInherit+0xf4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e008      	b.n	80072c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <xTaskPriorityInherit+0xf4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d201      	bcs.n	80072c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80072be:	2301      	movs	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072c2:	68fb      	ldr	r3, [r7, #12]
	}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000066c 	.word	0x2000066c
 80072d0:	20000670 	.word	0x20000670
 80072d4:	20000774 	.word	0x20000774

080072d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d06c      	beq.n	80073c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072ee:	4b39      	ldr	r3, [pc, #228]	; (80073d4 <xTaskPriorityDisinherit+0xfc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d009      	beq.n	800730c <xTaskPriorityDisinherit+0x34>
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	e7fe      	b.n	800730a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007310:	2b00      	cmp	r3, #0
 8007312:	d109      	bne.n	8007328 <xTaskPriorityDisinherit+0x50>
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	e7fe      	b.n	8007326 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	429a      	cmp	r2, r3
 800733c:	d044      	beq.n	80073c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007342:	2b00      	cmp	r3, #0
 8007344:	d140      	bne.n	80073c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe f973 	bl	8005636 <uxListRemove>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d115      	bne.n	8007382 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	491f      	ldr	r1, [pc, #124]	; (80073d8 <xTaskPriorityDisinherit+0x100>)
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTaskPriorityDisinherit+0xaa>
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	2201      	movs	r2, #1
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	43da      	mvns	r2, r3
 8007378:	4b18      	ldr	r3, [pc, #96]	; (80073dc <xTaskPriorityDisinherit+0x104>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4013      	ands	r3, r2
 800737e:	4a17      	ldr	r2, [pc, #92]	; (80073dc <xTaskPriorityDisinherit+0x104>)
 8007380:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	f1c3 0207 	rsb	r2, r3, #7
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	2201      	movs	r2, #1
 800739c:	409a      	lsls	r2, r3
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <xTaskPriorityDisinherit+0x104>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	4a0d      	ldr	r2, [pc, #52]	; (80073dc <xTaskPriorityDisinherit+0x104>)
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <xTaskPriorityDisinherit+0x100>)
 80073b6:	441a      	add	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fe f8dc 	bl	800557c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073c4:	2301      	movs	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c8:	697b      	ldr	r3, [r7, #20]
	}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2000066c 	.word	0x2000066c
 80073d8:	20000670 	.word	0x20000670
 80073dc:	20000774 	.word	0x20000774

080073e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80073ee:	2301      	movs	r3, #1
 80073f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8081 	beq.w	80074fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e7fe      	b.n	8007414 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d902      	bls.n	8007426 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	e002      	b.n	800742c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	429a      	cmp	r2, r3
 8007434:	d062      	beq.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	429a      	cmp	r2, r3
 800743e:	d15d      	bne.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007440:	4b30      	ldr	r3, [pc, #192]	; (8007504 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	429a      	cmp	r2, r3
 8007448:	d109      	bne.n	800745e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	e7fe      	b.n	800745c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b00      	cmp	r3, #0
 8007470:	db04      	blt.n	800747c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f1c3 0207 	rsb	r2, r3, #7
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	6959      	ldr	r1, [r3, #20]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800748c:	4413      	add	r3, r2
 800748e:	4299      	cmp	r1, r3
 8007490:	d134      	bne.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	3304      	adds	r3, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe f8cd 	bl	8005636 <uxListRemove>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d115      	bne.n	80074ce <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4918      	ldr	r1, [pc, #96]	; (8007508 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <vTaskPriorityDisinheritAfterTimeout+0xee>
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	2201      	movs	r2, #1
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43da      	mvns	r2, r3
 80074c4:	4b11      	ldr	r3, [pc, #68]	; (800750c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4013      	ands	r3, r2
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80074cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	2201      	movs	r2, #1
 80074d4:	409a      	lsls	r2, r3
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4313      	orrs	r3, r2
 80074dc:	4a0b      	ldr	r2, [pc, #44]	; (800750c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4a06      	ldr	r2, [pc, #24]	; (8007508 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80074ee:	441a      	add	r2, r3
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f7fe f840 	bl	800557c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074fc:	bf00      	nop
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	2000066c 	.word	0x2000066c
 8007508:	20000670 	.word	0x20000670
 800750c:	20000774 	.word	0x20000774

08007510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <pvTaskIncrementMutexHeldCount+0x24>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d004      	beq.n	8007526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <pvTaskIncrementMutexHeldCount+0x24>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007522:	3201      	adds	r2, #1
 8007524:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007526:	4b03      	ldr	r3, [pc, #12]	; (8007534 <pvTaskIncrementMutexHeldCount+0x24>)
 8007528:	681b      	ldr	r3, [r3, #0]
	}
 800752a:	4618      	mov	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	2000066c 	.word	0x2000066c

08007538 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007548:	4b28      	ldr	r3, [pc, #160]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3304      	adds	r3, #4
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe f871 	bl	8005636 <uxListRemove>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800755a:	4b24      	ldr	r3, [pc, #144]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	2201      	movs	r2, #1
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43da      	mvns	r2, r3
 8007568:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4013      	ands	r3, r2
 800756e:	4a20      	ldr	r2, [pc, #128]	; (80075f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d10a      	bne.n	8007590 <prvAddCurrentTaskToDelayedList+0x58>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007580:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	481a      	ldr	r0, [pc, #104]	; (80075f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800758a:	f7fd fff7 	bl	800557c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800758e:	e026      	b.n	80075de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4413      	add	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007598:	4b14      	ldr	r3, [pc, #80]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d209      	bcs.n	80075bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fe f805 	bl	80055c4 <vListInsert>
}
 80075ba:	e010      	b.n	80075de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4619      	mov	r1, r3
 80075c8:	4610      	mov	r0, r2
 80075ca:	f7fd fffb 	bl	80055c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075ce:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d202      	bcs.n	80075de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80075d8:	4a09      	ldr	r2, [pc, #36]	; (8007600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6013      	str	r3, [r2, #0]
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000770 	.word	0x20000770
 80075ec:	2000066c 	.word	0x2000066c
 80075f0:	20000774 	.word	0x20000774
 80075f4:	20000758 	.word	0x20000758
 80075f8:	20000728 	.word	0x20000728
 80075fc:	20000724 	.word	0x20000724
 8007600:	2000078c 	.word	0x2000078c

08007604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3b04      	subs	r3, #4
 8007614:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800761c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3b04      	subs	r3, #4
 8007622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f023 0201 	bic.w	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3b04      	subs	r3, #4
 8007632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007634:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <pxPortInitialiseStack+0x64>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3b14      	subs	r3, #20
 800763e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3b04      	subs	r3, #4
 800764a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f06f 0202 	mvn.w	r2, #2
 8007652:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3b20      	subs	r3, #32
 8007658:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	0800766d 	.word	0x0800766d

0800766c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007676:	4b11      	ldr	r3, [pc, #68]	; (80076bc <prvTaskExitError+0x50>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d009      	beq.n	8007694 <prvTaskExitError+0x28>
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e7fe      	b.n	8007692 <prvTaskExitError+0x26>
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076a6:	bf00      	nop
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0fc      	beq.n	80076a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	2000000c 	.word	0x2000000c

080076c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076c0:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <pxCurrentTCBConst2>)
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	6808      	ldr	r0, [r1, #0]
 80076c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ca:	f380 8809 	msr	PSP, r0
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8811 	msr	BASEPRI, r0
 80076da:	4770      	bx	lr
 80076dc:	f3af 8000 	nop.w

080076e0 <pxCurrentTCBConst2>:
 80076e0:	2000066c 	.word	0x2000066c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076e8:	4808      	ldr	r0, [pc, #32]	; (800770c <prvPortStartFirstTask+0x24>)
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	6800      	ldr	r0, [r0, #0]
 80076ee:	f380 8808 	msr	MSP, r0
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f380 8814 	msr	CONTROL, r0
 80076fa:	b662      	cpsie	i
 80076fc:	b661      	cpsie	f
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	df00      	svc	0
 8007708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800770a:	bf00      	nop
 800770c:	e000ed08 	.word	0xe000ed08

08007710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007716:	4b44      	ldr	r3, [pc, #272]	; (8007828 <xPortStartScheduler+0x118>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a44      	ldr	r2, [pc, #272]	; (800782c <xPortStartScheduler+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d109      	bne.n	8007734 <xPortStartScheduler+0x24>
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	e7fe      	b.n	8007732 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007734:	4b3c      	ldr	r3, [pc, #240]	; (8007828 <xPortStartScheduler+0x118>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a3d      	ldr	r2, [pc, #244]	; (8007830 <xPortStartScheduler+0x120>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d109      	bne.n	8007752 <xPortStartScheduler+0x42>
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e7fe      	b.n	8007750 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007752:	4b38      	ldr	r3, [pc, #224]	; (8007834 <xPortStartScheduler+0x124>)
 8007754:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	22ff      	movs	r2, #255	; 0xff
 8007762:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007774:	b2da      	uxtb	r2, r3
 8007776:	4b30      	ldr	r3, [pc, #192]	; (8007838 <xPortStartScheduler+0x128>)
 8007778:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800777a:	4b30      	ldr	r3, [pc, #192]	; (800783c <xPortStartScheduler+0x12c>)
 800777c:	2207      	movs	r2, #7
 800777e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007780:	e009      	b.n	8007796 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007782:	4b2e      	ldr	r3, [pc, #184]	; (800783c <xPortStartScheduler+0x12c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3b01      	subs	r3, #1
 8007788:	4a2c      	ldr	r2, [pc, #176]	; (800783c <xPortStartScheduler+0x12c>)
 800778a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779e:	2b80      	cmp	r3, #128	; 0x80
 80077a0:	d0ef      	beq.n	8007782 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077a2:	4b26      	ldr	r3, [pc, #152]	; (800783c <xPortStartScheduler+0x12c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f1c3 0307 	rsb	r3, r3, #7
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d009      	beq.n	80077c2 <xPortStartScheduler+0xb2>
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60bb      	str	r3, [r7, #8]
 80077c0:	e7fe      	b.n	80077c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077c2:	4b1e      	ldr	r3, [pc, #120]	; (800783c <xPortStartScheduler+0x12c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	4a1c      	ldr	r2, [pc, #112]	; (800783c <xPortStartScheduler+0x12c>)
 80077ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077cc:	4b1b      	ldr	r3, [pc, #108]	; (800783c <xPortStartScheduler+0x12c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077d4:	4a19      	ldr	r2, [pc, #100]	; (800783c <xPortStartScheduler+0x12c>)
 80077d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077e0:	4b17      	ldr	r3, [pc, #92]	; (8007840 <xPortStartScheduler+0x130>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a16      	ldr	r2, [pc, #88]	; (8007840 <xPortStartScheduler+0x130>)
 80077e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077ec:	4b14      	ldr	r3, [pc, #80]	; (8007840 <xPortStartScheduler+0x130>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a13      	ldr	r2, [pc, #76]	; (8007840 <xPortStartScheduler+0x130>)
 80077f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077f8:	f000 f8d6 	bl	80079a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <xPortStartScheduler+0x134>)
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007802:	f000 f8f5 	bl	80079f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007806:	4b10      	ldr	r3, [pc, #64]	; (8007848 <xPortStartScheduler+0x138>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a0f      	ldr	r2, [pc, #60]	; (8007848 <xPortStartScheduler+0x138>)
 800780c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007810:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007812:	f7ff ff69 	bl	80076e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007816:	f7ff fa8d 	bl	8006d34 <vTaskSwitchContext>
	prvTaskExitError();
 800781a:	f7ff ff27 	bl	800766c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed00 	.word	0xe000ed00
 800782c:	410fc271 	.word	0x410fc271
 8007830:	410fc270 	.word	0x410fc270
 8007834:	e000e400 	.word	0xe000e400
 8007838:	20000798 	.word	0x20000798
 800783c:	2000079c 	.word	0x2000079c
 8007840:	e000ed20 	.word	0xe000ed20
 8007844:	2000000c 	.word	0x2000000c
 8007848:	e000ef34 	.word	0xe000ef34

0800784c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <vPortEnterCritical+0x54>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3301      	adds	r3, #1
 800786a:	4a0d      	ldr	r2, [pc, #52]	; (80078a0 <vPortEnterCritical+0x54>)
 800786c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <vPortEnterCritical+0x54>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d10e      	bne.n	8007894 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <vPortEnterCritical+0x58>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <vPortEnterCritical+0x48>
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	e7fe      	b.n	8007892 <vPortEnterCritical+0x46>
	}
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	2000000c 	.word	0x2000000c
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <vPortExitCritical+0x4c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <vPortExitCritical+0x22>
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	e7fe      	b.n	80078c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <vPortExitCritical+0x4c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <vPortExitCritical+0x4c>)
 80078d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078d4:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <vPortExitCritical+0x4c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <vPortExitCritical+0x3e>
 80078dc:	2300      	movs	r3, #0
 80078de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	2000000c 	.word	0x2000000c
	...

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f01e 0f10 	tst.w	lr, #16
 8007910:	bf08      	it	eq
 8007912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007924:	f380 8811 	msr	BASEPRI, r0
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f7ff fa00 	bl	8006d34 <vTaskSwitchContext>
 8007934:	f04f 0000 	mov.w	r0, #0
 8007938:	f380 8811 	msr	BASEPRI, r0
 800793c:	bc09      	pop	{r0, r3}
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007946:	f01e 0f10 	tst.w	lr, #16
 800794a:	bf08      	it	eq
 800794c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007950:	f380 8809 	msr	PSP, r0
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst>:
 8007960:	2000066c 	.word	0x2000066c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007980:	f7ff f920 	bl	8006bc4 <xTaskIncrementTick>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800798a:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <SysTick_Handler+0x3c>)
 800798c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <vPortSetupTimerInterrupt+0x34>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079b2:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <vPortSetupTimerInterrupt+0x38>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079b8:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <vPortSetupTimerInterrupt+0x3c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a0a      	ldr	r2, [pc, #40]	; (80079e8 <vPortSetupTimerInterrupt+0x40>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	099b      	lsrs	r3, r3, #6
 80079c4:	4a09      	ldr	r2, [pc, #36]	; (80079ec <vPortSetupTimerInterrupt+0x44>)
 80079c6:	3b01      	subs	r3, #1
 80079c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ca:	4b04      	ldr	r3, [pc, #16]	; (80079dc <vPortSetupTimerInterrupt+0x34>)
 80079cc:	2207      	movs	r2, #7
 80079ce:	601a      	str	r2, [r3, #0]
}
 80079d0:	bf00      	nop
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	e000e010 	.word	0xe000e010
 80079e0:	e000e018 	.word	0xe000e018
 80079e4:	20000000 	.word	0x20000000
 80079e8:	10624dd3 	.word	0x10624dd3
 80079ec:	e000e014 	.word	0xe000e014

080079f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a00 <vPortEnableVFP+0x10>
 80079f4:	6801      	ldr	r1, [r0, #0]
 80079f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079fa:	6001      	str	r1, [r0, #0]
 80079fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079fe:	bf00      	nop
 8007a00:	e000ed88 	.word	0xe000ed88

08007a04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a0a:	f3ef 8305 	mrs	r3, IPSR
 8007a0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b0f      	cmp	r3, #15
 8007a14:	d913      	bls.n	8007a3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a16:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <vPortValidateInterruptPriority+0x6c>)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a20:	4b14      	ldr	r3, [pc, #80]	; (8007a74 <vPortValidateInterruptPriority+0x70>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	7afa      	ldrb	r2, [r7, #11]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d209      	bcs.n	8007a3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	e7fe      	b.n	8007a3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a3e:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <vPortValidateInterruptPriority+0x74>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <vPortValidateInterruptPriority+0x78>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d909      	bls.n	8007a62 <vPortValidateInterruptPriority+0x5e>
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	e7fe      	b.n	8007a60 <vPortValidateInterruptPriority+0x5c>
	}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	e000e3f0 	.word	0xe000e3f0
 8007a74:	20000798 	.word	0x20000798
 8007a78:	e000ed0c 	.word	0xe000ed0c
 8007a7c:	2000079c 	.word	0x2000079c

08007a80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a8c:	f7fe ffce 	bl	8006a2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a90:	4b57      	ldr	r3, [pc, #348]	; (8007bf0 <pvPortMalloc+0x170>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a98:	f000 f90c 	bl	8007cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a9c:	4b55      	ldr	r3, [pc, #340]	; (8007bf4 <pvPortMalloc+0x174>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 808c 	bne.w	8007bc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01c      	beq.n	8007aea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d013      	beq.n	8007aea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f023 0307 	bic.w	r3, r3, #7
 8007ac8:	3308      	adds	r3, #8
 8007aca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <pvPortMalloc+0x6a>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e7fe      	b.n	8007ae8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d068      	beq.n	8007bc2 <pvPortMalloc+0x142>
 8007af0:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <pvPortMalloc+0x178>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d863      	bhi.n	8007bc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007afa:	4b40      	ldr	r3, [pc, #256]	; (8007bfc <pvPortMalloc+0x17c>)
 8007afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007afe:	4b3f      	ldr	r3, [pc, #252]	; (8007bfc <pvPortMalloc+0x17c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b04:	e004      	b.n	8007b10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d903      	bls.n	8007b22 <pvPortMalloc+0xa2>
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f1      	bne.n	8007b06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b22:	4b33      	ldr	r3, [pc, #204]	; (8007bf0 <pvPortMalloc+0x170>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d04a      	beq.n	8007bc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2208      	movs	r2, #8
 8007b32:	4413      	add	r3, r2
 8007b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	1ad2      	subs	r2, r2, r3
 8007b46:	2308      	movs	r3, #8
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d91e      	bls.n	8007b8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <pvPortMalloc+0xf4>
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	e7fe      	b.n	8007b72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	1ad2      	subs	r2, r2, r3
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b86:	69b8      	ldr	r0, [r7, #24]
 8007b88:	f000 f8f6 	bl	8007d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <pvPortMalloc+0x178>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <pvPortMalloc+0x178>)
 8007b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b9a:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <pvPortMalloc+0x178>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <pvPortMalloc+0x180>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d203      	bcs.n	8007bae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <pvPortMalloc+0x178>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <pvPortMalloc+0x180>)
 8007bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <pvPortMalloc+0x174>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bc2:	f7fe ff41 	bl	8006a48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <pvPortMalloc+0x164>
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e7fe      	b.n	8007be2 <pvPortMalloc+0x162>
	return pvReturn;
 8007be4:	69fb      	ldr	r3, [r7, #28]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3728      	adds	r7, #40	; 0x28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200087a8 	.word	0x200087a8
 8007bf4:	200087b4 	.word	0x200087b4
 8007bf8:	200087ac 	.word	0x200087ac
 8007bfc:	200087a0 	.word	0x200087a0
 8007c00:	200087b0 	.word	0x200087b0

08007c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d046      	beq.n	8007ca4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c16:	2308      	movs	r3, #8
 8007c18:	425b      	negs	r3, r3
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	4b20      	ldr	r3, [pc, #128]	; (8007cac <vPortFree+0xa8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <vPortFree+0x42>
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e7fe      	b.n	8007c44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <vPortFree+0x5e>
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	e7fe      	b.n	8007c60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	4b11      	ldr	r3, [pc, #68]	; (8007cac <vPortFree+0xa8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d019      	beq.n	8007ca4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d115      	bne.n	8007ca4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <vPortFree+0xa8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	43db      	mvns	r3, r3
 8007c82:	401a      	ands	r2, r3
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c88:	f7fe fed0 	bl	8006a2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <vPortFree+0xac>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4413      	add	r3, r2
 8007c96:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <vPortFree+0xac>)
 8007c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c9a:	6938      	ldr	r0, [r7, #16]
 8007c9c:	f000 f86c 	bl	8007d78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ca0:	f7fe fed2 	bl	8006a48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ca4:	bf00      	nop
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	200087b4 	.word	0x200087b4
 8007cb0:	200087ac 	.word	0x200087ac

08007cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <prvHeapInit+0xac>)
 8007cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3307      	adds	r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <prvHeapInit+0xac>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cec:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <prvHeapInit+0xb0>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <prvHeapInit+0xb0>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d00:	2208      	movs	r2, #8
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <prvHeapInit+0xb4>)
 8007d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <prvHeapInit+0xb4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <prvHeapInit+0xb4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <prvHeapInit+0xb4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <prvHeapInit+0xb8>)
 8007d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <prvHeapInit+0xbc>)
 8007d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <prvHeapInit+0xc0>)
 8007d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	200007a0 	.word	0x200007a0
 8007d64:	200087a0 	.word	0x200087a0
 8007d68:	200087a8 	.word	0x200087a8
 8007d6c:	200087b0 	.word	0x200087b0
 8007d70:	200087ac 	.word	0x200087ac
 8007d74:	200087b4 	.word	0x200087b4

08007d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d80:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <prvInsertBlockIntoFreeList+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e002      	b.n	8007d8c <prvInsertBlockIntoFreeList+0x14>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d8f7      	bhi.n	8007d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	4413      	add	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d108      	bne.n	8007dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	441a      	add	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d118      	bne.n	8007e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d00d      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	441a      	add	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e008      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e003      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	200087a0 	.word	0x200087a0
 8007e28:	200087a8 	.word	0x200087a8

08007e2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f002 fa99 	bl	800a378 <tcpip_send_msg_wait_sem>
 8007e46:	4603      	mov	r3, r0
 8007e48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d103      	bne.n	8007e5a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007e58:	e001      	b.n	8007e5e <netconn_apimsg+0x32>
  }
  return err;
 8007e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08c      	sub	sp, #48	; 0x30
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	603a      	str	r2, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
 8007e74:	460b      	mov	r3, r1
 8007e76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f91f 	bl	80090c0 <netconn_alloc>
 8007e82:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d054      	beq.n	8007f34 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007e8a:	79bb      	ldrb	r3, [r7, #6]
 8007e8c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	4619      	mov	r1, r3
 8007e98:	4829      	ldr	r0, [pc, #164]	; (8007f40 <netconn_new_with_proto_and_callback+0xd8>)
 8007e9a:	f7ff ffc7 	bl	8007e2c <netconn_apimsg>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007ea4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d043      	beq.n	8007f34 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <netconn_new_with_proto_and_callback+0x58>
 8007eb4:	4b23      	ldr	r3, [pc, #140]	; (8007f44 <netconn_new_with_proto_and_callback+0xdc>)
 8007eb6:	22a3      	movs	r2, #163	; 0xa3
 8007eb8:	4923      	ldr	r1, [pc, #140]	; (8007f48 <netconn_new_with_proto_and_callback+0xe0>)
 8007eba:	4824      	ldr	r0, [pc, #144]	; (8007f4c <netconn_new_with_proto_and_callback+0xe4>)
 8007ebc:	f010 f9fe 	bl	80182bc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	3310      	adds	r3, #16
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f010 f85a 	bl	8017f7e <sys_mbox_valid>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <netconn_new_with_proto_and_callback+0x74>
 8007ed0:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <netconn_new_with_proto_and_callback+0xdc>)
 8007ed2:	22a4      	movs	r2, #164	; 0xa4
 8007ed4:	491e      	ldr	r1, [pc, #120]	; (8007f50 <netconn_new_with_proto_and_callback+0xe8>)
 8007ed6:	481d      	ldr	r0, [pc, #116]	; (8007f4c <netconn_new_with_proto_and_callback+0xe4>)
 8007ed8:	f010 f9f0 	bl	80182bc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	3314      	adds	r3, #20
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f010 f84c 	bl	8017f7e <sys_mbox_valid>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <netconn_new_with_proto_and_callback+0x90>
 8007eec:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <netconn_new_with_proto_and_callback+0xdc>)
 8007eee:	22a6      	movs	r2, #166	; 0xa6
 8007ef0:	4918      	ldr	r1, [pc, #96]	; (8007f54 <netconn_new_with_proto_and_callback+0xec>)
 8007ef2:	4816      	ldr	r0, [pc, #88]	; (8007f4c <netconn_new_with_proto_and_callback+0xe4>)
 8007ef4:	f010 f9e2 	bl	80182bc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	330c      	adds	r3, #12
 8007efc:	4618      	mov	r0, r3
 8007efe:	f010 f8cf 	bl	80180a0 <sys_sem_valid>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d105      	bne.n	8007f14 <netconn_new_with_proto_and_callback+0xac>
 8007f08:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <netconn_new_with_proto_and_callback+0xdc>)
 8007f0a:	22a9      	movs	r2, #169	; 0xa9
 8007f0c:	4912      	ldr	r1, [pc, #72]	; (8007f58 <netconn_new_with_proto_and_callback+0xf0>)
 8007f0e:	480f      	ldr	r0, [pc, #60]	; (8007f4c <netconn_new_with_proto_and_callback+0xe4>)
 8007f10:	f010 f9d4 	bl	80182bc <iprintf>
      sys_sem_free(&conn->op_completed);
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	330c      	adds	r3, #12
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f010 f8b4 	bl	8018086 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	3310      	adds	r3, #16
 8007f22:	4618      	mov	r0, r3
 8007f24:	f00f ffa4 	bl	8017e70 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007f28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f2a:	2007      	movs	r0, #7
 8007f2c:	f003 fe82 	bl	800bc34 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3730      	adds	r7, #48	; 0x30
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	08009095 	.word	0x08009095
 8007f44:	0801939c 	.word	0x0801939c
 8007f48:	080193d0 	.word	0x080193d0
 8007f4c:	080193f4 	.word	0x080193f4
 8007f50:	0801941c 	.word	0x0801941c
 8007f54:	08019434 	.word	0x08019434
 8007f58:	08019458 	.word	0x08019458

08007f5c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	; 0x30
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e014      	b.n	8007f98 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007f72:	2329      	movs	r3, #41	; 0x29
 8007f74:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <netconn_prepare_delete+0x44>)
 8007f7e:	f7ff ff55 	bl	8007e2c <netconn_apimsg>
 8007f82:	4603      	mov	r3, r0
 8007f84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007f88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <netconn_prepare_delete+0x3a>
    return err;
 8007f90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f94:	e000      	b.n	8007f98 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3730      	adds	r7, #48	; 0x30
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	080095f9 	.word	0x080095f9

08007fa4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <netconn_delete+0x12>
    return ERR_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	e00d      	b.n	8007fd2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff ffd0 	bl	8007f5c <netconn_prepare_delete>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <netconn_delete+0x2a>
    netconn_free(conn);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f8e7 	bl	800919c <netconn_free>
  }
  return err;
 8007fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d109      	bne.n	8008004 <netconn_bind+0x28>
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <netconn_bind+0x5c>)
 8007ff2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007ff6:	4911      	ldr	r1, [pc, #68]	; (800803c <netconn_bind+0x60>)
 8007ff8:	4811      	ldr	r0, [pc, #68]	; (8008040 <netconn_bind+0x64>)
 8007ffa:	f010 f95f 	bl	80182bc <iprintf>
 8007ffe:	f06f 030f 	mvn.w	r3, #15
 8008002:	e015      	b.n	8008030 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800800a:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <netconn_bind+0x68>)
 800800c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800801a:	f107 0314 	add.w	r3, r7, #20
 800801e:	4619      	mov	r1, r3
 8008020:	4809      	ldr	r0, [pc, #36]	; (8008048 <netconn_bind+0x6c>)
 8008022:	f7ff ff03 	bl	8007e2c <netconn_apimsg>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800802c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008030:	4618      	mov	r0, r3
 8008032:	3738      	adds	r7, #56	; 0x38
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	0801939c 	.word	0x0801939c
 800803c:	080194d4 	.word	0x080194d4
 8008040:	080193f4 	.word	0x080193f4
 8008044:	08028368 	.word	0x08028368
 8008048:	080097c1 	.word	0x080097c1

0800804c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08c      	sub	sp, #48	; 0x30
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <netconn_listen_with_backlog+0x26>
 800805e:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <netconn_listen_with_backlog+0x48>)
 8008060:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008064:	490c      	ldr	r1, [pc, #48]	; (8008098 <netconn_listen_with_backlog+0x4c>)
 8008066:	480d      	ldr	r0, [pc, #52]	; (800809c <netconn_listen_with_backlog+0x50>)
 8008068:	f010 f928 	bl	80182bc <iprintf>
 800806c:	f06f 030f 	mvn.w	r3, #15
 8008070:	e00c      	b.n	800808c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	4619      	mov	r1, r3
 800807c:	4808      	ldr	r0, [pc, #32]	; (80080a0 <netconn_listen_with_backlog+0x54>)
 800807e:	f7ff fed5 	bl	8007e2c <netconn_apimsg>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008088:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800808c:	4618      	mov	r0, r3
 800808e:	3730      	adds	r7, #48	; 0x30
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0801939c 	.word	0x0801939c
 8008098:	08019554 	.word	0x08019554
 800809c:	080193f4 	.word	0x080193f4
 80080a0:	08009839 	.word	0x08009839

080080a4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <netconn_accept+0x24>
 80080b4:	4b3d      	ldr	r3, [pc, #244]	; (80081ac <netconn_accept+0x108>)
 80080b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80080ba:	493d      	ldr	r1, [pc, #244]	; (80081b0 <netconn_accept+0x10c>)
 80080bc:	483d      	ldr	r0, [pc, #244]	; (80081b4 <netconn_accept+0x110>)
 80080be:	f010 f8fd 	bl	80182bc <iprintf>
 80080c2:	f06f 030f 	mvn.w	r3, #15
 80080c6:	e06c      	b.n	80081a2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <netconn_accept+0x44>
 80080d4:	4b35      	ldr	r3, [pc, #212]	; (80081ac <netconn_accept+0x108>)
 80080d6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80080da:	4937      	ldr	r1, [pc, #220]	; (80081b8 <netconn_accept+0x114>)
 80080dc:	4835      	ldr	r0, [pc, #212]	; (80081b4 <netconn_accept+0x110>)
 80080de:	f010 f8ed 	bl	80182bc <iprintf>
 80080e2:	f06f 030f 	mvn.w	r3, #15
 80080e6:	e05c      	b.n	80081a2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fb6c 	bl	80087c6 <netconn_err>
 80080ee:	4603      	mov	r3, r0
 80080f0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80080f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80080fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080fe:	e050      	b.n	80081a2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3314      	adds	r3, #20
 8008104:	4618      	mov	r0, r3
 8008106:	f00f ff3a 	bl	8017f7e <sys_mbox_valid>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <netconn_accept+0x78>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7f1b      	ldrb	r3, [r3, #28]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800811c:	f06f 030e 	mvn.w	r3, #14
 8008120:	e03f      	b.n	80081a2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7f1b      	ldrb	r3, [r3, #28]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3314      	adds	r3, #20
 8008132:	f107 020c 	add.w	r2, r7, #12
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f00f ff04 	bl	8017f46 <sys_arch_mbox_tryfetch>
 800813e:	4603      	mov	r3, r0
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008144:	d10a      	bne.n	800815c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008146:	f06f 0306 	mvn.w	r3, #6
 800814a:	e02a      	b.n	80081a2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3314      	adds	r3, #20
 8008150:	f107 010c 	add.w	r1, r7, #12
 8008154:	2200      	movs	r2, #0
 8008156:	4618      	mov	r0, r3
 8008158:	f00f feb6 	bl	8017ec8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <netconn_accept+0xcc>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2200      	movs	r2, #0
 800816a:	2101      	movs	r1, #1
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f107 0213 	add.w	r2, r7, #19
 8008176:	4611      	mov	r1, r2
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fb71 	bl	8008860 <lwip_netconn_is_err_msg>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008184:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008188:	e00b      	b.n	80081a2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008190:	f06f 030e 	mvn.w	r3, #14
 8008194:	e005      	b.n	80081a2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80081a0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	0801939c 	.word	0x0801939c
 80081b0:	08019574 	.word	0x08019574
 80081b4:	080193f4 	.word	0x080193f4
 80081b8:	08019594 	.word	0x08019594

080081bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d109      	bne.n	80081e8 <netconn_recv_data+0x2c>
 80081d4:	4b58      	ldr	r3, [pc, #352]	; (8008338 <netconn_recv_data+0x17c>)
 80081d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80081da:	4958      	ldr	r1, [pc, #352]	; (800833c <netconn_recv_data+0x180>)
 80081dc:	4858      	ldr	r0, [pc, #352]	; (8008340 <netconn_recv_data+0x184>)
 80081de:	f010 f86d 	bl	80182bc <iprintf>
 80081e2:	f06f 030f 	mvn.w	r3, #15
 80081e6:	e0a2      	b.n	800832e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <netconn_recv_data+0x4c>
 80081f4:	4b50      	ldr	r3, [pc, #320]	; (8008338 <netconn_recv_data+0x17c>)
 80081f6:	f240 224a 	movw	r2, #586	; 0x24a
 80081fa:	4952      	ldr	r1, [pc, #328]	; (8008344 <netconn_recv_data+0x188>)
 80081fc:	4850      	ldr	r0, [pc, #320]	; (8008340 <netconn_recv_data+0x184>)
 80081fe:	f010 f85d 	bl	80182bc <iprintf>
 8008202:	f06f 030f 	mvn.w	r3, #15
 8008206:	e092      	b.n	800832e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3310      	adds	r3, #16
 800820c:	4618      	mov	r0, r3
 800820e:	f00f feb6 	bl	8017f7e <sys_mbox_valid>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10e      	bne.n	8008236 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 fad4 	bl	80087c6 <netconn_err>
 800821e:	4603      	mov	r3, r0
 8008220:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008222:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800822a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800822e:	e07e      	b.n	800832e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008230:	f06f 030a 	mvn.w	r3, #10
 8008234:	e07b      	b.n	800832e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	7f1b      	ldrb	r3, [r3, #28]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10f      	bne.n	8008262 <netconn_recv_data+0xa6>
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	f003 0304 	and.w	r3, r3, #4
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	7f1b      	ldrb	r3, [r3, #28]
 8008250:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d023      	beq.n	80082aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3310      	adds	r3, #16
 8008266:	f107 0218 	add.w	r2, r7, #24
 800826a:	4611      	mov	r1, r2
 800826c:	4618      	mov	r0, r3
 800826e:	f00f fe6a 	bl	8017f46 <sys_arch_mbox_tryfetch>
 8008272:	4603      	mov	r3, r0
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d11f      	bne.n	80082ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 faa3 	bl	80087c6 <netconn_err>
 8008280:	4603      	mov	r3, r0
 8008282:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008284:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800828c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008290:	e04d      	b.n	800832e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	7f1b      	ldrb	r3, [r3, #28]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800829e:	f06f 030a 	mvn.w	r3, #10
 80082a2:	e044      	b.n	800832e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80082a4:	f06f 0306 	mvn.w	r3, #6
 80082a8:	e041      	b.n	800832e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3310      	adds	r3, #16
 80082ae:	f107 0118 	add.w	r1, r7, #24
 80082b2:	2200      	movs	r2, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f00f fe07 	bl	8017ec8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d117      	bne.n	80082f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f107 0217 	add.w	r2, r7, #23
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fac6 	bl	8008860 <lwip_netconn_is_err_msg>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d009      	beq.n	80082ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80082da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082de:	f113 0f0f 	cmn.w	r3, #15
 80082e2:	d101      	bne.n	80082e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e022      	b.n	800832e <netconn_recv_data+0x172>
      }
      return err;
 80082e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082ec:	e01f      	b.n	800832e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	891b      	ldrh	r3, [r3, #8]
 80082f2:	83fb      	strh	r3, [r7, #30]
 80082f4:	e00d      	b.n	8008312 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <netconn_recv_data+0x14e>
 80082fc:	4b0e      	ldr	r3, [pc, #56]	; (8008338 <netconn_recv_data+0x17c>)
 80082fe:	f240 2291 	movw	r2, #657	; 0x291
 8008302:	4911      	ldr	r1, [pc, #68]	; (8008348 <netconn_recv_data+0x18c>)
 8008304:	480e      	ldr	r0, [pc, #56]	; (8008340 <netconn_recv_data+0x184>)
 8008306:	f00f ffd9 	bl	80182bc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	891b      	ldrh	r3, [r3, #8]
 8008310:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <netconn_recv_data+0x16a>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	8bfa      	ldrh	r2, [r7, #30]
 8008320:	2101      	movs	r1, #1
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	0801939c 	.word	0x0801939c
 800833c:	080195b4 	.word	0x080195b4
 8008340:	080193f4 	.word	0x080193f4
 8008344:	080195d4 	.word	0x080195d4
 8008348:	080195f0 	.word	0x080195f0

0800834c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <netconn_tcp_recvd_msg+0x1e>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008366:	2b10      	cmp	r3, #16
 8008368:	d009      	beq.n	800837e <netconn_tcp_recvd_msg+0x32>
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <netconn_tcp_recvd_msg+0x50>)
 800836c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008370:	490b      	ldr	r1, [pc, #44]	; (80083a0 <netconn_tcp_recvd_msg+0x54>)
 8008372:	480c      	ldr	r0, [pc, #48]	; (80083a4 <netconn_tcp_recvd_msg+0x58>)
 8008374:	f00f ffa2 	bl	80182bc <iprintf>
 8008378:	f06f 030f 	mvn.w	r3, #15
 800837c:	e00a      	b.n	8008394 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4806      	ldr	r0, [pc, #24]	; (80083a8 <netconn_tcp_recvd_msg+0x5c>)
 800838e:	f7ff fd4d 	bl	8007e2c <netconn_apimsg>
 8008392:	4603      	mov	r3, r0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	0801939c 	.word	0x0801939c
 80083a0:	080195fc 	.word	0x080195fc
 80083a4:	080193f4 	.word	0x080193f4
 80083a8:	08009969 	.word	0x08009969

080083ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b090      	sub	sp, #64	; 0x40
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3310      	adds	r3, #16
 80083be:	4618      	mov	r0, r3
 80083c0:	f00f fddd 	bl	8017f7e <sys_mbox_valid>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80083ca:	f06f 030a 	mvn.w	r3, #10
 80083ce:	e06d      	b.n	80084ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	7f1b      	ldrb	r3, [r3, #28]
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da07      	bge.n	80083ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	7f1b      	ldrb	r3, [r3, #28]
 80083de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80083e8:	e039      	b.n	800845e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	461a      	mov	r2, r3
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fee3 	bl	80081bc <netconn_recv_data>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80083fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008404:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008408:	e050      	b.n	80084ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	f003 0308 	and.w	r3, r3, #8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10e      	bne.n	8008438 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <netconn_recv_data_tcp+0x7a>
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	891b      	ldrh	r3, [r3, #8]
 8008424:	e000      	b.n	8008428 <netconn_recv_data_tcp+0x7c>
 8008426:	2301      	movs	r3, #1
 8008428:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800842a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800842c:	f107 0214 	add.w	r2, r7, #20
 8008430:	4619      	mov	r1, r3
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff ff8a 	bl	800834c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d134      	bne.n	80084a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	7f1b      	ldrb	r3, [r3, #28]
 800844c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008456:	f06f 0306 	mvn.w	r3, #6
 800845a:	e027      	b.n	80084ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800845c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <netconn_recv_data_tcp+0xc6>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	2200      	movs	r2, #0
 800846c:	2101      	movs	r1, #1
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10f      	bne.n	800849a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f9a3 	bl	80087c6 <netconn_err>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008486:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <netconn_recv_data_tcp+0xe8>
          return err;
 800848e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008492:	e00b      	b.n	80084ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008494:	f06f 030d 	mvn.w	r3, #13
 8008498:	e008      	b.n	80084ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800849a:	2101      	movs	r1, #1
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 f955 	bl	800874c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80084a2:	f06f 030e 	mvn.w	r3, #14
 80084a6:	e001      	b.n	80084ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80084a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3740      	adds	r7, #64	; 0x40
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <netconn_recv+0x28>
 80084c8:	4b32      	ldr	r3, [pc, #200]	; (8008594 <netconn_recv+0xe0>)
 80084ca:	f240 3263 	movw	r2, #867	; 0x363
 80084ce:	4932      	ldr	r1, [pc, #200]	; (8008598 <netconn_recv+0xe4>)
 80084d0:	4832      	ldr	r0, [pc, #200]	; (800859c <netconn_recv+0xe8>)
 80084d2:	f00f fef3 	bl	80182bc <iprintf>
 80084d6:	f06f 030f 	mvn.w	r3, #15
 80084da:	e056      	b.n	800858a <netconn_recv+0xd6>
  *new_buf = NULL;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <netconn_recv+0x48>
 80084e8:	4b2a      	ldr	r3, [pc, #168]	; (8008594 <netconn_recv+0xe0>)
 80084ea:	f240 3265 	movw	r2, #869	; 0x365
 80084ee:	492c      	ldr	r1, [pc, #176]	; (80085a0 <netconn_recv+0xec>)
 80084f0:	482a      	ldr	r0, [pc, #168]	; (800859c <netconn_recv+0xe8>)
 80084f2:	f00f fee3 	bl	80182bc <iprintf>
 80084f6:	f06f 030f 	mvn.w	r3, #15
 80084fa:	e046      	b.n	800858a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008504:	2b10      	cmp	r3, #16
 8008506:	d13a      	bne.n	800857e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800850c:	2006      	movs	r0, #6
 800850e:	f003 fb3f 	bl	800bb90 <memp_malloc>
 8008512:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <netconn_recv+0x6c>
      return ERR_MEM;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	e034      	b.n	800858a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008520:	f107 030c 	add.w	r3, r7, #12
 8008524:	2200      	movs	r2, #0
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ff3f 	bl	80083ac <netconn_recv_data_tcp>
 800852e:	4603      	mov	r3, r0
 8008530:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d006      	beq.n	8008548 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800853a:	6979      	ldr	r1, [r7, #20]
 800853c:	2006      	movs	r0, #6
 800853e:	f003 fb79 	bl	800bc34 <memp_free>
      return err;
 8008542:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008546:	e020      	b.n	800858a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d106      	bne.n	800855c <netconn_recv+0xa8>
 800854e:	4b11      	ldr	r3, [pc, #68]	; (8008594 <netconn_recv+0xe0>)
 8008550:	f240 3279 	movw	r2, #889	; 0x379
 8008554:	4913      	ldr	r1, [pc, #76]	; (80085a4 <netconn_recv+0xf0>)
 8008556:	4811      	ldr	r0, [pc, #68]	; (800859c <netconn_recv+0xe8>)
 8008558:	f00f feb0 	bl	80182bc <iprintf>

    buf->p = p;
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2200      	movs	r2, #0
 800856c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	e005      	b.n	800858a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800857e:	2200      	movs	r2, #0
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff fe1a 	bl	80081bc <netconn_recv_data>
 8008588:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	0801939c 	.word	0x0801939c
 8008598:	080195b4 	.word	0x080195b4
 800859c:	080193f4 	.word	0x080193f4
 80085a0:	080195d4 	.word	0x080195d4
 80085a4:	0801964c 	.word	0x0801964c

080085a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	f107 0110 	add.w	r1, r7, #16
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	2201      	movs	r2, #1
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f805 	bl	80085dc <netconn_write_vectors_partly>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b092      	sub	sp, #72	; 0x48
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	460b      	mov	r3, r1
 80085ec:	80fb      	strh	r3, [r7, #6]
 80085ee:	4613      	mov	r3, r2
 80085f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <netconn_write_vectors_partly+0x30>
 80085f8:	4b4e      	ldr	r3, [pc, #312]	; (8008734 <netconn_write_vectors_partly+0x158>)
 80085fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80085fe:	494e      	ldr	r1, [pc, #312]	; (8008738 <netconn_write_vectors_partly+0x15c>)
 8008600:	484e      	ldr	r0, [pc, #312]	; (800873c <netconn_write_vectors_partly+0x160>)
 8008602:	f00f fe5b 	bl	80182bc <iprintf>
 8008606:	f06f 030f 	mvn.w	r3, #15
 800860a:	e08e      	b.n	800872a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008614:	2b10      	cmp	r3, #16
 8008616:	d009      	beq.n	800862c <netconn_write_vectors_partly+0x50>
 8008618:	4b46      	ldr	r3, [pc, #280]	; (8008734 <netconn_write_vectors_partly+0x158>)
 800861a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800861e:	4948      	ldr	r1, [pc, #288]	; (8008740 <netconn_write_vectors_partly+0x164>)
 8008620:	4846      	ldr	r0, [pc, #280]	; (800873c <netconn_write_vectors_partly+0x160>)
 8008622:	f00f fe4b 	bl	80182bc <iprintf>
 8008626:	f06f 0305 	mvn.w	r3, #5
 800862a:	e07e      	b.n	800872a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	7f1b      	ldrb	r3, [r3, #28]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <netconn_write_vectors_partly+0x66>
 8008638:	797b      	ldrb	r3, [r7, #5]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <netconn_write_vectors_partly+0x6a>
 8008642:	2301      	movs	r3, #1
 8008644:	e000      	b.n	8008648 <netconn_write_vectors_partly+0x6c>
 8008646:	2300      	movs	r3, #0
 8008648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800864c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <netconn_write_vectors_partly+0x84>
 8008654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800865a:	f06f 0305 	mvn.w	r3, #5
 800865e:	e064      	b.n	800872a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008664:	2300      	movs	r3, #0
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
 8008668:	e015      	b.n	8008696 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800866a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	4413      	add	r3, r2
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008676:	4413      	add	r3, r2
 8008678:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800867a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	4413      	add	r3, r2
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008686:	429a      	cmp	r2, r3
 8008688:	d202      	bcs.n	8008690 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800868a:	f06f 0305 	mvn.w	r3, #5
 800868e:	e04c      	b.n	800872a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008692:	3301      	adds	r3, #1
 8008694:	643b      	str	r3, [r7, #64]	; 0x40
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800869a:	429a      	cmp	r2, r3
 800869c:	dbe5      	blt.n	800866a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800869e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e040      	b.n	800872a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80086a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da0a      	bge.n	80086c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80086ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80086b4:	f06f 0305 	mvn.w	r3, #5
 80086b8:	e037      	b.n	800872a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80086ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80086d4:	797b      	ldrb	r3, [r7, #5]
 80086d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80086da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	4619      	mov	r1, r3
 80086e8:	4816      	ldr	r0, [pc, #88]	; (8008744 <netconn_write_vectors_partly+0x168>)
 80086ea:	f7ff fb9f 	bl	8007e2c <netconn_apimsg>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80086f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d114      	bne.n	8008726 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80086fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008706:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008714:	429a      	cmp	r2, r3
 8008716:	d006      	beq.n	8008726 <netconn_write_vectors_partly+0x14a>
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <netconn_write_vectors_partly+0x158>)
 800871a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800871e:	490a      	ldr	r1, [pc, #40]	; (8008748 <netconn_write_vectors_partly+0x16c>)
 8008720:	4806      	ldr	r0, [pc, #24]	; (800873c <netconn_write_vectors_partly+0x160>)
 8008722:	f00f fdcb 	bl	80182bc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008726:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800872a:	4618      	mov	r0, r3
 800872c:	3748      	adds	r7, #72	; 0x48
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	0801939c 	.word	0x0801939c
 8008738:	08019674 	.word	0x08019674
 800873c:	080193f4 	.word	0x080193f4
 8008740:	08019690 	.word	0x08019690
 8008744:	08009d6d 	.word	0x08009d6d
 8008748:	080196b4 	.word	0x080196b4

0800874c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	; 0x30
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <netconn_close_shutdown+0x26>
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <netconn_close_shutdown+0x50>)
 8008760:	f240 4247 	movw	r2, #1095	; 0x447
 8008764:	490e      	ldr	r1, [pc, #56]	; (80087a0 <netconn_close_shutdown+0x54>)
 8008766:	480f      	ldr	r0, [pc, #60]	; (80087a4 <netconn_close_shutdown+0x58>)
 8008768:	f00f fda8 	bl	80182bc <iprintf>
 800876c:	f06f 030f 	mvn.w	r3, #15
 8008770:	e010      	b.n	8008794 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800877a:	2329      	movs	r3, #41	; 0x29
 800877c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800877e:	f107 030c 	add.w	r3, r7, #12
 8008782:	4619      	mov	r1, r3
 8008784:	4808      	ldr	r0, [pc, #32]	; (80087a8 <netconn_close_shutdown+0x5c>)
 8008786:	f7ff fb51 	bl	8007e2c <netconn_apimsg>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008790:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008794:	4618      	mov	r0, r3
 8008796:	3730      	adds	r7, #48	; 0x30
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	0801939c 	.word	0x0801939c
 80087a0:	080196d8 	.word	0x080196d8
 80087a4:	080193f4 	.word	0x080193f4
 80087a8:	08009e85 	.word	0x08009e85

080087ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80087b4:	2103      	movs	r1, #3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff ffc8 	bl	800874c <netconn_close_shutdown>
 80087bc:	4603      	mov	r3, r0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <netconn_err+0x12>
    return ERR_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e00d      	b.n	80087f4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80087d8:	f00f fcec 	bl	80181b4 <sys_arch_protect>
 80087dc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7a1b      	ldrb	r3, [r3, #8]
 80087e2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f00f fcf0 	bl	80181d0 <sys_arch_unprotect>
  return err;
 80087f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800880a:	f113 0f0e 	cmn.w	r3, #14
 800880e:	d008      	beq.n	8008822 <lwip_netconn_err_to_msg+0x26>
 8008810:	f113 0f0d 	cmn.w	r3, #13
 8008814:	d003      	beq.n	800881e <lwip_netconn_err_to_msg+0x22>
 8008816:	f113 0f0f 	cmn.w	r3, #15
 800881a:	d004      	beq.n	8008826 <lwip_netconn_err_to_msg+0x2a>
 800881c:	e005      	b.n	800882a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800881e:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <lwip_netconn_err_to_msg+0x4c>)
 8008820:	e00e      	b.n	8008840 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008822:	4b0a      	ldr	r3, [pc, #40]	; (800884c <lwip_netconn_err_to_msg+0x50>)
 8008824:	e00c      	b.n	8008840 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008826:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <lwip_netconn_err_to_msg+0x54>)
 8008828:	e00a      	b.n	8008840 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800882a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <lwip_netconn_err_to_msg+0x42>
 8008832:	4b08      	ldr	r3, [pc, #32]	; (8008854 <lwip_netconn_err_to_msg+0x58>)
 8008834:	227d      	movs	r2, #125	; 0x7d
 8008836:	4908      	ldr	r1, [pc, #32]	; (8008858 <lwip_netconn_err_to_msg+0x5c>)
 8008838:	4808      	ldr	r0, [pc, #32]	; (800885c <lwip_netconn_err_to_msg+0x60>)
 800883a:	f00f fd3f 	bl	80182bc <iprintf>
      return NULL;
 800883e:	2300      	movs	r3, #0
  }
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	0801ce70 	.word	0x0801ce70
 800884c:	0801ce71 	.word	0x0801ce71
 8008850:	0801ce72 	.word	0x0801ce72
 8008854:	080196f4 	.word	0x080196f4
 8008858:	08019728 	.word	0x08019728
 800885c:	08019738 	.word	0x08019738

08008860 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <lwip_netconn_is_err_msg+0x1c>
 8008870:	4b12      	ldr	r3, [pc, #72]	; (80088bc <lwip_netconn_is_err_msg+0x5c>)
 8008872:	2285      	movs	r2, #133	; 0x85
 8008874:	4912      	ldr	r1, [pc, #72]	; (80088c0 <lwip_netconn_is_err_msg+0x60>)
 8008876:	4813      	ldr	r0, [pc, #76]	; (80088c4 <lwip_netconn_is_err_msg+0x64>)
 8008878:	f00f fd20 	bl	80182bc <iprintf>

  if (msg == &netconn_aborted) {
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <lwip_netconn_is_err_msg+0x68>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d104      	bne.n	800888e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	22f3      	movs	r2, #243	; 0xf3
 8008888:	701a      	strb	r2, [r3, #0]
    return 1;
 800888a:	2301      	movs	r3, #1
 800888c:	e012      	b.n	80088b4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a0e      	ldr	r2, [pc, #56]	; (80088cc <lwip_netconn_is_err_msg+0x6c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d104      	bne.n	80088a0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	22f2      	movs	r2, #242	; 0xf2
 800889a:	701a      	strb	r2, [r3, #0]
    return 1;
 800889c:	2301      	movs	r3, #1
 800889e:	e009      	b.n	80088b4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a0b      	ldr	r2, [pc, #44]	; (80088d0 <lwip_netconn_is_err_msg+0x70>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d104      	bne.n	80088b2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	22f1      	movs	r2, #241	; 0xf1
 80088ac:	701a      	strb	r2, [r3, #0]
    return 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	080196f4 	.word	0x080196f4
 80088c0:	08019760 	.word	0x08019760
 80088c4:	08019738 	.word	0x08019738
 80088c8:	0801ce70 	.word	0x0801ce70
 80088cc:	0801ce71 	.word	0x0801ce71
 80088d0:	0801ce72 	.word	0x0801ce72

080088d4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d105      	bne.n	80088f4 <recv_udp+0x20>
 80088e8:	4b34      	ldr	r3, [pc, #208]	; (80089bc <recv_udp+0xe8>)
 80088ea:	22e5      	movs	r2, #229	; 0xe5
 80088ec:	4934      	ldr	r1, [pc, #208]	; (80089c0 <recv_udp+0xec>)
 80088ee:	4835      	ldr	r0, [pc, #212]	; (80089c4 <recv_udp+0xf0>)
 80088f0:	f00f fce4 	bl	80182bc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <recv_udp+0x32>
 80088fa:	4b30      	ldr	r3, [pc, #192]	; (80089bc <recv_udp+0xe8>)
 80088fc:	22e6      	movs	r2, #230	; 0xe6
 80088fe:	4932      	ldr	r1, [pc, #200]	; (80089c8 <recv_udp+0xf4>)
 8008900:	4830      	ldr	r0, [pc, #192]	; (80089c4 <recv_udp+0xf0>)
 8008902:	f00f fcdb 	bl	80182bc <iprintf>
  conn = (struct netconn *)arg;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <recv_udp+0x44>
    pbuf_free(p);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f003 ffbd 	bl	800c890 <pbuf_free>
    return;
 8008916:	e04d      	b.n	80089b4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	429a      	cmp	r2, r3
 8008920:	d005      	beq.n	800892e <recv_udp+0x5a>
 8008922:	4b26      	ldr	r3, [pc, #152]	; (80089bc <recv_udp+0xe8>)
 8008924:	22ee      	movs	r2, #238	; 0xee
 8008926:	4929      	ldr	r1, [pc, #164]	; (80089cc <recv_udp+0xf8>)
 8008928:	4826      	ldr	r0, [pc, #152]	; (80089c4 <recv_udp+0xf0>)
 800892a:	f00f fcc7 	bl	80182bc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	3310      	adds	r3, #16
 8008932:	4618      	mov	r0, r3
 8008934:	f00f fb23 	bl	8017f7e <sys_mbox_valid>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f003 ffa6 	bl	800c890 <pbuf_free>
    return;
 8008944:	e036      	b.n	80089b4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008946:	2006      	movs	r0, #6
 8008948:	f003 f922 	bl	800bb90 <memp_malloc>
 800894c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <recv_udp+0x88>
    pbuf_free(p);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f003 ff9b 	bl	800c890 <pbuf_free>
    return;
 800895a:	e02b      	b.n	80089b4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <recv_udp+0xa0>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	e000      	b.n	8008976 <recv_udp+0xa2>
 8008974:	2300      	movs	r3, #0
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800897e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	891b      	ldrh	r3, [r3, #8]
 8008984:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3310      	adds	r3, #16
 800898a:	69b9      	ldr	r1, [r7, #24]
 800898c:	4618      	mov	r0, r3
 800898e:	f00f fa81 	bl	8017e94 <sys_mbox_trypost>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008998:	69b8      	ldr	r0, [r7, #24]
 800899a:	f001 faff 	bl	8009f9c <netbuf_delete>
    return;
 800899e:	e009      	b.n	80089b4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <recv_udp+0xe0>
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	8afa      	ldrh	r2, [r7, #22]
 80089ae:	2100      	movs	r1, #0
 80089b0:	69f8      	ldr	r0, [r7, #28]
 80089b2:	4798      	blx	r3
  }
}
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	080196f4 	.word	0x080196f4
 80089c0:	0801976c 	.word	0x0801976c
 80089c4:	08019738 	.word	0x08019738
 80089c8:	08019790 	.word	0x08019790
 80089cc:	080197b0 	.word	0x080197b0

080089d0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <recv_tcp+0x22>
 80089e4:	4b36      	ldr	r3, [pc, #216]	; (8008ac0 <recv_tcp+0xf0>)
 80089e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089ea:	4936      	ldr	r1, [pc, #216]	; (8008ac4 <recv_tcp+0xf4>)
 80089ec:	4836      	ldr	r0, [pc, #216]	; (8008ac8 <recv_tcp+0xf8>)
 80089ee:	f00f fc65 	bl	80182bc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d106      	bne.n	8008a06 <recv_tcp+0x36>
 80089f8:	4b31      	ldr	r3, [pc, #196]	; (8008ac0 <recv_tcp+0xf0>)
 80089fa:	f240 122d 	movw	r2, #301	; 0x12d
 80089fe:	4933      	ldr	r1, [pc, #204]	; (8008acc <recv_tcp+0xfc>)
 8008a00:	4831      	ldr	r0, [pc, #196]	; (8008ac8 <recv_tcp+0xf8>)
 8008a02:	f00f fc5b 	bl	80182bc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d006      	beq.n	8008a1c <recv_tcp+0x4c>
 8008a0e:	4b2c      	ldr	r3, [pc, #176]	; (8008ac0 <recv_tcp+0xf0>)
 8008a10:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008a14:	492e      	ldr	r1, [pc, #184]	; (8008ad0 <recv_tcp+0x100>)
 8008a16:	482c      	ldr	r0, [pc, #176]	; (8008ac8 <recv_tcp+0xf8>)
 8008a18:	f00f fc50 	bl	80182bc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <recv_tcp+0x5c>
    return ERR_VAL;
 8008a26:	f06f 0305 	mvn.w	r3, #5
 8008a2a:	e045      	b.n	8008ab8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d006      	beq.n	8008a44 <recv_tcp+0x74>
 8008a36:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <recv_tcp+0xf0>)
 8008a38:	f240 1235 	movw	r2, #309	; 0x135
 8008a3c:	4925      	ldr	r1, [pc, #148]	; (8008ad4 <recv_tcp+0x104>)
 8008a3e:	4822      	ldr	r0, [pc, #136]	; (8008ac8 <recv_tcp+0xf8>)
 8008a40:	f00f fc3c 	bl	80182bc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	3310      	adds	r3, #16
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f00f fa98 	bl	8017f7e <sys_mbox_valid>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10d      	bne.n	8008a70 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	891b      	ldrh	r3, [r3, #8]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68b8      	ldr	r0, [r7, #8]
 8008a62:	f004 fee5 	bl	800d830 <tcp_recved>
      pbuf_free(p);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f003 ff12 	bl	800c890 <pbuf_free>
    }
    return ERR_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e023      	b.n	8008ab8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <recv_tcp+0xb2>
    msg = p;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	891b      	ldrh	r3, [r3, #8]
 8008a7e:	83fb      	strh	r3, [r7, #30]
 8008a80:	e003      	b.n	8008a8a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <recv_tcp+0x108>)
 8008a84:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	69b9      	ldr	r1, [r7, #24]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f00f f9ff 	bl	8017e94 <sys_mbox_trypost>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa0:	e00a      	b.n	8008ab8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <recv_tcp+0xe6>
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	8bfa      	ldrh	r2, [r7, #30]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6978      	ldr	r0, [r7, #20]
 8008ab4:	4798      	blx	r3
  }

  return ERR_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3720      	adds	r7, #32
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	080196f4 	.word	0x080196f4
 8008ac4:	080197d0 	.word	0x080197d0
 8008ac8:	08019738 	.word	0x08019738
 8008acc:	080197f4 	.word	0x080197f4
 8008ad0:	08019814 	.word	0x08019814
 8008ad4:	0801982c 	.word	0x0801982c
 8008ad8:	0801ce72 	.word	0x0801ce72

08008adc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <poll_tcp+0x22>
 8008af0:	4b29      	ldr	r3, [pc, #164]	; (8008b98 <poll_tcp+0xbc>)
 8008af2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008af6:	4929      	ldr	r1, [pc, #164]	; (8008b9c <poll_tcp+0xc0>)
 8008af8:	4829      	ldr	r0, [pc, #164]	; (8008ba0 <poll_tcp+0xc4>)
 8008afa:	f00f fbdf 	bl	80182bc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	785b      	ldrb	r3, [r3, #1]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d104      	bne.n	8008b10 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008b06:	2101      	movs	r1, #1
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 ff63 	bl	80099d4 <lwip_netconn_do_writemore>
 8008b0e:	e016      	b.n	8008b3e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d112      	bne.n	8008b3e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <poll_tcp+0x5a>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	7a5b      	ldrb	r3, [r3, #9]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	7a5a      	ldrb	r2, [r3, #9]
 8008b30:	3a01      	subs	r2, #1
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008b36:	2101      	movs	r1, #1
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fbf7 	bl	800932c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	7f1b      	ldrb	r3, [r3, #28]
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d021      	beq.n	8008b8e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01d      	beq.n	8008b8e <poll_tcp+0xb2>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008b5a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008b5e:	d316      	bcc.n	8008b8e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d810      	bhi.n	8008b8e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	7f1b      	ldrb	r3, [r3, #28]
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <poll_tcp+0xb2>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	2200      	movs	r2, #0
 8008b88:	2102      	movs	r1, #2
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	080196f4 	.word	0x080196f4
 8008b9c:	0801984c 	.word	0x0801984c
 8008ba0:	08019738 	.word	0x08019738

08008ba4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <sent_tcp+0x26>
 8008bbc:	4b20      	ldr	r3, [pc, #128]	; (8008c40 <sent_tcp+0x9c>)
 8008bbe:	f240 1293 	movw	r2, #403	; 0x193
 8008bc2:	4920      	ldr	r1, [pc, #128]	; (8008c44 <sent_tcp+0xa0>)
 8008bc4:	4820      	ldr	r0, [pc, #128]	; (8008c48 <sent_tcp+0xa4>)
 8008bc6:	f00f fb79 	bl	80182bc <iprintf>

  if (conn) {
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d032      	beq.n	8008c36 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d104      	bne.n	8008be2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008bd8:	2101      	movs	r1, #1
 8008bda:	6978      	ldr	r0, [r7, #20]
 8008bdc:	f000 fefa 	bl	80099d4 <lwip_netconn_do_writemore>
 8008be0:	e007      	b.n	8008bf2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d103      	bne.n	8008bf2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008bea:	2101      	movs	r1, #1
 8008bec:	6978      	ldr	r0, [r7, #20]
 8008bee:	f000 fb9d 	bl	800932c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01d      	beq.n	8008c36 <sent_tcp+0x92>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008c02:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008c06:	d316      	bcc.n	8008c36 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d810      	bhi.n	8008c36 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	7f1b      	ldrb	r3, [r3, #28]
 8008c18:	f023 0310 	bic.w	r3, r3, #16
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d005      	beq.n	8008c36 <sent_tcp+0x92>
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	2102      	movs	r1, #2
 8008c32:	6978      	ldr	r0, [r7, #20]
 8008c34:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	080196f4 	.word	0x080196f4
 8008c44:	0801984c 	.word	0x0801984c
 8008c48:	08019738 	.word	0x08019738

08008c4c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <err_tcp+0x24>
 8008c62:	4b5f      	ldr	r3, [pc, #380]	; (8008de0 <err_tcp+0x194>)
 8008c64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008c68:	495e      	ldr	r1, [pc, #376]	; (8008de4 <err_tcp+0x198>)
 8008c6a:	485f      	ldr	r0, [pc, #380]	; (8008de8 <err_tcp+0x19c>)
 8008c6c:	f00f fb26 	bl	80182bc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008c70:	f00f faa0 	bl	80181b4 <sys_arch_protect>
 8008c74:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	7f1b      	ldrb	r3, [r3, #28]
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	785b      	ldrb	r3, [r3, #1]
 8008c94:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008c9c:	69b8      	ldr	r0, [r7, #24]
 8008c9e:	f00f fa97 	bl	80181d0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <err_tcp+0x6a>
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2104      	movs	r1, #4
 8008cb2:	69f8      	ldr	r0, [r7, #28]
 8008cb4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <err_tcp+0x7e>
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	69f8      	ldr	r0, [r7, #28]
 8008cc8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <err_tcp+0x92>
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2102      	movs	r1, #2
 8008cda:	69f8      	ldr	r0, [r7, #28]
 8008cdc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fd8a 	bl	80087fc <lwip_netconn_err_to_msg>
 8008ce8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	3310      	adds	r3, #16
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f00f f945 	bl	8017f7e <sys_mbox_valid>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	6939      	ldr	r1, [r7, #16]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f00f f8c7 	bl	8017e94 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3314      	adds	r3, #20
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f00f f937 	bl	8017f7e <sys_mbox_valid>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	3314      	adds	r3, #20
 8008d1a:	6939      	ldr	r1, [r7, #16]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f00f f8b9 	bl	8017e94 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d005      	beq.n	8008d34 <err_tcp+0xe8>
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d002      	beq.n	8008d34 <err_tcp+0xe8>
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d143      	bne.n	8008dbc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	7f1b      	ldrb	r3, [r3, #28]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bf14      	ite	ne
 8008d40:	2301      	movne	r3, #1
 8008d42:	2300      	moveq	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	7f1b      	ldrb	r3, [r3, #28]
 8008d4c:	f023 0304 	bic.w	r3, r3, #4
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d13b      	bne.n	8008dd4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <err_tcp+0x126>
 8008d64:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <err_tcp+0x194>)
 8008d66:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008d6a:	4920      	ldr	r1, [pc, #128]	; (8008dec <err_tcp+0x1a0>)
 8008d6c:	481e      	ldr	r0, [pc, #120]	; (8008de8 <err_tcp+0x19c>)
 8008d6e:	f00f faa5 	bl	80182bc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d104      	bne.n	8008d82 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	711a      	strb	r2, [r3, #4]
 8008d80:	e003      	b.n	8008d8a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	78fa      	ldrb	r2, [r7, #3]
 8008d88:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008d94:	68b8      	ldr	r0, [r7, #8]
 8008d96:	f00f f983 	bl	80180a0 <sys_sem_valid>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <err_tcp+0x162>
 8008da0:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <err_tcp+0x194>)
 8008da2:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008da6:	4912      	ldr	r1, [pc, #72]	; (8008df0 <err_tcp+0x1a4>)
 8008da8:	480f      	ldr	r0, [pc, #60]	; (8008de8 <err_tcp+0x19c>)
 8008daa:	f00f fa87 	bl	80182bc <iprintf>
      conn->current_msg = NULL;
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	2200      	movs	r2, #0
 8008db2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f00f f959 	bl	801806c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008dba:	e00b      	b.n	8008dd4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d008      	beq.n	8008dd6 <err_tcp+0x18a>
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <err_tcp+0x194>)
 8008dc6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008dca:	490a      	ldr	r1, [pc, #40]	; (8008df4 <err_tcp+0x1a8>)
 8008dcc:	4806      	ldr	r0, [pc, #24]	; (8008de8 <err_tcp+0x19c>)
 8008dce:	f00f fa75 	bl	80182bc <iprintf>
  }
}
 8008dd2:	e000      	b.n	8008dd6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008dd4:	bf00      	nop
}
 8008dd6:	bf00      	nop
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	080196f4 	.word	0x080196f4
 8008de4:	0801984c 	.word	0x0801984c
 8008de8:	08019738 	.word	0x08019738
 8008dec:	0801985c 	.word	0x0801985c
 8008df0:	08019878 	.word	0x08019878
 8008df4:	08019894 	.word	0x08019894

08008df8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f005 fbf1 	bl	800e5f0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008e0e:	490a      	ldr	r1, [pc, #40]	; (8008e38 <setup_tcp+0x40>)
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f005 fbff 	bl	800e614 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008e16:	4909      	ldr	r1, [pc, #36]	; (8008e3c <setup_tcp+0x44>)
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f005 fc1d 	bl	800e658 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008e1e:	2202      	movs	r2, #2
 8008e20:	4907      	ldr	r1, [pc, #28]	; (8008e40 <setup_tcp+0x48>)
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f005 fc74 	bl	800e710 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008e28:	4906      	ldr	r1, [pc, #24]	; (8008e44 <setup_tcp+0x4c>)
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f005 fc36 	bl	800e69c <tcp_err>
}
 8008e30:	bf00      	nop
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	080089d1 	.word	0x080089d1
 8008e3c:	08008ba5 	.word	0x08008ba5
 8008e40:	08008add 	.word	0x08008add
 8008e44:	08008c4d 	.word	0x08008c4d

08008e48 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b089      	sub	sp, #36	; 0x24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d102      	bne.n	8008e66 <accept_function+0x1e>
    return ERR_VAL;
 8008e60:	f06f 0305 	mvn.w	r3, #5
 8008e64:	e0a1      	b.n	8008faa <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	3314      	adds	r3, #20
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f00f f887 	bl	8017f7e <sys_mbox_valid>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008e76:	f06f 0305 	mvn.w	r3, #5
 8008e7a:	e096      	b.n	8008faa <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d11b      	bne.n	8008eba <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	f103 0414 	add.w	r4, r3, #20
 8008e88:	f06f 000c 	mvn.w	r0, #12
 8008e8c:	f7ff fcb6 	bl	80087fc <lwip_netconn_err_to_msg>
 8008e90:	4603      	mov	r3, r0
 8008e92:	4619      	mov	r1, r3
 8008e94:	4620      	mov	r0, r4
 8008e96:	f00e fffd 	bl	8017e94 <sys_mbox_trypost>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d109      	bne.n	8008eb4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <accept_function+0x6c>
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	69f8      	ldr	r0, [r7, #28]
 8008eb2:	4798      	blx	r3
    }
    return ERR_VAL;
 8008eb4:	f06f 0305 	mvn.w	r3, #5
 8008eb8:	e077      	b.n	8008faa <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <accept_function+0x88>
 8008ec2:	4b3c      	ldr	r3, [pc, #240]	; (8008fb4 <accept_function+0x16c>)
 8008ec4:	f240 222a 	movw	r2, #554	; 0x22a
 8008ec8:	493b      	ldr	r1, [pc, #236]	; (8008fb8 <accept_function+0x170>)
 8008eca:	483c      	ldr	r0, [pc, #240]	; (8008fbc <accept_function+0x174>)
 8008ecc:	f00f f9f6 	bl	80182bc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	781a      	ldrb	r2, [r3, #0]
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f000 f8f0 	bl	80090c0 <netconn_alloc>
 8008ee0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d11b      	bne.n	8008f20 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f103 0414 	add.w	r4, r3, #20
 8008eee:	f06f 000c 	mvn.w	r0, #12
 8008ef2:	f7ff fc83 	bl	80087fc <lwip_netconn_err_to_msg>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4620      	mov	r0, r4
 8008efc:	f00e ffca 	bl	8017e94 <sys_mbox_trypost>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <accept_function+0xd2>
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2200      	movs	r2, #0
 8008f14:	2100      	movs	r1, #0
 8008f16:	69f8      	ldr	r0, [r7, #28]
 8008f18:	4798      	blx	r3
    }
    return ERR_MEM;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	e044      	b.n	8008faa <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008f26:	69b8      	ldr	r0, [r7, #24]
 8008f28:	f7ff ff66 	bl	8008df8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	3314      	adds	r3, #20
 8008f30:	69b9      	ldr	r1, [r7, #24]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f00e ffae 	bl	8017e94 <sys_mbox_trypost>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d02a      	beq.n	8008f94 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008f44:	2100      	movs	r1, #0
 8008f46:	6978      	ldr	r0, [r7, #20]
 8008f48:	f005 fb52 	bl	800e5f0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	6978      	ldr	r0, [r7, #20]
 8008f50:	f005 fb60 	bl	800e614 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008f54:	2100      	movs	r1, #0
 8008f56:	6978      	ldr	r0, [r7, #20]
 8008f58:	f005 fb7e 	bl	800e658 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	6978      	ldr	r0, [r7, #20]
 8008f62:	f005 fbd5 	bl	800e710 <tcp_poll>
    tcp_err(pcb, NULL);
 8008f66:	2100      	movs	r1, #0
 8008f68:	6978      	ldr	r0, [r7, #20]
 8008f6a:	f005 fb97 	bl	800e69c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	3310      	adds	r3, #16
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f00e ff79 	bl	8017e70 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	3310      	adds	r3, #16
 8008f82:	4618      	mov	r0, r3
 8008f84:	f00f f80c 	bl	8017fa0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008f88:	69b8      	ldr	r0, [r7, #24]
 8008f8a:	f000 f907 	bl	800919c <netconn_free>
    return ERR_MEM;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	e00a      	b.n	8008faa <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <accept_function+0x160>
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	69f8      	ldr	r0, [r7, #28]
 8008fa6:	4798      	blx	r3
  }

  return ERR_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3724      	adds	r7, #36	; 0x24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd90      	pop	{r4, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	080196f4 	.word	0x080196f4
 8008fb8:	080198b0 	.word	0x080198b0
 8008fbc:	08019738 	.word	0x08019738

08008fc0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d006      	beq.n	8008fe4 <pcb_new+0x24>
 8008fd6:	4b2b      	ldr	r3, [pc, #172]	; (8009084 <pcb_new+0xc4>)
 8008fd8:	f240 2265 	movw	r2, #613	; 0x265
 8008fdc:	492a      	ldr	r1, [pc, #168]	; (8009088 <pcb_new+0xc8>)
 8008fde:	482b      	ldr	r0, [pc, #172]	; (800908c <pcb_new+0xcc>)
 8008fe0:	f00f f96c 	bl	80182bc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d022      	beq.n	8009038 <pcb_new+0x78>
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d133      	bne.n	800905e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681c      	ldr	r4, [r3, #0]
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f00a fda8 	bl	8013b52 <udp_new_ip_type>
 8009002:	4603      	mov	r3, r0
 8009004:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d02a      	beq.n	8009066 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b22      	cmp	r3, #34	; 0x22
 8009018:	d104      	bne.n	8009024 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6858      	ldr	r0, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	4917      	ldr	r1, [pc, #92]	; (8009090 <pcb_new+0xd0>)
 8009032:	f00a fd15 	bl	8013a60 <udp_recv>
      }
      break;
 8009036:	e016      	b.n	8009066 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681c      	ldr	r4, [r3, #0]
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	4618      	mov	r0, r3
 8009040:	f005 fac8 	bl	800e5d4 <tcp_new_ip_type>
 8009044:	4603      	mov	r3, r0
 8009046:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff fece 	bl	8008df8 <setup_tcp>
      }
      break;
 800905c:	e005      	b.n	800906a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	22fa      	movs	r2, #250	; 0xfa
 8009062:	711a      	strb	r2, [r3, #4]
      return;
 8009064:	e00a      	b.n	800907c <pcb_new+0xbc>
      break;
 8009066:	bf00      	nop
 8009068:	e000      	b.n	800906c <pcb_new+0xac>
      break;
 800906a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	22ff      	movs	r2, #255	; 0xff
 800907a:	711a      	strb	r2, [r3, #4]
  }
}
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	bd90      	pop	{r4, r7, pc}
 8009082:	bf00      	nop
 8009084:	080196f4 	.word	0x080196f4
 8009088:	080198d8 	.word	0x080198d8
 800908c:	08019738 	.word	0x08019738
 8009090:	080088d5 	.word	0x080088d5

08009094 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7ff ff85 	bl	8008fc0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	6039      	str	r1, [r7, #0]
 80090ca:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80090d0:	2007      	movs	r0, #7
 80090d2:	f002 fd5d 	bl	800bb90 <memp_malloc>
 80090d6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <netconn_alloc+0x22>
    return NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	e052      	b.n	8009188 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	79fa      	ldrb	r2, [r7, #7]
 80090ec:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090fa:	2b10      	cmp	r3, #16
 80090fc:	d004      	beq.n	8009108 <netconn_alloc+0x48>
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d105      	bne.n	800910e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009102:	2306      	movs	r3, #6
 8009104:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009106:	e00a      	b.n	800911e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009108:	2306      	movs	r3, #6
 800910a:	617b      	str	r3, [r7, #20]
      break;
 800910c:	e007      	b.n	800911e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800910e:	4b20      	ldr	r3, [pc, #128]	; (8009190 <netconn_alloc+0xd0>)
 8009110:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009114:	491f      	ldr	r1, [pc, #124]	; (8009194 <netconn_alloc+0xd4>)
 8009116:	4820      	ldr	r0, [pc, #128]	; (8009198 <netconn_alloc+0xd8>)
 8009118:	f00f f8d0 	bl	80182bc <iprintf>
      goto free_and_return;
 800911c:	e02f      	b.n	800917e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3310      	adds	r3, #16
 8009122:	6979      	ldr	r1, [r7, #20]
 8009124:	4618      	mov	r0, r3
 8009126:	f00e fe81 	bl	8017e2c <sys_mbox_new>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d125      	bne.n	800917c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	330c      	adds	r3, #12
 8009134:	2100      	movs	r1, #0
 8009136:	4618      	mov	r0, r3
 8009138:	f00e ff3f 	bl	8017fba <sys_sem_new>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d005      	beq.n	800914e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3310      	adds	r3, #16
 8009146:	4618      	mov	r0, r3
 8009148:	f00e fe92 	bl	8017e70 <sys_mbox_free>
    goto free_and_return;
 800914c:	e017      	b.n	800917e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3314      	adds	r3, #20
 8009152:	4618      	mov	r0, r3
 8009154:	f00e ff24 	bl	8017fa0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f04f 32ff 	mov.w	r2, #4294967295
 8009164:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	7cfa      	ldrb	r2, [r7, #19]
 8009176:	771a      	strb	r2, [r3, #28]
  return conn;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	e005      	b.n	8009188 <netconn_alloc+0xc8>
    goto free_and_return;
 800917c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	2007      	movs	r0, #7
 8009182:	f002 fd57 	bl	800bc34 <memp_free>
  return NULL;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	080196f4 	.word	0x080196f4
 8009194:	080198f8 	.word	0x080198f8
 8009198:	08019738 	.word	0x08019738

0800919c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <netconn_free+0x1e>
 80091ac:	4b1b      	ldr	r3, [pc, #108]	; (800921c <netconn_free+0x80>)
 80091ae:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80091b2:	491b      	ldr	r1, [pc, #108]	; (8009220 <netconn_free+0x84>)
 80091b4:	481b      	ldr	r0, [pc, #108]	; (8009224 <netconn_free+0x88>)
 80091b6:	f00f f881 	bl	80182bc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3310      	adds	r3, #16
 80091be:	4618      	mov	r0, r3
 80091c0:	f00e fedd 	bl	8017f7e <sys_mbox_valid>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d006      	beq.n	80091d8 <netconn_free+0x3c>
 80091ca:	4b14      	ldr	r3, [pc, #80]	; (800921c <netconn_free+0x80>)
 80091cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80091d0:	4915      	ldr	r1, [pc, #84]	; (8009228 <netconn_free+0x8c>)
 80091d2:	4814      	ldr	r0, [pc, #80]	; (8009224 <netconn_free+0x88>)
 80091d4:	f00f f872 	bl	80182bc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3314      	adds	r3, #20
 80091dc:	4618      	mov	r0, r3
 80091de:	f00e fece 	bl	8017f7e <sys_mbox_valid>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d006      	beq.n	80091f6 <netconn_free+0x5a>
 80091e8:	4b0c      	ldr	r3, [pc, #48]	; (800921c <netconn_free+0x80>)
 80091ea:	f240 3227 	movw	r2, #807	; 0x327
 80091ee:	490f      	ldr	r1, [pc, #60]	; (800922c <netconn_free+0x90>)
 80091f0:	480c      	ldr	r0, [pc, #48]	; (8009224 <netconn_free+0x88>)
 80091f2:	f00f f863 	bl	80182bc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	330c      	adds	r3, #12
 80091fa:	4618      	mov	r0, r3
 80091fc:	f00e ff43 	bl	8018086 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	330c      	adds	r3, #12
 8009204:	4618      	mov	r0, r3
 8009206:	f00e ff5c 	bl	80180c2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	2007      	movs	r0, #7
 800920e:	f002 fd11 	bl	800bc34 <memp_free>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	080196f4 	.word	0x080196f4
 8009220:	08019920 	.word	0x08019920
 8009224:	08019738 	.word	0x08019738
 8009228:	08019950 	.word	0x08019950
 800922c:	0801998c 	.word	0x0801998c

08009230 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3310      	adds	r3, #16
 800923c:	4618      	mov	r0, r3
 800923e:	f00e fe9e 	bl	8017f7e <sys_mbox_valid>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d02f      	beq.n	80092a8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009248:	e018      	b.n	800927c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009252:	2b10      	cmp	r3, #16
 8009254:	d10e      	bne.n	8009274 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f107 020f 	add.w	r2, r7, #15
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff fafe 	bl	8008860 <lwip_netconn_is_err_msg>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d108      	bne.n	800927c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4618      	mov	r0, r3
 800926e:	f003 fb0f 	bl	800c890 <pbuf_free>
 8009272:	e003      	b.n	800927c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fe90 	bl	8009f9c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3310      	adds	r3, #16
 8009280:	f107 0210 	add.w	r2, r7, #16
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f00e fe5d 	bl	8017f46 <sys_arch_mbox_tryfetch>
 800928c:	4603      	mov	r3, r0
 800928e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009292:	d1da      	bne.n	800924a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3310      	adds	r3, #16
 8009298:	4618      	mov	r0, r3
 800929a:	f00e fde9 	bl	8017e70 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3310      	adds	r3, #16
 80092a2:	4618      	mov	r0, r3
 80092a4:	f00e fe7c 	bl	8017fa0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3314      	adds	r3, #20
 80092ac:	4618      	mov	r0, r3
 80092ae:	f00e fe66 	bl	8017f7e <sys_mbox_valid>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d034      	beq.n	8009322 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80092b8:	e01d      	b.n	80092f6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f107 020e 	add.w	r2, r7, #14
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff facc 	bl	8008860 <lwip_netconn_is_err_msg>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d113      	bne.n	80092f6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80092d2:	6978      	ldr	r0, [r7, #20]
 80092d4:	f7ff ffac 	bl	8009230 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d007      	beq.n	80092f0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f004 f8c9 	bl	800d47c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	2200      	movs	r2, #0
 80092ee:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80092f0:	6978      	ldr	r0, [r7, #20]
 80092f2:	f7ff ff53 	bl	800919c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3314      	adds	r3, #20
 80092fa:	f107 0210 	add.w	r2, r7, #16
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f00e fe20 	bl	8017f46 <sys_arch_mbox_tryfetch>
 8009306:	4603      	mov	r3, r0
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d1d5      	bne.n	80092ba <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3314      	adds	r3, #20
 8009312:	4618      	mov	r0, r3
 8009314:	f00e fdac 	bl	8017e70 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3314      	adds	r3, #20
 800931c:	4618      	mov	r0, r3
 800931e:	f00e fe3f 	bl	8017fa0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009322:	bf00      	nop
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009338:	2300      	movs	r3, #0
 800933a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <lwip_netconn_do_close_internal+0x24>
 8009342:	4ba1      	ldr	r3, [pc, #644]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 8009344:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009348:	49a0      	ldr	r1, [pc, #640]	; (80095cc <lwip_netconn_do_close_internal+0x2a0>)
 800934a:	48a1      	ldr	r0, [pc, #644]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 800934c:	f00e ffb6 	bl	80182bc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009358:	2b10      	cmp	r3, #16
 800935a:	d006      	beq.n	800936a <lwip_netconn_do_close_internal+0x3e>
 800935c:	4b9a      	ldr	r3, [pc, #616]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 800935e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009362:	499c      	ldr	r1, [pc, #624]	; (80095d4 <lwip_netconn_do_close_internal+0x2a8>)
 8009364:	489a      	ldr	r0, [pc, #616]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 8009366:	f00e ffa9 	bl	80182bc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	2b04      	cmp	r3, #4
 8009370:	d006      	beq.n	8009380 <lwip_netconn_do_close_internal+0x54>
 8009372:	4b95      	ldr	r3, [pc, #596]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 8009374:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009378:	4997      	ldr	r1, [pc, #604]	; (80095d8 <lwip_netconn_do_close_internal+0x2ac>)
 800937a:	4895      	ldr	r0, [pc, #596]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 800937c:	f00e ff9e 	bl	80182bc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d106      	bne.n	8009396 <lwip_netconn_do_close_internal+0x6a>
 8009388:	4b8f      	ldr	r3, [pc, #572]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 800938a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800938e:	4993      	ldr	r1, [pc, #588]	; (80095dc <lwip_netconn_do_close_internal+0x2b0>)
 8009390:	488f      	ldr	r0, [pc, #572]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 8009392:	f00e ff93 	bl	80182bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <lwip_netconn_do_close_internal+0x80>
 800939e:	4b8a      	ldr	r3, [pc, #552]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 80093a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80093a4:	498e      	ldr	r1, [pc, #568]	; (80095e0 <lwip_netconn_do_close_internal+0x2b4>)
 80093a6:	488a      	ldr	r0, [pc, #552]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 80093a8:	f00e ff88 	bl	80182bc <iprintf>

  tpcb = conn->pcb.tcp;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	7a1b      	ldrb	r3, [r3, #8]
 80093b8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d102      	bne.n	80093d6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80093d0:	2301      	movs	r3, #1
 80093d2:	75bb      	strb	r3, [r7, #22]
 80093d4:	e01f      	b.n	8009416 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00e      	beq.n	80093fa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80093e0:	2b05      	cmp	r3, #5
 80093e2:	d007      	beq.n	80093f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80093e8:	2b06      	cmp	r3, #6
 80093ea:	d003      	beq.n	80093f4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d102      	bne.n	80093fa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80093f4:	2301      	movs	r3, #1
 80093f6:	75bb      	strb	r3, [r7, #22]
 80093f8:	e00d      	b.n	8009416 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80093fa:	7b7b      	ldrb	r3, [r7, #13]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d008      	beq.n	8009412 <lwip_netconn_do_close_internal+0xe6>
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	8b5b      	ldrh	r3, [r3, #26]
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800940c:	2301      	movs	r3, #1
 800940e:	75bb      	strb	r3, [r7, #22]
 8009410:	e001      	b.n	8009416 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009416:	7dbb      	ldrb	r3, [r7, #22]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800941c:	2100      	movs	r1, #0
 800941e:	6938      	ldr	r0, [r7, #16]
 8009420:	f005 f8e6 	bl	800e5f0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	7d1b      	ldrb	r3, [r3, #20]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d104      	bne.n	8009436 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800942c:	2100      	movs	r1, #0
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f005 f956 	bl	800e6e0 <tcp_accept>
 8009434:	e01d      	b.n	8009472 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d007      	beq.n	800944c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800943c:	2100      	movs	r1, #0
 800943e:	6938      	ldr	r0, [r7, #16]
 8009440:	f005 f8e8 	bl	800e614 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009444:	2100      	movs	r1, #0
 8009446:	6938      	ldr	r0, [r7, #16]
 8009448:	f005 f94a 	bl	800e6e0 <tcp_accept>
    }
    if (shut_tx) {
 800944c:	7b7b      	ldrb	r3, [r7, #13]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009452:	2100      	movs	r1, #0
 8009454:	6938      	ldr	r0, [r7, #16]
 8009456:	f005 f8ff 	bl	800e658 <tcp_sent>
    }
    if (shut_close) {
 800945a:	7dbb      	ldrb	r3, [r7, #22]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d008      	beq.n	8009472 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009460:	2200      	movs	r2, #0
 8009462:	2100      	movs	r1, #0
 8009464:	6938      	ldr	r0, [r7, #16]
 8009466:	f005 f953 	bl	800e710 <tcp_poll>
      tcp_err(tpcb, NULL);
 800946a:	2100      	movs	r1, #0
 800946c:	6938      	ldr	r0, [r7, #16]
 800946e:	f005 f915 	bl	800e69c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009472:	7dbb      	ldrb	r3, [r7, #22]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009478:	6938      	ldr	r0, [r7, #16]
 800947a:	f003 febb 	bl	800d1f4 <tcp_close>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]
 8009482:	e007      	b.n	8009494 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	7b7a      	ldrb	r2, [r7, #13]
 8009488:	4619      	mov	r1, r3
 800948a:	6938      	ldr	r0, [r7, #16]
 800948c:	f003 fede 	bl	800d24c <tcp_shutdown>
 8009490:	4603      	mov	r3, r0
 8009492:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d102      	bne.n	80094a2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800949c:	2301      	movs	r3, #1
 800949e:	757b      	strb	r3, [r7, #21]
 80094a0:	e016      	b.n	80094d0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80094a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094aa:	d10f      	bne.n	80094cc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	7a5b      	ldrb	r3, [r3, #9]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10c      	bne.n	80094d0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80094b6:	2301      	movs	r3, #1
 80094b8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80094ba:	7dbb      	ldrb	r3, [r7, #22]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80094c0:	6938      	ldr	r0, [r7, #16]
 80094c2:	f003 ffdb 	bl	800d47c <tcp_abort>
          err = ERR_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	75fb      	strb	r3, [r7, #23]
 80094ca:	e001      	b.n	80094d0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80094cc:	2301      	movs	r3, #1
 80094ce:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80094d0:	7d7b      	ldrb	r3, [r7, #21]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d044      	beq.n	8009560 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	7dfa      	ldrb	r2, [r7, #23]
 80094e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80094f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d129      	bne.n	8009550 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80094fc:	7dbb      	ldrb	r3, [r7, #22]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00c      	beq.n	800951c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <lwip_netconn_do_close_internal+0x1f0>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	2200      	movs	r2, #0
 8009516:	2104      	movs	r1, #4
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3
      }
      if (shut_rx) {
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <lwip_netconn_do_close_internal+0x20a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
      }
      if (shut_tx) {
 8009536:	7b7b      	ldrb	r3, [r7, #13]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <lwip_netconn_do_close_internal+0x224>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	2200      	movs	r2, #0
 800954a:	2102      	movs	r1, #2
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009556:	68b8      	ldr	r0, [r7, #8]
 8009558:	f00e fd88 	bl	801806c <sys_sem_signal>
    }
    return ERR_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	e02e      	b.n	80095be <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009560:	7d7b      	ldrb	r3, [r7, #21]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d11e      	bne.n	80095a4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	7d1b      	ldrb	r3, [r3, #20]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d106      	bne.n	800957c <lwip_netconn_do_close_internal+0x250>
 800956e:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 8009570:	f240 4241 	movw	r2, #1089	; 0x441
 8009574:	491b      	ldr	r1, [pc, #108]	; (80095e4 <lwip_netconn_do_close_internal+0x2b8>)
 8009576:	4816      	ldr	r0, [pc, #88]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 8009578:	f00e fea0 	bl	80182bc <iprintf>
    if (shut_tx) {
 800957c:	7b7b      	ldrb	r3, [r7, #13]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009582:	4919      	ldr	r1, [pc, #100]	; (80095e8 <lwip_netconn_do_close_internal+0x2bc>)
 8009584:	6938      	ldr	r0, [r7, #16]
 8009586:	f005 f867 	bl	800e658 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800958a:	2201      	movs	r2, #1
 800958c:	4917      	ldr	r1, [pc, #92]	; (80095ec <lwip_netconn_do_close_internal+0x2c0>)
 800958e:	6938      	ldr	r0, [r7, #16]
 8009590:	f005 f8be 	bl	800e710 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009594:	4916      	ldr	r1, [pc, #88]	; (80095f0 <lwip_netconn_do_close_internal+0x2c4>)
 8009596:	6938      	ldr	r0, [r7, #16]
 8009598:	f005 f880 	bl	800e69c <tcp_err>
    tcp_arg(tpcb, conn);
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	6938      	ldr	r0, [r7, #16]
 80095a0:	f005 f826 	bl	800e5f0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80095a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <lwip_netconn_do_close_internal+0x28e>
 80095ac:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <lwip_netconn_do_close_internal+0x29c>)
 80095ae:	f240 424d 	movw	r2, #1101	; 0x44d
 80095b2:	4910      	ldr	r1, [pc, #64]	; (80095f4 <lwip_netconn_do_close_internal+0x2c8>)
 80095b4:	4806      	ldr	r0, [pc, #24]	; (80095d0 <lwip_netconn_do_close_internal+0x2a4>)
 80095b6:	f00e fe81 	bl	80182bc <iprintf>
  return err;
 80095ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	080196f4 	.word	0x080196f4
 80095cc:	080199c8 	.word	0x080199c8
 80095d0:	08019738 	.word	0x08019738
 80095d4:	080199d8 	.word	0x080199d8
 80095d8:	080199f8 	.word	0x080199f8
 80095dc:	08019a1c 	.word	0x08019a1c
 80095e0:	0801985c 	.word	0x0801985c
 80095e4:	08019a30 	.word	0x08019a30
 80095e8:	08008ba5 	.word	0x08008ba5
 80095ec:	08008add 	.word	0x08008add
 80095f0:	08008c4d 	.word	0x08008c4d
 80095f4:	08019a54 	.word	0x08019a54

080095f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800960c:	7afb      	ldrb	r3, [r7, #11]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00d      	beq.n	800962e <lwip_netconn_do_delconn+0x36>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800961c:	2b10      	cmp	r3, #16
 800961e:	d006      	beq.n	800962e <lwip_netconn_do_delconn+0x36>
 8009620:	4b60      	ldr	r3, [pc, #384]	; (80097a4 <lwip_netconn_do_delconn+0x1ac>)
 8009622:	f240 425f 	movw	r2, #1119	; 0x45f
 8009626:	4960      	ldr	r1, [pc, #384]	; (80097a8 <lwip_netconn_do_delconn+0x1b0>)
 8009628:	4860      	ldr	r0, [pc, #384]	; (80097ac <lwip_netconn_do_delconn+0x1b4>)
 800962a:	f00e fe47 	bl	80182bc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <lwip_netconn_do_delconn+0x48>
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d002      	beq.n	8009640 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800963a:	7afb      	ldrb	r3, [r7, #11]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d109      	bne.n	8009654 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	2b03      	cmp	r3, #3
 8009644:	d10a      	bne.n	800965c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	7f1b      	ldrb	r3, [r3, #28]
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d103      	bne.n	800965c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	22fb      	movs	r2, #251	; 0xfb
 8009658:	711a      	strb	r2, [r3, #4]
 800965a:	e097      	b.n	800978c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d10d      	bne.n	800967e <lwip_netconn_do_delconn+0x86>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	7f1b      	ldrb	r3, [r3, #28]
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <lwip_netconn_do_delconn+0x86>
 8009670:	4b4c      	ldr	r3, [pc, #304]	; (80097a4 <lwip_netconn_do_delconn+0x1ac>)
 8009672:	f240 427b 	movw	r2, #1147	; 0x47b
 8009676:	494e      	ldr	r1, [pc, #312]	; (80097b0 <lwip_netconn_do_delconn+0x1b8>)
 8009678:	484c      	ldr	r0, [pc, #304]	; (80097ac <lwip_netconn_do_delconn+0x1b4>)
 800967a:	f00e fe1f 	bl	80182bc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff fdd1 	bl	8009230 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d05f      	beq.n	8009758 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a2:	2b10      	cmp	r3, #16
 80096a4:	d00e      	beq.n	80096c4 <lwip_netconn_do_delconn+0xcc>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d000      	beq.n	80096ac <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 80096aa:	e051      	b.n	8009750 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	f00a f9ef 	bl	8013aa0 <udp_remove>
          break;
 80096c2:	e045      	b.n	8009750 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <lwip_netconn_do_delconn+0xe4>
 80096ce:	4b35      	ldr	r3, [pc, #212]	; (80097a4 <lwip_netconn_do_delconn+0x1ac>)
 80096d0:	f240 4294 	movw	r2, #1172	; 0x494
 80096d4:	4937      	ldr	r1, [pc, #220]	; (80097b4 <lwip_netconn_do_delconn+0x1bc>)
 80096d6:	4835      	ldr	r0, [pc, #212]	; (80097ac <lwip_netconn_do_delconn+0x1b4>)
 80096d8:	f00e fdf0 	bl	80182bc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2204      	movs	r2, #4
 80096e2:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2203      	movs	r2, #3
 80096e8:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff fe17 	bl	800932c <lwip_netconn_do_close_internal>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d04a      	beq.n	800979a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b04      	cmp	r3, #4
 800970c:	d006      	beq.n	800971c <lwip_netconn_do_delconn+0x124>
 800970e:	4b25      	ldr	r3, [pc, #148]	; (80097a4 <lwip_netconn_do_delconn+0x1ac>)
 8009710:	f240 429a 	movw	r2, #1178	; 0x49a
 8009714:	4928      	ldr	r1, [pc, #160]	; (80097b8 <lwip_netconn_do_delconn+0x1c0>)
 8009716:	4825      	ldr	r0, [pc, #148]	; (80097ac <lwip_netconn_do_delconn+0x1b4>)
 8009718:	f00e fdd0 	bl	80182bc <iprintf>
            UNLOCK_TCPIP_CORE();
 800971c:	4827      	ldr	r0, [pc, #156]	; (80097bc <lwip_netconn_do_delconn+0x1c4>)
 800971e:	f00e fd16 	bl	801814e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	330c      	adds	r3, #12
 8009728:	2100      	movs	r1, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f00e fc6d 	bl	801800a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009730:	4822      	ldr	r0, [pc, #136]	; (80097bc <lwip_netconn_do_delconn+0x1c4>)
 8009732:	f00e fcfd 	bl	8018130 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d02c      	beq.n	800979a <lwip_netconn_do_delconn+0x1a2>
 8009740:	4b18      	ldr	r3, [pc, #96]	; (80097a4 <lwip_netconn_do_delconn+0x1ac>)
 8009742:	f240 429e 	movw	r2, #1182	; 0x49e
 8009746:	491c      	ldr	r1, [pc, #112]	; (80097b8 <lwip_netconn_do_delconn+0x1c0>)
 8009748:	4818      	ldr	r0, [pc, #96]	; (80097ac <lwip_netconn_do_delconn+0x1b4>)
 800974a:	f00e fdb7 	bl	80182bc <iprintf>
          return;
 800974e:	e024      	b.n	800979a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2200      	movs	r2, #0
 8009756:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <lwip_netconn_do_delconn+0x17a>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	6810      	ldr	r0, [r2, #0]
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <lwip_netconn_do_delconn+0x194>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	6810      	ldr	r0, [r2, #0]
 8009786:	2200      	movs	r2, #0
 8009788:	2102      	movs	r1, #2
 800978a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	4618      	mov	r0, r3
 8009794:	f00e fc84 	bl	80180a0 <sys_sem_valid>
 8009798:	e000      	b.n	800979c <lwip_netconn_do_delconn+0x1a4>
          return;
 800979a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	080196f4 	.word	0x080196f4
 80097a8:	08019a64 	.word	0x08019a64
 80097ac:	08019738 	.word	0x08019738
 80097b0:	08019a78 	.word	0x08019a78
 80097b4:	08019a98 	.word	0x08019a98
 80097b8:	08019ab4 	.word	0x08019ab4
 80097bc:	2000c3a0 	.word	0x2000c3a0

080097c0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d026      	beq.n	8009824 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d00e      	beq.n	8009802 <lwip_netconn_do_bind+0x42>
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d119      	bne.n	800981c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6858      	ldr	r0, [r3, #4]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6899      	ldr	r1, [r3, #8]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	899b      	ldrh	r3, [r3, #12]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f00a f83c 	bl	8013874 <udp_bind>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009800:	e012      	b.n	8009828 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6858      	ldr	r0, [r3, #4]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	6899      	ldr	r1, [r3, #8]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	899b      	ldrh	r3, [r3, #12]
 8009810:	461a      	mov	r2, r3
 8009812:	f003 fe3f 	bl	800d494 <tcp_bind>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
        break;
 800981a:	e005      	b.n	8009828 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800981c:	23fa      	movs	r3, #250	; 0xfa
 800981e:	73fb      	strb	r3, [r7, #15]
        break;
 8009820:	bf00      	nop
 8009822:	e001      	b.n	8009828 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8009824:	23fa      	movs	r3, #250	; 0xfa
 8009826:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	7bfa      	ldrb	r2, [r7, #15]
 800982c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d07f      	beq.n	800994e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009858:	2b10      	cmp	r3, #16
 800985a:	d175      	bne.n	8009948 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	785b      	ldrb	r3, [r3, #1]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d165      	bne.n	8009932 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	7d1b      	ldrb	r3, [r3, #20]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009872:	23fa      	movs	r3, #250	; 0xfa
 8009874:	72fb      	strb	r3, [r7, #11]
 8009876:	e06c      	b.n	8009952 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009878:	23ff      	movs	r3, #255	; 0xff
 800987a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f107 020b 	add.w	r2, r7, #11
 8009886:	7cf9      	ldrb	r1, [r7, #19]
 8009888:	4618      	mov	r0, r3
 800988a:	f003 fecd 	bl	800d628 <tcp_listen_with_backlog_and_err>
 800988e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d05d      	beq.n	8009952 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3310      	adds	r3, #16
 800989c:	4618      	mov	r0, r3
 800989e:	f00e fb6e 	bl	8017f7e <sys_mbox_valid>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00b      	beq.n	80098c0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3310      	adds	r3, #16
 80098ae:	4618      	mov	r0, r3
 80098b0:	f00e fade 	bl	8017e70 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3310      	adds	r3, #16
 80098ba:	4618      	mov	r0, r3
 80098bc:	f00e fb70 	bl	8017fa0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3314      	adds	r3, #20
 80098ca:	4618      	mov	r0, r3
 80098cc:	f00e fb57 	bl	8017f7e <sys_mbox_valid>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d108      	bne.n	80098e8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3314      	adds	r3, #20
 80098dc:	2106      	movs	r1, #6
 80098de:	4618      	mov	r0, r3
 80098e0:	f00e faa4 	bl	8017e2c <sys_mbox_new>
 80098e4:	4603      	mov	r3, r0
 80098e6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80098e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d118      	bne.n	8009922 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2202      	movs	r2, #2
 80098f6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	4610      	mov	r0, r2
 800990e:	f004 fe6f 	bl	800e5f0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4912      	ldr	r1, [pc, #72]	; (8009964 <lwip_netconn_do_listen+0x12c>)
 800991a:	4618      	mov	r0, r3
 800991c:	f004 fee0 	bl	800e6e0 <tcp_accept>
 8009920:	e017      	b.n	8009952 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f003 fc66 	bl	800d1f4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2200      	movs	r2, #0
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	e00f      	b.n	8009952 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d102      	bne.n	8009942 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	72fb      	strb	r3, [r7, #11]
 8009940:	e007      	b.n	8009952 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009942:	23f5      	movs	r3, #245	; 0xf5
 8009944:	72fb      	strb	r3, [r7, #11]
 8009946:	e004      	b.n	8009952 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009948:	23f0      	movs	r3, #240	; 0xf0
 800994a:	72fb      	strb	r3, [r7, #11]
 800994c:	e001      	b.n	8009952 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800994e:	23f5      	movs	r3, #245	; 0xf5
 8009950:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009952:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800995a:	bf00      	nop
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	08008e49 	.word	0x08008e49

08009968 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	2200      	movs	r2, #0
 8009978:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d022      	beq.n	80099ca <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800998e:	2b10      	cmp	r3, #16
 8009990:	d11b      	bne.n	80099ca <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800999e:	d202      	bcs.n	80099a6 <lwip_netconn_do_recv+0x3e>
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	e001      	b.n	80099aa <lwip_netconn_do_recv+0x42>
 80099a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099aa:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	89fa      	ldrh	r2, [r7, #14]
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f003 ff3a 	bl	800d830 <tcp_recved>
        remaining -= recved;
 80099bc:	89fb      	ldrh	r3, [r7, #14]
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e6      	bne.n	8009998 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <lwip_netconn_do_writemore+0x24>
 80099ea:	4b96      	ldr	r3, [pc, #600]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 80099ec:	f240 6273 	movw	r2, #1651	; 0x673
 80099f0:	4995      	ldr	r1, [pc, #596]	; (8009c48 <lwip_netconn_do_writemore+0x274>)
 80099f2:	4896      	ldr	r0, [pc, #600]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 80099f4:	f00e fc62 	bl	80182bc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d006      	beq.n	8009a0e <lwip_netconn_do_writemore+0x3a>
 8009a00:	4b90      	ldr	r3, [pc, #576]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 8009a02:	f240 6274 	movw	r2, #1652	; 0x674
 8009a06:	4992      	ldr	r1, [pc, #584]	; (8009c50 <lwip_netconn_do_writemore+0x27c>)
 8009a08:	4890      	ldr	r0, [pc, #576]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 8009a0a:	f00e fc57 	bl	80182bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <lwip_netconn_do_writemore+0x50>
 8009a16:	4b8b      	ldr	r3, [pc, #556]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 8009a18:	f240 6275 	movw	r2, #1653	; 0x675
 8009a1c:	498d      	ldr	r1, [pc, #564]	; (8009c54 <lwip_netconn_do_writemore+0x280>)
 8009a1e:	488b      	ldr	r0, [pc, #556]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 8009a20:	f00e fc4c 	bl	80182bc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <lwip_netconn_do_writemore+0x66>
 8009a2c:	4b85      	ldr	r3, [pc, #532]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 8009a2e:	f240 6276 	movw	r2, #1654	; 0x676
 8009a32:	4989      	ldr	r1, [pc, #548]	; (8009c58 <lwip_netconn_do_writemore+0x284>)
 8009a34:	4885      	ldr	r0, [pc, #532]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 8009a36:	f00e fc41 	bl	80182bc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	699a      	ldr	r2, [r3, #24]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d306      	bcc.n	8009a58 <lwip_netconn_do_writemore+0x84>
 8009a4a:	4b7e      	ldr	r3, [pc, #504]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 8009a4c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009a50:	4982      	ldr	r1, [pc, #520]	; (8009c5c <lwip_netconn_do_writemore+0x288>)
 8009a52:	487e      	ldr	r0, [pc, #504]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 8009a54:	f00e fc32 	bl	80182bc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a1b      	ldr	r3, [r3, #32]
 8009a5c:	899b      	ldrh	r3, [r3, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <lwip_netconn_do_writemore+0x9c>
 8009a62:	4b78      	ldr	r3, [pc, #480]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 8009a64:	f240 6279 	movw	r2, #1657	; 0x679
 8009a68:	497d      	ldr	r1, [pc, #500]	; (8009c60 <lwip_netconn_do_writemore+0x28c>)
 8009a6a:	4878      	ldr	r0, [pc, #480]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 8009a6c:	f00e fc26 	bl	80182bc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	7f1b      	ldrb	r3, [r3, #28]
 8009a76:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	7f1b      	ldrb	r3, [r3, #28]
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d104      	bne.n	8009a8e <lwip_netconn_do_writemore+0xba>
 8009a84:	7ebb      	ldrb	r3, [r7, #26]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <lwip_netconn_do_writemore+0xbe>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <lwip_netconn_do_writemore+0xc0>
 8009a92:	2300      	movs	r3, #0
 8009a94:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac0:	d307      	bcc.n	8009ad2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ac6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009ac8:	7ebb      	ldrb	r3, [r7, #26]
 8009aca:	f043 0302 	orr.w	r3, r3, #2
 8009ace:	76bb      	strb	r3, [r7, #26]
 8009ad0:	e001      	b.n	8009ad6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ade:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009ae0:	89fa      	ldrh	r2, [r7, #14]
 8009ae2:	8bbb      	ldrh	r3, [r7, #28]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d216      	bcs.n	8009b16 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009ae8:	89fb      	ldrh	r3, [r7, #14]
 8009aea:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009aec:	7e3b      	ldrb	r3, [r7, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00d      	beq.n	8009b0e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009af2:	8bbb      	ldrh	r3, [r7, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10e      	bne.n	8009b16 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <lwip_netconn_do_writemore+0x134>
 8009b02:	f06f 0306 	mvn.w	r3, #6
 8009b06:	e000      	b.n	8009b0a <lwip_netconn_do_writemore+0x136>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009b0c:	e07d      	b.n	8009c0a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009b0e:	7ebb      	ldrb	r3, [r7, #26]
 8009b10:	f043 0302 	orr.w	r3, r3, #2
 8009b14:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	8bbb      	ldrh	r3, [r7, #28]
 8009b1e:	441a      	add	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d906      	bls.n	8009b3a <lwip_netconn_do_writemore+0x166>
 8009b2c:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <lwip_netconn_do_writemore+0x270>)
 8009b2e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009b32:	494c      	ldr	r1, [pc, #304]	; (8009c64 <lwip_netconn_do_writemore+0x290>)
 8009b34:	4845      	ldr	r0, [pc, #276]	; (8009c4c <lwip_netconn_do_writemore+0x278>)
 8009b36:	f00e fbc1 	bl	80182bc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009b3a:	8bbb      	ldrh	r3, [r7, #28]
 8009b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d103      	bne.n	8009b4c <lwip_netconn_do_writemore+0x178>
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b4a:	d209      	bcs.n	8009b60 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009b50:	8bba      	ldrh	r2, [r7, #28]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d10b      	bne.n	8009b6e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	899b      	ldrh	r3, [r3, #12]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d906      	bls.n	8009b6e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009b60:	2301      	movs	r3, #1
 8009b62:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009b64:	7ebb      	ldrb	r3, [r7, #26]
 8009b66:	f043 0302 	orr.w	r3, r3, #2
 8009b6a:	76bb      	strb	r3, [r7, #26]
 8009b6c:	e001      	b.n	8009b72 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6858      	ldr	r0, [r3, #4]
 8009b76:	7ebb      	ldrb	r3, [r7, #26]
 8009b78:	8bba      	ldrh	r2, [r7, #28]
 8009b7a:	6979      	ldr	r1, [r7, #20]
 8009b7c:	f007 fc74 	bl	8011468 <tcp_write>
 8009b80:	4603      	mov	r3, r0
 8009b82:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009b84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d12c      	bne.n	8009be6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	6999      	ldr	r1, [r3, #24]
 8009b92:	8bba      	ldrh	r2, [r7, #28]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	440a      	add	r2, r1
 8009b9a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a1b      	ldr	r3, [r3, #32]
 8009ba0:	6919      	ldr	r1, [r3, #16]
 8009ba2:	8bba      	ldrh	r2, [r7, #28]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	440a      	add	r2, r1
 8009baa:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d113      	bne.n	8009be6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	899a      	ldrh	r2, [r3, #12]
 8009bc4:	3a01      	subs	r2, #1
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	899b      	ldrh	r3, [r3, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d008      	beq.n	8009be6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	3208      	adds	r2, #8
 8009bdc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	2200      	movs	r2, #0
 8009be4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009be6:	7e7b      	ldrb	r3, [r7, #25]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <lwip_netconn_do_writemore+0x222>
 8009bec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f43f af50 	beq.w	8009a96 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009bf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d004      	beq.n	8009c08 <lwip_netconn_do_writemore+0x234>
 8009bfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c06:	d146      	bne.n	8009c96 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009c08:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009c0a:	7e3b      	ldrb	r3, [r7, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d02b      	beq.n	8009c68 <lwip_netconn_do_writemore+0x294>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d223      	bcs.n	8009c68 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <lwip_netconn_do_writemore+0x260>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2103      	movs	r1, #3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7f1b      	ldrb	r3, [r3, #28]
 8009c38:	f043 0310 	orr.w	r3, r3, #16
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	771a      	strb	r2, [r3, #28]
 8009c42:	e028      	b.n	8009c96 <lwip_netconn_do_writemore+0x2c2>
 8009c44:	080196f4 	.word	0x080196f4
 8009c48:	0801984c 	.word	0x0801984c
 8009c4c:	08019738 	.word	0x08019738
 8009c50:	08019b54 	.word	0x08019b54
 8009c54:	0801985c 	.word	0x0801985c
 8009c58:	08019b74 	.word	0x08019b74
 8009c5c:	08019b8c 	.word	0x08019b8c
 8009c60:	08019bcc 	.word	0x08019bcc
 8009c64:	08019bf4 	.word	0x08019bf4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009c70:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009c74:	d305      	bcc.n	8009c82 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d909      	bls.n	8009c96 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <lwip_netconn_do_writemore+0x2c2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2103      	movs	r1, #3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009c96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d11d      	bne.n	8009cda <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	699a      	ldr	r2, [r3, #24]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d002      	beq.n	8009cb4 <lwip_netconn_do_writemore+0x2e0>
 8009cae:	7e3b      	ldrb	r3, [r7, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f008 f9bf 	bl	8012040 <tcp_output>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009cc6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009cca:	f113 0f04 	cmn.w	r3, #4
 8009cce:	d12c      	bne.n	8009d2a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009cd0:	7b3b      	ldrb	r3, [r7, #12]
 8009cd2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	76fb      	strb	r3, [r7, #27]
 8009cd8:	e027      	b.n	8009d2a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce2:	d120      	bne.n	8009d26 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f008 f9a9 	bl	8012040 <tcp_output>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009cf2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009cf6:	f113 0f04 	cmn.w	r3, #4
 8009cfa:	d104      	bne.n	8009d06 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009cfc:	7b7b      	ldrb	r3, [r7, #13]
 8009cfe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009d00:	2301      	movs	r3, #1
 8009d02:	76fb      	strb	r3, [r7, #27]
 8009d04:	e011      	b.n	8009d2a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009d06:	7e3b      	ldrb	r3, [r7, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00e      	beq.n	8009d2a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <lwip_netconn_do_writemore+0x348>
 8009d16:	f06f 0306 	mvn.w	r3, #6
 8009d1a:	e000      	b.n	8009d1e <lwip_netconn_do_writemore+0x34a>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009d20:	2301      	movs	r3, #1
 8009d22:	76fb      	strb	r3, [r7, #27]
 8009d24:	e001      	b.n	8009d2a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009d26:	2301      	movs	r3, #1
 8009d28:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009d2a:	7efb      	ldrb	r3, [r7, #27]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d015      	beq.n	8009d5c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	7ffa      	ldrb	r2, [r7, #31]
 8009d40:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009d4e:	78fb      	ldrb	r3, [r7, #3]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d006      	beq.n	8009d62 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009d54:	68b8      	ldr	r0, [r7, #8]
 8009d56:	f00e f989 	bl	801806c <sys_sem_signal>
 8009d5a:	e002      	b.n	8009d62 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d60:	e000      	b.n	8009d64 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fd22 	bl	80087c6 <netconn_err>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d166      	bne.n	8009e5c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	d15d      	bne.n	8009e58 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009da6:	23fb      	movs	r3, #251	; 0xfb
 8009da8:	73fb      	strb	r3, [r7, #15]
 8009daa:	e057      	b.n	8009e5c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d04d      	beq.n	8009e52 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <lwip_netconn_do_write+0x6a>
 8009dc8:	4b28      	ldr	r3, [pc, #160]	; (8009e6c <lwip_netconn_do_write+0x100>)
 8009dca:	f240 7223 	movw	r2, #1827	; 0x723
 8009dce:	4928      	ldr	r1, [pc, #160]	; (8009e70 <lwip_netconn_do_write+0x104>)
 8009dd0:	4828      	ldr	r0, [pc, #160]	; (8009e74 <lwip_netconn_do_write+0x108>)
 8009dd2:	f00e fa73 	bl	80182bc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d106      	bne.n	8009dec <lwip_netconn_do_write+0x80>
 8009dde:	4b23      	ldr	r3, [pc, #140]	; (8009e6c <lwip_netconn_do_write+0x100>)
 8009de0:	f240 7224 	movw	r2, #1828	; 0x724
 8009de4:	4924      	ldr	r1, [pc, #144]	; (8009e78 <lwip_netconn_do_write+0x10c>)
 8009de6:	4823      	ldr	r0, [pc, #140]	; (8009e74 <lwip_netconn_do_write+0x108>)
 8009de8:	f00e fa68 	bl	80182bc <iprintf>
        msg->conn->current_msg = msg;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2100      	movs	r1, #0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fdea 	bl	80099d4 <lwip_netconn_do_writemore>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d02e      	beq.n	8009e64 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	785b      	ldrb	r3, [r3, #1]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d006      	beq.n	8009e1e <lwip_netconn_do_write+0xb2>
 8009e10:	4b16      	ldr	r3, [pc, #88]	; (8009e6c <lwip_netconn_do_write+0x100>)
 8009e12:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009e16:	4919      	ldr	r1, [pc, #100]	; (8009e7c <lwip_netconn_do_write+0x110>)
 8009e18:	4816      	ldr	r0, [pc, #88]	; (8009e74 <lwip_netconn_do_write+0x108>)
 8009e1a:	f00e fa4f 	bl	80182bc <iprintf>
          UNLOCK_TCPIP_CORE();
 8009e1e:	4818      	ldr	r0, [pc, #96]	; (8009e80 <lwip_netconn_do_write+0x114>)
 8009e20:	f00e f995 	bl	801814e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f00e f8ec 	bl	801800a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009e32:	4813      	ldr	r0, [pc, #76]	; (8009e80 <lwip_netconn_do_write+0x114>)
 8009e34:	f00e f97c 	bl	8018130 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d110      	bne.n	8009e64 <lwip_netconn_do_write+0xf8>
 8009e42:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <lwip_netconn_do_write+0x100>)
 8009e44:	f240 722c 	movw	r2, #1836	; 0x72c
 8009e48:	490c      	ldr	r1, [pc, #48]	; (8009e7c <lwip_netconn_do_write+0x110>)
 8009e4a:	480a      	ldr	r0, [pc, #40]	; (8009e74 <lwip_netconn_do_write+0x108>)
 8009e4c:	f00e fa36 	bl	80182bc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009e50:	e008      	b.n	8009e64 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009e52:	23f5      	movs	r3, #245	; 0xf5
 8009e54:	73fb      	strb	r3, [r7, #15]
 8009e56:	e001      	b.n	8009e5c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009e58:	23fa      	movs	r3, #250	; 0xfa
 8009e5a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	7bfa      	ldrb	r2, [r7, #15]
 8009e60:	711a      	strb	r2, [r3, #4]
 8009e62:	e000      	b.n	8009e66 <lwip_netconn_do_write+0xfa>
        return;
 8009e64:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	080196f4 	.word	0x080196f4
 8009e70:	08019a98 	.word	0x08019a98
 8009e74:	08019738 	.word	0x08019738
 8009e78:	08019c20 	.word	0x08019c20
 8009e7c:	08019ab4 	.word	0x08019ab4
 8009e80:	2000c3a0 	.word	0x2000c3a0

08009e84 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d069      	beq.n	8009f76 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d162      	bne.n	8009f76 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d002      	beq.n	8009ebe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d05b      	beq.n	8009f76 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009ebe:	7afb      	ldrb	r3, [r7, #11]
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d103      	bne.n	8009ecc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	22f5      	movs	r2, #245	; 0xf5
 8009ec8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009eca:	e059      	b.n	8009f80 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d103      	bne.n	8009eda <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	22fb      	movs	r2, #251	; 0xfb
 8009ed6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009ed8:	e052      	b.n	8009f80 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	7a1b      	ldrb	r3, [r3, #8]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d004      	beq.n	8009ef0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff f9a0 	bl	8009230 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d006      	beq.n	8009f08 <lwip_netconn_do_close+0x84>
 8009efa:	4b23      	ldr	r3, [pc, #140]	; (8009f88 <lwip_netconn_do_close+0x104>)
 8009efc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009f00:	4922      	ldr	r1, [pc, #136]	; (8009f8c <lwip_netconn_do_close+0x108>)
 8009f02:	4823      	ldr	r0, [pc, #140]	; (8009f90 <lwip_netconn_do_close+0x10c>)
 8009f04:	f00e f9da 	bl	80182bc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fa04 	bl	800932c <lwip_netconn_do_close_internal>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d029      	beq.n	8009f7e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d006      	beq.n	8009f42 <lwip_netconn_do_close+0xbe>
 8009f34:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <lwip_netconn_do_close+0x104>)
 8009f36:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009f3a:	4916      	ldr	r1, [pc, #88]	; (8009f94 <lwip_netconn_do_close+0x110>)
 8009f3c:	4814      	ldr	r0, [pc, #80]	; (8009f90 <lwip_netconn_do_close+0x10c>)
 8009f3e:	f00e f9bd 	bl	80182bc <iprintf>
        UNLOCK_TCPIP_CORE();
 8009f42:	4815      	ldr	r0, [pc, #84]	; (8009f98 <lwip_netconn_do_close+0x114>)
 8009f44:	f00e f903 	bl	801814e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	330c      	adds	r3, #12
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f00e f85a 	bl	801800a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009f56:	4810      	ldr	r0, [pc, #64]	; (8009f98 <lwip_netconn_do_close+0x114>)
 8009f58:	f00e f8ea 	bl	8018130 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	785b      	ldrb	r3, [r3, #1]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00b      	beq.n	8009f7e <lwip_netconn_do_close+0xfa>
 8009f66:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <lwip_netconn_do_close+0x104>)
 8009f68:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009f6c:	4909      	ldr	r1, [pc, #36]	; (8009f94 <lwip_netconn_do_close+0x110>)
 8009f6e:	4808      	ldr	r0, [pc, #32]	; (8009f90 <lwip_netconn_do_close+0x10c>)
 8009f70:	f00e f9a4 	bl	80182bc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009f74:	e003      	b.n	8009f7e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	22f5      	movs	r2, #245	; 0xf5
 8009f7a:	711a      	strb	r2, [r3, #4]
 8009f7c:	e000      	b.n	8009f80 <lwip_netconn_do_close+0xfc>
      return;
 8009f7e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	080196f4 	.word	0x080196f4
 8009f8c:	08019a98 	.word	0x08019a98
 8009f90:	08019738 	.word	0x08019738
 8009f94:	08019ab4 	.word	0x08019ab4
 8009f98:	2000c3a0 	.word	0x2000c3a0

08009f9c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d013      	beq.n	8009fd2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f002 fc6a 	bl	800c890 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	2006      	movs	r0, #6
 8009fce:	f001 fe31 	bl	800bc34 <memp_free>
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d108      	bne.n	800a000 <netbuf_data+0x24>
 8009fee:	4b1b      	ldr	r3, [pc, #108]	; (800a05c <netbuf_data+0x80>)
 8009ff0:	22c6      	movs	r2, #198	; 0xc6
 8009ff2:	491b      	ldr	r1, [pc, #108]	; (800a060 <netbuf_data+0x84>)
 8009ff4:	481b      	ldr	r0, [pc, #108]	; (800a064 <netbuf_data+0x88>)
 8009ff6:	f00e f961 	bl	80182bc <iprintf>
 8009ffa:	f06f 030f 	mvn.w	r3, #15
 8009ffe:	e029      	b.n	800a054 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d108      	bne.n	800a018 <netbuf_data+0x3c>
 800a006:	4b15      	ldr	r3, [pc, #84]	; (800a05c <netbuf_data+0x80>)
 800a008:	22c7      	movs	r2, #199	; 0xc7
 800a00a:	4917      	ldr	r1, [pc, #92]	; (800a068 <netbuf_data+0x8c>)
 800a00c:	4815      	ldr	r0, [pc, #84]	; (800a064 <netbuf_data+0x88>)
 800a00e:	f00e f955 	bl	80182bc <iprintf>
 800a012:	f06f 030f 	mvn.w	r3, #15
 800a016:	e01d      	b.n	800a054 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d108      	bne.n	800a030 <netbuf_data+0x54>
 800a01e:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <netbuf_data+0x80>)
 800a020:	22c8      	movs	r2, #200	; 0xc8
 800a022:	4912      	ldr	r1, [pc, #72]	; (800a06c <netbuf_data+0x90>)
 800a024:	480f      	ldr	r0, [pc, #60]	; (800a064 <netbuf_data+0x88>)
 800a026:	f00e f949 	bl	80182bc <iprintf>
 800a02a:	f06f 030f 	mvn.w	r3, #15
 800a02e:	e011      	b.n	800a054 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <netbuf_data+0x62>
    return ERR_BUF;
 800a038:	f06f 0301 	mvn.w	r3, #1
 800a03c:	e00a      	b.n	800a054 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	895a      	ldrh	r2, [r3, #10]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	08019c4c 	.word	0x08019c4c
 800a060:	08019d54 	.word	0x08019d54
 800a064:	08019c9c 	.word	0x08019c9c
 800a068:	08019d70 	.word	0x08019d70
 800a06c:	08019d90 	.word	0x08019d90

0800a070 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d108      	bne.n	800a090 <netbuf_next+0x20>
 800a07e:	4b11      	ldr	r3, [pc, #68]	; (800a0c4 <netbuf_next+0x54>)
 800a080:	22e0      	movs	r2, #224	; 0xe0
 800a082:	4911      	ldr	r1, [pc, #68]	; (800a0c8 <netbuf_next+0x58>)
 800a084:	4811      	ldr	r0, [pc, #68]	; (800a0cc <netbuf_next+0x5c>)
 800a086:	f00e f919 	bl	80182bc <iprintf>
 800a08a:	f04f 33ff 	mov.w	r3, #4294967295
 800a08e:	e014      	b.n	800a0ba <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <netbuf_next+0x30>
    return -1;
 800a09a:	f04f 33ff 	mov.w	r3, #4294967295
 800a09e:	e00c      	b.n	800a0ba <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <netbuf_next+0x48>
    return 1;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e000      	b.n	800a0ba <netbuf_next+0x4a>
  }
  return 0;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	08019c4c 	.word	0x08019c4c
 800a0c8:	08019dac 	.word	0x08019dac
 800a0cc:	08019c9c 	.word	0x08019c9c

0800a0d0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a0da:	f009 f877 	bl	80131cc <sys_timeouts_sleeptime>
 800a0de:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e6:	d10b      	bne.n	800a100 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a0e8:	4813      	ldr	r0, [pc, #76]	; (800a138 <tcpip_timeouts_mbox_fetch+0x68>)
 800a0ea:	f00e f830 	bl	801814e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f00d fee8 	bl	8017ec8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a0f8:	480f      	ldr	r0, [pc, #60]	; (800a138 <tcpip_timeouts_mbox_fetch+0x68>)
 800a0fa:	f00e f819 	bl	8018130 <sys_mutex_lock>
    return;
 800a0fe:	e018      	b.n	800a132 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a106:	f009 f827 	bl	8013158 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a10a:	e7e6      	b.n	800a0da <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a10c:	480a      	ldr	r0, [pc, #40]	; (800a138 <tcpip_timeouts_mbox_fetch+0x68>)
 800a10e:	f00e f81e 	bl	801814e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f00d fed6 	bl	8017ec8 <sys_arch_mbox_fetch>
 800a11c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a11e:	4806      	ldr	r0, [pc, #24]	; (800a138 <tcpip_timeouts_mbox_fetch+0x68>)
 800a120:	f00e f806 	bl	8018130 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d102      	bne.n	800a132 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a12c:	f009 f814 	bl	8013158 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a130:	e7d3      	b.n	800a0da <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	2000c3a0 	.word	0x2000c3a0

0800a13c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a144:	4810      	ldr	r0, [pc, #64]	; (800a188 <tcpip_thread+0x4c>)
 800a146:	f00d fff3 	bl	8018130 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a14a:	4b10      	ldr	r3, [pc, #64]	; (800a18c <tcpip_thread+0x50>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d005      	beq.n	800a15e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <tcpip_thread+0x50>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a0e      	ldr	r2, [pc, #56]	; (800a190 <tcpip_thread+0x54>)
 800a158:	6812      	ldr	r2, [r2, #0]
 800a15a:	4610      	mov	r0, r2
 800a15c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a15e:	f107 030c 	add.w	r3, r7, #12
 800a162:	4619      	mov	r1, r3
 800a164:	480b      	ldr	r0, [pc, #44]	; (800a194 <tcpip_thread+0x58>)
 800a166:	f7ff ffb3 	bl	800a0d0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d106      	bne.n	800a17e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a170:	4b09      	ldr	r3, [pc, #36]	; (800a198 <tcpip_thread+0x5c>)
 800a172:	2291      	movs	r2, #145	; 0x91
 800a174:	4909      	ldr	r1, [pc, #36]	; (800a19c <tcpip_thread+0x60>)
 800a176:	480a      	ldr	r0, [pc, #40]	; (800a1a0 <tcpip_thread+0x64>)
 800a178:	f00e f8a0 	bl	80182bc <iprintf>
      continue;
 800a17c:	e003      	b.n	800a186 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 f80f 	bl	800a1a4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a186:	e7ea      	b.n	800a15e <tcpip_thread+0x22>
 800a188:	2000c3a0 	.word	0x2000c3a0
 800a18c:	200087b8 	.word	0x200087b8
 800a190:	200087bc 	.word	0x200087bc
 800a194:	200087c0 	.word	0x200087c0
 800a198:	08019de4 	.word	0x08019de4
 800a19c:	08019e14 	.word	0x08019e14
 800a1a0:	08019e34 	.word	0x08019e34

0800a1a4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d018      	beq.n	800a1e6 <tcpip_thread_handle_msg+0x42>
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d021      	beq.n	800a1fc <tcpip_thread_handle_msg+0x58>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d126      	bne.n	800a20a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	6850      	ldr	r0, [r2, #4]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	6892      	ldr	r2, [r2, #8]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d004      	beq.n	800a1dc <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f002 fb5a 	bl	800c890 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	2009      	movs	r0, #9
 800a1e0:	f001 fd28 	bl	800bc34 <memp_free>
      break;
 800a1e4:	e018      	b.n	800a218 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	6892      	ldr	r2, [r2, #8]
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	2008      	movs	r0, #8
 800a1f6:	f001 fd1d 	bl	800bc34 <memp_free>
      break;
 800a1fa:	e00d      	b.n	800a218 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	6892      	ldr	r2, [r2, #8]
 800a204:	4610      	mov	r0, r2
 800a206:	4798      	blx	r3
      break;
 800a208:	e006      	b.n	800a218 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a20a:	4b05      	ldr	r3, [pc, #20]	; (800a220 <tcpip_thread_handle_msg+0x7c>)
 800a20c:	22cf      	movs	r2, #207	; 0xcf
 800a20e:	4905      	ldr	r1, [pc, #20]	; (800a224 <tcpip_thread_handle_msg+0x80>)
 800a210:	4805      	ldr	r0, [pc, #20]	; (800a228 <tcpip_thread_handle_msg+0x84>)
 800a212:	f00e f853 	bl	80182bc <iprintf>
      break;
 800a216:	bf00      	nop
  }
}
 800a218:	bf00      	nop
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	08019de4 	.word	0x08019de4
 800a224:	08019e14 	.word	0x08019e14
 800a228:	08019e34 	.word	0x08019e34

0800a22c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a238:	481a      	ldr	r0, [pc, #104]	; (800a2a4 <tcpip_inpkt+0x78>)
 800a23a:	f00d fea0 	bl	8017f7e <sys_mbox_valid>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d105      	bne.n	800a250 <tcpip_inpkt+0x24>
 800a244:	4b18      	ldr	r3, [pc, #96]	; (800a2a8 <tcpip_inpkt+0x7c>)
 800a246:	22fc      	movs	r2, #252	; 0xfc
 800a248:	4918      	ldr	r1, [pc, #96]	; (800a2ac <tcpip_inpkt+0x80>)
 800a24a:	4819      	ldr	r0, [pc, #100]	; (800a2b0 <tcpip_inpkt+0x84>)
 800a24c:	f00e f836 	bl	80182bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a250:	2009      	movs	r0, #9
 800a252:	f001 fc9d 	bl	800bb90 <memp_malloc>
 800a256:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d102      	bne.n	800a264 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295
 800a262:	e01a      	b.n	800a29a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a27c:	6979      	ldr	r1, [r7, #20]
 800a27e:	4809      	ldr	r0, [pc, #36]	; (800a2a4 <tcpip_inpkt+0x78>)
 800a280:	f00d fe08 	bl	8017e94 <sys_mbox_trypost>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d006      	beq.n	800a298 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a28a:	6979      	ldr	r1, [r7, #20]
 800a28c:	2009      	movs	r0, #9
 800a28e:	f001 fcd1 	bl	800bc34 <memp_free>
    return ERR_MEM;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
 800a296:	e000      	b.n	800a29a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a298:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	200087c0 	.word	0x200087c0
 800a2a8:	08019de4 	.word	0x08019de4
 800a2ac:	08019e5c 	.word	0x08019e5c
 800a2b0:	08019e34 	.word	0x08019e34

0800a2b4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2c4:	f003 0318 	and.w	r3, r3, #24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a2cc:	4a08      	ldr	r2, [pc, #32]	; (800a2f0 <tcpip_input+0x3c>)
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff ffab 	bl	800a22c <tcpip_inpkt>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	e005      	b.n	800a2e6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a2da:	4a06      	ldr	r2, [pc, #24]	; (800a2f4 <tcpip_input+0x40>)
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff ffa4 	bl	800a22c <tcpip_inpkt>
 800a2e4:	4603      	mov	r3, r0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	08017c81 	.word	0x08017c81
 800a2f4:	08016b65 	.word	0x08016b65

0800a2f8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a302:	4819      	ldr	r0, [pc, #100]	; (800a368 <tcpip_try_callback+0x70>)
 800a304:	f00d fe3b 	bl	8017f7e <sys_mbox_valid>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d106      	bne.n	800a31c <tcpip_try_callback+0x24>
 800a30e:	4b17      	ldr	r3, [pc, #92]	; (800a36c <tcpip_try_callback+0x74>)
 800a310:	f240 125d 	movw	r2, #349	; 0x15d
 800a314:	4916      	ldr	r1, [pc, #88]	; (800a370 <tcpip_try_callback+0x78>)
 800a316:	4817      	ldr	r0, [pc, #92]	; (800a374 <tcpip_try_callback+0x7c>)
 800a318:	f00d ffd0 	bl	80182bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a31c:	2008      	movs	r0, #8
 800a31e:	f001 fc37 	bl	800bb90 <memp_malloc>
 800a322:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a32a:	f04f 33ff 	mov.w	r3, #4294967295
 800a32e:	e017      	b.n	800a360 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2201      	movs	r2, #1
 800a334:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	4808      	ldr	r0, [pc, #32]	; (800a368 <tcpip_try_callback+0x70>)
 800a346:	f00d fda5 	bl	8017e94 <sys_mbox_trypost>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a350:	68f9      	ldr	r1, [r7, #12]
 800a352:	2008      	movs	r0, #8
 800a354:	f001 fc6e 	bl	800bc34 <memp_free>
    return ERR_MEM;
 800a358:	f04f 33ff 	mov.w	r3, #4294967295
 800a35c:	e000      	b.n	800a360 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200087c0 	.word	0x200087c0
 800a36c:	08019de4 	.word	0x08019de4
 800a370:	08019e5c 	.word	0x08019e5c
 800a374:	08019e34 	.word	0x08019e34

0800a378 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a384:	4806      	ldr	r0, [pc, #24]	; (800a3a0 <tcpip_send_msg_wait_sem+0x28>)
 800a386:	f00d fed3 	bl	8018130 <sys_mutex_lock>
  fn(apimsg);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68b8      	ldr	r0, [r7, #8]
 800a38e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a390:	4803      	ldr	r0, [pc, #12]	; (800a3a0 <tcpip_send_msg_wait_sem+0x28>)
 800a392:	f00d fedc 	bl	801814e <sys_mutex_unlock>
  return ERR_OK;
 800a396:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	2000c3a0 	.word	0x2000c3a0

0800a3a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af02      	add	r7, sp, #8
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a3ae:	f000 ff67 	bl	800b280 <lwip_init>

  tcpip_init_done = initfunc;
 800a3b2:	4a17      	ldr	r2, [pc, #92]	; (800a410 <tcpip_init+0x6c>)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a3b8:	4a16      	ldr	r2, [pc, #88]	; (800a414 <tcpip_init+0x70>)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a3be:	2106      	movs	r1, #6
 800a3c0:	4815      	ldr	r0, [pc, #84]	; (800a418 <tcpip_init+0x74>)
 800a3c2:	f00d fd33 	bl	8017e2c <sys_mbox_new>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d006      	beq.n	800a3da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a3cc:	4b13      	ldr	r3, [pc, #76]	; (800a41c <tcpip_init+0x78>)
 800a3ce:	f240 2261 	movw	r2, #609	; 0x261
 800a3d2:	4913      	ldr	r1, [pc, #76]	; (800a420 <tcpip_init+0x7c>)
 800a3d4:	4813      	ldr	r0, [pc, #76]	; (800a424 <tcpip_init+0x80>)
 800a3d6:	f00d ff71 	bl	80182bc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a3da:	4813      	ldr	r0, [pc, #76]	; (800a428 <tcpip_init+0x84>)
 800a3dc:	f00d fe8c 	bl	80180f8 <sys_mutex_new>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d006      	beq.n	800a3f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <tcpip_init+0x78>)
 800a3e8:	f240 2265 	movw	r2, #613	; 0x265
 800a3ec:	490f      	ldr	r1, [pc, #60]	; (800a42c <tcpip_init+0x88>)
 800a3ee:	480d      	ldr	r0, [pc, #52]	; (800a424 <tcpip_init+0x80>)
 800a3f0:	f00d ff64 	bl	80182bc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	490c      	ldr	r1, [pc, #48]	; (800a430 <tcpip_init+0x8c>)
 800a400:	480c      	ldr	r0, [pc, #48]	; (800a434 <tcpip_init+0x90>)
 800a402:	f00d feb1 	bl	8018168 <sys_thread_new>
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	200087b8 	.word	0x200087b8
 800a414:	200087bc 	.word	0x200087bc
 800a418:	200087c0 	.word	0x200087c0
 800a41c:	08019de4 	.word	0x08019de4
 800a420:	08019e6c 	.word	0x08019e6c
 800a424:	08019e34 	.word	0x08019e34
 800a428:	2000c3a0 	.word	0x2000c3a0
 800a42c:	08019e90 	.word	0x08019e90
 800a430:	0800a13d 	.word	0x0800a13d
 800a434:	08019eb4 	.word	0x08019eb4

0800a438 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <fs_open+0x16>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <fs_open+0x1c>
    return ERR_ARG;
 800a44e:	f06f 030f 	mvn.w	r3, #15
 800a452:	e028      	b.n	800a4a6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <fs_open+0x78>)
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e020      	b.n	800a49c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	4619      	mov	r1, r3
 800a460:	6838      	ldr	r0, [r7, #0]
 800a462:	f7f5 fec5 	bl	80001f0 <strcmp>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d114      	bne.n	800a496 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	7c1a      	ldrb	r2, [r3, #16]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e007      	b.n	800a4a6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1db      	bne.n	800a45a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a4a2:	f06f 0305 	mvn.w	r3, #5
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0802820c 	.word	0x0802820c

0800a4b4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	1ad3      	subs	r3, r2, r3
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a4ee:	22ac      	movs	r2, #172	; 0xac
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f00d feda 	bl	80182ac <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a506:	20ac      	movs	r0, #172	; 0xac
 800a508:	f001 f9c0 	bl	800b88c <mem_malloc>
 800a50c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <http_state_alloc+0x1a>
    http_state_init(ret);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff ffe6 	bl	800a4e6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a51a:	687b      	ldr	r3, [r7, #4]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff ffbb 	bl	800a4b4 <fs_close>
    hs->handle = NULL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d007      	beq.n	800a55c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	4618      	mov	r0, r3
 800a552:	f002 f99d 	bl	800c890 <pbuf_free>
    hs->req = NULL;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a55c:	bf00      	nop
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d005      	beq.n	800a57e <http_state_free+0x1a>
    http_state_eof(hs);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff ffd6 	bl	800a524 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 ffed 	bl	800b558 <mem_free>
  }
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <http_write+0x22>
 800a59c:	4b2c      	ldr	r3, [pc, #176]	; (800a650 <http_write+0xc8>)
 800a59e:	f240 2219 	movw	r2, #537	; 0x219
 800a5a2:	492c      	ldr	r1, [pc, #176]	; (800a654 <http_write+0xcc>)
 800a5a4:	482c      	ldr	r0, [pc, #176]	; (800a658 <http_write+0xd0>)
 800a5a6:	f00d fe89 	bl	80182bc <iprintf>
  len = *length;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a5b0:	8afb      	ldrh	r3, [r7, #22]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <http_write+0x32>
    return ERR_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e045      	b.n	800a646 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5c0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a5c2:	8aba      	ldrh	r2, [r7, #20]
 800a5c4:	8afb      	ldrh	r3, [r7, #22]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d201      	bcs.n	800a5ce <http_write+0x46>
    len = max_len;
 800a5ca:	8abb      	ldrh	r3, [r7, #20]
 800a5cc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a5d6:	8afa      	ldrh	r2, [r7, #22]
 800a5d8:	8abb      	ldrh	r3, [r7, #20]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d901      	bls.n	800a5e2 <http_write+0x5a>
    len = max_len;
 800a5de:	8abb      	ldrh	r3, [r7, #20]
 800a5e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a5e2:	78fb      	ldrb	r3, [r7, #3]
 800a5e4:	8afa      	ldrh	r2, [r7, #22]
 800a5e6:	68b9      	ldr	r1, [r7, #8]
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f006 ff3d 	bl	8011468 <tcp_write>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a5f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fa:	d10f      	bne.n	800a61c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a602:	2b00      	cmp	r3, #0
 800a604:	d004      	beq.n	800a610 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d902      	bls.n	800a616 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a610:	2301      	movs	r3, #1
 800a612:	82fb      	strh	r3, [r7, #22]
 800a614:	e002      	b.n	800a61c <http_write+0x94>
      } else {
        len /= 2;
 800a616:	8afb      	ldrh	r3, [r7, #22]
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a61c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a624:	d102      	bne.n	800a62c <http_write+0xa4>
 800a626:	8afb      	ldrh	r3, [r7, #22]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d8da      	bhi.n	800a5e2 <http_write+0x5a>

  if (err == ERR_OK) {
 800a62c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d103      	bne.n	800a63c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	8afa      	ldrh	r2, [r7, #22]
 800a638:	801a      	strh	r2, [r3, #0]
 800a63a:	e002      	b.n	800a642 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a642:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	08019f04 	.word	0x08019f04
 800a654:	08019f3c 	.word	0x08019f3c
 800a658:	08019f4c 	.word	0x08019f4c

0800a65c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	4613      	mov	r3, r2
 800a668:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a66a:	2100      	movs	r1, #0
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f003 ffbf 	bl	800e5f0 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a672:	2100      	movs	r1, #0
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f003 ffcd 	bl	800e614 <tcp_recv>
  altcp_err(pcb, NULL);
 800a67a:	2100      	movs	r1, #0
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f004 f80d 	bl	800e69c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a682:	2200      	movs	r2, #0
 800a684:	2100      	movs	r1, #0
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f004 f842 	bl	800e710 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a68c:	2100      	movs	r1, #0
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f003 ffe2 	bl	800e658 <tcp_sent>
  if (hs != NULL) {
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d002      	beq.n	800a6a0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a69a:	68b8      	ldr	r0, [r7, #8]
 800a69c:	f7ff ff62 	bl	800a564 <http_state_free>
  }

  if (abort_conn) {
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f002 fee8 	bl	800d47c <tcp_abort>
    return ERR_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	e00f      	b.n	800a6d0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f002 fd9f 	bl	800d1f4 <tcp_close>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d004      	beq.n	800a6cc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a6c2:	2204      	movs	r2, #4
 800a6c4:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <http_close_or_abort_conn+0x7c>)
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f004 f822 	bl	800e710 <tcp_poll>
  }
  return err;
 800a6cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	0800aeeb 	.word	0x0800aeeb

0800a6dc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff ffb6 	bl	800a65c <http_close_or_abort_conn>
 800a6f0:	4603      	mov	r3, r0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff ffe8 	bl	800a6dc <http_close_conn>
  }
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <extract_uri_parameters+0x18>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <extract_uri_parameters+0x1c>
    return (0);
 800a72c:	2300      	movs	r3, #0
 800a72e:	e04e      	b.n	800a7ce <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
 800a738:	e042      	b.n	800a7c0 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	330a      	adds	r3, #10
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800a74c:	2126      	movs	r1, #38	; 0x26
 800a74e:	6978      	ldr	r0, [r7, #20]
 800a750:	f00d fe1e 	bl	8018390 <strchr>
 800a754:	6178      	str	r0, [r7, #20]
    if (pair) {
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d006      	beq.n	800a76a <extract_uri_parameters+0x56>
      *pair = '\0';
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2200      	movs	r2, #0
 800a760:	701a      	strb	r2, [r3, #0]
      pair++;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	3301      	adds	r3, #1
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e00c      	b.n	800a784 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800a76a:	2120      	movs	r1, #32
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f00d fe0f 	bl	8018390 <strchr>
 800a772:	6178      	str	r0, [r7, #20]
      if (pair) {
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <extract_uri_parameters+0x6c>
        *pair = '\0';
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800a784:	213d      	movs	r1, #61	; 0x3d
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f00d fe02 	bl	8018390 <strchr>
 800a78c:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00b      	beq.n	800a7ac <extract_uri_parameters+0x98>
      *equals = '\0';
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	331a      	adds	r3, #26
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	605a      	str	r2, [r3, #4]
 800a7aa:	e006      	b.n	800a7ba <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	331a      	adds	r3, #26
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	613b      	str	r3, [r7, #16]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2b0f      	cmp	r3, #15
 800a7c4:	dc02      	bgt.n	800a7cc <extract_uri_parameters+0xb8>
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1b6      	bne.n	800a73a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800a7cc:	693b      	ldr	r3, [r7, #16]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ff84 	bl	800a6fa <http_eof>
    return 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e016      	b.n	800a824 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff fe64 	bl	800a4c8 <fs_bytes_left>
 800a800:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc05      	bgt.n	800a814 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff ff75 	bl	800a6fa <http_eof>
    return 0;
 800a810:	2300      	movs	r3, #0
 800a812:	e007      	b.n	800a824 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a814:	4b05      	ldr	r3, [pc, #20]	; (800a82c <http_check_eof+0x54>)
 800a816:	f240 429d 	movw	r2, #1181	; 0x49d
 800a81a:	4905      	ldr	r1, [pc, #20]	; (800a830 <http_check_eof+0x58>)
 800a81c:	4805      	ldr	r0, [pc, #20]	; (800a834 <http_check_eof+0x5c>)
 800a81e:	f00d fd4d 	bl	80182bc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a822:	2301      	movs	r3, #1
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	08019f04 	.word	0x08019f04
 800a830:	08019f74 	.word	0x08019f74
 800a834:	08019f4c 	.word	0x08019f4c

0800a838 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a84e:	4293      	cmp	r3, r2
 800a850:	d803      	bhi.n	800a85a <http_send_data_nonssi+0x22>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	b29b      	uxth	r3, r3
 800a858:	e001      	b.n	800a85e <http_send_data_nonssi+0x26>
 800a85a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a85e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	6999      	ldr	r1, [r3, #24]
 800a864:	f107 020c 	add.w	r2, r7, #12
 800a868:	2300      	movs	r3, #0
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff fe8c 	bl	800a588 <http_write>
 800a870:	4603      	mov	r3, r0
 800a872:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10d      	bne.n	800a898 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a87c:	2301      	movs	r3, #1
 800a87e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	89ba      	ldrh	r2, [r7, #12]
 800a886:	441a      	add	r2, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	89ba      	ldrh	r2, [r7, #12]
 800a892:	1a9a      	subs	r2, r3, r2
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <http_send+0x18>
    return 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e025      	b.n	800a906 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d108      	bne.n	800a8d4 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff ff87 	bl	800a7d8 <http_check_eof>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d101      	bne.n	800a8d4 <http_send+0x32>
      return 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e018      	b.n	800a906 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff ffae 	bl	800a838 <http_send_data_nonssi>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10d      	bne.n	800a904 <http_send+0x62>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fdeb 	bl	800a4c8 <fs_bytes_left>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dc05      	bgt.n	800a904 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fefd 	bl	800a6fa <http_eof>
    return 0;
 800a900:	2300      	movs	r3, #0
 800a902:	e000      	b.n	800a906 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	4a1c      	ldr	r2, [pc, #112]	; (800a990 <http_get_404_file+0x80>)
 800a91e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7ff fd85 	bl	800a438 <fs_open>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d024      	beq.n	800a984 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	4a15      	ldr	r2, [pc, #84]	; (800a994 <http_get_404_file+0x84>)
 800a93e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4619      	mov	r1, r3
 800a948:	4610      	mov	r0, r2
 800a94a:	f7ff fd75 	bl	800a438 <fs_open>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d014      	beq.n	800a984 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	4a0e      	ldr	r2, [pc, #56]	; (800a998 <http_get_404_file+0x88>)
 800a95e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4619      	mov	r1, r3
 800a968:	4610      	mov	r0, r2
 800a96a:	f7ff fd65 	bl	800a438 <fs_open>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
        return NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	e000      	b.n	800a986 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a984:	687b      	ldr	r3, [r7, #4]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	08019fac 	.word	0x08019fac
 800a994:	08019fb8 	.word	0x08019fb8
 800a998:	08019fc4 	.word	0x08019fc4

0800a99c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08e      	sub	sp, #56	; 0x38
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <http_parse_request+0x24>
 800a9b2:	4b65      	ldr	r3, [pc, #404]	; (800ab48 <http_parse_request+0x1ac>)
 800a9b4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a9b8:	4964      	ldr	r1, [pc, #400]	; (800ab4c <http_parse_request+0x1b0>)
 800a9ba:	4865      	ldr	r0, [pc, #404]	; (800ab50 <http_parse_request+0x1b4>)
 800a9bc:	f00d fc7e 	bl	80182bc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <http_parse_request+0x38>
 800a9c6:	4b60      	ldr	r3, [pc, #384]	; (800ab48 <http_parse_request+0x1ac>)
 800a9c8:	f240 72af 	movw	r2, #1967	; 0x7af
 800a9cc:	4961      	ldr	r1, [pc, #388]	; (800ab54 <http_parse_request+0x1b8>)
 800a9ce:	4860      	ldr	r0, [pc, #384]	; (800ab50 <http_parse_request+0x1b4>)
 800a9d0:	f00d fc74 	bl	80182bc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d103      	bne.n	800a9e4 <http_parse_request+0x48>
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a9e4:	f06f 0307 	mvn.w	r3, #7
 800a9e8:	e0aa      	b.n	800ab40 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f6:	621a      	str	r2, [r3, #32]
 800a9f8:	e005      	b.n	800aa06 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa00:	4618      	mov	r0, r3
 800aa02:	f002 f813 	bl	800ca2c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800aa06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa08:	f001 ffe8 	bl	800c9dc <pbuf_ref>

  if (hs->req->next != NULL) {
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d012      	beq.n	800aa3c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	891b      	ldrh	r3, [r3, #8]
 800aa1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800aa20:	4293      	cmp	r3, r2
 800aa22:	bf28      	it	cs
 800aa24:	4613      	movcs	r3, r2
 800aa26:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	6a18      	ldr	r0, [r3, #32]
 800aa2c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4949      	ldr	r1, [pc, #292]	; (800ab58 <http_parse_request+0x1bc>)
 800aa32:	f002 f933 	bl	800cc9c <pbuf_copy_partial>
    data = httpd_req_buf;
 800aa36:	4b48      	ldr	r3, [pc, #288]	; (800ab58 <http_parse_request+0x1bc>)
 800aa38:	637b      	str	r3, [r7, #52]	; 0x34
 800aa3a:	e005      	b.n	800aa48 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	895b      	ldrh	r3, [r3, #10]
 800aa46:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800aa48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa4a:	2b06      	cmp	r3, #6
 800aa4c:	d963      	bls.n	800ab16 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800aa4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa50:	461a      	mov	r2, r3
 800aa52:	4942      	ldr	r1, [pc, #264]	; (800ab5c <http_parse_request+0x1c0>)
 800aa54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa56:	f000 fbdd 	bl	800b214 <lwip_strnstr>
 800aa5a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d059      	beq.n	800ab16 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800aa66:	2204      	movs	r2, #4
 800aa68:	493d      	ldr	r1, [pc, #244]	; (800ab60 <http_parse_request+0x1c4>)
 800aa6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa6c:	f00d fc9d 	bl	80183aa <strncmp>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d117      	bne.n	800aaa6 <http_parse_request+0x10a>
        sp1 = data + 3;
 800aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa78:	3303      	adds	r3, #3
 800aa7a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	461a      	mov	r2, r3
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	3301      	adds	r3, #1
 800aa92:	8b7a      	ldrh	r2, [r7, #26]
 800aa94:	4933      	ldr	r1, [pc, #204]	; (800ab64 <http_parse_request+0x1c8>)
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fbbc 	bl	800b214 <lwip_strnstr>
 800aa9c:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800aa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d111      	bne.n	800aac8 <http_parse_request+0x12c>
 800aaa4:	e006      	b.n	800aab4 <http_parse_request+0x118>
        data[4] = 0;
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800aaae:	f06f 030f 	mvn.w	r3, #15
 800aab2:	e045      	b.n	800ab40 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	3301      	adds	r3, #1
 800aab8:	8b7a      	ldrh	r2, [r7, #26]
 800aaba:	4928      	ldr	r1, [pc, #160]	; (800ab5c <http_parse_request+0x1c0>)
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fba9 	bl	800b214 <lwip_strnstr>
 800aac2:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800aac4:	2301      	movs	r3, #1
 800aac6:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	69fa      	ldr	r2, [r7, #28]
 800aacc:	3201      	adds	r2, #1
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d01e      	beq.n	800ab16 <http_parse_request+0x17a>
 800aad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d91a      	bls.n	800ab16 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800aae0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aae2:	461a      	mov	r2, r3
 800aae4:	4920      	ldr	r1, [pc, #128]	; (800ab68 <http_parse_request+0x1cc>)
 800aae6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aae8:	f000 fb94 	bl	800b214 <lwip_strnstr>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d011      	beq.n	800ab16 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800aafe:	8b3b      	ldrh	r3, [r7, #24]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	4413      	add	r3, r2
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800ab08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab0a:	6979      	ldr	r1, [r7, #20]
 800ab0c:	68b8      	ldr	r0, [r7, #8]
 800ab0e:	f000 f82d 	bl	800ab6c <http_find_file>
 800ab12:	4603      	mov	r3, r0
 800ab14:	e014      	b.n	800ab40 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 ff46 	bl	800c9ac <pbuf_clen>
 800ab20:	4603      	mov	r3, r0
 800ab22:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	891b      	ldrh	r3, [r3, #8]
 800ab2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab2e:	d205      	bcs.n	800ab3c <http_parse_request+0x1a0>
 800ab30:	8a7b      	ldrh	r3, [r7, #18]
 800ab32:	2b05      	cmp	r3, #5
 800ab34:	d802      	bhi.n	800ab3c <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800ab36:	f06f 0304 	mvn.w	r3, #4
 800ab3a:	e001      	b.n	800ab40 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800ab3c:	f06f 030f 	mvn.w	r3, #15
  }
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3738      	adds	r7, #56	; 0x38
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	08019f04 	.word	0x08019f04
 800ab4c:	08019fd0 	.word	0x08019fd0
 800ab50:	08019f4c 	.word	0x08019f4c
 800ab54:	08019fdc 	.word	0x08019fdc
 800ab58:	200087c4 	.word	0x200087c4
 800ab5c:	08019fe8 	.word	0x08019fe8
 800ab60:	08019fec 	.word	0x08019fec
 800ab64:	08019ff4 	.word	0x08019ff4
 800ab68:	08019ff8 	.word	0x08019ff8

0800ab6c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b093      	sub	sp, #76	; 0x4c
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f5 fb3b 	bl	8000204 <strlen>
 800ab8e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d06b      	beq.n	800ac6e <http_find_file+0x102>
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b2f      	cmp	r3, #47	; 0x2f
 800aba2:	d164      	bne.n	800ac6e <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800aba4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800aba6:	4a72      	ldr	r2, [pc, #456]	; (800ad70 <http_find_file+0x204>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d102      	bne.n	800abb2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d15d      	bne.n	800ac6e <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	3b01      	subs	r3, #1
 800abb6:	2b3f      	cmp	r3, #63	; 0x3f
 800abb8:	bf28      	it	cs
 800abba:	233f      	movcs	r3, #63	; 0x3f
 800abbc:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	4619      	mov	r1, r3
 800abca:	4869      	ldr	r0, [pc, #420]	; (800ad70 <http_find_file+0x204>)
 800abcc:	f00d fb63 	bl	8018296 <memcpy>
      http_uri_buf[copy_len] = 0;
 800abd0:	4a67      	ldr	r2, [pc, #412]	; (800ad70 <http_find_file+0x204>)
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	4413      	add	r3, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abde:	e043      	b.n	800ac68 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d028      	beq.n	800ac38 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800abec:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01e      	beq.n	800ac32 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800abf4:	4a5f      	ldr	r2, [pc, #380]	; (800ad74 <http_find_file+0x208>)
 800abf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7f5 fb01 	bl	8000204 <strlen>
 800ac02:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	bf28      	it	cs
 800ac0c:	4613      	movcs	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	4a57      	ldr	r2, [pc, #348]	; (800ad70 <http_find_file+0x204>)
 800ac14:	1898      	adds	r0, r3, r2
 800ac16:	4a57      	ldr	r2, [pc, #348]	; (800ad74 <http_find_file+0x208>)
 800ac18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	4619      	mov	r1, r3
 800ac22:	f00d fb38 	bl	8018296 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800ac26:	6a3a      	ldr	r2, [r7, #32]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	4a50      	ldr	r2, [pc, #320]	; (800ad70 <http_find_file+0x204>)
 800ac2e:	2100      	movs	r1, #0
 800ac30:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800ac32:	4b4f      	ldr	r3, [pc, #316]	; (800ad70 <http_find_file+0x204>)
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac36:	e004      	b.n	800ac42 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800ac38:	4a4e      	ldr	r2, [pc, #312]	; (800ad74 <http_find_file+0x208>)
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff fbf6 	bl	800a438 <fs_open>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800ac50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d104      	bne.n	800ac62 <http_find_file+0xf6>
        uri = file_name;
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800ac60:	e005      	b.n	800ac6e <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ac62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac64:	3301      	adds	r3, #1
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d9b8      	bls.n	800abe0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d161      	bne.n	800ad38 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	213f      	movs	r1, #63	; 0x3f
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f00d fb89 	bl	8018390 <strchr>
 800ac7e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800ac80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800ac86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]
      params++;
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	3301      	adds	r3, #1
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800ac92:	4b39      	ldr	r3, [pc, #228]	; (800ad78 <http_find_file+0x20c>)
 800ac94:	f04f 32ff 	mov.w	r2, #4294967295
 800ac98:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800ac9a:	4b38      	ldr	r3, [pc, #224]	; (800ad7c <http_find_file+0x210>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d034      	beq.n	800ad0c <http_find_file+0x1a0>
 800aca2:	4b37      	ldr	r3, [pc, #220]	; (800ad80 <http_find_file+0x214>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d030      	beq.n	800ad0c <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800acaa:	2300      	movs	r3, #0
 800acac:	633b      	str	r3, [r7, #48]	; 0x30
 800acae:	e028      	b.n	800ad02 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800acb0:	68b8      	ldr	r0, [r7, #8]
 800acb2:	4b33      	ldr	r3, [pc, #204]	; (800ad80 <http_find_file+0x214>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	4413      	add	r3, r2
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f7f5 fa96 	bl	80001f0 <strcmp>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d118      	bne.n	800acfc <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800acca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff fd21 	bl	800a714 <extract_uri_parameters>
 800acd2:	4602      	mov	r2, r0
 800acd4:	4b28      	ldr	r3, [pc, #160]	; (800ad78 <http_find_file+0x20c>)
 800acd6:	601a      	str	r2, [r3, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800acd8:	4b29      	ldr	r3, [pc, #164]	; (800ad80 <http_find_file+0x214>)
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	4413      	add	r3, r2
 800ace2:	685c      	ldr	r4, [r3, #4]
 800ace4:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <http_find_file+0x20c>)
 800ace6:	6819      	ldr	r1, [r3, #0]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800acf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf4:	47a0      	blx	r4
 800acf6:	4603      	mov	r3, r0
 800acf8:	60bb      	str	r3, [r7, #8]
          break;
 800acfa:	e007      	b.n	800ad0c <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	3301      	adds	r3, #1
 800ad00:	633b      	str	r3, [r7, #48]	; 0x30
 800ad02:	4b1e      	ldr	r3, [pc, #120]	; (800ad7c <http_find_file+0x210>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	dbd1      	blt.n	800acb0 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7ff fb90 	bl	800a438 <fs_open>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800ad1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <http_find_file+0x1be>
      file = &hs->file_handle;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad28:	e006      	b.n	800ad38 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 800ad2a:	f107 0308 	add.w	r3, r7, #8
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7ff fded 	bl	800a910 <http_get_404_file>
 800ad36:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800ad3e:	f107 0308 	add.w	r3, r7, #8
 800ad42:	4619      	mov	r1, r3
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff fde3 	bl	800a910 <http_get_404_file>
 800ad4a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 f810 	bl	800ad84 <http_init_file>
 800ad64:	4603      	mov	r3, r0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3744      	adds	r7, #68	; 0x44
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd90      	pop	{r4, r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20008bc4 	.word	0x20008bc4
 800ad74:	08028220 	.word	0x08028220
 800ad78:	20008c0c 	.word	0x20008c0c
 800ad7c:	20008c08 	.word	0x20008c08
 800ad80:	20008c04 	.word	0x20008c04

0800ad84 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d05d      	beq.n	800ae54 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d106      	bne.n	800adae <http_init_file+0x2a>
 800ada0:	4b35      	ldr	r3, [pc, #212]	; (800ae78 <http_init_file+0xf4>)
 800ada2:	f640 120b 	movw	r2, #2315	; 0x90b
 800ada6:	4935      	ldr	r1, [pc, #212]	; (800ae7c <http_init_file+0xf8>)
 800ada8:	4835      	ldr	r0, [pc, #212]	; (800ae80 <http_init_file+0xfc>)
 800adaa:	f00d fa87 	bl	80182bc <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da06      	bge.n	800add2 <http_init_file+0x4e>
 800adc4:	4b2c      	ldr	r3, [pc, #176]	; (800ae78 <http_init_file+0xf4>)
 800adc6:	f640 1234 	movw	r2, #2356	; 0x934
 800adca:	492e      	ldr	r1, [pc, #184]	; (800ae84 <http_init_file+0x100>)
 800adcc:	482c      	ldr	r0, [pc, #176]	; (800ae80 <http_init_file+0xfc>)
 800adce:	f00d fa75 	bl	80182bc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	461a      	mov	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	695b      	ldr	r3, [r3, #20]
 800ade8:	7c1b      	ldrb	r3, [r3, #16]
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <http_init_file+0x7c>
 800adf2:	4b21      	ldr	r3, [pc, #132]	; (800ae78 <http_init_file+0xf4>)
 800adf4:	f640 1244 	movw	r2, #2372	; 0x944
 800adf8:	4923      	ldr	r1, [pc, #140]	; (800ae88 <http_init_file+0x104>)
 800adfa:	4821      	ldr	r0, [pc, #132]	; (800ae80 <http_init_file+0xfc>)
 800adfc:	f00d fa5e 	bl	80182bc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d033      	beq.n	800ae6e <http_init_file+0xea>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	7c1b      	ldrb	r3, [r3, #16]
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d02c      	beq.n	800ae6e <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6998      	ldr	r0, [r3, #24]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	491b      	ldr	r1, [pc, #108]	; (800ae8c <http_init_file+0x108>)
 800ae20:	f000 f9f8 	bl	800b214 <lwip_strnstr>
 800ae24:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d020      	beq.n	800ae6e <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	461a      	mov	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	699a      	ldr	r2, [r3, #24]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	441a      	add	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	1ad2      	subs	r2, r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	625a      	str	r2, [r3, #36]	; 0x24
 800ae52:	e00c      	b.n	800ae6e <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	08019f04 	.word	0x08019f04
 800ae7c:	0801a000 	.word	0x0801a000
 800ae80:	08019f4c 	.word	0x08019f4c
 800ae84:	0801a014 	.word	0x0801a014
 800ae88:	0801a034 	.word	0x0801a034
 800ae8c:	08019ff8 	.word	0x08019ff8

0800ae90 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <http_err+0x1c>
    http_state_free(hs);
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff fb5c 	bl	800a564 <http_state_free>
  }
}
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	4613      	mov	r3, r2
 800aec0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <http_sent+0x1c>
    return ERR_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	e008      	b.n	800aee2 <http_sent+0x2e>
  }

  hs->retries = 0;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800aed8:	6979      	ldr	r1, [r7, #20]
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	f7ff fce1 	bl	800a8a2 <http_send>

  return ERR_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d107      	bne.n	800af0e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800aefe:	2100      	movs	r1, #0
 800af00:	6838      	ldr	r0, [r7, #0]
 800af02:	f7ff fbeb 	bl	800a6dc <http_close_conn>
 800af06:	4603      	mov	r3, r0
 800af08:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e021      	b.n	800af52 <http_poll+0x68>
  } else {
    hs->retries++;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af14:	3301      	adds	r3, #1
 800af16:	b2da      	uxtb	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af24:	2b04      	cmp	r3, #4
 800af26:	d105      	bne.n	800af34 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800af28:	68f9      	ldr	r1, [r7, #12]
 800af2a:	6838      	ldr	r0, [r7, #0]
 800af2c:	f7ff fbd6 	bl	800a6dc <http_close_conn>
      return ERR_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	e00e      	b.n	800af52 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d009      	beq.n	800af50 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	6838      	ldr	r0, [r7, #0]
 800af40:	f7ff fcaf 	bl	800a8a2 <http_send>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800af4a:	6838      	ldr	r0, [r7, #0]
 800af4c:	f007 f878 	bl	8012040 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800af6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d105      	bne.n	800af82 <http_recv+0x26>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <http_recv+0x26>
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d111      	bne.n	800afa6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d008      	beq.n	800af9a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	891b      	ldrh	r3, [r3, #8]
 800af8c:	4619      	mov	r1, r3
 800af8e:	68b8      	ldr	r0, [r7, #8]
 800af90:	f002 fc4e 	bl	800d830 <tcp_recved>
      pbuf_free(p);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fc7b 	bl	800c890 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800af9a:	6979      	ldr	r1, [r7, #20]
 800af9c:	68b8      	ldr	r0, [r7, #8]
 800af9e:	f7ff fb9d 	bl	800a6dc <http_close_conn>
    return ERR_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e055      	b.n	800b052 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	891b      	ldrh	r3, [r3, #8]
 800afaa:	4619      	mov	r1, r3
 800afac:	68b8      	ldr	r0, [r7, #8]
 800afae:	f002 fc3f 	bl	800d830 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d147      	bne.n	800b04a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	6979      	ldr	r1, [r7, #20]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff fcec 	bl	800a99c <http_parse_request>
 800afc4:	4603      	mov	r3, r0
 800afc6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800afc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d015      	beq.n	800affc <http_recv+0xa0>
 800afd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afd4:	f113 0f05 	cmn.w	r3, #5
 800afd8:	d010      	beq.n	800affc <http_recv+0xa0>
 800afda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afde:	f113 0f10 	cmn.w	r3, #16
 800afe2:	d00b      	beq.n	800affc <http_recv+0xa0>
 800afe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afe8:	f113 0f08 	cmn.w	r3, #8
 800afec:	d006      	beq.n	800affc <http_recv+0xa0>
 800afee:	4b1b      	ldr	r3, [pc, #108]	; (800b05c <http_recv+0x100>)
 800aff0:	f640 2205 	movw	r2, #2565	; 0xa05
 800aff4:	491a      	ldr	r1, [pc, #104]	; (800b060 <http_recv+0x104>)
 800aff6:	481b      	ldr	r0, [pc, #108]	; (800b064 <http_recv+0x108>)
 800aff8:	f00d f960 	bl	80182bc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800affc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b000:	f113 0f05 	cmn.w	r3, #5
 800b004:	d00b      	beq.n	800b01e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <http_recv+0xc2>
          pbuf_free(hs->req);
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	4618      	mov	r0, r3
 800b014:	f001 fc3c 	bl	800c890 <pbuf_free>
          hs->req = NULL;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2200      	movs	r2, #0
 800b01c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 fc36 	bl	800c890 <pbuf_free>
      if (parsed == ERR_OK) {
 800b024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b02c:	6979      	ldr	r1, [r7, #20]
 800b02e:	68b8      	ldr	r0, [r7, #8]
 800b030:	f7ff fc37 	bl	800a8a2 <http_send>
 800b034:	e00c      	b.n	800b050 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b036:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b03a:	f113 0f10 	cmn.w	r3, #16
 800b03e:	d107      	bne.n	800b050 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b040:	6979      	ldr	r1, [r7, #20]
 800b042:	68b8      	ldr	r0, [r7, #8]
 800b044:	f7ff fb4a 	bl	800a6dc <http_close_conn>
 800b048:	e002      	b.n	800b050 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f001 fc20 	bl	800c890 <pbuf_free>
    }
  }
  return ERR_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	08019f04 	.word	0x08019f04
 800b060:	0801a060 	.word	0x0801a060
 800b064:	08019f4c 	.word	0x08019f4c

0800b068 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	4613      	mov	r3, r2
 800b074:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <http_accept+0x1c>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d102      	bne.n	800b08a <http_accept+0x22>
    return ERR_VAL;
 800b084:	f06f 0305 	mvn.w	r3, #5
 800b088:	e025      	b.n	800b0d6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b08a:	2101      	movs	r1, #1
 800b08c:	68b8      	ldr	r0, [r7, #8]
 800b08e:	f003 f8af 	bl	800e1f0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b092:	f7ff fa35 	bl	800a500 <http_state_alloc>
 800b096:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	e018      	b.n	800b0d6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b0aa:	6979      	ldr	r1, [r7, #20]
 800b0ac:	68b8      	ldr	r0, [r7, #8]
 800b0ae:	f003 fa9f 	bl	800e5f0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b0b2:	490b      	ldr	r1, [pc, #44]	; (800b0e0 <http_accept+0x78>)
 800b0b4:	68b8      	ldr	r0, [r7, #8]
 800b0b6:	f003 faad 	bl	800e614 <tcp_recv>
  altcp_err(pcb, http_err);
 800b0ba:	490a      	ldr	r1, [pc, #40]	; (800b0e4 <http_accept+0x7c>)
 800b0bc:	68b8      	ldr	r0, [r7, #8]
 800b0be:	f003 faed 	bl	800e69c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	4908      	ldr	r1, [pc, #32]	; (800b0e8 <http_accept+0x80>)
 800b0c6:	68b8      	ldr	r0, [r7, #8]
 800b0c8:	f003 fb22 	bl	800e710 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b0cc:	4907      	ldr	r1, [pc, #28]	; (800b0ec <http_accept+0x84>)
 800b0ce:	68b8      	ldr	r0, [r7, #8]
 800b0d0:	f003 fac2 	bl	800e658 <tcp_sent>

  return ERR_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	0800af5d 	.word	0x0800af5d
 800b0e4:	0800ae91 	.word	0x0800ae91
 800b0e8:	0800aeeb 	.word	0x0800aeeb
 800b0ec:	0800aeb5 	.word	0x0800aeb5

0800b0f0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d029      	beq.n	800b156 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b102:	2101      	movs	r1, #1
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f003 f873 	bl	800e1f0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b10a:	887b      	ldrh	r3, [r7, #2]
 800b10c:	461a      	mov	r2, r3
 800b10e:	4914      	ldr	r1, [pc, #80]	; (800b160 <httpd_init_pcb+0x70>)
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f002 f9bf 	bl	800d494 <tcp_bind>
 800b116:	4603      	mov	r3, r0
 800b118:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b11a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <httpd_init_pcb+0x40>
 800b122:	4b10      	ldr	r3, [pc, #64]	; (800b164 <httpd_init_pcb+0x74>)
 800b124:	f640 2257 	movw	r2, #2647	; 0xa57
 800b128:	490f      	ldr	r1, [pc, #60]	; (800b168 <httpd_init_pcb+0x78>)
 800b12a:	4810      	ldr	r0, [pc, #64]	; (800b16c <httpd_init_pcb+0x7c>)
 800b12c:	f00d f8c6 	bl	80182bc <iprintf>
    pcb = altcp_listen(pcb);
 800b130:	21ff      	movs	r1, #255	; 0xff
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f002 fa66 	bl	800d604 <tcp_listen_with_backlog>
 800b138:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d106      	bne.n	800b14e <httpd_init_pcb+0x5e>
 800b140:	4b08      	ldr	r3, [pc, #32]	; (800b164 <httpd_init_pcb+0x74>)
 800b142:	f640 2259 	movw	r2, #2649	; 0xa59
 800b146:	490a      	ldr	r1, [pc, #40]	; (800b170 <httpd_init_pcb+0x80>)
 800b148:	4808      	ldr	r0, [pc, #32]	; (800b16c <httpd_init_pcb+0x7c>)
 800b14a:	f00d f8b7 	bl	80182bc <iprintf>
    altcp_accept(pcb, http_accept);
 800b14e:	4909      	ldr	r1, [pc, #36]	; (800b174 <httpd_init_pcb+0x84>)
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f003 fac5 	bl	800e6e0 <tcp_accept>
  }
}
 800b156:	bf00      	nop
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	08028368 	.word	0x08028368
 800b164:	08019f04 	.word	0x08019f04
 800b168:	0801a08c 	.word	0x0801a08c
 800b16c:	08019f4c 	.word	0x08019f4c
 800b170:	0801a0a8 	.word	0x0801a0a8
 800b174:	0800b069 	.word	0x0800b069

0800b178 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b17e:	202e      	movs	r0, #46	; 0x2e
 800b180:	f003 fa28 	bl	800e5d4 <tcp_new_ip_type>
 800b184:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d106      	bne.n	800b19a <httpd_init+0x22>
 800b18c:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <httpd_init+0x34>)
 800b18e:	f640 2272 	movw	r2, #2674	; 0xa72
 800b192:	4907      	ldr	r1, [pc, #28]	; (800b1b0 <httpd_init+0x38>)
 800b194:	4807      	ldr	r0, [pc, #28]	; (800b1b4 <httpd_init+0x3c>)
 800b196:	f00d f891 	bl	80182bc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b19a:	2150      	movs	r1, #80	; 0x50
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff ffa7 	bl	800b0f0 <httpd_init_pcb>
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	08019f04 	.word	0x08019f04
 800b1b0:	0801a0c8 	.word	0x0801a0c8
 800b1b4:	08019f4c 	.word	0x08019f4c

0800b1b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	021b      	lsls	r3, r3, #8
 800b1c6:	b21a      	sxth	r2, r3
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	0a1b      	lsrs	r3, r3, #8
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	b21b      	sxth	r3, r3
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	b21b      	sxth	r3, r3
 800b1d4:	b29b      	uxth	r3, r3
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b083      	sub	sp, #12
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	061a      	lsls	r2, r3, #24
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	021b      	lsls	r3, r3, #8
 800b1f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	0a1b      	lsrs	r3, r3, #8
 800b1fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	0e1b      	lsrs	r3, r3, #24
 800b206:	4313      	orrs	r3, r2
}
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b220:	68b8      	ldr	r0, [r7, #8]
 800b222:	f7f4 ffef 	bl	8000204 <strlen>
 800b226:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	e022      	b.n	800b278 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	e012      	b.n	800b25e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	781a      	ldrb	r2, [r3, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	429a      	cmp	r2, r3
 800b242:	d109      	bne.n	800b258 <lwip_strnstr+0x44>
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	6978      	ldr	r0, [r7, #20]
 800b24a:	f00d f8ae 	bl	80183aa <strncmp>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	e00f      	b.n	800b278 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	3301      	adds	r3, #1
 800b25c:	617b      	str	r3, [r7, #20]
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d007      	beq.n	800b276 <lwip_strnstr+0x62>
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	441a      	add	r2, r3
 800b26c:	68f9      	ldr	r1, [r7, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	440b      	add	r3, r1
 800b272:	429a      	cmp	r2, r3
 800b274:	d9e0      	bls.n	800b238 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b28a:	f00c ff27 	bl	80180dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b28e:	f000 f8d5 	bl	800b43c <mem_init>
  memp_init();
 800b292:	f000 fc31 	bl	800baf8 <memp_init>
  pbuf_init();
  netif_init();
 800b296:	f000 fcf7 	bl	800bc88 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b29a:	f007 ffcf 	bl	801323c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b29e:	f001 fda1 	bl	800cde4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b2a2:	f007 ff13 	bl	80130cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <ptr_to_mem+0x20>)
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	88fb      	ldrh	r3, [r7, #6]
 800b2c0:	4413      	add	r3, r2
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop
 800b2d0:	20008c10 	.word	0x20008c10

0800b2d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a05      	ldr	r2, [pc, #20]	; (800b2f4 <mem_to_ptr+0x20>)
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	b29b      	uxth	r3, r3
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20008c10 	.word	0x20008c10

0800b2f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b300:	4b45      	ldr	r3, [pc, #276]	; (800b418 <plug_holes+0x120>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	429a      	cmp	r2, r3
 800b308:	d206      	bcs.n	800b318 <plug_holes+0x20>
 800b30a:	4b44      	ldr	r3, [pc, #272]	; (800b41c <plug_holes+0x124>)
 800b30c:	f240 12df 	movw	r2, #479	; 0x1df
 800b310:	4943      	ldr	r1, [pc, #268]	; (800b420 <plug_holes+0x128>)
 800b312:	4844      	ldr	r0, [pc, #272]	; (800b424 <plug_holes+0x12c>)
 800b314:	f00c ffd2 	bl	80182bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b318:	4b43      	ldr	r3, [pc, #268]	; (800b428 <plug_holes+0x130>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d306      	bcc.n	800b330 <plug_holes+0x38>
 800b322:	4b3e      	ldr	r3, [pc, #248]	; (800b41c <plug_holes+0x124>)
 800b324:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b328:	4940      	ldr	r1, [pc, #256]	; (800b42c <plug_holes+0x134>)
 800b32a:	483e      	ldr	r0, [pc, #248]	; (800b424 <plug_holes+0x12c>)
 800b32c:	f00c ffc6 	bl	80182bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	791b      	ldrb	r3, [r3, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d006      	beq.n	800b346 <plug_holes+0x4e>
 800b338:	4b38      	ldr	r3, [pc, #224]	; (800b41c <plug_holes+0x124>)
 800b33a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b33e:	493c      	ldr	r1, [pc, #240]	; (800b430 <plug_holes+0x138>)
 800b340:	4838      	ldr	r0, [pc, #224]	; (800b424 <plug_holes+0x12c>)
 800b342:	f00c ffbb 	bl	80182bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	881b      	ldrh	r3, [r3, #0]
 800b34a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b34e:	d906      	bls.n	800b35e <plug_holes+0x66>
 800b350:	4b32      	ldr	r3, [pc, #200]	; (800b41c <plug_holes+0x124>)
 800b352:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b356:	4937      	ldr	r1, [pc, #220]	; (800b434 <plug_holes+0x13c>)
 800b358:	4832      	ldr	r0, [pc, #200]	; (800b424 <plug_holes+0x12c>)
 800b35a:	f00c ffaf 	bl	80182bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff ffa4 	bl	800b2b0 <ptr_to_mem>
 800b368:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d024      	beq.n	800b3bc <plug_holes+0xc4>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	791b      	ldrb	r3, [r3, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d120      	bne.n	800b3bc <plug_holes+0xc4>
 800b37a:	4b2b      	ldr	r3, [pc, #172]	; (800b428 <plug_holes+0x130>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	429a      	cmp	r2, r3
 800b382:	d01b      	beq.n	800b3bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b384:	4b2c      	ldr	r3, [pc, #176]	; (800b438 <plug_holes+0x140>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d102      	bne.n	800b394 <plug_holes+0x9c>
      lfree = mem;
 800b38e:	4a2a      	ldr	r2, [pc, #168]	; (800b438 <plug_holes+0x140>)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	881a      	ldrh	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3a4:	d00a      	beq.n	800b3bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff ff80 	bl	800b2b0 <ptr_to_mem>
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff ff8e 	bl	800b2d4 <mem_to_ptr>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	885b      	ldrh	r3, [r3, #2]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff ff75 	bl	800b2b0 <ptr_to_mem>
 800b3c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d01f      	beq.n	800b410 <plug_holes+0x118>
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	791b      	ldrb	r3, [r3, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d11b      	bne.n	800b410 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b3d8:	4b17      	ldr	r3, [pc, #92]	; (800b438 <plug_holes+0x140>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d102      	bne.n	800b3e8 <plug_holes+0xf0>
      lfree = pmem;
 800b3e2:	4a15      	ldr	r2, [pc, #84]	; (800b438 <plug_holes+0x140>)
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	881a      	ldrh	r2, [r3, #0]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3f8:	d00a      	beq.n	800b410 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff ff56 	bl	800b2b0 <ptr_to_mem>
 800b404:	4604      	mov	r4, r0
 800b406:	68b8      	ldr	r0, [r7, #8]
 800b408:	f7ff ff64 	bl	800b2d4 <mem_to_ptr>
 800b40c:	4603      	mov	r3, r0
 800b40e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b410:	bf00      	nop
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	bd90      	pop	{r4, r7, pc}
 800b418:	20008c10 	.word	0x20008c10
 800b41c:	0801a110 	.word	0x0801a110
 800b420:	0801a140 	.word	0x0801a140
 800b424:	0801a158 	.word	0x0801a158
 800b428:	20008c14 	.word	0x20008c14
 800b42c:	0801a180 	.word	0x0801a180
 800b430:	0801a19c 	.word	0x0801a19c
 800b434:	0801a1b8 	.word	0x0801a1b8
 800b438:	20008c1c 	.word	0x20008c1c

0800b43c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b442:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <mem_init+0x84>)
 800b444:	3303      	adds	r3, #3
 800b446:	f023 0303 	bic.w	r3, r3, #3
 800b44a:	461a      	mov	r2, r3
 800b44c:	4b1d      	ldr	r3, [pc, #116]	; (800b4c4 <mem_init+0x88>)
 800b44e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b450:	4b1c      	ldr	r3, [pc, #112]	; (800b4c4 <mem_init+0x88>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b45c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b46a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b46e:	f7ff ff1f 	bl	800b2b0 <ptr_to_mem>
 800b472:	4602      	mov	r2, r0
 800b474:	4b14      	ldr	r3, [pc, #80]	; (800b4c8 <mem_init+0x8c>)
 800b476:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800b478:	4b13      	ldr	r3, [pc, #76]	; (800b4c8 <mem_init+0x8c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2201      	movs	r2, #1
 800b47e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b480:	4b11      	ldr	r3, [pc, #68]	; (800b4c8 <mem_init+0x8c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b488:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b48a:	4b0f      	ldr	r3, [pc, #60]	; (800b4c8 <mem_init+0x8c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b492:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b494:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <mem_init+0x88>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a0c      	ldr	r2, [pc, #48]	; (800b4cc <mem_init+0x90>)
 800b49a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b49c:	480c      	ldr	r0, [pc, #48]	; (800b4d0 <mem_init+0x94>)
 800b49e:	f00c fe2b 	bl	80180f8 <sys_mutex_new>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <mem_init+0x98>)
 800b4aa:	f240 221f 	movw	r2, #543	; 0x21f
 800b4ae:	490a      	ldr	r1, [pc, #40]	; (800b4d8 <mem_init+0x9c>)
 800b4b0:	480a      	ldr	r0, [pc, #40]	; (800b4dc <mem_init+0xa0>)
 800b4b2:	f00c ff03 	bl	80182bc <iprintf>
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	2000c3bc 	.word	0x2000c3bc
 800b4c4:	20008c10 	.word	0x20008c10
 800b4c8:	20008c14 	.word	0x20008c14
 800b4cc:	20008c1c 	.word	0x20008c1c
 800b4d0:	20008c18 	.word	0x20008c18
 800b4d4:	0801a110 	.word	0x0801a110
 800b4d8:	0801a1e4 	.word	0x0801a1e4
 800b4dc:	0801a158 	.word	0x0801a158

0800b4e0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fef3 	bl	800b2d4 <mem_to_ptr>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff feda 	bl	800b2b0 <ptr_to_mem>
 800b4fc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	885b      	ldrh	r3, [r3, #2]
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff fed4 	bl	800b2b0 <ptr_to_mem>
 800b508:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b512:	d818      	bhi.n	800b546 <mem_link_valid+0x66>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	885b      	ldrh	r3, [r3, #2]
 800b518:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b51c:	d813      	bhi.n	800b546 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b522:	8afa      	ldrh	r2, [r7, #22]
 800b524:	429a      	cmp	r2, r3
 800b526:	d004      	beq.n	800b532 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	8afa      	ldrh	r2, [r7, #22]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d109      	bne.n	800b546 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b532:	4b08      	ldr	r3, [pc, #32]	; (800b554 <mem_link_valid+0x74>)
 800b534:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d006      	beq.n	800b54a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	885b      	ldrh	r3, [r3, #2]
 800b540:	8afa      	ldrh	r2, [r7, #22]
 800b542:	429a      	cmp	r2, r3
 800b544:	d001      	beq.n	800b54a <mem_link_valid+0x6a>
    return 0;
 800b546:	2300      	movs	r3, #0
 800b548:	e000      	b.n	800b54c <mem_link_valid+0x6c>
  }
  return 1;
 800b54a:	2301      	movs	r3, #1
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	20008c14 	.word	0x20008c14

0800b558 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d070      	beq.n	800b648 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f003 0303 	and.w	r3, r3, #3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00d      	beq.n	800b58c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b570:	4b37      	ldr	r3, [pc, #220]	; (800b650 <mem_free+0xf8>)
 800b572:	f240 2273 	movw	r2, #627	; 0x273
 800b576:	4937      	ldr	r1, [pc, #220]	; (800b654 <mem_free+0xfc>)
 800b578:	4837      	ldr	r0, [pc, #220]	; (800b658 <mem_free+0x100>)
 800b57a:	f00c fe9f 	bl	80182bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b57e:	f00c fe19 	bl	80181b4 <sys_arch_protect>
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f00c fe23 	bl	80181d0 <sys_arch_unprotect>
    return;
 800b58a:	e05e      	b.n	800b64a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3b08      	subs	r3, #8
 800b590:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b592:	4b32      	ldr	r3, [pc, #200]	; (800b65c <mem_free+0x104>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	69fa      	ldr	r2, [r7, #28]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d306      	bcc.n	800b5aa <mem_free+0x52>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f103 020c 	add.w	r2, r3, #12
 800b5a2:	4b2f      	ldr	r3, [pc, #188]	; (800b660 <mem_free+0x108>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d90d      	bls.n	800b5c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b5aa:	4b29      	ldr	r3, [pc, #164]	; (800b650 <mem_free+0xf8>)
 800b5ac:	f240 227f 	movw	r2, #639	; 0x27f
 800b5b0:	492c      	ldr	r1, [pc, #176]	; (800b664 <mem_free+0x10c>)
 800b5b2:	4829      	ldr	r0, [pc, #164]	; (800b658 <mem_free+0x100>)
 800b5b4:	f00c fe82 	bl	80182bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b5b8:	f00c fdfc 	bl	80181b4 <sys_arch_protect>
 800b5bc:	6138      	str	r0, [r7, #16]
 800b5be:	6938      	ldr	r0, [r7, #16]
 800b5c0:	f00c fe06 	bl	80181d0 <sys_arch_unprotect>
    return;
 800b5c4:	e041      	b.n	800b64a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b5c6:	4828      	ldr	r0, [pc, #160]	; (800b668 <mem_free+0x110>)
 800b5c8:	f00c fdb2 	bl	8018130 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	791b      	ldrb	r3, [r3, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d110      	bne.n	800b5f6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b5d4:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <mem_free+0xf8>)
 800b5d6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b5da:	4924      	ldr	r1, [pc, #144]	; (800b66c <mem_free+0x114>)
 800b5dc:	481e      	ldr	r0, [pc, #120]	; (800b658 <mem_free+0x100>)
 800b5de:	f00c fe6d 	bl	80182bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b5e2:	4821      	ldr	r0, [pc, #132]	; (800b668 <mem_free+0x110>)
 800b5e4:	f00c fdb3 	bl	801814e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b5e8:	f00c fde4 	bl	80181b4 <sys_arch_protect>
 800b5ec:	6178      	str	r0, [r7, #20]
 800b5ee:	6978      	ldr	r0, [r7, #20]
 800b5f0:	f00c fdee 	bl	80181d0 <sys_arch_unprotect>
    return;
 800b5f4:	e029      	b.n	800b64a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b5f6:	69f8      	ldr	r0, [r7, #28]
 800b5f8:	f7ff ff72 	bl	800b4e0 <mem_link_valid>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d110      	bne.n	800b624 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <mem_free+0xf8>)
 800b604:	f240 2295 	movw	r2, #661	; 0x295
 800b608:	4919      	ldr	r1, [pc, #100]	; (800b670 <mem_free+0x118>)
 800b60a:	4813      	ldr	r0, [pc, #76]	; (800b658 <mem_free+0x100>)
 800b60c:	f00c fe56 	bl	80182bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b610:	4815      	ldr	r0, [pc, #84]	; (800b668 <mem_free+0x110>)
 800b612:	f00c fd9c 	bl	801814e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b616:	f00c fdcd 	bl	80181b4 <sys_arch_protect>
 800b61a:	61b8      	str	r0, [r7, #24]
 800b61c:	69b8      	ldr	r0, [r7, #24]
 800b61e:	f00c fdd7 	bl	80181d0 <sys_arch_unprotect>
    return;
 800b622:	e012      	b.n	800b64a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	2200      	movs	r2, #0
 800b628:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b62a:	4b12      	ldr	r3, [pc, #72]	; (800b674 <mem_free+0x11c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69fa      	ldr	r2, [r7, #28]
 800b630:	429a      	cmp	r2, r3
 800b632:	d202      	bcs.n	800b63a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b634:	4a0f      	ldr	r2, [pc, #60]	; (800b674 <mem_free+0x11c>)
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b63a:	69f8      	ldr	r0, [r7, #28]
 800b63c:	f7ff fe5c 	bl	800b2f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b640:	4809      	ldr	r0, [pc, #36]	; (800b668 <mem_free+0x110>)
 800b642:	f00c fd84 	bl	801814e <sys_mutex_unlock>
 800b646:	e000      	b.n	800b64a <mem_free+0xf2>
    return;
 800b648:	bf00      	nop
}
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	0801a110 	.word	0x0801a110
 800b654:	0801a200 	.word	0x0801a200
 800b658:	0801a158 	.word	0x0801a158
 800b65c:	20008c10 	.word	0x20008c10
 800b660:	20008c14 	.word	0x20008c14
 800b664:	0801a224 	.word	0x0801a224
 800b668:	20008c18 	.word	0x20008c18
 800b66c:	0801a240 	.word	0x0801a240
 800b670:	0801a268 	.word	0x0801a268
 800b674:	20008c1c 	.word	0x20008c1c

0800b678 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b684:	887b      	ldrh	r3, [r7, #2]
 800b686:	3303      	adds	r3, #3
 800b688:	b29b      	uxth	r3, r3
 800b68a:	f023 0303 	bic.w	r3, r3, #3
 800b68e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b690:	8bfb      	ldrh	r3, [r7, #30]
 800b692:	2b0b      	cmp	r3, #11
 800b694:	d801      	bhi.n	800b69a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b696:	230c      	movs	r3, #12
 800b698:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b69a:	8bfb      	ldrh	r3, [r7, #30]
 800b69c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6a0:	d803      	bhi.n	800b6aa <mem_trim+0x32>
 800b6a2:	8bfa      	ldrh	r2, [r7, #30]
 800b6a4:	887b      	ldrh	r3, [r7, #2]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d201      	bcs.n	800b6ae <mem_trim+0x36>
    return NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e0d8      	b.n	800b860 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b6ae:	4b6e      	ldr	r3, [pc, #440]	; (800b868 <mem_trim+0x1f0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d304      	bcc.n	800b6c2 <mem_trim+0x4a>
 800b6b8:	4b6c      	ldr	r3, [pc, #432]	; (800b86c <mem_trim+0x1f4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d306      	bcc.n	800b6d0 <mem_trim+0x58>
 800b6c2:	4b6b      	ldr	r3, [pc, #428]	; (800b870 <mem_trim+0x1f8>)
 800b6c4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b6c8:	496a      	ldr	r1, [pc, #424]	; (800b874 <mem_trim+0x1fc>)
 800b6ca:	486b      	ldr	r0, [pc, #428]	; (800b878 <mem_trim+0x200>)
 800b6cc:	f00c fdf6 	bl	80182bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b6d0:	4b65      	ldr	r3, [pc, #404]	; (800b868 <mem_trim+0x1f0>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d304      	bcc.n	800b6e4 <mem_trim+0x6c>
 800b6da:	4b64      	ldr	r3, [pc, #400]	; (800b86c <mem_trim+0x1f4>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d307      	bcc.n	800b6f4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6e4:	f00c fd66 	bl	80181b4 <sys_arch_protect>
 800b6e8:	60b8      	str	r0, [r7, #8]
 800b6ea:	68b8      	ldr	r0, [r7, #8]
 800b6ec:	f00c fd70 	bl	80181d0 <sys_arch_unprotect>
    return rmem;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	e0b5      	b.n	800b860 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3b08      	subs	r3, #8
 800b6f8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b6fa:	69b8      	ldr	r0, [r7, #24]
 800b6fc:	f7ff fdea 	bl	800b2d4 <mem_to_ptr>
 800b700:	4603      	mov	r3, r0
 800b702:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	881a      	ldrh	r2, [r3, #0]
 800b708:	8afb      	ldrh	r3, [r7, #22]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b08      	subs	r3, #8
 800b710:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b712:	8bfa      	ldrh	r2, [r7, #30]
 800b714:	8abb      	ldrh	r3, [r7, #20]
 800b716:	429a      	cmp	r2, r3
 800b718:	d906      	bls.n	800b728 <mem_trim+0xb0>
 800b71a:	4b55      	ldr	r3, [pc, #340]	; (800b870 <mem_trim+0x1f8>)
 800b71c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b720:	4956      	ldr	r1, [pc, #344]	; (800b87c <mem_trim+0x204>)
 800b722:	4855      	ldr	r0, [pc, #340]	; (800b878 <mem_trim+0x200>)
 800b724:	f00c fdca 	bl	80182bc <iprintf>
  if (newsize > size) {
 800b728:	8bfa      	ldrh	r2, [r7, #30]
 800b72a:	8abb      	ldrh	r3, [r7, #20]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d901      	bls.n	800b734 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b730:	2300      	movs	r3, #0
 800b732:	e095      	b.n	800b860 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b734:	8bfa      	ldrh	r2, [r7, #30]
 800b736:	8abb      	ldrh	r3, [r7, #20]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d101      	bne.n	800b740 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	e08f      	b.n	800b860 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b740:	484f      	ldr	r0, [pc, #316]	; (800b880 <mem_trim+0x208>)
 800b742:	f00c fcf5 	bl	8018130 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fdb0 	bl	800b2b0 <ptr_to_mem>
 800b750:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	791b      	ldrb	r3, [r3, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d13f      	bne.n	800b7da <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b762:	d106      	bne.n	800b772 <mem_trim+0xfa>
 800b764:	4b42      	ldr	r3, [pc, #264]	; (800b870 <mem_trim+0x1f8>)
 800b766:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b76a:	4946      	ldr	r1, [pc, #280]	; (800b884 <mem_trim+0x20c>)
 800b76c:	4842      	ldr	r0, [pc, #264]	; (800b878 <mem_trim+0x200>)
 800b76e:	f00c fda5 	bl	80182bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b778:	8afa      	ldrh	r2, [r7, #22]
 800b77a:	8bfb      	ldrh	r3, [r7, #30]
 800b77c:	4413      	add	r3, r2
 800b77e:	b29b      	uxth	r3, r3
 800b780:	3308      	adds	r3, #8
 800b782:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b784:	4b40      	ldr	r3, [pc, #256]	; (800b888 <mem_trim+0x210>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d106      	bne.n	800b79c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b78e:	89fb      	ldrh	r3, [r7, #14]
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fd8d 	bl	800b2b0 <ptr_to_mem>
 800b796:	4602      	mov	r2, r0
 800b798:	4b3b      	ldr	r3, [pc, #236]	; (800b888 <mem_trim+0x210>)
 800b79a:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b79c:	89fb      	ldrh	r3, [r7, #14]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fd86 	bl	800b2b0 <ptr_to_mem>
 800b7a4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	89ba      	ldrh	r2, [r7, #12]
 800b7b0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	8afa      	ldrh	r2, [r7, #22]
 800b7b6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	89fa      	ldrh	r2, [r7, #14]
 800b7bc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7c6:	d047      	beq.n	800b858 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fd6f 	bl	800b2b0 <ptr_to_mem>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	89fb      	ldrh	r3, [r7, #14]
 800b7d6:	8053      	strh	r3, [r2, #2]
 800b7d8:	e03e      	b.n	800b858 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b7da:	8bfb      	ldrh	r3, [r7, #30]
 800b7dc:	f103 0214 	add.w	r2, r3, #20
 800b7e0:	8abb      	ldrh	r3, [r7, #20]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d838      	bhi.n	800b858 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b7e6:	8afa      	ldrh	r2, [r7, #22]
 800b7e8:	8bfb      	ldrh	r3, [r7, #30]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7fa:	d106      	bne.n	800b80a <mem_trim+0x192>
 800b7fc:	4b1c      	ldr	r3, [pc, #112]	; (800b870 <mem_trim+0x1f8>)
 800b7fe:	f240 3216 	movw	r2, #790	; 0x316
 800b802:	4920      	ldr	r1, [pc, #128]	; (800b884 <mem_trim+0x20c>)
 800b804:	481c      	ldr	r0, [pc, #112]	; (800b878 <mem_trim+0x200>)
 800b806:	f00c fd59 	bl	80182bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b80a:	89fb      	ldrh	r3, [r7, #14]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fd4f 	bl	800b2b0 <ptr_to_mem>
 800b812:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b814:	4b1c      	ldr	r3, [pc, #112]	; (800b888 <mem_trim+0x210>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d202      	bcs.n	800b824 <mem_trim+0x1ac>
      lfree = mem2;
 800b81e:	4a1a      	ldr	r2, [pc, #104]	; (800b888 <mem_trim+0x210>)
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2200      	movs	r2, #0
 800b828:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	881a      	ldrh	r2, [r3, #0]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	8afa      	ldrh	r2, [r7, #22]
 800b836:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	89fa      	ldrh	r2, [r7, #14]
 800b83c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b846:	d007      	beq.n	800b858 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff fd2f 	bl	800b2b0 <ptr_to_mem>
 800b852:	4602      	mov	r2, r0
 800b854:	89fb      	ldrh	r3, [r7, #14]
 800b856:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b858:	4809      	ldr	r0, [pc, #36]	; (800b880 <mem_trim+0x208>)
 800b85a:	f00c fc78 	bl	801814e <sys_mutex_unlock>
  return rmem;
 800b85e:	687b      	ldr	r3, [r7, #4]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20008c10 	.word	0x20008c10
 800b86c:	20008c14 	.word	0x20008c14
 800b870:	0801a110 	.word	0x0801a110
 800b874:	0801a29c 	.word	0x0801a29c
 800b878:	0801a158 	.word	0x0801a158
 800b87c:	0801a2b4 	.word	0x0801a2b4
 800b880:	20008c18 	.word	0x20008c18
 800b884:	0801a2d4 	.word	0x0801a2d4
 800b888:	20008c1c 	.word	0x20008c1c

0800b88c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b896:	88fb      	ldrh	r3, [r7, #6]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d101      	bne.n	800b8a0 <mem_malloc+0x14>
    return NULL;
 800b89c:	2300      	movs	r3, #0
 800b89e:	e0e2      	b.n	800ba66 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b8a0:	88fb      	ldrh	r3, [r7, #6]
 800b8a2:	3303      	adds	r3, #3
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b8ac:	8bbb      	ldrh	r3, [r7, #28]
 800b8ae:	2b0b      	cmp	r3, #11
 800b8b0:	d801      	bhi.n	800b8b6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b8b6:	8bbb      	ldrh	r3, [r7, #28]
 800b8b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8bc:	d803      	bhi.n	800b8c6 <mem_malloc+0x3a>
 800b8be:	8bba      	ldrh	r2, [r7, #28]
 800b8c0:	88fb      	ldrh	r3, [r7, #6]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d201      	bcs.n	800b8ca <mem_malloc+0x3e>
    return NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e0cd      	b.n	800ba66 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b8ca:	4869      	ldr	r0, [pc, #420]	; (800ba70 <mem_malloc+0x1e4>)
 800b8cc:	f00c fc30 	bl	8018130 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b8d0:	4b68      	ldr	r3, [pc, #416]	; (800ba74 <mem_malloc+0x1e8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fcfd 	bl	800b2d4 <mem_to_ptr>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	83fb      	strh	r3, [r7, #30]
 800b8de:	e0b7      	b.n	800ba50 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b8e0:	8bfb      	ldrh	r3, [r7, #30]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff fce4 	bl	800b2b0 <ptr_to_mem>
 800b8e8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	791b      	ldrb	r3, [r3, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f040 80a7 	bne.w	800ba42 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	8bfb      	ldrh	r3, [r7, #30]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	f1a3 0208 	sub.w	r2, r3, #8
 800b902:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b904:	429a      	cmp	r2, r3
 800b906:	f0c0 809c 	bcc.w	800ba42 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	8bfb      	ldrh	r3, [r7, #30]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	f1a3 0208 	sub.w	r2, r3, #8
 800b918:	8bbb      	ldrh	r3, [r7, #28]
 800b91a:	3314      	adds	r3, #20
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d333      	bcc.n	800b988 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b920:	8bfa      	ldrh	r2, [r7, #30]
 800b922:	8bbb      	ldrh	r3, [r7, #28]
 800b924:	4413      	add	r3, r2
 800b926:	b29b      	uxth	r3, r3
 800b928:	3308      	adds	r3, #8
 800b92a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b92c:	8a7b      	ldrh	r3, [r7, #18]
 800b92e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b932:	d106      	bne.n	800b942 <mem_malloc+0xb6>
 800b934:	4b50      	ldr	r3, [pc, #320]	; (800ba78 <mem_malloc+0x1ec>)
 800b936:	f240 3287 	movw	r2, #903	; 0x387
 800b93a:	4950      	ldr	r1, [pc, #320]	; (800ba7c <mem_malloc+0x1f0>)
 800b93c:	4850      	ldr	r0, [pc, #320]	; (800ba80 <mem_malloc+0x1f4>)
 800b93e:	f00c fcbd 	bl	80182bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b942:	8a7b      	ldrh	r3, [r7, #18]
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff fcb3 	bl	800b2b0 <ptr_to_mem>
 800b94a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	881a      	ldrh	r2, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	8bfa      	ldrh	r2, [r7, #30]
 800b95e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	8a7a      	ldrh	r2, [r7, #18]
 800b964:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2201      	movs	r2, #1
 800b96a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b974:	d00b      	beq.n	800b98e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff fc98 	bl	800b2b0 <ptr_to_mem>
 800b980:	4602      	mov	r2, r0
 800b982:	8a7b      	ldrh	r3, [r7, #18]
 800b984:	8053      	strh	r3, [r2, #2]
 800b986:	e002      	b.n	800b98e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	2201      	movs	r2, #1
 800b98c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b98e:	4b39      	ldr	r3, [pc, #228]	; (800ba74 <mem_malloc+0x1e8>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	429a      	cmp	r2, r3
 800b996:	d127      	bne.n	800b9e8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b998:	4b36      	ldr	r3, [pc, #216]	; (800ba74 <mem_malloc+0x1e8>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b99e:	e005      	b.n	800b9ac <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fc83 	bl	800b2b0 <ptr_to_mem>
 800b9aa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	791b      	ldrb	r3, [r3, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d004      	beq.n	800b9be <mem_malloc+0x132>
 800b9b4:	4b33      	ldr	r3, [pc, #204]	; (800ba84 <mem_malloc+0x1f8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d1f0      	bne.n	800b9a0 <mem_malloc+0x114>
          }
          lfree = cur;
 800b9be:	4a2d      	ldr	r2, [pc, #180]	; (800ba74 <mem_malloc+0x1e8>)
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b9c4:	4b2b      	ldr	r3, [pc, #172]	; (800ba74 <mem_malloc+0x1e8>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	4b2e      	ldr	r3, [pc, #184]	; (800ba84 <mem_malloc+0x1f8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d00b      	beq.n	800b9e8 <mem_malloc+0x15c>
 800b9d0:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <mem_malloc+0x1e8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	791b      	ldrb	r3, [r3, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d006      	beq.n	800b9e8 <mem_malloc+0x15c>
 800b9da:	4b27      	ldr	r3, [pc, #156]	; (800ba78 <mem_malloc+0x1ec>)
 800b9dc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b9e0:	4929      	ldr	r1, [pc, #164]	; (800ba88 <mem_malloc+0x1fc>)
 800b9e2:	4827      	ldr	r0, [pc, #156]	; (800ba80 <mem_malloc+0x1f4>)
 800b9e4:	f00c fc6a 	bl	80182bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b9e8:	4821      	ldr	r0, [pc, #132]	; (800ba70 <mem_malloc+0x1e4>)
 800b9ea:	f00c fbb0 	bl	801814e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b9ee:	8bba      	ldrh	r2, [r7, #28]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	4a23      	ldr	r2, [pc, #140]	; (800ba84 <mem_malloc+0x1f8>)
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d906      	bls.n	800ba0c <mem_malloc+0x180>
 800b9fe:	4b1e      	ldr	r3, [pc, #120]	; (800ba78 <mem_malloc+0x1ec>)
 800ba00:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ba04:	4921      	ldr	r1, [pc, #132]	; (800ba8c <mem_malloc+0x200>)
 800ba06:	481e      	ldr	r0, [pc, #120]	; (800ba80 <mem_malloc+0x1f4>)
 800ba08:	f00c fc58 	bl	80182bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f003 0303 	and.w	r3, r3, #3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d006      	beq.n	800ba24 <mem_malloc+0x198>
 800ba16:	4b18      	ldr	r3, [pc, #96]	; (800ba78 <mem_malloc+0x1ec>)
 800ba18:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ba1c:	491c      	ldr	r1, [pc, #112]	; (800ba90 <mem_malloc+0x204>)
 800ba1e:	4818      	ldr	r0, [pc, #96]	; (800ba80 <mem_malloc+0x1f4>)
 800ba20:	f00c fc4c 	bl	80182bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d006      	beq.n	800ba3c <mem_malloc+0x1b0>
 800ba2e:	4b12      	ldr	r3, [pc, #72]	; (800ba78 <mem_malloc+0x1ec>)
 800ba30:	f240 32be 	movw	r2, #958	; 0x3be
 800ba34:	4917      	ldr	r1, [pc, #92]	; (800ba94 <mem_malloc+0x208>)
 800ba36:	4812      	ldr	r0, [pc, #72]	; (800ba80 <mem_malloc+0x1f4>)
 800ba38:	f00c fc40 	bl	80182bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	3308      	adds	r3, #8
 800ba40:	e011      	b.n	800ba66 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ba42:	8bfb      	ldrh	r3, [r7, #30]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff fc33 	bl	800b2b0 <ptr_to_mem>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ba50:	8bfa      	ldrh	r2, [r7, #30]
 800ba52:	8bbb      	ldrh	r3, [r7, #28]
 800ba54:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	f4ff af41 	bcc.w	800b8e0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ba5e:	4804      	ldr	r0, [pc, #16]	; (800ba70 <mem_malloc+0x1e4>)
 800ba60:	f00c fb75 	bl	801814e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20008c18 	.word	0x20008c18
 800ba74:	20008c1c 	.word	0x20008c1c
 800ba78:	0801a110 	.word	0x0801a110
 800ba7c:	0801a2d4 	.word	0x0801a2d4
 800ba80:	0801a158 	.word	0x0801a158
 800ba84:	20008c14 	.word	0x20008c14
 800ba88:	0801a2e8 	.word	0x0801a2e8
 800ba8c:	0801a304 	.word	0x0801a304
 800ba90:	0801a334 	.word	0x0801a334
 800ba94:	0801a364 	.word	0x0801a364

0800ba98 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	2200      	movs	r2, #0
 800baa6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	3303      	adds	r3, #3
 800baae:	f023 0303 	bic.w	r3, r3, #3
 800bab2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]
 800bab8:	e011      	b.n	800bade <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	4413      	add	r3, r2
 800bad6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3301      	adds	r3, #1
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	885b      	ldrh	r3, [r3, #2]
 800bae2:	461a      	mov	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4293      	cmp	r3, r2
 800bae8:	dbe7      	blt.n	800baba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800baea:	bf00      	nop
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
	...

0800baf8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	80fb      	strh	r3, [r7, #6]
 800bb02:	e009      	b.n	800bb18 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bb04:	88fb      	ldrh	r3, [r7, #6]
 800bb06:	4a08      	ldr	r2, [pc, #32]	; (800bb28 <memp_init+0x30>)
 800bb08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff ffc3 	bl	800ba98 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	3301      	adds	r3, #1
 800bb16:	80fb      	strh	r3, [r7, #6]
 800bb18:	88fb      	ldrh	r3, [r7, #6]
 800bb1a:	2b0c      	cmp	r3, #12
 800bb1c:	d9f2      	bls.n	800bb04 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	080282e4 	.word	0x080282e4

0800bb2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bb34:	f00c fb3e 	bl	80181b4 <sys_arch_protect>
 800bb38:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d015      	beq.n	800bb74 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	68ba      	ldr	r2, [r7, #8]
 800bb4e:	6812      	ldr	r2, [r2, #0]
 800bb50:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f003 0303 	and.w	r3, r3, #3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d006      	beq.n	800bb6a <do_memp_malloc_pool+0x3e>
 800bb5c:	4b09      	ldr	r3, [pc, #36]	; (800bb84 <do_memp_malloc_pool+0x58>)
 800bb5e:	f240 1219 	movw	r2, #281	; 0x119
 800bb62:	4909      	ldr	r1, [pc, #36]	; (800bb88 <do_memp_malloc_pool+0x5c>)
 800bb64:	4809      	ldr	r0, [pc, #36]	; (800bb8c <do_memp_malloc_pool+0x60>)
 800bb66:	f00c fba9 	bl	80182bc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f00c fb30 	bl	80181d0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	e003      	b.n	800bb7c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f00c fb2b 	bl	80181d0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0801a388 	.word	0x0801a388
 800bb88:	0801a3b8 	.word	0x0801a3b8
 800bb8c:	0801a3dc 	.word	0x0801a3dc

0800bb90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bb9a:	79fb      	ldrb	r3, [r7, #7]
 800bb9c:	2b0c      	cmp	r3, #12
 800bb9e:	d908      	bls.n	800bbb2 <memp_malloc+0x22>
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <memp_malloc+0x3c>)
 800bba2:	f240 1257 	movw	r2, #343	; 0x157
 800bba6:	490a      	ldr	r1, [pc, #40]	; (800bbd0 <memp_malloc+0x40>)
 800bba8:	480a      	ldr	r0, [pc, #40]	; (800bbd4 <memp_malloc+0x44>)
 800bbaa:	f00c fb87 	bl	80182bc <iprintf>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e008      	b.n	800bbc4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
 800bbb4:	4a08      	ldr	r2, [pc, #32]	; (800bbd8 <memp_malloc+0x48>)
 800bbb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff ffb6 	bl	800bb2c <do_memp_malloc_pool>
 800bbc0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	0801a388 	.word	0x0801a388
 800bbd0:	0801a418 	.word	0x0801a418
 800bbd4:	0801a3dc 	.word	0x0801a3dc
 800bbd8:	080282e4 	.word	0x080282e4

0800bbdc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d006      	beq.n	800bbfe <do_memp_free_pool+0x22>
 800bbf0:	4b0d      	ldr	r3, [pc, #52]	; (800bc28 <do_memp_free_pool+0x4c>)
 800bbf2:	f240 126d 	movw	r2, #365	; 0x16d
 800bbf6:	490d      	ldr	r1, [pc, #52]	; (800bc2c <do_memp_free_pool+0x50>)
 800bbf8:	480d      	ldr	r0, [pc, #52]	; (800bc30 <do_memp_free_pool+0x54>)
 800bbfa:	f00c fb5f 	bl	80182bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bc02:	f00c fad7 	bl	80181b4 <sys_arch_protect>
 800bc06:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bc1a:	68b8      	ldr	r0, [r7, #8]
 800bc1c:	f00c fad8 	bl	80181d0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bc20:	bf00      	nop
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0801a388 	.word	0x0801a388
 800bc2c:	0801a438 	.word	0x0801a438
 800bc30:	0801a3dc 	.word	0x0801a3dc

0800bc34 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	6039      	str	r1, [r7, #0]
 800bc3e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bc40:	79fb      	ldrb	r3, [r7, #7]
 800bc42:	2b0c      	cmp	r3, #12
 800bc44:	d907      	bls.n	800bc56 <memp_free+0x22>
 800bc46:	4b0c      	ldr	r3, [pc, #48]	; (800bc78 <memp_free+0x44>)
 800bc48:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bc4c:	490b      	ldr	r1, [pc, #44]	; (800bc7c <memp_free+0x48>)
 800bc4e:	480c      	ldr	r0, [pc, #48]	; (800bc80 <memp_free+0x4c>)
 800bc50:	f00c fb34 	bl	80182bc <iprintf>
 800bc54:	e00c      	b.n	800bc70 <memp_free+0x3c>

  if (mem == NULL) {
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d008      	beq.n	800bc6e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <memp_free+0x50>)
 800bc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff ffb8 	bl	800bbdc <do_memp_free_pool>
 800bc6c:	e000      	b.n	800bc70 <memp_free+0x3c>
    return;
 800bc6e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	0801a388 	.word	0x0801a388
 800bc7c:	0801a458 	.word	0x0801a458
 800bc80:	0801a3dc 	.word	0x0801a3dc
 800bc84:	080282e4 	.word	0x080282e4

0800bc88 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bc8c:	bf00      	nop
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
	...

0800bc98 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d108      	bne.n	800bcbe <netif_add+0x26>
 800bcac:	4b59      	ldr	r3, [pc, #356]	; (800be14 <netif_add+0x17c>)
 800bcae:	f240 1227 	movw	r2, #295	; 0x127
 800bcb2:	4959      	ldr	r1, [pc, #356]	; (800be18 <netif_add+0x180>)
 800bcb4:	4859      	ldr	r0, [pc, #356]	; (800be1c <netif_add+0x184>)
 800bcb6:	f00c fb01 	bl	80182bc <iprintf>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e0a6      	b.n	800be0c <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d108      	bne.n	800bcd6 <netif_add+0x3e>
 800bcc4:	4b53      	ldr	r3, [pc, #332]	; (800be14 <netif_add+0x17c>)
 800bcc6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bcca:	4955      	ldr	r1, [pc, #340]	; (800be20 <netif_add+0x188>)
 800bccc:	4853      	ldr	r0, [pc, #332]	; (800be1c <netif_add+0x184>)
 800bcce:	f00c faf5 	bl	80182bc <iprintf>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e09a      	b.n	800be0c <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bcdc:	4b51      	ldr	r3, [pc, #324]	; (800be24 <netif_add+0x18c>)
 800bcde:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d101      	bne.n	800bcea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bce6:	4b4f      	ldr	r3, [pc, #316]	; (800be24 <netif_add+0x18c>)
 800bce8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bcf0:	4b4c      	ldr	r3, [pc, #304]	; (800be24 <netif_add+0x18c>)
 800bcf2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4a47      	ldr	r2, [pc, #284]	; (800be28 <netif_add+0x190>)
 800bd0a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3320      	adds	r3, #32
 800bd1e:	2204      	movs	r2, #4
 800bd20:	2100      	movs	r1, #0
 800bd22:	4618      	mov	r0, r3
 800bd24:	f00c fac2 	bl	80182ac <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6a3a      	ldr	r2, [r7, #32]
 800bd2c:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800bd2e:	4b3f      	ldr	r3, [pc, #252]	; (800be2c <netif_add+0x194>)
 800bd30:	781a      	ldrb	r2, [r3, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd3c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f000 f913 	bl	800bf70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	4798      	blx	r3
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <netif_add+0xc2>
    return NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e058      	b.n	800be0c <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd60:	2bff      	cmp	r3, #255	; 0xff
 800bd62:	d103      	bne.n	800bd6c <netif_add+0xd4>
        netif->num = 0;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bd70:	4b2f      	ldr	r3, [pc, #188]	; (800be30 <netif_add+0x198>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	617b      	str	r3, [r7, #20]
 800bd76:	e02b      	b.n	800bdd0 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d106      	bne.n	800bd8e <netif_add+0xf6>
 800bd80:	4b24      	ldr	r3, [pc, #144]	; (800be14 <netif_add+0x17c>)
 800bd82:	f240 128b 	movw	r2, #395	; 0x18b
 800bd86:	492b      	ldr	r1, [pc, #172]	; (800be34 <netif_add+0x19c>)
 800bd88:	4824      	ldr	r0, [pc, #144]	; (800be1c <netif_add+0x184>)
 800bd8a:	f00c fa97 	bl	80182bc <iprintf>
        num_netifs++;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	3301      	adds	r3, #1
 800bd92:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	2bff      	cmp	r3, #255	; 0xff
 800bd98:	dd06      	ble.n	800bda8 <netif_add+0x110>
 800bd9a:	4b1e      	ldr	r3, [pc, #120]	; (800be14 <netif_add+0x17c>)
 800bd9c:	f240 128d 	movw	r2, #397	; 0x18d
 800bda0:	4925      	ldr	r1, [pc, #148]	; (800be38 <netif_add+0x1a0>)
 800bda2:	481e      	ldr	r0, [pc, #120]	; (800be1c <netif_add+0x184>)
 800bda4:	f00c fa8a 	bl	80182bc <iprintf>
        if (netif2->num == netif->num) {
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d108      	bne.n	800bdca <netif_add+0x132>
          netif->num++;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800bdc8:	e005      	b.n	800bdd6 <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1d0      	bne.n	800bd78 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1be      	bne.n	800bd5a <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bde2:	2bfe      	cmp	r3, #254	; 0xfe
 800bde4:	d103      	bne.n	800bdee <netif_add+0x156>
    netif_num = 0;
 800bde6:	4b11      	ldr	r3, [pc, #68]	; (800be2c <netif_add+0x194>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	701a      	strb	r2, [r3, #0]
 800bdec:	e006      	b.n	800bdfc <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <netif_add+0x194>)
 800bdfa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bdfc:	4b0c      	ldr	r3, [pc, #48]	; (800be30 <netif_add+0x198>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800be04:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <netif_add+0x198>)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800be0a:	68fb      	ldr	r3, [r7, #12]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	0801a474 	.word	0x0801a474
 800be18:	0801a508 	.word	0x0801a508
 800be1c:	0801a4c4 	.word	0x0801a4c4
 800be20:	0801a524 	.word	0x0801a524
 800be24:	08028368 	.word	0x08028368
 800be28:	0800c161 	.word	0x0800c161
 800be2c:	20008c54 	.word	0x20008c54
 800be30:	2000fac8 	.word	0x2000fac8
 800be34:	0801a548 	.word	0x0801a548
 800be38:	0801a55c 	.word	0x0801a55c

0800be3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f002 fe07 	bl	800ea5c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f007 fe8b 	bl	8013b6c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800be56:	bf00      	nop
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d106      	bne.n	800be80 <netif_do_set_ipaddr+0x20>
 800be72:	4b1d      	ldr	r3, [pc, #116]	; (800bee8 <netif_do_set_ipaddr+0x88>)
 800be74:	f240 12cb 	movw	r2, #459	; 0x1cb
 800be78:	491c      	ldr	r1, [pc, #112]	; (800beec <netif_do_set_ipaddr+0x8c>)
 800be7a:	481d      	ldr	r0, [pc, #116]	; (800bef0 <netif_do_set_ipaddr+0x90>)
 800be7c:	f00c fa1e 	bl	80182bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d106      	bne.n	800be94 <netif_do_set_ipaddr+0x34>
 800be86:	4b18      	ldr	r3, [pc, #96]	; (800bee8 <netif_do_set_ipaddr+0x88>)
 800be88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800be8c:	4917      	ldr	r1, [pc, #92]	; (800beec <netif_do_set_ipaddr+0x8c>)
 800be8e:	4818      	ldr	r0, [pc, #96]	; (800bef0 <netif_do_set_ipaddr+0x90>)
 800be90:	f00c fa14 	bl	80182bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3304      	adds	r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d01c      	beq.n	800bedc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3304      	adds	r3, #4
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800beb2:	f107 0314 	add.w	r3, r7, #20
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff ffbf 	bl	800be3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <netif_do_set_ipaddr+0x6a>
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	e000      	b.n	800becc <netif_do_set_ipaddr+0x6c>
 800beca:	2300      	movs	r3, #0
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bed0:	2101      	movs	r1, #1
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f000 f8d2 	bl	800c07c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	0801a474 	.word	0x0801a474
 800beec:	0801a58c 	.word	0x0801a58c
 800bef0:	0801a4c4 	.word	0x0801a4c4

0800bef4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3308      	adds	r3, #8
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d00a      	beq.n	800bf24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <netif_do_set_netmask+0x26>
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	e000      	b.n	800bf1c <netif_do_set_netmask+0x28>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bf20:	2301      	movs	r3, #1
 800bf22:	e000      	b.n	800bf26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b085      	sub	sp, #20
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	330c      	adds	r3, #12
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d00a      	beq.n	800bf62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <netif_do_set_gw+0x26>
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	e000      	b.n	800bf5a <netif_do_set_gw+0x28>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e000      	b.n	800bf64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bf8c:	4b1c      	ldr	r3, [pc, #112]	; (800c000 <netif_set_addr+0x90>)
 800bf8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bf96:	4b1a      	ldr	r3, [pc, #104]	; (800c000 <netif_set_addr+0x90>)
 800bf98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bfa0:	4b17      	ldr	r3, [pc, #92]	; (800c000 <netif_set_addr+0x90>)
 800bfa2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <netif_set_addr+0x42>
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <netif_set_addr+0x46>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <netif_set_addr+0x48>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d006      	beq.n	800bfce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bfc0:	f107 0310 	add.w	r3, r7, #16
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f7ff ff49 	bl	800be60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	6879      	ldr	r1, [r7, #4]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff ff8e 	bl	800bef4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7ff ffa8 	bl	800bf32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d106      	bne.n	800bff6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bfe8:	f107 0310 	add.w	r3, r7, #16
 800bfec:	461a      	mov	r2, r3
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f7ff ff35 	bl	800be60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bff6:	bf00      	nop
 800bff8:	3720      	adds	r7, #32
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	08028368 	.word	0x08028368

0800c004 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c00c:	4a04      	ldr	r2, [pc, #16]	; (800c020 <netif_set_default+0x1c>)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	2000facc 	.word	0x2000facc

0800c024 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d107      	bne.n	800c042 <netif_set_up+0x1e>
 800c032:	4b0f      	ldr	r3, [pc, #60]	; (800c070 <netif_set_up+0x4c>)
 800c034:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c038:	490e      	ldr	r1, [pc, #56]	; (800c074 <netif_set_up+0x50>)
 800c03a:	480f      	ldr	r0, [pc, #60]	; (800c078 <netif_set_up+0x54>)
 800c03c:	f00c f93e 	bl	80182bc <iprintf>
 800c040:	e013      	b.n	800c06a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c056:	f043 0301 	orr.w	r3, r3, #1
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c062:	2103      	movs	r1, #3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f809 	bl	800c07c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	0801a474 	.word	0x0801a474
 800c074:	0801a5fc 	.word	0x0801a5fc
 800c078:	0801a4c4 	.word	0x0801a4c4

0800c07c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d106      	bne.n	800c09c <netif_issue_reports+0x20>
 800c08e:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <netif_issue_reports+0x74>)
 800c090:	f240 326d 	movw	r2, #877	; 0x36d
 800c094:	4917      	ldr	r1, [pc, #92]	; (800c0f4 <netif_issue_reports+0x78>)
 800c096:	4818      	ldr	r0, [pc, #96]	; (800c0f8 <netif_issue_reports+0x7c>)
 800c098:	f00c f910 	bl	80182bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0a2:	f003 0304 	and.w	r3, r3, #4
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d01e      	beq.n	800c0e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d017      	beq.n	800c0e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d013      	beq.n	800c0ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d00e      	beq.n	800c0ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0d2:	f003 0308 	and.w	r3, r3, #8
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d007      	beq.n	800c0ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f00a fb05 	bl	80166f0 <etharp_request>
 800c0e6:	e000      	b.n	800c0ea <netif_issue_reports+0x6e>
    return;
 800c0e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	0801a474 	.word	0x0801a474
 800c0f4:	0801a618 	.word	0x0801a618
 800c0f8:	0801a4c4 	.word	0x0801a4c4

0800c0fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d107      	bne.n	800c11a <netif_set_down+0x1e>
 800c10a:	4b12      	ldr	r3, [pc, #72]	; (800c154 <netif_set_down+0x58>)
 800c10c:	f240 329b 	movw	r2, #923	; 0x39b
 800c110:	4911      	ldr	r1, [pc, #68]	; (800c158 <netif_set_down+0x5c>)
 800c112:	4812      	ldr	r0, [pc, #72]	; (800c15c <netif_set_down+0x60>)
 800c114:	f00c f8d2 	bl	80182bc <iprintf>
 800c118:	e019      	b.n	800c14e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	d012      	beq.n	800c14e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c12e:	f023 0301 	bic.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c140:	f003 0308 	and.w	r3, r3, #8
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f009 fe8b 	bl	8015e64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	0801a474 	.word	0x0801a474
 800c158:	0801a63c 	.word	0x0801a63c
 800c15c:	0801a4c4 	.word	0x0801a4c4

0800c160 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c16c:	f06f 030b 	mvn.w	r3, #11
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d013      	beq.n	800c1b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c18c:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <netif_get_by_index+0x48>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	e00c      	b.n	800c1ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c19a:	3301      	adds	r3, #1
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	79fa      	ldrb	r2, [r7, #7]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d101      	bne.n	800c1a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	e006      	b.n	800c1b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	60fb      	str	r3, [r7, #12]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1ef      	bne.n	800c194 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	2000fac8 	.word	0x2000fac8

0800c1c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c1ce:	f00b fff1 	bl	80181b4 <sys_arch_protect>
 800c1d2:	6038      	str	r0, [r7, #0]
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <pbuf_free_ooseq+0x44>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	6838      	ldr	r0, [r7, #0]
 800c1dc:	f00b fff8 	bl	80181d0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <pbuf_free_ooseq+0x48>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	607b      	str	r3, [r7, #4]
 800c1e6:	e00a      	b.n	800c1fe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d003      	beq.n	800c1f8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f002 fc71 	bl	800ead8 <tcp_free_ooseq>
      return;
 800c1f6:	e005      	b.n	800c204 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	607b      	str	r3, [r7, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f1      	bne.n	800c1e8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000fad0 	.word	0x2000fad0
 800c210:	2000fad8 	.word	0x2000fad8

0800c214 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c21c:	f7ff ffd4 	bl	800c1c8 <pbuf_free_ooseq>
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c22e:	f00b ffc1 	bl	80181b4 <sys_arch_protect>
 800c232:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c234:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <pbuf_pool_is_empty+0x4c>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c23a:	4b0e      	ldr	r3, [pc, #56]	; (800c274 <pbuf_pool_is_empty+0x4c>)
 800c23c:	2201      	movs	r2, #1
 800c23e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f00b ffc5 	bl	80181d0 <sys_arch_unprotect>

  if (!queued) {
 800c246:	78fb      	ldrb	r3, [r7, #3]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10f      	bne.n	800c26c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c24c:	2100      	movs	r1, #0
 800c24e:	480a      	ldr	r0, [pc, #40]	; (800c278 <pbuf_pool_is_empty+0x50>)
 800c250:	f7fe f852 	bl	800a2f8 <tcpip_try_callback>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d008      	beq.n	800c26c <pbuf_pool_is_empty+0x44>
 800c25a:	f00b ffab 	bl	80181b4 <sys_arch_protect>
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	4b04      	ldr	r3, [pc, #16]	; (800c274 <pbuf_pool_is_empty+0x4c>)
 800c262:	2200      	movs	r2, #0
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f00b ffb2 	bl	80181d0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c26c:	bf00      	nop
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	2000fad0 	.word	0x2000fad0
 800c278:	0800c215 	.word	0x0800c215

0800c27c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	4611      	mov	r1, r2
 800c288:	461a      	mov	r2, r3
 800c28a:	460b      	mov	r3, r1
 800c28c:	80fb      	strh	r3, [r7, #6]
 800c28e:	4613      	mov	r3, r2
 800c290:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	88fa      	ldrh	r2, [r7, #6]
 800c2a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	88ba      	ldrh	r2, [r7, #4]
 800c2a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c2aa:	8b3b      	ldrh	r3, [r7, #24]
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	7f3a      	ldrb	r2, [r7, #28]
 800c2b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	73da      	strb	r2, [r3, #15]
}
 800c2c4:	bf00      	nop
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08c      	sub	sp, #48	; 0x30
 800c2d4:	af02      	add	r7, sp, #8
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
 800c2da:	460b      	mov	r3, r1
 800c2dc:	80bb      	strh	r3, [r7, #4]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c2e2:	79fb      	ldrb	r3, [r7, #7]
 800c2e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c2e6:	887b      	ldrh	r3, [r7, #2]
 800c2e8:	2b41      	cmp	r3, #65	; 0x41
 800c2ea:	d00b      	beq.n	800c304 <pbuf_alloc+0x34>
 800c2ec:	2b41      	cmp	r3, #65	; 0x41
 800c2ee:	dc02      	bgt.n	800c2f6 <pbuf_alloc+0x26>
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d007      	beq.n	800c304 <pbuf_alloc+0x34>
 800c2f4:	e0c2      	b.n	800c47c <pbuf_alloc+0x1ac>
 800c2f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c2fa:	d00b      	beq.n	800c314 <pbuf_alloc+0x44>
 800c2fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c300:	d070      	beq.n	800c3e4 <pbuf_alloc+0x114>
 800c302:	e0bb      	b.n	800c47c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c304:	887a      	ldrh	r2, [r7, #2]
 800c306:	88bb      	ldrh	r3, [r7, #4]
 800c308:	4619      	mov	r1, r3
 800c30a:	2000      	movs	r0, #0
 800c30c:	f000 f8d2 	bl	800c4b4 <pbuf_alloc_reference>
 800c310:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c312:	e0bd      	b.n	800c490 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c314:	2300      	movs	r3, #0
 800c316:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c31c:	88bb      	ldrh	r3, [r7, #4]
 800c31e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c320:	200c      	movs	r0, #12
 800c322:	f7ff fc35 	bl	800bb90 <memp_malloc>
 800c326:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d109      	bne.n	800c342 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800c32e:	f7ff ff7b 	bl	800c228 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800c338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c33a:	f000 faa9 	bl	800c890 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c33e:	2300      	movs	r3, #0
 800c340:	e0a7      	b.n	800c492 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c344:	3303      	adds	r3, #3
 800c346:	b29b      	uxth	r3, r3
 800c348:	f023 0303 	bic.w	r3, r3, #3
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c352:	b29b      	uxth	r3, r3
 800c354:	8b7a      	ldrh	r2, [r7, #26]
 800c356:	4293      	cmp	r3, r2
 800c358:	bf28      	it	cs
 800c35a:	4613      	movcs	r3, r2
 800c35c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c35e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c360:	3310      	adds	r3, #16
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	4413      	add	r3, r2
 800c366:	3303      	adds	r3, #3
 800c368:	f023 0303 	bic.w	r3, r3, #3
 800c36c:	4618      	mov	r0, r3
 800c36e:	89f9      	ldrh	r1, [r7, #14]
 800c370:	8b7a      	ldrh	r2, [r7, #26]
 800c372:	2300      	movs	r3, #0
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	887b      	ldrh	r3, [r7, #2]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	460b      	mov	r3, r1
 800c37c:	4601      	mov	r1, r0
 800c37e:	6938      	ldr	r0, [r7, #16]
 800c380:	f7ff ff7c 	bl	800c27c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	f003 0303 	and.w	r3, r3, #3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d006      	beq.n	800c39e <pbuf_alloc+0xce>
 800c390:	4b42      	ldr	r3, [pc, #264]	; (800c49c <pbuf_alloc+0x1cc>)
 800c392:	f240 1201 	movw	r2, #257	; 0x101
 800c396:	4942      	ldr	r1, [pc, #264]	; (800c4a0 <pbuf_alloc+0x1d0>)
 800c398:	4842      	ldr	r0, [pc, #264]	; (800c4a4 <pbuf_alloc+0x1d4>)
 800c39a:	f00b ff8f 	bl	80182bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c39e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3a0:	3303      	adds	r3, #3
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c3aa:	d106      	bne.n	800c3ba <pbuf_alloc+0xea>
 800c3ac:	4b3b      	ldr	r3, [pc, #236]	; (800c49c <pbuf_alloc+0x1cc>)
 800c3ae:	f240 1203 	movw	r2, #259	; 0x103
 800c3b2:	493d      	ldr	r1, [pc, #244]	; (800c4a8 <pbuf_alloc+0x1d8>)
 800c3b4:	483b      	ldr	r0, [pc, #236]	; (800c4a4 <pbuf_alloc+0x1d4>)
 800c3b6:	f00b ff81 	bl	80182bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d102      	bne.n	800c3c6 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3c4:	e002      	b.n	800c3cc <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c3d0:	8b7a      	ldrh	r2, [r7, #26]
 800c3d2:	89fb      	ldrh	r3, [r7, #14]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c3dc:	8b7b      	ldrh	r3, [r7, #26]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d19e      	bne.n	800c320 <pbuf_alloc+0x50>
      break;
 800c3e2:	e055      	b.n	800c490 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c3e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3e6:	3303      	adds	r3, #3
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	f023 0303 	bic.w	r3, r3, #3
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	88bb      	ldrh	r3, [r7, #4]
 800c3f2:	3303      	adds	r3, #3
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4413      	add	r3, r2
 800c3fe:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c400:	8b3b      	ldrh	r3, [r7, #24]
 800c402:	3310      	adds	r3, #16
 800c404:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c406:	8b3a      	ldrh	r2, [r7, #24]
 800c408:	88bb      	ldrh	r3, [r7, #4]
 800c40a:	3303      	adds	r3, #3
 800c40c:	f023 0303 	bic.w	r3, r3, #3
 800c410:	429a      	cmp	r2, r3
 800c412:	d306      	bcc.n	800c422 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c414:	8afa      	ldrh	r2, [r7, #22]
 800c416:	88bb      	ldrh	r3, [r7, #4]
 800c418:	3303      	adds	r3, #3
 800c41a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c41e:	429a      	cmp	r2, r3
 800c420:	d201      	bcs.n	800c426 <pbuf_alloc+0x156>
        return NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	e035      	b.n	800c492 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c426:	8afb      	ldrh	r3, [r7, #22]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff fa2f 	bl	800b88c <mem_malloc>
 800c42e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <pbuf_alloc+0x16a>
        return NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	e02b      	b.n	800c492 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c43a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c43c:	3310      	adds	r3, #16
 800c43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c440:	4413      	add	r3, r2
 800c442:	3303      	adds	r3, #3
 800c444:	f023 0303 	bic.w	r3, r3, #3
 800c448:	4618      	mov	r0, r3
 800c44a:	88b9      	ldrh	r1, [r7, #4]
 800c44c:	88ba      	ldrh	r2, [r7, #4]
 800c44e:	2300      	movs	r3, #0
 800c450:	9301      	str	r3, [sp, #4]
 800c452:	887b      	ldrh	r3, [r7, #2]
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	460b      	mov	r3, r1
 800c458:	4601      	mov	r1, r0
 800c45a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c45c:	f7ff ff0e 	bl	800c27c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f003 0303 	and.w	r3, r3, #3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d010      	beq.n	800c48e <pbuf_alloc+0x1be>
 800c46c:	4b0b      	ldr	r3, [pc, #44]	; (800c49c <pbuf_alloc+0x1cc>)
 800c46e:	f240 1223 	movw	r2, #291	; 0x123
 800c472:	490e      	ldr	r1, [pc, #56]	; (800c4ac <pbuf_alloc+0x1dc>)
 800c474:	480b      	ldr	r0, [pc, #44]	; (800c4a4 <pbuf_alloc+0x1d4>)
 800c476:	f00b ff21 	bl	80182bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c47a:	e008      	b.n	800c48e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c47c:	4b07      	ldr	r3, [pc, #28]	; (800c49c <pbuf_alloc+0x1cc>)
 800c47e:	f240 1227 	movw	r2, #295	; 0x127
 800c482:	490b      	ldr	r1, [pc, #44]	; (800c4b0 <pbuf_alloc+0x1e0>)
 800c484:	4807      	ldr	r0, [pc, #28]	; (800c4a4 <pbuf_alloc+0x1d4>)
 800c486:	f00b ff19 	bl	80182bc <iprintf>
      return NULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	e001      	b.n	800c492 <pbuf_alloc+0x1c2>
      break;
 800c48e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c492:	4618      	mov	r0, r3
 800c494:	3728      	adds	r7, #40	; 0x28
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	0801a6a4 	.word	0x0801a6a4
 800c4a0:	0801a6d4 	.word	0x0801a6d4
 800c4a4:	0801a704 	.word	0x0801a704
 800c4a8:	0801a72c 	.word	0x0801a72c
 800c4ac:	0801a760 	.word	0x0801a760
 800c4b0:	0801a78c 	.word	0x0801a78c

0800c4b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af02      	add	r7, sp, #8
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	807b      	strh	r3, [r7, #2]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c4c4:	883b      	ldrh	r3, [r7, #0]
 800c4c6:	2b41      	cmp	r3, #65	; 0x41
 800c4c8:	d009      	beq.n	800c4de <pbuf_alloc_reference+0x2a>
 800c4ca:	883b      	ldrh	r3, [r7, #0]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d006      	beq.n	800c4de <pbuf_alloc_reference+0x2a>
 800c4d0:	4b0f      	ldr	r3, [pc, #60]	; (800c510 <pbuf_alloc_reference+0x5c>)
 800c4d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c4d6:	490f      	ldr	r1, [pc, #60]	; (800c514 <pbuf_alloc_reference+0x60>)
 800c4d8:	480f      	ldr	r0, [pc, #60]	; (800c518 <pbuf_alloc_reference+0x64>)
 800c4da:	f00b feef 	bl	80182bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c4de:	200b      	movs	r0, #11
 800c4e0:	f7ff fb56 	bl	800bb90 <memp_malloc>
 800c4e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e00b      	b.n	800c508 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c4f0:	8879      	ldrh	r1, [r7, #2]
 800c4f2:	887a      	ldrh	r2, [r7, #2]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	883b      	ldrh	r3, [r7, #0]
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff febb 	bl	800c27c <pbuf_init_alloced_pbuf>
  return p;
 800c506:	68fb      	ldr	r3, [r7, #12]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	0801a6a4 	.word	0x0801a6a4
 800c514:	0801a7a8 	.word	0x0801a7a8
 800c518:	0801a704 	.word	0x0801a704

0800c51c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af02      	add	r7, sp, #8
 800c522:	607b      	str	r3, [r7, #4]
 800c524:	4603      	mov	r3, r0
 800c526:	73fb      	strb	r3, [r7, #15]
 800c528:	460b      	mov	r3, r1
 800c52a:	81bb      	strh	r3, [r7, #12]
 800c52c:	4613      	mov	r3, r2
 800c52e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c530:	7bfb      	ldrb	r3, [r7, #15]
 800c532:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c534:	8a7b      	ldrh	r3, [r7, #18]
 800c536:	3303      	adds	r3, #3
 800c538:	f023 0203 	bic.w	r2, r3, #3
 800c53c:	89bb      	ldrh	r3, [r7, #12]
 800c53e:	441a      	add	r2, r3
 800c540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c542:	429a      	cmp	r2, r3
 800c544:	d901      	bls.n	800c54a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	e018      	b.n	800c57c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d007      	beq.n	800c560 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c550:	8a7b      	ldrh	r3, [r7, #18]
 800c552:	3303      	adds	r3, #3
 800c554:	f023 0303 	bic.w	r3, r3, #3
 800c558:	6a3a      	ldr	r2, [r7, #32]
 800c55a:	4413      	add	r3, r2
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	e001      	b.n	800c564 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	89b9      	ldrh	r1, [r7, #12]
 800c568:	89ba      	ldrh	r2, [r7, #12]
 800c56a:	2302      	movs	r3, #2
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	897b      	ldrh	r3, [r7, #10]
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	460b      	mov	r3, r1
 800c574:	6979      	ldr	r1, [r7, #20]
 800c576:	f7ff fe81 	bl	800c27c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c57a:	687b      	ldr	r3, [r7, #4]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <pbuf_realloc+0x20>
 800c596:	4b3a      	ldr	r3, [pc, #232]	; (800c680 <pbuf_realloc+0xfc>)
 800c598:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c59c:	4939      	ldr	r1, [pc, #228]	; (800c684 <pbuf_realloc+0x100>)
 800c59e:	483a      	ldr	r0, [pc, #232]	; (800c688 <pbuf_realloc+0x104>)
 800c5a0:	f00b fe8c 	bl	80182bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	891b      	ldrh	r3, [r3, #8]
 800c5a8:	887a      	ldrh	r2, [r7, #2]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d264      	bcs.n	800c678 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	891a      	ldrh	r2, [r3, #8]
 800c5b2:	887b      	ldrh	r3, [r7, #2]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c5b8:	887b      	ldrh	r3, [r7, #2]
 800c5ba:	817b      	strh	r3, [r7, #10]
  q = p;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c5c0:	e018      	b.n	800c5f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	895b      	ldrh	r3, [r3, #10]
 800c5c6:	897a      	ldrh	r2, [r7, #10]
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	891a      	ldrh	r2, [r3, #8]
 800c5d0:	893b      	ldrh	r3, [r7, #8]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <pbuf_realloc+0x70>
 800c5e6:	4b26      	ldr	r3, [pc, #152]	; (800c680 <pbuf_realloc+0xfc>)
 800c5e8:	f240 12af 	movw	r2, #431	; 0x1af
 800c5ec:	4927      	ldr	r1, [pc, #156]	; (800c68c <pbuf_realloc+0x108>)
 800c5ee:	4826      	ldr	r0, [pc, #152]	; (800c688 <pbuf_realloc+0x104>)
 800c5f0:	f00b fe64 	bl	80182bc <iprintf>
  while (rem_len > q->len) {
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	895b      	ldrh	r3, [r3, #10]
 800c5f8:	897a      	ldrh	r2, [r7, #10]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d8e1      	bhi.n	800c5c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	7b1b      	ldrb	r3, [r3, #12]
 800c602:	f003 030f 	and.w	r3, r3, #15
 800c606:	2b00      	cmp	r3, #0
 800c608:	d122      	bne.n	800c650 <pbuf_realloc+0xcc>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	895b      	ldrh	r3, [r3, #10]
 800c60e:	897a      	ldrh	r2, [r7, #10]
 800c610:	429a      	cmp	r2, r3
 800c612:	d01d      	beq.n	800c650 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	7b5b      	ldrb	r3, [r3, #13]
 800c618:	f003 0302 	and.w	r3, r3, #2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d117      	bne.n	800c650 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	461a      	mov	r2, r3
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	897b      	ldrh	r3, [r7, #10]
 800c62e:	4413      	add	r3, r2
 800c630:	b29b      	uxth	r3, r3
 800c632:	4619      	mov	r1, r3
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7ff f81f 	bl	800b678 <mem_trim>
 800c63a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d106      	bne.n	800c650 <pbuf_realloc+0xcc>
 800c642:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <pbuf_realloc+0xfc>)
 800c644:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c648:	4911      	ldr	r1, [pc, #68]	; (800c690 <pbuf_realloc+0x10c>)
 800c64a:	480f      	ldr	r0, [pc, #60]	; (800c688 <pbuf_realloc+0x104>)
 800c64c:	f00b fe36 	bl	80182bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	897a      	ldrh	r2, [r7, #10]
 800c654:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	895a      	ldrh	r2, [r3, #10]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f910 	bl	800c890 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	e000      	b.n	800c67a <pbuf_realloc+0xf6>
    return;
 800c678:	bf00      	nop

}
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	0801a6a4 	.word	0x0801a6a4
 800c684:	0801a7bc 	.word	0x0801a7bc
 800c688:	0801a704 	.word	0x0801a704
 800c68c:	0801a7d4 	.word	0x0801a7d4
 800c690:	0801a7ec 	.word	0x0801a7ec

0800c694 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <pbuf_add_header_impl+0x22>
 800c6a8:	4b2b      	ldr	r3, [pc, #172]	; (800c758 <pbuf_add_header_impl+0xc4>)
 800c6aa:	f240 12df 	movw	r2, #479	; 0x1df
 800c6ae:	492b      	ldr	r1, [pc, #172]	; (800c75c <pbuf_add_header_impl+0xc8>)
 800c6b0:	482b      	ldr	r0, [pc, #172]	; (800c760 <pbuf_add_header_impl+0xcc>)
 800c6b2:	f00b fe03 	bl	80182bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <pbuf_add_header_impl+0x30>
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6c2:	d301      	bcc.n	800c6c8 <pbuf_add_header_impl+0x34>
    return 1;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e043      	b.n	800c750 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <pbuf_add_header_impl+0x3e>
    return 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e03e      	b.n	800c750 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	891a      	ldrh	r2, [r3, #8]
 800c6da:	8a7b      	ldrh	r3, [r7, #18]
 800c6dc:	4413      	add	r3, r2
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	8a7a      	ldrh	r2, [r7, #18]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d901      	bls.n	800c6ea <pbuf_add_header_impl+0x56>
    return 1;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e032      	b.n	800c750 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	7b1b      	ldrb	r3, [r3, #12]
 800c6ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c6f0:	8a3b      	ldrh	r3, [r7, #16]
 800c6f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00c      	beq.n	800c714 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	425b      	negs	r3, r3
 800c702:	4413      	add	r3, r2
 800c704:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3310      	adds	r3, #16
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d20d      	bcs.n	800c72c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c710:	2301      	movs	r3, #1
 800c712:	e01d      	b.n	800c750 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d006      	beq.n	800c728 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	425b      	negs	r3, r3
 800c722:	4413      	add	r3, r2
 800c724:	617b      	str	r3, [r7, #20]
 800c726:	e001      	b.n	800c72c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c728:	2301      	movs	r3, #1
 800c72a:	e011      	b.n	800c750 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	895a      	ldrh	r2, [r3, #10]
 800c736:	8a7b      	ldrh	r3, [r7, #18]
 800c738:	4413      	add	r3, r2
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	891a      	ldrh	r2, [r3, #8]
 800c744:	8a7b      	ldrh	r3, [r7, #18]
 800c746:	4413      	add	r3, r2
 800c748:	b29a      	uxth	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	0801a6a4 	.word	0x0801a6a4
 800c75c:	0801a808 	.word	0x0801a808
 800c760:	0801a704 	.word	0x0801a704

0800c764 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c76e:	2200      	movs	r2, #0
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff ff8e 	bl	800c694 <pbuf_add_header_impl>
 800c778:	4603      	mov	r3, r0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d106      	bne.n	800c7a2 <pbuf_remove_header+0x1e>
 800c794:	4b20      	ldr	r3, [pc, #128]	; (800c818 <pbuf_remove_header+0x94>)
 800c796:	f240 224b 	movw	r2, #587	; 0x24b
 800c79a:	4920      	ldr	r1, [pc, #128]	; (800c81c <pbuf_remove_header+0x98>)
 800c79c:	4820      	ldr	r0, [pc, #128]	; (800c820 <pbuf_remove_header+0x9c>)
 800c79e:	f00b fd8d 	bl	80182bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <pbuf_remove_header+0x2c>
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7ae:	d301      	bcc.n	800c7b4 <pbuf_remove_header+0x30>
    return 1;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e02c      	b.n	800c80e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <pbuf_remove_header+0x3a>
    return 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e027      	b.n	800c80e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	895b      	ldrh	r3, [r3, #10]
 800c7c6:	89fa      	ldrh	r2, [r7, #14]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d908      	bls.n	800c7de <pbuf_remove_header+0x5a>
 800c7cc:	4b12      	ldr	r3, [pc, #72]	; (800c818 <pbuf_remove_header+0x94>)
 800c7ce:	f240 2255 	movw	r2, #597	; 0x255
 800c7d2:	4914      	ldr	r1, [pc, #80]	; (800c824 <pbuf_remove_header+0xa0>)
 800c7d4:	4812      	ldr	r0, [pc, #72]	; (800c820 <pbuf_remove_header+0x9c>)
 800c7d6:	f00b fd71 	bl	80182bc <iprintf>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e017      	b.n	800c80e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	441a      	add	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	895a      	ldrh	r2, [r3, #10]
 800c7f4:	89fb      	ldrh	r3, [r7, #14]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	891a      	ldrh	r2, [r3, #8]
 800c802:	89fb      	ldrh	r3, [r7, #14]
 800c804:	1ad3      	subs	r3, r2, r3
 800c806:	b29a      	uxth	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	0801a6a4 	.word	0x0801a6a4
 800c81c:	0801a808 	.word	0x0801a808
 800c820:	0801a704 	.word	0x0801a704
 800c824:	0801a814 	.word	0x0801a814

0800c828 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	807b      	strh	r3, [r7, #2]
 800c834:	4613      	mov	r3, r2
 800c836:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	da08      	bge.n	800c852 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c844:	425b      	negs	r3, r3
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff ff9b 	bl	800c784 <pbuf_remove_header>
 800c84e:	4603      	mov	r3, r0
 800c850:	e007      	b.n	800c862 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c852:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c856:	787a      	ldrb	r2, [r7, #1]
 800c858:	4619      	mov	r1, r3
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff ff1a 	bl	800c694 <pbuf_add_header_impl>
 800c860:	4603      	mov	r3, r0
  }
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b082      	sub	sp, #8
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	460b      	mov	r3, r1
 800c874:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c876:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c87a:	2201      	movs	r2, #1
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff ffd2 	bl	800c828 <pbuf_header_impl>
 800c884:	4603      	mov	r3, r0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
	...

0800c890 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10b      	bne.n	800c8b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d106      	bne.n	800c8b2 <pbuf_free+0x22>
 800c8a4:	4b3b      	ldr	r3, [pc, #236]	; (800c994 <pbuf_free+0x104>)
 800c8a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c8aa:	493b      	ldr	r1, [pc, #236]	; (800c998 <pbuf_free+0x108>)
 800c8ac:	483b      	ldr	r0, [pc, #236]	; (800c99c <pbuf_free+0x10c>)
 800c8ae:	f00b fd05 	bl	80182bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e069      	b.n	800c98a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c8ba:	e062      	b.n	800c982 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c8bc:	f00b fc7a 	bl	80181b4 <sys_arch_protect>
 800c8c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	7b9b      	ldrb	r3, [r3, #14]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <pbuf_free+0x48>
 800c8ca:	4b32      	ldr	r3, [pc, #200]	; (800c994 <pbuf_free+0x104>)
 800c8cc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c8d0:	4933      	ldr	r1, [pc, #204]	; (800c9a0 <pbuf_free+0x110>)
 800c8d2:	4832      	ldr	r0, [pc, #200]	; (800c99c <pbuf_free+0x10c>)
 800c8d4:	f00b fcf2 	bl	80182bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7b9b      	ldrb	r3, [r3, #14]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	739a      	strb	r2, [r3, #14]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	7b9b      	ldrb	r3, [r3, #14]
 800c8e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c8ea:	69b8      	ldr	r0, [r7, #24]
 800c8ec:	f00b fc70 	bl	80181d0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c8f0:	7dfb      	ldrb	r3, [r7, #23]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d143      	bne.n	800c97e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7b1b      	ldrb	r3, [r3, #12]
 800c900:	f003 030f 	and.w	r3, r3, #15
 800c904:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7b5b      	ldrb	r3, [r3, #13]
 800c90a:	f003 0302 	and.w	r3, r3, #2
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d011      	beq.n	800c936 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <pbuf_free+0x9c>
 800c91e:	4b1d      	ldr	r3, [pc, #116]	; (800c994 <pbuf_free+0x104>)
 800c920:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c924:	491f      	ldr	r1, [pc, #124]	; (800c9a4 <pbuf_free+0x114>)
 800c926:	481d      	ldr	r0, [pc, #116]	; (800c99c <pbuf_free+0x10c>)
 800c928:	f00b fcc8 	bl	80182bc <iprintf>
        pc->custom_free_function(p);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	4798      	blx	r3
 800c934:	e01d      	b.n	800c972 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d104      	bne.n	800c946 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	200c      	movs	r0, #12
 800c940:	f7ff f978 	bl	800bc34 <memp_free>
 800c944:	e015      	b.n	800c972 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d104      	bne.n	800c956 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c94c:	6879      	ldr	r1, [r7, #4]
 800c94e:	200b      	movs	r0, #11
 800c950:	f7ff f970 	bl	800bc34 <memp_free>
 800c954:	e00d      	b.n	800c972 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d103      	bne.n	800c964 <pbuf_free+0xd4>
          mem_free(p);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7fe fdfb 	bl	800b558 <mem_free>
 800c962:	e006      	b.n	800c972 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c964:	4b0b      	ldr	r3, [pc, #44]	; (800c994 <pbuf_free+0x104>)
 800c966:	f240 320f 	movw	r2, #783	; 0x30f
 800c96a:	490f      	ldr	r1, [pc, #60]	; (800c9a8 <pbuf_free+0x118>)
 800c96c:	480b      	ldr	r0, [pc, #44]	; (800c99c <pbuf_free+0x10c>)
 800c96e:	f00b fca5 	bl	80182bc <iprintf>
        }
      }
      count++;
 800c972:	7ffb      	ldrb	r3, [r7, #31]
 800c974:	3301      	adds	r3, #1
 800c976:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	607b      	str	r3, [r7, #4]
 800c97c:	e001      	b.n	800c982 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c97e:	2300      	movs	r3, #0
 800c980:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d199      	bne.n	800c8bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c988:	7ffb      	ldrb	r3, [r7, #31]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3720      	adds	r7, #32
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	0801a6a4 	.word	0x0801a6a4
 800c998:	0801a808 	.word	0x0801a808
 800c99c:	0801a704 	.word	0x0801a704
 800c9a0:	0801a834 	.word	0x0801a834
 800c9a4:	0801a84c 	.word	0x0801a84c
 800c9a8:	0801a870 	.word	0x0801a870

0800c9ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c9b8:	e005      	b.n	800c9c6 <pbuf_clen+0x1a>
    ++len;
 800c9ba:	89fb      	ldrh	r3, [r7, #14]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1f6      	bne.n	800c9ba <pbuf_clen+0xe>
  }
  return len;
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
	...

0800c9dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d016      	beq.n	800ca18 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c9ea:	f00b fbe3 	bl	80181b4 <sys_arch_protect>
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	7b9b      	ldrb	r3, [r3, #14]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	739a      	strb	r2, [r3, #14]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f00b fbe7 	bl	80181d0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7b9b      	ldrb	r3, [r3, #14]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <pbuf_ref+0x3c>
 800ca0a:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <pbuf_ref+0x44>)
 800ca0c:	f240 3242 	movw	r2, #834	; 0x342
 800ca10:	4904      	ldr	r1, [pc, #16]	; (800ca24 <pbuf_ref+0x48>)
 800ca12:	4805      	ldr	r0, [pc, #20]	; (800ca28 <pbuf_ref+0x4c>)
 800ca14:	f00b fc52 	bl	80182bc <iprintf>
  }
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	0801a6a4 	.word	0x0801a6a4
 800ca24:	0801a884 	.word	0x0801a884
 800ca28:	0801a704 	.word	0x0801a704

0800ca2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <pbuf_cat+0x16>
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d107      	bne.n	800ca52 <pbuf_cat+0x26>
 800ca42:	4b20      	ldr	r3, [pc, #128]	; (800cac4 <pbuf_cat+0x98>)
 800ca44:	f240 325a 	movw	r2, #858	; 0x35a
 800ca48:	491f      	ldr	r1, [pc, #124]	; (800cac8 <pbuf_cat+0x9c>)
 800ca4a:	4820      	ldr	r0, [pc, #128]	; (800cacc <pbuf_cat+0xa0>)
 800ca4c:	f00b fc36 	bl	80182bc <iprintf>
 800ca50:	e034      	b.n	800cabc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	e00a      	b.n	800ca6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	891a      	ldrh	r2, [r3, #8]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	4413      	add	r3, r2
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60fb      	str	r3, [r7, #12]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1f0      	bne.n	800ca58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	891a      	ldrh	r2, [r3, #8]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	895b      	ldrh	r3, [r3, #10]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d006      	beq.n	800ca90 <pbuf_cat+0x64>
 800ca82:	4b10      	ldr	r3, [pc, #64]	; (800cac4 <pbuf_cat+0x98>)
 800ca84:	f240 3262 	movw	r2, #866	; 0x362
 800ca88:	4911      	ldr	r1, [pc, #68]	; (800cad0 <pbuf_cat+0xa4>)
 800ca8a:	4810      	ldr	r0, [pc, #64]	; (800cacc <pbuf_cat+0xa0>)
 800ca8c:	f00b fc16 	bl	80182bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d006      	beq.n	800caa6 <pbuf_cat+0x7a>
 800ca98:	4b0a      	ldr	r3, [pc, #40]	; (800cac4 <pbuf_cat+0x98>)
 800ca9a:	f240 3263 	movw	r2, #867	; 0x363
 800ca9e:	490d      	ldr	r1, [pc, #52]	; (800cad4 <pbuf_cat+0xa8>)
 800caa0:	480a      	ldr	r0, [pc, #40]	; (800cacc <pbuf_cat+0xa0>)
 800caa2:	f00b fc0b 	bl	80182bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	891a      	ldrh	r2, [r3, #8]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	891b      	ldrh	r3, [r3, #8]
 800caae:	4413      	add	r3, r2
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	0801a6a4 	.word	0x0801a6a4
 800cac8:	0801a898 	.word	0x0801a898
 800cacc:	0801a704 	.word	0x0801a704
 800cad0:	0801a8d0 	.word	0x0801a8d0
 800cad4:	0801a900 	.word	0x0801a900

0800cad8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff ffa1 	bl	800ca2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800caea:	6838      	ldr	r0, [r7, #0]
 800caec:	f7ff ff76 	bl	800c9dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cb02:	2300      	movs	r3, #0
 800cb04:	617b      	str	r3, [r7, #20]
 800cb06:	2300      	movs	r3, #0
 800cb08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d008      	beq.n	800cb22 <pbuf_copy+0x2a>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d005      	beq.n	800cb22 <pbuf_copy+0x2a>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	891a      	ldrh	r2, [r3, #8]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	891b      	ldrh	r3, [r3, #8]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d209      	bcs.n	800cb36 <pbuf_copy+0x3e>
 800cb22:	4b57      	ldr	r3, [pc, #348]	; (800cc80 <pbuf_copy+0x188>)
 800cb24:	f240 32ca 	movw	r2, #970	; 0x3ca
 800cb28:	4956      	ldr	r1, [pc, #344]	; (800cc84 <pbuf_copy+0x18c>)
 800cb2a:	4857      	ldr	r0, [pc, #348]	; (800cc88 <pbuf_copy+0x190>)
 800cb2c:	f00b fbc6 	bl	80182bc <iprintf>
 800cb30:	f06f 030f 	mvn.w	r3, #15
 800cb34:	e09f      	b.n	800cc76 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	895b      	ldrh	r3, [r3, #10]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	895b      	ldrh	r3, [r3, #10]
 800cb44:	4619      	mov	r1, r3
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	1acb      	subs	r3, r1, r3
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d306      	bcc.n	800cb5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	895b      	ldrh	r3, [r3, #10]
 800cb52:	461a      	mov	r2, r3
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	e005      	b.n	800cb68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	895b      	ldrh	r3, [r3, #10]
 800cb60:	461a      	mov	r2, r3
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	18d0      	adds	r0, r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	685a      	ldr	r2, [r3, #4]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	4413      	add	r3, r2
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	f00b fb8b 	bl	8018296 <memcpy>
    offset_to += len;
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4413      	add	r3, r2
 800cb86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	895b      	ldrh	r3, [r3, #10]
 800cb94:	461a      	mov	r2, r3
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d906      	bls.n	800cbaa <pbuf_copy+0xb2>
 800cb9c:	4b38      	ldr	r3, [pc, #224]	; (800cc80 <pbuf_copy+0x188>)
 800cb9e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800cba2:	493a      	ldr	r1, [pc, #232]	; (800cc8c <pbuf_copy+0x194>)
 800cba4:	4838      	ldr	r0, [pc, #224]	; (800cc88 <pbuf_copy+0x190>)
 800cba6:	f00b fb89 	bl	80182bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	895b      	ldrh	r3, [r3, #10]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d906      	bls.n	800cbc4 <pbuf_copy+0xcc>
 800cbb6:	4b32      	ldr	r3, [pc, #200]	; (800cc80 <pbuf_copy+0x188>)
 800cbb8:	f240 32da 	movw	r2, #986	; 0x3da
 800cbbc:	4934      	ldr	r1, [pc, #208]	; (800cc90 <pbuf_copy+0x198>)
 800cbbe:	4832      	ldr	r0, [pc, #200]	; (800cc88 <pbuf_copy+0x190>)
 800cbc0:	f00b fb7c 	bl	80182bc <iprintf>
    if (offset_from >= p_from->len) {
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	895b      	ldrh	r3, [r3, #10]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d304      	bcc.n	800cbda <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	895b      	ldrh	r3, [r3, #10]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d114      	bne.n	800cc10 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10c      	bne.n	800cc10 <pbuf_copy+0x118>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d009      	beq.n	800cc10 <pbuf_copy+0x118>
 800cbfc:	4b20      	ldr	r3, [pc, #128]	; (800cc80 <pbuf_copy+0x188>)
 800cbfe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cc02:	4924      	ldr	r1, [pc, #144]	; (800cc94 <pbuf_copy+0x19c>)
 800cc04:	4820      	ldr	r0, [pc, #128]	; (800cc88 <pbuf_copy+0x190>)
 800cc06:	f00b fb59 	bl	80182bc <iprintf>
 800cc0a:	f06f 030f 	mvn.w	r3, #15
 800cc0e:	e032      	b.n	800cc76 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d013      	beq.n	800cc3e <pbuf_copy+0x146>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	895a      	ldrh	r2, [r3, #10]
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	891b      	ldrh	r3, [r3, #8]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d10d      	bne.n	800cc3e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d009      	beq.n	800cc3e <pbuf_copy+0x146>
 800cc2a:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <pbuf_copy+0x188>)
 800cc2c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800cc30:	4919      	ldr	r1, [pc, #100]	; (800cc98 <pbuf_copy+0x1a0>)
 800cc32:	4815      	ldr	r0, [pc, #84]	; (800cc88 <pbuf_copy+0x190>)
 800cc34:	f00b fb42 	bl	80182bc <iprintf>
 800cc38:	f06f 0305 	mvn.w	r3, #5
 800cc3c:	e01b      	b.n	800cc76 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d013      	beq.n	800cc6c <pbuf_copy+0x174>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	895a      	ldrh	r2, [r3, #10]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	891b      	ldrh	r3, [r3, #8]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d10d      	bne.n	800cc6c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d009      	beq.n	800cc6c <pbuf_copy+0x174>
 800cc58:	4b09      	ldr	r3, [pc, #36]	; (800cc80 <pbuf_copy+0x188>)
 800cc5a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cc5e:	490e      	ldr	r1, [pc, #56]	; (800cc98 <pbuf_copy+0x1a0>)
 800cc60:	4809      	ldr	r0, [pc, #36]	; (800cc88 <pbuf_copy+0x190>)
 800cc62:	f00b fb2b 	bl	80182bc <iprintf>
 800cc66:	f06f 0305 	mvn.w	r3, #5
 800cc6a:	e004      	b.n	800cc76 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f47f af61 	bne.w	800cb36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	0801a6a4 	.word	0x0801a6a4
 800cc84:	0801a94c 	.word	0x0801a94c
 800cc88:	0801a704 	.word	0x0801a704
 800cc8c:	0801a97c 	.word	0x0801a97c
 800cc90:	0801a994 	.word	0x0801a994
 800cc94:	0801a9b0 	.word	0x0801a9b0
 800cc98:	0801a9c0 	.word	0x0801a9c0

0800cc9c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	4611      	mov	r1, r2
 800cca8:	461a      	mov	r2, r3
 800ccaa:	460b      	mov	r3, r1
 800ccac:	80fb      	strh	r3, [r7, #6]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d108      	bne.n	800ccd2 <pbuf_copy_partial+0x36>
 800ccc0:	4b2b      	ldr	r3, [pc, #172]	; (800cd70 <pbuf_copy_partial+0xd4>)
 800ccc2:	f240 420a 	movw	r2, #1034	; 0x40a
 800ccc6:	492b      	ldr	r1, [pc, #172]	; (800cd74 <pbuf_copy_partial+0xd8>)
 800ccc8:	482b      	ldr	r0, [pc, #172]	; (800cd78 <pbuf_copy_partial+0xdc>)
 800ccca:	f00b faf7 	bl	80182bc <iprintf>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e04a      	b.n	800cd68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d108      	bne.n	800ccea <pbuf_copy_partial+0x4e>
 800ccd8:	4b25      	ldr	r3, [pc, #148]	; (800cd70 <pbuf_copy_partial+0xd4>)
 800ccda:	f240 420b 	movw	r2, #1035	; 0x40b
 800ccde:	4927      	ldr	r1, [pc, #156]	; (800cd7c <pbuf_copy_partial+0xe0>)
 800cce0:	4825      	ldr	r0, [pc, #148]	; (800cd78 <pbuf_copy_partial+0xdc>)
 800cce2:	f00b faeb 	bl	80182bc <iprintf>
 800cce6:	2300      	movs	r3, #0
 800cce8:	e03e      	b.n	800cd68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	61fb      	str	r3, [r7, #28]
 800ccee:	e034      	b.n	800cd5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ccf0:	88bb      	ldrh	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00a      	beq.n	800cd0c <pbuf_copy_partial+0x70>
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	895b      	ldrh	r3, [r3, #10]
 800ccfa:	88ba      	ldrh	r2, [r7, #4]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d305      	bcc.n	800cd0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	895b      	ldrh	r3, [r3, #10]
 800cd04:	88ba      	ldrh	r2, [r7, #4]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	80bb      	strh	r3, [r7, #4]
 800cd0a:	e023      	b.n	800cd54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	895a      	ldrh	r2, [r3, #10]
 800cd10:	88bb      	ldrh	r3, [r7, #4]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cd16:	8b3a      	ldrh	r2, [r7, #24]
 800cd18:	88fb      	ldrh	r3, [r7, #6]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d901      	bls.n	800cd22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cd1e:	88fb      	ldrh	r3, [r7, #6]
 800cd20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cd22:	8b7b      	ldrh	r3, [r7, #26]
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	18d0      	adds	r0, r2, r3
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	88bb      	ldrh	r3, [r7, #4]
 800cd2e:	4413      	add	r3, r2
 800cd30:	8b3a      	ldrh	r2, [r7, #24]
 800cd32:	4619      	mov	r1, r3
 800cd34:	f00b faaf 	bl	8018296 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cd38:	8afa      	ldrh	r2, [r7, #22]
 800cd3a:	8b3b      	ldrh	r3, [r7, #24]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cd40:	8b7a      	ldrh	r2, [r7, #26]
 800cd42:	8b3b      	ldrh	r3, [r7, #24]
 800cd44:	4413      	add	r3, r2
 800cd46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cd48:	88fa      	ldrh	r2, [r7, #6]
 800cd4a:	8b3b      	ldrh	r3, [r7, #24]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	61fb      	str	r3, [r7, #28]
 800cd5a:	88fb      	ldrh	r3, [r7, #6]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <pbuf_copy_partial+0xca>
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1c4      	bne.n	800ccf0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cd66:	8afb      	ldrh	r3, [r7, #22]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	0801a6a4 	.word	0x0801a6a4
 800cd74:	0801a9ec 	.word	0x0801a9ec
 800cd78:	0801a704 	.word	0x0801a704
 800cd7c:	0801aa0c 	.word	0x0801aa0c

0800cd80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	603a      	str	r2, [r7, #0]
 800cd8a:	71fb      	strb	r3, [r7, #7]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	8919      	ldrh	r1, [r3, #8]
 800cd94:	88ba      	ldrh	r2, [r7, #4]
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7ff fa99 	bl	800c2d0 <pbuf_alloc>
 800cd9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <pbuf_clone+0x2a>
    return NULL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	e011      	b.n	800cdce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f7ff fea3 	bl	800caf8 <pbuf_copy>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cdb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d006      	beq.n	800cdcc <pbuf_clone+0x4c>
 800cdbe:	4b06      	ldr	r3, [pc, #24]	; (800cdd8 <pbuf_clone+0x58>)
 800cdc0:	f240 5224 	movw	r2, #1316	; 0x524
 800cdc4:	4905      	ldr	r1, [pc, #20]	; (800cddc <pbuf_clone+0x5c>)
 800cdc6:	4806      	ldr	r0, [pc, #24]	; (800cde0 <pbuf_clone+0x60>)
 800cdc8:	f00b fa78 	bl	80182bc <iprintf>
  return q;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0801a6a4 	.word	0x0801a6a4
 800cddc:	0801ab18 	.word	0x0801ab18
 800cde0:	0801a704 	.word	0x0801a704

0800cde4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cde8:	f00b fa80 	bl	80182ec <rand>
 800cdec:	4603      	mov	r3, r0
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	4b01      	ldr	r3, [pc, #4]	; (800ce04 <tcp_init+0x20>)
 800cdfe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ce00:	bf00      	nop
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	20000010 	.word	0x20000010

0800ce08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	7d1b      	ldrb	r3, [r3, #20]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d105      	bne.n	800ce24 <tcp_free+0x1c>
 800ce18:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <tcp_free+0x2c>)
 800ce1a:	22d4      	movs	r2, #212	; 0xd4
 800ce1c:	4906      	ldr	r1, [pc, #24]	; (800ce38 <tcp_free+0x30>)
 800ce1e:	4807      	ldr	r0, [pc, #28]	; (800ce3c <tcp_free+0x34>)
 800ce20:	f00b fa4c 	bl	80182bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	2001      	movs	r0, #1
 800ce28:	f7fe ff04 	bl	800bc34 <memp_free>
}
 800ce2c:	bf00      	nop
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	0801aba4 	.word	0x0801aba4
 800ce38:	0801abd4 	.word	0x0801abd4
 800ce3c:	0801abe8 	.word	0x0801abe8

0800ce40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	7d1b      	ldrb	r3, [r3, #20]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d105      	bne.n	800ce5c <tcp_free_listen+0x1c>
 800ce50:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <tcp_free_listen+0x2c>)
 800ce52:	22df      	movs	r2, #223	; 0xdf
 800ce54:	4906      	ldr	r1, [pc, #24]	; (800ce70 <tcp_free_listen+0x30>)
 800ce56:	4807      	ldr	r0, [pc, #28]	; (800ce74 <tcp_free_listen+0x34>)
 800ce58:	f00b fa30 	bl	80182bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	2002      	movs	r0, #2
 800ce60:	f7fe fee8 	bl	800bc34 <memp_free>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	0801aba4 	.word	0x0801aba4
 800ce70:	0801ac10 	.word	0x0801ac10
 800ce74:	0801abe8 	.word	0x0801abe8

0800ce78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ce7c:	f001 f8ac 	bl	800dfd8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ce80:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <tcp_tmr+0x28>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	3301      	adds	r3, #1
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <tcp_tmr+0x28>)
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	4b04      	ldr	r3, [pc, #16]	; (800cea0 <tcp_tmr+0x28>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d001      	beq.n	800ce9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ce98:	f000 fd60 	bl	800d95c <tcp_slowtmr>
  }
}
 800ce9c:	bf00      	nop
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20008c55 	.word	0x20008c55

0800cea4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d105      	bne.n	800cec0 <tcp_remove_listener+0x1c>
 800ceb4:	4b0d      	ldr	r3, [pc, #52]	; (800ceec <tcp_remove_listener+0x48>)
 800ceb6:	22ff      	movs	r2, #255	; 0xff
 800ceb8:	490d      	ldr	r1, [pc, #52]	; (800cef0 <tcp_remove_listener+0x4c>)
 800ceba:	480e      	ldr	r0, [pc, #56]	; (800cef4 <tcp_remove_listener+0x50>)
 800cebc:	f00b f9fe 	bl	80182bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e00a      	b.n	800cedc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d102      	bne.n	800ced6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	60fb      	str	r3, [r7, #12]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1f1      	bne.n	800cec6 <tcp_remove_listener+0x22>
    }
  }
}
 800cee2:	bf00      	nop
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	0801aba4 	.word	0x0801aba4
 800cef0:	0801ac2c 	.word	0x0801ac2c
 800cef4:	0801abe8 	.word	0x0801abe8

0800cef8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d106      	bne.n	800cf14 <tcp_listen_closed+0x1c>
 800cf06:	4b14      	ldr	r3, [pc, #80]	; (800cf58 <tcp_listen_closed+0x60>)
 800cf08:	f240 1211 	movw	r2, #273	; 0x111
 800cf0c:	4913      	ldr	r1, [pc, #76]	; (800cf5c <tcp_listen_closed+0x64>)
 800cf0e:	4814      	ldr	r0, [pc, #80]	; (800cf60 <tcp_listen_closed+0x68>)
 800cf10:	f00b f9d4 	bl	80182bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7d1b      	ldrb	r3, [r3, #20]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d006      	beq.n	800cf2a <tcp_listen_closed+0x32>
 800cf1c:	4b0e      	ldr	r3, [pc, #56]	; (800cf58 <tcp_listen_closed+0x60>)
 800cf1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cf22:	4910      	ldr	r1, [pc, #64]	; (800cf64 <tcp_listen_closed+0x6c>)
 800cf24:	480e      	ldr	r0, [pc, #56]	; (800cf60 <tcp_listen_closed+0x68>)
 800cf26:	f00b f9c9 	bl	80182bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	e00b      	b.n	800cf48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cf30:	4a0d      	ldr	r2, [pc, #52]	; (800cf68 <tcp_listen_closed+0x70>)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff ffb1 	bl	800cea4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3301      	adds	r3, #1
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	d9f0      	bls.n	800cf30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	0801aba4 	.word	0x0801aba4
 800cf5c:	0801ac54 	.word	0x0801ac54
 800cf60:	0801abe8 	.word	0x0801abe8
 800cf64:	0801ac60 	.word	0x0801ac60
 800cf68:	08028330 	.word	0x08028330

0800cf6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cf6c:	b5b0      	push	{r4, r5, r7, lr}
 800cf6e:	b088      	sub	sp, #32
 800cf70:	af04      	add	r7, sp, #16
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d106      	bne.n	800cf8c <tcp_close_shutdown+0x20>
 800cf7e:	4b61      	ldr	r3, [pc, #388]	; (800d104 <tcp_close_shutdown+0x198>)
 800cf80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cf84:	4960      	ldr	r1, [pc, #384]	; (800d108 <tcp_close_shutdown+0x19c>)
 800cf86:	4861      	ldr	r0, [pc, #388]	; (800d10c <tcp_close_shutdown+0x1a0>)
 800cf88:	f00b f998 	bl	80182bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cf8c:	78fb      	ldrb	r3, [r7, #3]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d066      	beq.n	800d060 <tcp_close_shutdown+0xf4>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	7d1b      	ldrb	r3, [r3, #20]
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	d003      	beq.n	800cfa2 <tcp_close_shutdown+0x36>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7d1b      	ldrb	r3, [r3, #20]
 800cf9e:	2b07      	cmp	r3, #7
 800cfa0:	d15e      	bne.n	800d060 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d104      	bne.n	800cfb4 <tcp_close_shutdown+0x48>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cfb2:	d055      	beq.n	800d060 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	8b5b      	ldrh	r3, [r3, #26]
 800cfb8:	f003 0310 	and.w	r3, r3, #16
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <tcp_close_shutdown+0x62>
 800cfc0:	4b50      	ldr	r3, [pc, #320]	; (800d104 <tcp_close_shutdown+0x198>)
 800cfc2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cfc6:	4952      	ldr	r1, [pc, #328]	; (800d110 <tcp_close_shutdown+0x1a4>)
 800cfc8:	4850      	ldr	r0, [pc, #320]	; (800d10c <tcp_close_shutdown+0x1a0>)
 800cfca:	f00b f977 	bl	80182bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cfd6:	687d      	ldr	r5, [r7, #4]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	3304      	adds	r3, #4
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	8ad2      	ldrh	r2, [r2, #22]
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	8b09      	ldrh	r1, [r1, #24]
 800cfe4:	9102      	str	r1, [sp, #8]
 800cfe6:	9201      	str	r2, [sp, #4]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462b      	mov	r3, r5
 800cfec:	4622      	mov	r2, r4
 800cfee:	4601      	mov	r1, r0
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f005 fde9 	bl	8012bc8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f001 fbba 	bl	800e770 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cffc:	4b45      	ldr	r3, [pc, #276]	; (800d114 <tcp_close_shutdown+0x1a8>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	429a      	cmp	r2, r3
 800d004:	d105      	bne.n	800d012 <tcp_close_shutdown+0xa6>
 800d006:	4b43      	ldr	r3, [pc, #268]	; (800d114 <tcp_close_shutdown+0x1a8>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	4a41      	ldr	r2, [pc, #260]	; (800d114 <tcp_close_shutdown+0x1a8>)
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	e013      	b.n	800d03a <tcp_close_shutdown+0xce>
 800d012:	4b40      	ldr	r3, [pc, #256]	; (800d114 <tcp_close_shutdown+0x1a8>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	e00c      	b.n	800d034 <tcp_close_shutdown+0xc8>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d104      	bne.n	800d02e <tcp_close_shutdown+0xc2>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68da      	ldr	r2, [r3, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	60da      	str	r2, [r3, #12]
 800d02c:	e005      	b.n	800d03a <tcp_close_shutdown+0xce>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1ef      	bne.n	800d01a <tcp_close_shutdown+0xae>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	60da      	str	r2, [r3, #12]
 800d040:	4b35      	ldr	r3, [pc, #212]	; (800d118 <tcp_close_shutdown+0x1ac>)
 800d042:	2201      	movs	r2, #1
 800d044:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d046:	4b35      	ldr	r3, [pc, #212]	; (800d11c <tcp_close_shutdown+0x1b0>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d102      	bne.n	800d056 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d050:	f004 f84c 	bl	80110ec <tcp_trigger_input_pcb_close>
 800d054:	e002      	b.n	800d05c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff fed6 	bl	800ce08 <tcp_free>
      }
      return ERR_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	e04d      	b.n	800d0fc <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7d1b      	ldrb	r3, [r3, #20]
 800d064:	2b01      	cmp	r3, #1
 800d066:	d02d      	beq.n	800d0c4 <tcp_close_shutdown+0x158>
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d036      	beq.n	800d0da <tcp_close_shutdown+0x16e>
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d13f      	bne.n	800d0f0 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	8adb      	ldrh	r3, [r3, #22]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d021      	beq.n	800d0bc <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d078:	4b29      	ldr	r3, [pc, #164]	; (800d120 <tcp_close_shutdown+0x1b4>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d105      	bne.n	800d08e <tcp_close_shutdown+0x122>
 800d082:	4b27      	ldr	r3, [pc, #156]	; (800d120 <tcp_close_shutdown+0x1b4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	4a25      	ldr	r2, [pc, #148]	; (800d120 <tcp_close_shutdown+0x1b4>)
 800d08a:	6013      	str	r3, [r2, #0]
 800d08c:	e013      	b.n	800d0b6 <tcp_close_shutdown+0x14a>
 800d08e:	4b24      	ldr	r3, [pc, #144]	; (800d120 <tcp_close_shutdown+0x1b4>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	60bb      	str	r3, [r7, #8]
 800d094:	e00c      	b.n	800d0b0 <tcp_close_shutdown+0x144>
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d104      	bne.n	800d0aa <tcp_close_shutdown+0x13e>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68da      	ldr	r2, [r3, #12]
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	60da      	str	r2, [r3, #12]
 800d0a8:	e005      	b.n	800d0b6 <tcp_close_shutdown+0x14a>
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	60bb      	str	r3, [r7, #8]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1ef      	bne.n	800d096 <tcp_close_shutdown+0x12a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff fea3 	bl	800ce08 <tcp_free>
      break;
 800d0c2:	e01a      	b.n	800d0fa <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7ff ff17 	bl	800cef8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	4815      	ldr	r0, [pc, #84]	; (800d124 <tcp_close_shutdown+0x1b8>)
 800d0ce:	f001 fb9f 	bl	800e810 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff feb4 	bl	800ce40 <tcp_free_listen>
      break;
 800d0d8:	e00f      	b.n	800d0fa <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d0da:	6879      	ldr	r1, [r7, #4]
 800d0dc:	480d      	ldr	r0, [pc, #52]	; (800d114 <tcp_close_shutdown+0x1a8>)
 800d0de:	f001 fb97 	bl	800e810 <tcp_pcb_remove>
 800d0e2:	4b0d      	ldr	r3, [pc, #52]	; (800d118 <tcp_close_shutdown+0x1ac>)
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff fe8d 	bl	800ce08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d0ee:	e004      	b.n	800d0fa <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f819 	bl	800d128 <tcp_close_shutdown_fin>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	e000      	b.n	800d0fc <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bdb0      	pop	{r4, r5, r7, pc}
 800d104:	0801aba4 	.word	0x0801aba4
 800d108:	0801ac78 	.word	0x0801ac78
 800d10c:	0801abe8 	.word	0x0801abe8
 800d110:	0801ac98 	.word	0x0801ac98
 800d114:	2000fad8 	.word	0x2000fad8
 800d118:	2000fad4 	.word	0x2000fad4
 800d11c:	2000faec 	.word	0x2000faec
 800d120:	2000fae4 	.word	0x2000fae4
 800d124:	2000fae0 	.word	0x2000fae0

0800d128 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d106      	bne.n	800d144 <tcp_close_shutdown_fin+0x1c>
 800d136:	4b2c      	ldr	r3, [pc, #176]	; (800d1e8 <tcp_close_shutdown_fin+0xc0>)
 800d138:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d13c:	492b      	ldr	r1, [pc, #172]	; (800d1ec <tcp_close_shutdown_fin+0xc4>)
 800d13e:	482c      	ldr	r0, [pc, #176]	; (800d1f0 <tcp_close_shutdown_fin+0xc8>)
 800d140:	f00b f8bc 	bl	80182bc <iprintf>

  switch (pcb->state) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7d1b      	ldrb	r3, [r3, #20]
 800d148:	2b04      	cmp	r3, #4
 800d14a:	d010      	beq.n	800d16e <tcp_close_shutdown_fin+0x46>
 800d14c:	2b07      	cmp	r3, #7
 800d14e:	d01b      	beq.n	800d188 <tcp_close_shutdown_fin+0x60>
 800d150:	2b03      	cmp	r3, #3
 800d152:	d126      	bne.n	800d1a2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f004 fe35 	bl	8011dc4 <tcp_send_fin>
 800d15a:	4603      	mov	r3, r0
 800d15c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d15e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d11f      	bne.n	800d1a6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2205      	movs	r2, #5
 800d16a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d16c:	e01b      	b.n	800d1a6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f004 fe28 	bl	8011dc4 <tcp_send_fin>
 800d174:	4603      	mov	r3, r0
 800d176:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d114      	bne.n	800d1aa <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2205      	movs	r2, #5
 800d184:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d186:	e010      	b.n	800d1aa <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f004 fe1b 	bl	8011dc4 <tcp_send_fin>
 800d18e:	4603      	mov	r3, r0
 800d190:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2209      	movs	r2, #9
 800d19e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d1a0:	e005      	b.n	800d1ae <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e01c      	b.n	800d1e0 <tcp_close_shutdown_fin+0xb8>
      break;
 800d1a6:	bf00      	nop
 800d1a8:	e002      	b.n	800d1b0 <tcp_close_shutdown_fin+0x88>
      break;
 800d1aa:	bf00      	nop
 800d1ac:	e000      	b.n	800d1b0 <tcp_close_shutdown_fin+0x88>
      break;
 800d1ae:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d103      	bne.n	800d1c0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f004 ff41 	bl	8012040 <tcp_output>
 800d1be:	e00d      	b.n	800d1dc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d1c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c8:	d108      	bne.n	800d1dc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	8b5b      	ldrh	r3, [r3, #26]
 800d1ce:	f043 0308 	orr.w	r3, r3, #8
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	e001      	b.n	800d1e0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	0801aba4 	.word	0x0801aba4
 800d1ec:	0801ac54 	.word	0x0801ac54
 800d1f0:	0801abe8 	.word	0x0801abe8

0800d1f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d109      	bne.n	800d216 <tcp_close+0x22>
 800d202:	4b0f      	ldr	r3, [pc, #60]	; (800d240 <tcp_close+0x4c>)
 800d204:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d208:	490e      	ldr	r1, [pc, #56]	; (800d244 <tcp_close+0x50>)
 800d20a:	480f      	ldr	r0, [pc, #60]	; (800d248 <tcp_close+0x54>)
 800d20c:	f00b f856 	bl	80182bc <iprintf>
 800d210:	f06f 030f 	mvn.w	r3, #15
 800d214:	e00f      	b.n	800d236 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7d1b      	ldrb	r3, [r3, #20]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d006      	beq.n	800d22c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	8b5b      	ldrh	r3, [r3, #26]
 800d222:	f043 0310 	orr.w	r3, r3, #16
 800d226:	b29a      	uxth	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d22c:	2101      	movs	r1, #1
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7ff fe9c 	bl	800cf6c <tcp_close_shutdown>
 800d234:	4603      	mov	r3, r0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	0801aba4 	.word	0x0801aba4
 800d244:	0801acb4 	.word	0x0801acb4
 800d248:	0801abe8 	.word	0x0801abe8

0800d24c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d109      	bne.n	800d272 <tcp_shutdown+0x26>
 800d25e:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <tcp_shutdown+0xa8>)
 800d260:	f240 2207 	movw	r2, #519	; 0x207
 800d264:	4924      	ldr	r1, [pc, #144]	; (800d2f8 <tcp_shutdown+0xac>)
 800d266:	4825      	ldr	r0, [pc, #148]	; (800d2fc <tcp_shutdown+0xb0>)
 800d268:	f00b f828 	bl	80182bc <iprintf>
 800d26c:	f06f 030f 	mvn.w	r3, #15
 800d270:	e03c      	b.n	800d2ec <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	7d1b      	ldrb	r3, [r3, #20]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d102      	bne.n	800d280 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d27a:	f06f 030a 	mvn.w	r3, #10
 800d27e:	e035      	b.n	800d2ec <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d01b      	beq.n	800d2be <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	8b5b      	ldrh	r3, [r3, #26]
 800d28a:	f043 0310 	orr.w	r3, r3, #16
 800d28e:	b29a      	uxth	r2, r3
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d005      	beq.n	800d2a6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d29a:	2101      	movs	r1, #1
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f7ff fe65 	bl	800cf6c <tcp_close_shutdown>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	e022      	b.n	800d2ec <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d007      	beq.n	800d2be <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff faec 	bl	800c890 <pbuf_free>
      pcb->refused_data = NULL;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d012      	beq.n	800d2ea <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	7d1b      	ldrb	r3, [r3, #20]
 800d2c8:	2b03      	cmp	r3, #3
 800d2ca:	db0b      	blt.n	800d2e4 <tcp_shutdown+0x98>
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	dd01      	ble.n	800d2d4 <tcp_shutdown+0x88>
 800d2d0:	2b07      	cmp	r3, #7
 800d2d2:	d107      	bne.n	800d2e4 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	4619      	mov	r1, r3
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff fe46 	bl	800cf6c <tcp_close_shutdown>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	e003      	b.n	800d2ec <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d2e4:	f06f 030a 	mvn.w	r3, #10
 800d2e8:	e000      	b.n	800d2ec <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	0801aba4 	.word	0x0801aba4
 800d2f8:	0801accc 	.word	0x0801accc
 800d2fc:	0801abe8 	.word	0x0801abe8

0800d300 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08e      	sub	sp, #56	; 0x38
 800d304:	af04      	add	r7, sp, #16
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d107      	bne.n	800d320 <tcp_abandon+0x20>
 800d310:	4b52      	ldr	r3, [pc, #328]	; (800d45c <tcp_abandon+0x15c>)
 800d312:	f240 223d 	movw	r2, #573	; 0x23d
 800d316:	4952      	ldr	r1, [pc, #328]	; (800d460 <tcp_abandon+0x160>)
 800d318:	4852      	ldr	r0, [pc, #328]	; (800d464 <tcp_abandon+0x164>)
 800d31a:	f00a ffcf 	bl	80182bc <iprintf>
 800d31e:	e099      	b.n	800d454 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	7d1b      	ldrb	r3, [r3, #20]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d106      	bne.n	800d336 <tcp_abandon+0x36>
 800d328:	4b4c      	ldr	r3, [pc, #304]	; (800d45c <tcp_abandon+0x15c>)
 800d32a:	f240 2241 	movw	r2, #577	; 0x241
 800d32e:	494e      	ldr	r1, [pc, #312]	; (800d468 <tcp_abandon+0x168>)
 800d330:	484c      	ldr	r0, [pc, #304]	; (800d464 <tcp_abandon+0x164>)
 800d332:	f00a ffc3 	bl	80182bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7d1b      	ldrb	r3, [r3, #20]
 800d33a:	2b0a      	cmp	r3, #10
 800d33c:	d107      	bne.n	800d34e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	484a      	ldr	r0, [pc, #296]	; (800d46c <tcp_abandon+0x16c>)
 800d342:	f001 fa65 	bl	800e810 <tcp_pcb_remove>
    tcp_free(pcb);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f7ff fd5e 	bl	800ce08 <tcp_free>
 800d34c:	e082      	b.n	800d454 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d35a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d360:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d368:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	691b      	ldr	r3, [r3, #16]
 800d36e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7d1b      	ldrb	r3, [r3, #20]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d126      	bne.n	800d3c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	8adb      	ldrh	r3, [r3, #22]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d02e      	beq.n	800d3de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d380:	4b3b      	ldr	r3, [pc, #236]	; (800d470 <tcp_abandon+0x170>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	429a      	cmp	r2, r3
 800d388:	d105      	bne.n	800d396 <tcp_abandon+0x96>
 800d38a:	4b39      	ldr	r3, [pc, #228]	; (800d470 <tcp_abandon+0x170>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	4a37      	ldr	r2, [pc, #220]	; (800d470 <tcp_abandon+0x170>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	e013      	b.n	800d3be <tcp_abandon+0xbe>
 800d396:	4b36      	ldr	r3, [pc, #216]	; (800d470 <tcp_abandon+0x170>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	61fb      	str	r3, [r7, #28]
 800d39c:	e00c      	b.n	800d3b8 <tcp_abandon+0xb8>
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d104      	bne.n	800d3b2 <tcp_abandon+0xb2>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68da      	ldr	r2, [r3, #12]
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	60da      	str	r2, [r3, #12]
 800d3b0:	e005      	b.n	800d3be <tcp_abandon+0xbe>
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	61fb      	str	r3, [r7, #28]
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1ef      	bne.n	800d39e <tcp_abandon+0x9e>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	60da      	str	r2, [r3, #12]
 800d3c4:	e00b      	b.n	800d3de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	8adb      	ldrh	r3, [r3, #22]
 800d3ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d3d0:	6879      	ldr	r1, [r7, #4]
 800d3d2:	4828      	ldr	r0, [pc, #160]	; (800d474 <tcp_abandon+0x174>)
 800d3d4:	f001 fa1c 	bl	800e810 <tcp_pcb_remove>
 800d3d8:	4b27      	ldr	r3, [pc, #156]	; (800d478 <tcp_abandon+0x178>)
 800d3da:	2201      	movs	r2, #1
 800d3dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fed4 	bl	800e198 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 fecb 	bl	800e198 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d406:	2b00      	cmp	r3, #0
 800d408:	d004      	beq.n	800d414 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fec2 	bl	800e198 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00e      	beq.n	800d438 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3304      	adds	r3, #4
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	8b12      	ldrh	r2, [r2, #24]
 800d424:	9202      	str	r2, [sp, #8]
 800d426:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d428:	9201      	str	r2, [sp, #4]
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	460b      	mov	r3, r1
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	69b9      	ldr	r1, [r7, #24]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f005 fbc8 	bl	8012bc8 <tcp_rst>
    }
    last_state = pcb->state;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
 800d43c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fce2 	bl	800ce08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d004      	beq.n	800d454 <tcp_abandon+0x154>
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	f06f 010c 	mvn.w	r1, #12
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	4798      	blx	r3
  }
}
 800d454:	3728      	adds	r7, #40	; 0x28
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	0801aba4 	.word	0x0801aba4
 800d460:	0801ace8 	.word	0x0801ace8
 800d464:	0801abe8 	.word	0x0801abe8
 800d468:	0801ad04 	.word	0x0801ad04
 800d46c:	2000fae8 	.word	0x2000fae8
 800d470:	2000fae4 	.word	0x2000fae4
 800d474:	2000fad8 	.word	0x2000fad8
 800d478:	2000fad4 	.word	0x2000fad4

0800d47c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d484:	2101      	movs	r1, #1
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff ff3a 	bl	800d300 <tcp_abandon>
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d4a2:	2304      	movs	r3, #4
 800d4a4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d4ac:	4b3e      	ldr	r3, [pc, #248]	; (800d5a8 <tcp_bind+0x114>)
 800d4ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d109      	bne.n	800d4ca <tcp_bind+0x36>
 800d4b6:	4b3d      	ldr	r3, [pc, #244]	; (800d5ac <tcp_bind+0x118>)
 800d4b8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d4bc:	493c      	ldr	r1, [pc, #240]	; (800d5b0 <tcp_bind+0x11c>)
 800d4be:	483d      	ldr	r0, [pc, #244]	; (800d5b4 <tcp_bind+0x120>)
 800d4c0:	f00a fefc 	bl	80182bc <iprintf>
 800d4c4:	f06f 030f 	mvn.w	r3, #15
 800d4c8:	e06a      	b.n	800d5a0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	7d1b      	ldrb	r3, [r3, #20]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d009      	beq.n	800d4e6 <tcp_bind+0x52>
 800d4d2:	4b36      	ldr	r3, [pc, #216]	; (800d5ac <tcp_bind+0x118>)
 800d4d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d4d8:	4937      	ldr	r1, [pc, #220]	; (800d5b8 <tcp_bind+0x124>)
 800d4da:	4836      	ldr	r0, [pc, #216]	; (800d5b4 <tcp_bind+0x120>)
 800d4dc:	f00a feee 	bl	80182bc <iprintf>
 800d4e0:	f06f 0305 	mvn.w	r3, #5
 800d4e4:	e05c      	b.n	800d5a0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d4ec:	f000 f9f0 	bl	800d8d0 <tcp_new_port>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d4f4:	88fb      	ldrh	r3, [r7, #6]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d135      	bne.n	800d566 <tcp_bind+0xd2>
      return ERR_BUF;
 800d4fa:	f06f 0301 	mvn.w	r3, #1
 800d4fe:	e04f      	b.n	800d5a0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d500:	2300      	movs	r3, #0
 800d502:	61fb      	str	r3, [r7, #28]
 800d504:	e02b      	b.n	800d55e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d506:	4a2d      	ldr	r2, [pc, #180]	; (800d5bc <tcp_bind+0x128>)
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	61bb      	str	r3, [r7, #24]
 800d512:	e01e      	b.n	800d552 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	8adb      	ldrh	r3, [r3, #22]
 800d518:	88fa      	ldrh	r2, [r7, #6]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d116      	bne.n	800d54c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d51e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d520:	2b00      	cmp	r3, #0
 800d522:	d010      	beq.n	800d546 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00c      	beq.n	800d546 <tcp_bind+0xb2>
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d009      	beq.n	800d546 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d005      	beq.n	800d546 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d542:	429a      	cmp	r2, r3
 800d544:	d102      	bne.n	800d54c <tcp_bind+0xb8>
              return ERR_USE;
 800d546:	f06f 0307 	mvn.w	r3, #7
 800d54a:	e029      	b.n	800d5a0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	61bb      	str	r3, [r7, #24]
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1dd      	bne.n	800d514 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	3301      	adds	r3, #1
 800d55c:	61fb      	str	r3, [r7, #28]
 800d55e:	69fa      	ldr	r2, [r7, #28]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	429a      	cmp	r2, r3
 800d564:	dbcf      	blt.n	800d506 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00c      	beq.n	800d586 <tcp_bind+0xf2>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d008      	beq.n	800d586 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <tcp_bind+0xec>
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	e000      	b.n	800d582 <tcp_bind+0xee>
 800d580:	2300      	movs	r3, #0
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	88fa      	ldrh	r2, [r7, #6]
 800d58a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d58c:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <tcp_bind+0x12c>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	60da      	str	r2, [r3, #12]
 800d594:	4a0a      	ldr	r2, [pc, #40]	; (800d5c0 <tcp_bind+0x12c>)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	f005 fcd7 	bl	8012f4c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	08028368 	.word	0x08028368
 800d5ac:	0801aba4 	.word	0x0801aba4
 800d5b0:	0801ad38 	.word	0x0801ad38
 800d5b4:	0801abe8 	.word	0x0801abe8
 800d5b8:	0801ad50 	.word	0x0801ad50
 800d5bc:	08028330 	.word	0x08028330
 800d5c0:	2000fae4 	.word	0x2000fae4

0800d5c4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d106      	bne.n	800d5e6 <tcp_accept_null+0x22>
 800d5d8:	4b07      	ldr	r3, [pc, #28]	; (800d5f8 <tcp_accept_null+0x34>)
 800d5da:	f240 320f 	movw	r2, #783	; 0x30f
 800d5de:	4907      	ldr	r1, [pc, #28]	; (800d5fc <tcp_accept_null+0x38>)
 800d5e0:	4807      	ldr	r0, [pc, #28]	; (800d600 <tcp_accept_null+0x3c>)
 800d5e2:	f00a fe6b 	bl	80182bc <iprintf>

  tcp_abort(pcb);
 800d5e6:	68b8      	ldr	r0, [r7, #8]
 800d5e8:	f7ff ff48 	bl	800d47c <tcp_abort>

  return ERR_ABRT;
 800d5ec:	f06f 030c 	mvn.w	r3, #12
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	0801aba4 	.word	0x0801aba4
 800d5fc:	0801ad78 	.word	0x0801ad78
 800d600:	0801abe8 	.word	0x0801abe8

0800d604 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	460b      	mov	r3, r1
 800d60e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d610:	78fb      	ldrb	r3, [r7, #3]
 800d612:	2200      	movs	r2, #0
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f806 	bl	800d628 <tcp_listen_with_backlog_and_err>
 800d61c:	4603      	mov	r3, r0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
	...

0800d628 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b088      	sub	sp, #32
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	460b      	mov	r3, r1
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d109      	bne.n	800d654 <tcp_listen_with_backlog_and_err+0x2c>
 800d640:	4b47      	ldr	r3, [pc, #284]	; (800d760 <tcp_listen_with_backlog_and_err+0x138>)
 800d642:	f240 3259 	movw	r2, #857	; 0x359
 800d646:	4947      	ldr	r1, [pc, #284]	; (800d764 <tcp_listen_with_backlog_and_err+0x13c>)
 800d648:	4847      	ldr	r0, [pc, #284]	; (800d768 <tcp_listen_with_backlog_and_err+0x140>)
 800d64a:	f00a fe37 	bl	80182bc <iprintf>
 800d64e:	23f0      	movs	r3, #240	; 0xf0
 800d650:	76fb      	strb	r3, [r7, #27]
 800d652:	e079      	b.n	800d748 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	7d1b      	ldrb	r3, [r3, #20]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d009      	beq.n	800d670 <tcp_listen_with_backlog_and_err+0x48>
 800d65c:	4b40      	ldr	r3, [pc, #256]	; (800d760 <tcp_listen_with_backlog_and_err+0x138>)
 800d65e:	f240 325a 	movw	r2, #858	; 0x35a
 800d662:	4942      	ldr	r1, [pc, #264]	; (800d76c <tcp_listen_with_backlog_and_err+0x144>)
 800d664:	4840      	ldr	r0, [pc, #256]	; (800d768 <tcp_listen_with_backlog_and_err+0x140>)
 800d666:	f00a fe29 	bl	80182bc <iprintf>
 800d66a:	23f1      	movs	r3, #241	; 0xf1
 800d66c:	76fb      	strb	r3, [r7, #27]
 800d66e:	e06b      	b.n	800d748 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	7d1b      	ldrb	r3, [r3, #20]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d104      	bne.n	800d682 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d67c:	23f7      	movs	r3, #247	; 0xf7
 800d67e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d680:	e062      	b.n	800d748 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d682:	2002      	movs	r0, #2
 800d684:	f7fe fa84 	bl	800bb90 <memp_malloc>
 800d688:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d102      	bne.n	800d696 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d690:	23ff      	movs	r3, #255	; 0xff
 800d692:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d694:	e058      	b.n	800d748 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	691a      	ldr	r2, [r3, #16]
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	8ada      	ldrh	r2, [r3, #22]
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	7d5a      	ldrb	r2, [r3, #21]
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	7a5a      	ldrb	r2, [r3, #9]
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	7ada      	ldrb	r2, [r3, #11]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	7a9a      	ldrb	r2, [r3, #10]
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	8adb      	ldrh	r3, [r3, #22]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d021      	beq.n	800d726 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6e2:	4b23      	ldr	r3, [pc, #140]	; (800d770 <tcp_listen_with_backlog_and_err+0x148>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d105      	bne.n	800d6f8 <tcp_listen_with_backlog_and_err+0xd0>
 800d6ec:	4b20      	ldr	r3, [pc, #128]	; (800d770 <tcp_listen_with_backlog_and_err+0x148>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	4a1f      	ldr	r2, [pc, #124]	; (800d770 <tcp_listen_with_backlog_and_err+0x148>)
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	e013      	b.n	800d720 <tcp_listen_with_backlog_and_err+0xf8>
 800d6f8:	4b1d      	ldr	r3, [pc, #116]	; (800d770 <tcp_listen_with_backlog_and_err+0x148>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	617b      	str	r3, [r7, #20]
 800d6fe:	e00c      	b.n	800d71a <tcp_listen_with_backlog_and_err+0xf2>
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	429a      	cmp	r2, r3
 800d708:	d104      	bne.n	800d714 <tcp_listen_with_backlog_and_err+0xec>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68da      	ldr	r2, [r3, #12]
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	60da      	str	r2, [r3, #12]
 800d712:	e005      	b.n	800d720 <tcp_listen_with_backlog_and_err+0xf8>
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	617b      	str	r3, [r7, #20]
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1ef      	bne.n	800d700 <tcp_listen_with_backlog_and_err+0xd8>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7ff fb6e 	bl	800ce08 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	4a11      	ldr	r2, [pc, #68]	; (800d774 <tcp_listen_with_backlog_and_err+0x14c>)
 800d730:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d732:	4b11      	ldr	r3, [pc, #68]	; (800d778 <tcp_listen_with_backlog_and_err+0x150>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	60da      	str	r2, [r3, #12]
 800d73a:	4a0f      	ldr	r2, [pc, #60]	; (800d778 <tcp_listen_with_backlog_and_err+0x150>)
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	f005 fc04 	bl	8012f4c <tcp_timer_needed>
  res = ERR_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	7efa      	ldrb	r2, [r7, #27]
 800d752:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d754:	69fb      	ldr	r3, [r7, #28]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3720      	adds	r7, #32
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	0801aba4 	.word	0x0801aba4
 800d764:	0801ad98 	.word	0x0801ad98
 800d768:	0801abe8 	.word	0x0801abe8
 800d76c:	0801adc8 	.word	0x0801adc8
 800d770:	2000fae4 	.word	0x2000fae4
 800d774:	0800d5c5 	.word	0x0800d5c5
 800d778:	2000fae0 	.word	0x2000fae0

0800d77c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d106      	bne.n	800d798 <tcp_update_rcv_ann_wnd+0x1c>
 800d78a:	4b25      	ldr	r3, [pc, #148]	; (800d820 <tcp_update_rcv_ann_wnd+0xa4>)
 800d78c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d790:	4924      	ldr	r1, [pc, #144]	; (800d824 <tcp_update_rcv_ann_wnd+0xa8>)
 800d792:	4825      	ldr	r0, [pc, #148]	; (800d828 <tcp_update_rcv_ann_wnd+0xac>)
 800d794:	f00a fd92 	bl	80182bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d7a0:	4413      	add	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d7ac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d7b0:	bf28      	it	cs
 800d7b2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d7b6:	b292      	uxth	r2, r2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	db08      	blt.n	800d7d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	e020      	b.n	800d816 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	dd03      	ble.n	800d7ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7e8:	e014      	b.n	800d814 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7fc:	d306      	bcc.n	800d80c <tcp_update_rcv_ann_wnd+0x90>
 800d7fe:	4b08      	ldr	r3, [pc, #32]	; (800d820 <tcp_update_rcv_ann_wnd+0xa4>)
 800d800:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d804:	4909      	ldr	r1, [pc, #36]	; (800d82c <tcp_update_rcv_ann_wnd+0xb0>)
 800d806:	4808      	ldr	r0, [pc, #32]	; (800d828 <tcp_update_rcv_ann_wnd+0xac>)
 800d808:	f00a fd58 	bl	80182bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d814:	2300      	movs	r3, #0
  }
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	0801aba4 	.word	0x0801aba4
 800d824:	0801ae00 	.word	0x0801ae00
 800d828:	0801abe8 	.word	0x0801abe8
 800d82c:	0801ae24 	.word	0x0801ae24

0800d830 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d107      	bne.n	800d852 <tcp_recved+0x22>
 800d842:	4b1f      	ldr	r3, [pc, #124]	; (800d8c0 <tcp_recved+0x90>)
 800d844:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d848:	491e      	ldr	r1, [pc, #120]	; (800d8c4 <tcp_recved+0x94>)
 800d84a:	481f      	ldr	r0, [pc, #124]	; (800d8c8 <tcp_recved+0x98>)
 800d84c:	f00a fd36 	bl	80182bc <iprintf>
 800d850:	e032      	b.n	800d8b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	7d1b      	ldrb	r3, [r3, #20]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d106      	bne.n	800d868 <tcp_recved+0x38>
 800d85a:	4b19      	ldr	r3, [pc, #100]	; (800d8c0 <tcp_recved+0x90>)
 800d85c:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d860:	491a      	ldr	r1, [pc, #104]	; (800d8cc <tcp_recved+0x9c>)
 800d862:	4819      	ldr	r0, [pc, #100]	; (800d8c8 <tcp_recved+0x98>)
 800d864:	f00a fd2a 	bl	80182bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d86c:	887b      	ldrh	r3, [r7, #2]
 800d86e:	4413      	add	r3, r2
 800d870:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d872:	89fb      	ldrh	r3, [r7, #14]
 800d874:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d878:	d804      	bhi.n	800d884 <tcp_recved+0x54>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d87e:	89fa      	ldrh	r2, [r7, #14]
 800d880:	429a      	cmp	r2, r3
 800d882:	d204      	bcs.n	800d88e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d88a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d88c:	e002      	b.n	800d894 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	89fa      	ldrh	r2, [r7, #14]
 800d892:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff ff71 	bl	800d77c <tcp_update_rcv_ann_wnd>
 800d89a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d8a2:	d309      	bcc.n	800d8b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	8b5b      	ldrh	r3, [r3, #26]
 800d8a8:	f043 0302 	orr.w	r3, r3, #2
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f004 fbc4 	bl	8012040 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	0801aba4 	.word	0x0801aba4
 800d8c4:	0801ae40 	.word	0x0801ae40
 800d8c8:	0801abe8 	.word	0x0801abe8
 800d8cc:	0801ae58 	.word	0x0801ae58

0800d8d0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d8da:	4b1e      	ldr	r3, [pc, #120]	; (800d954 <tcp_new_port+0x84>)
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	4b1c      	ldr	r3, [pc, #112]	; (800d954 <tcp_new_port+0x84>)
 800d8e4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d8e6:	4b1b      	ldr	r3, [pc, #108]	; (800d954 <tcp_new_port+0x84>)
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d103      	bne.n	800d8fa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d8f2:	4b18      	ldr	r3, [pc, #96]	; (800d954 <tcp_new_port+0x84>)
 800d8f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d8f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	71fb      	strb	r3, [r7, #7]
 800d8fe:	e01e      	b.n	800d93e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	4a15      	ldr	r2, [pc, #84]	; (800d958 <tcp_new_port+0x88>)
 800d904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	603b      	str	r3, [r7, #0]
 800d90c:	e011      	b.n	800d932 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	8ada      	ldrh	r2, [r3, #22]
 800d912:	4b10      	ldr	r3, [pc, #64]	; (800d954 <tcp_new_port+0x84>)
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d108      	bne.n	800d92c <tcp_new_port+0x5c>
        n++;
 800d91a:	88bb      	ldrh	r3, [r7, #4]
 800d91c:	3301      	adds	r3, #1
 800d91e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d920:	88bb      	ldrh	r3, [r7, #4]
 800d922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d926:	d3d8      	bcc.n	800d8da <tcp_new_port+0xa>
          return 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	e00d      	b.n	800d948 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	603b      	str	r3, [r7, #0]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1ea      	bne.n	800d90e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d938:	79fb      	ldrb	r3, [r7, #7]
 800d93a:	3301      	adds	r3, #1
 800d93c:	71fb      	strb	r3, [r7, #7]
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	2b03      	cmp	r3, #3
 800d942:	d9dd      	bls.n	800d900 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d944:	4b03      	ldr	r3, [pc, #12]	; (800d954 <tcp_new_port+0x84>)
 800d946:	881b      	ldrh	r3, [r3, #0]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	20000010 	.word	0x20000010
 800d958:	08028330 	.word	0x08028330

0800d95c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d95c:	b5b0      	push	{r4, r5, r7, lr}
 800d95e:	b090      	sub	sp, #64	; 0x40
 800d960:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d968:	4b94      	ldr	r3, [pc, #592]	; (800dbbc <tcp_slowtmr+0x260>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3301      	adds	r3, #1
 800d96e:	4a93      	ldr	r2, [pc, #588]	; (800dbbc <tcp_slowtmr+0x260>)
 800d970:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d972:	4b93      	ldr	r3, [pc, #588]	; (800dbc0 <tcp_slowtmr+0x264>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	4b91      	ldr	r3, [pc, #580]	; (800dbc0 <tcp_slowtmr+0x264>)
 800d97c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d982:	4b90      	ldr	r3, [pc, #576]	; (800dbc4 <tcp_slowtmr+0x268>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d988:	e29f      	b.n	800deca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	7d1b      	ldrb	r3, [r3, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <tcp_slowtmr+0x44>
 800d992:	4b8d      	ldr	r3, [pc, #564]	; (800dbc8 <tcp_slowtmr+0x26c>)
 800d994:	f240 42be 	movw	r2, #1214	; 0x4be
 800d998:	498c      	ldr	r1, [pc, #560]	; (800dbcc <tcp_slowtmr+0x270>)
 800d99a:	488d      	ldr	r0, [pc, #564]	; (800dbd0 <tcp_slowtmr+0x274>)
 800d99c:	f00a fc8e 	bl	80182bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	7d1b      	ldrb	r3, [r3, #20]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d106      	bne.n	800d9b6 <tcp_slowtmr+0x5a>
 800d9a8:	4b87      	ldr	r3, [pc, #540]	; (800dbc8 <tcp_slowtmr+0x26c>)
 800d9aa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d9ae:	4989      	ldr	r1, [pc, #548]	; (800dbd4 <tcp_slowtmr+0x278>)
 800d9b0:	4887      	ldr	r0, [pc, #540]	; (800dbd0 <tcp_slowtmr+0x274>)
 800d9b2:	f00a fc83 	bl	80182bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ba:	2b0a      	cmp	r3, #10
 800d9bc:	d106      	bne.n	800d9cc <tcp_slowtmr+0x70>
 800d9be:	4b82      	ldr	r3, [pc, #520]	; (800dbc8 <tcp_slowtmr+0x26c>)
 800d9c0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d9c4:	4984      	ldr	r1, [pc, #528]	; (800dbd8 <tcp_slowtmr+0x27c>)
 800d9c6:	4882      	ldr	r0, [pc, #520]	; (800dbd0 <tcp_slowtmr+0x274>)
 800d9c8:	f00a fc78 	bl	80182bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	7f9a      	ldrb	r2, [r3, #30]
 800d9d0:	4b7b      	ldr	r3, [pc, #492]	; (800dbc0 <tcp_slowtmr+0x264>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d105      	bne.n	800d9e4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d9e2:	e272      	b.n	800deca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d9e4:	4b76      	ldr	r3, [pc, #472]	; (800dbc0 <tcp_slowtmr+0x264>)
 800d9e6:	781a      	ldrb	r2, [r3, #0]
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fa:	7d1b      	ldrb	r3, [r3, #20]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d10a      	bne.n	800da16 <tcp_slowtmr+0xba>
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da06:	2b05      	cmp	r3, #5
 800da08:	d905      	bls.n	800da16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800da0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da0e:	3301      	adds	r3, #1
 800da10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da14:	e11e      	b.n	800dc54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800da16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da1c:	2b0b      	cmp	r3, #11
 800da1e:	d905      	bls.n	800da2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800da20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da24:	3301      	adds	r3, #1
 800da26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da2a:	e113      	b.n	800dc54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800da2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800da32:	2b00      	cmp	r3, #0
 800da34:	d075      	beq.n	800db22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d006      	beq.n	800da4c <tcp_slowtmr+0xf0>
 800da3e:	4b62      	ldr	r3, [pc, #392]	; (800dbc8 <tcp_slowtmr+0x26c>)
 800da40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800da44:	4965      	ldr	r1, [pc, #404]	; (800dbdc <tcp_slowtmr+0x280>)
 800da46:	4862      	ldr	r0, [pc, #392]	; (800dbd0 <tcp_slowtmr+0x274>)
 800da48:	f00a fc38 	bl	80182bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d106      	bne.n	800da62 <tcp_slowtmr+0x106>
 800da54:	4b5c      	ldr	r3, [pc, #368]	; (800dbc8 <tcp_slowtmr+0x26c>)
 800da56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800da5a:	4961      	ldr	r1, [pc, #388]	; (800dbe0 <tcp_slowtmr+0x284>)
 800da5c:	485c      	ldr	r0, [pc, #368]	; (800dbd0 <tcp_slowtmr+0x274>)
 800da5e:	f00a fc2d 	bl	80182bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800da68:	2b0b      	cmp	r3, #11
 800da6a:	d905      	bls.n	800da78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da70:	3301      	adds	r3, #1
 800da72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da76:	e0ed      	b.n	800dc54 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800da7e:	3b01      	subs	r3, #1
 800da80:	4a58      	ldr	r2, [pc, #352]	; (800dbe4 <tcp_slowtmr+0x288>)
 800da82:	5cd3      	ldrb	r3, [r2, r3]
 800da84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800da8c:	7c7a      	ldrb	r2, [r7, #17]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d907      	bls.n	800daa2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800da92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800da98:	3301      	adds	r3, #1
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800daa8:	7c7a      	ldrb	r2, [r7, #17]
 800daaa:	429a      	cmp	r2, r3
 800daac:	f200 80d2 	bhi.w	800dc54 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dab0:	2301      	movs	r3, #1
 800dab2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d108      	bne.n	800dad0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dabe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dac0:	f005 f976 	bl	8012db0 <tcp_zero_window_probe>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d014      	beq.n	800daf4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800daca:	2300      	movs	r3, #0
 800dacc:	623b      	str	r3, [r7, #32]
 800dace:	e011      	b.n	800daf4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dad6:	4619      	mov	r1, r3
 800dad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dada:	f004 f82b 	bl	8011b34 <tcp_split_unsent_seg>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d107      	bne.n	800daf4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dae6:	f004 faab 	bl	8012040 <tcp_output>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800daf4:	6a3b      	ldr	r3, [r7, #32]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f000 80ac 	beq.w	800dc54 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db0a:	2b06      	cmp	r3, #6
 800db0c:	f200 80a2 	bhi.w	800dc54 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db16:	3301      	adds	r3, #1
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800db20:	e098      	b.n	800dc54 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db28:	2b00      	cmp	r3, #0
 800db2a:	db0f      	blt.n	800db4c <tcp_slowtmr+0x1f0>
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800db36:	4293      	cmp	r3, r2
 800db38:	d008      	beq.n	800db4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800db40:	b29b      	uxth	r3, r3
 800db42:	3301      	adds	r3, #1
 800db44:	b29b      	uxth	r3, r3
 800db46:	b21a      	sxth	r2, r3
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800db4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800db58:	429a      	cmp	r2, r3
 800db5a:	db7b      	blt.n	800dc54 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800db5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db5e:	f004 fd67 	bl	8012630 <tcp_rexmit_rto_prepare>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d007      	beq.n	800db78 <tcp_slowtmr+0x21c>
 800db68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d171      	bne.n	800dc54 <tcp_slowtmr+0x2f8>
 800db70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d06d      	beq.n	800dc54 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800db78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7a:	7d1b      	ldrb	r3, [r3, #20]
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	d03a      	beq.n	800dbf6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db86:	2b0c      	cmp	r3, #12
 800db88:	bf28      	it	cs
 800db8a:	230c      	movcs	r3, #12
 800db8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800db94:	10db      	asrs	r3, r3, #3
 800db96:	b21b      	sxth	r3, r3
 800db98:	461a      	mov	r2, r3
 800db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dba0:	4413      	add	r3, r2
 800dba2:	7efa      	ldrb	r2, [r7, #27]
 800dba4:	4910      	ldr	r1, [pc, #64]	; (800dbe8 <tcp_slowtmr+0x28c>)
 800dba6:	5c8a      	ldrb	r2, [r1, r2]
 800dba8:	4093      	lsls	r3, r2
 800dbaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	dc1a      	bgt.n	800dbec <tcp_slowtmr+0x290>
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	b21a      	sxth	r2, r3
 800dbba:	e019      	b.n	800dbf0 <tcp_slowtmr+0x294>
 800dbbc:	2000fadc 	.word	0x2000fadc
 800dbc0:	20008c56 	.word	0x20008c56
 800dbc4:	2000fad8 	.word	0x2000fad8
 800dbc8:	0801aba4 	.word	0x0801aba4
 800dbcc:	0801aee8 	.word	0x0801aee8
 800dbd0:	0801abe8 	.word	0x0801abe8
 800dbd4:	0801af14 	.word	0x0801af14
 800dbd8:	0801af40 	.word	0x0801af40
 800dbdc:	0801af70 	.word	0x0801af70
 800dbe0:	0801afa4 	.word	0x0801afa4
 800dbe4:	08028328 	.word	0x08028328
 800dbe8:	08028318 	.word	0x08028318
 800dbec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	bf28      	it	cs
 800dc0c:	4613      	movcs	r3, r2
 800dc0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dc10:	8a7b      	ldrh	r3, [r7, #18]
 800dc12:	085b      	lsrs	r3, r3, #1
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d206      	bcs.n	800dc3c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc32:	005b      	lsls	r3, r3, #1
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800dc4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc50:	f004 fd5e 	bl	8012710 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
 800dc58:	2b06      	cmp	r3, #6
 800dc5a:	d111      	bne.n	800dc80 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5e:	8b5b      	ldrh	r3, [r3, #26]
 800dc60:	f003 0310 	and.w	r3, r3, #16
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00b      	beq.n	800dc80 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc68:	4b9d      	ldr	r3, [pc, #628]	; (800dee0 <tcp_slowtmr+0x584>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6e:	6a1b      	ldr	r3, [r3, #32]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	2b28      	cmp	r3, #40	; 0x28
 800dc74:	d904      	bls.n	800dc80 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dc76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	7a5b      	ldrb	r3, [r3, #9]
 800dc84:	f003 0308 	and.w	r3, r3, #8
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d04c      	beq.n	800dd26 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dc90:	2b04      	cmp	r3, #4
 800dc92:	d003      	beq.n	800dc9c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dc98:	2b07      	cmp	r3, #7
 800dc9a:	d144      	bne.n	800dd26 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc9c:	4b90      	ldr	r3, [pc, #576]	; (800dee0 <tcp_slowtmr+0x584>)
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	6a1b      	ldr	r3, [r3, #32]
 800dca4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800dcb0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800dcb4:	498b      	ldr	r1, [pc, #556]	; (800dee4 <tcp_slowtmr+0x588>)
 800dcb6:	fba1 1303 	umull	r1, r3, r1, r3
 800dcba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d90a      	bls.n	800dcd6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800dcca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcce:	3301      	adds	r3, #1
 800dcd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dcd4:	e027      	b.n	800dd26 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dcd6:	4b82      	ldr	r3, [pc, #520]	; (800dee0 <tcp_slowtmr+0x584>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dcec:	4618      	mov	r0, r3
 800dcee:	4b7e      	ldr	r3, [pc, #504]	; (800dee8 <tcp_slowtmr+0x58c>)
 800dcf0:	fb03 f300 	mul.w	r3, r3, r0
 800dcf4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dcf6:	497b      	ldr	r1, [pc, #492]	; (800dee4 <tcp_slowtmr+0x588>)
 800dcf8:	fba1 1303 	umull	r1, r3, r1, r3
 800dcfc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d911      	bls.n	800dd26 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800dd02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd04:	f005 f814 	bl	8012d30 <tcp_keepalive>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dd0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d107      	bne.n	800dd26 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d011      	beq.n	800dd52 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dd2e:	4b6c      	ldr	r3, [pc, #432]	; (800dee0 <tcp_slowtmr+0x584>)
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	1ad2      	subs	r2, r2, r3
 800dd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dd3e:	4619      	mov	r1, r3
 800dd40:	460b      	mov	r3, r1
 800dd42:	005b      	lsls	r3, r3, #1
 800dd44:	440b      	add	r3, r1
 800dd46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d302      	bcc.n	800dd52 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dd4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd4e:	f000 fec3 	bl	800ead8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	7d1b      	ldrb	r3, [r3, #20]
 800dd56:	2b03      	cmp	r3, #3
 800dd58:	d10b      	bne.n	800dd72 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd5a:	4b61      	ldr	r3, [pc, #388]	; (800dee0 <tcp_slowtmr+0x584>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	2b28      	cmp	r3, #40	; 0x28
 800dd66:	d904      	bls.n	800dd72 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dd68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd74:	7d1b      	ldrb	r3, [r3, #20]
 800dd76:	2b09      	cmp	r3, #9
 800dd78:	d10b      	bne.n	800dd92 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dd7a:	4b59      	ldr	r3, [pc, #356]	; (800dee0 <tcp_slowtmr+0x584>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	2bf0      	cmp	r3, #240	; 0xf0
 800dd86:	d904      	bls.n	800dd92 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800dd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dd92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d060      	beq.n	800de5c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dda0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dda2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dda4:	f000 fce4 	bl	800e770 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d010      	beq.n	800ddd0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ddae:	4b4f      	ldr	r3, [pc, #316]	; (800deec <tcp_slowtmr+0x590>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d106      	bne.n	800ddc6 <tcp_slowtmr+0x46a>
 800ddb8:	4b4d      	ldr	r3, [pc, #308]	; (800def0 <tcp_slowtmr+0x594>)
 800ddba:	f240 526d 	movw	r2, #1389	; 0x56d
 800ddbe:	494d      	ldr	r1, [pc, #308]	; (800def4 <tcp_slowtmr+0x598>)
 800ddc0:	484d      	ldr	r0, [pc, #308]	; (800def8 <tcp_slowtmr+0x59c>)
 800ddc2:	f00a fa7b 	bl	80182bc <iprintf>
        prev->next = pcb->next;
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddcc:	60da      	str	r2, [r3, #12]
 800ddce:	e00f      	b.n	800ddf0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ddd0:	4b46      	ldr	r3, [pc, #280]	; (800deec <tcp_slowtmr+0x590>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d006      	beq.n	800dde8 <tcp_slowtmr+0x48c>
 800ddda:	4b45      	ldr	r3, [pc, #276]	; (800def0 <tcp_slowtmr+0x594>)
 800dddc:	f240 5271 	movw	r2, #1393	; 0x571
 800dde0:	4946      	ldr	r1, [pc, #280]	; (800defc <tcp_slowtmr+0x5a0>)
 800dde2:	4845      	ldr	r0, [pc, #276]	; (800def8 <tcp_slowtmr+0x59c>)
 800dde4:	f00a fa6a 	bl	80182bc <iprintf>
        tcp_active_pcbs = pcb->next;
 800dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	4a3f      	ldr	r2, [pc, #252]	; (800deec <tcp_slowtmr+0x590>)
 800ddee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ddf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d013      	beq.n	800de20 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ddfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800de00:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800de02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de04:	3304      	adds	r3, #4
 800de06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de08:	8ad2      	ldrh	r2, [r2, #22]
 800de0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de0c:	8b09      	ldrh	r1, [r1, #24]
 800de0e:	9102      	str	r1, [sp, #8]
 800de10:	9201      	str	r2, [sp, #4]
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	462b      	mov	r3, r5
 800de16:	4622      	mov	r2, r4
 800de18:	4601      	mov	r1, r0
 800de1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de1c:	f004 fed4 	bl	8012bc8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800de20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800de26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de28:	7d1b      	ldrb	r3, [r3, #20]
 800de2a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800de36:	6838      	ldr	r0, [r7, #0]
 800de38:	f7fe ffe6 	bl	800ce08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800de3c:	4b30      	ldr	r3, [pc, #192]	; (800df00 <tcp_slowtmr+0x5a4>)
 800de3e:	2200      	movs	r2, #0
 800de40:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <tcp_slowtmr+0x4f6>
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f06f 010c 	mvn.w	r1, #12
 800de4e:	68b8      	ldr	r0, [r7, #8]
 800de50:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800de52:	4b2b      	ldr	r3, [pc, #172]	; (800df00 <tcp_slowtmr+0x5a4>)
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d037      	beq.n	800deca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800de5a:	e590      	b.n	800d97e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	7f1b      	ldrb	r3, [r3, #28]
 800de6a:	3301      	adds	r3, #1
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de70:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	7f1a      	ldrb	r2, [r3, #28]
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	7f5b      	ldrb	r3, [r3, #29]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d325      	bcc.n	800deca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	2200      	movs	r2, #0
 800de82:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800de84:	4b1e      	ldr	r3, [pc, #120]	; (800df00 <tcp_slowtmr+0x5a4>)
 800de86:	2200      	movs	r2, #0
 800de88:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00b      	beq.n	800deac <tcp_slowtmr+0x550>
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de9c:	6912      	ldr	r2, [r2, #16]
 800de9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dea0:	4610      	mov	r0, r2
 800dea2:	4798      	blx	r3
 800dea4:	4603      	mov	r3, r0
 800dea6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800deaa:	e002      	b.n	800deb2 <tcp_slowtmr+0x556>
 800deac:	2300      	movs	r3, #0
 800deae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800deb2:	4b13      	ldr	r3, [pc, #76]	; (800df00 <tcp_slowtmr+0x5a4>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d000      	beq.n	800debc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800deba:	e560      	b.n	800d97e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800debc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d102      	bne.n	800deca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800dec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dec6:	f004 f8bb 	bl	8012040 <tcp_output>
  while (pcb != NULL) {
 800deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800decc:	2b00      	cmp	r3, #0
 800dece:	f47f ad5c 	bne.w	800d98a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ded6:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <tcp_slowtmr+0x5a8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dedc:	e067      	b.n	800dfae <tcp_slowtmr+0x652>
 800dede:	bf00      	nop
 800dee0:	2000fadc 	.word	0x2000fadc
 800dee4:	10624dd3 	.word	0x10624dd3
 800dee8:	000124f8 	.word	0x000124f8
 800deec:	2000fad8 	.word	0x2000fad8
 800def0:	0801aba4 	.word	0x0801aba4
 800def4:	0801afdc 	.word	0x0801afdc
 800def8:	0801abe8 	.word	0x0801abe8
 800defc:	0801b008 	.word	0x0801b008
 800df00:	2000fad4 	.word	0x2000fad4
 800df04:	2000fae8 	.word	0x2000fae8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	2b0a      	cmp	r3, #10
 800df0e:	d006      	beq.n	800df1e <tcp_slowtmr+0x5c2>
 800df10:	4b2a      	ldr	r3, [pc, #168]	; (800dfbc <tcp_slowtmr+0x660>)
 800df12:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800df16:	492a      	ldr	r1, [pc, #168]	; (800dfc0 <tcp_slowtmr+0x664>)
 800df18:	482a      	ldr	r0, [pc, #168]	; (800dfc4 <tcp_slowtmr+0x668>)
 800df1a:	f00a f9cf 	bl	80182bc <iprintf>
    pcb_remove = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800df24:	4b28      	ldr	r3, [pc, #160]	; (800dfc8 <tcp_slowtmr+0x66c>)
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	6a1b      	ldr	r3, [r3, #32]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	2bf0      	cmp	r3, #240	; 0xf0
 800df30:	d904      	bls.n	800df3c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800df32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df36:	3301      	adds	r3, #1
 800df38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800df3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df40:	2b00      	cmp	r3, #0
 800df42:	d02f      	beq.n	800dfa4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800df44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df46:	f000 fc13 	bl	800e770 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800df4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d010      	beq.n	800df72 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800df50:	4b1e      	ldr	r3, [pc, #120]	; (800dfcc <tcp_slowtmr+0x670>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df56:	429a      	cmp	r2, r3
 800df58:	d106      	bne.n	800df68 <tcp_slowtmr+0x60c>
 800df5a:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <tcp_slowtmr+0x660>)
 800df5c:	f240 52af 	movw	r2, #1455	; 0x5af
 800df60:	491b      	ldr	r1, [pc, #108]	; (800dfd0 <tcp_slowtmr+0x674>)
 800df62:	4818      	ldr	r0, [pc, #96]	; (800dfc4 <tcp_slowtmr+0x668>)
 800df64:	f00a f9aa 	bl	80182bc <iprintf>
        prev->next = pcb->next;
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	68da      	ldr	r2, [r3, #12]
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	60da      	str	r2, [r3, #12]
 800df70:	e00f      	b.n	800df92 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800df72:	4b16      	ldr	r3, [pc, #88]	; (800dfcc <tcp_slowtmr+0x670>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df78:	429a      	cmp	r2, r3
 800df7a:	d006      	beq.n	800df8a <tcp_slowtmr+0x62e>
 800df7c:	4b0f      	ldr	r3, [pc, #60]	; (800dfbc <tcp_slowtmr+0x660>)
 800df7e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800df82:	4914      	ldr	r1, [pc, #80]	; (800dfd4 <tcp_slowtmr+0x678>)
 800df84:	480f      	ldr	r0, [pc, #60]	; (800dfc4 <tcp_slowtmr+0x668>)
 800df86:	f00a f999 	bl	80182bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	4a0f      	ldr	r2, [pc, #60]	; (800dfcc <tcp_slowtmr+0x670>)
 800df90:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800df9c:	69f8      	ldr	r0, [r7, #28]
 800df9e:	f7fe ff33 	bl	800ce08 <tcp_free>
 800dfa2:	e004      	b.n	800dfae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1a9      	bne.n	800df08 <tcp_slowtmr+0x5ac>
    }
  }
}
 800dfb4:	bf00      	nop
 800dfb6:	3730      	adds	r7, #48	; 0x30
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bdb0      	pop	{r4, r5, r7, pc}
 800dfbc:	0801aba4 	.word	0x0801aba4
 800dfc0:	0801b034 	.word	0x0801b034
 800dfc4:	0801abe8 	.word	0x0801abe8
 800dfc8:	2000fadc 	.word	0x2000fadc
 800dfcc:	2000fae8 	.word	0x2000fae8
 800dfd0:	0801b064 	.word	0x0801b064
 800dfd4:	0801b08c 	.word	0x0801b08c

0800dfd8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dfde:	4b2d      	ldr	r3, [pc, #180]	; (800e094 <tcp_fasttmr+0xbc>)
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	4b2b      	ldr	r3, [pc, #172]	; (800e094 <tcp_fasttmr+0xbc>)
 800dfe8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dfea:	4b2b      	ldr	r3, [pc, #172]	; (800e098 <tcp_fasttmr+0xc0>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dff0:	e048      	b.n	800e084 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	7f9a      	ldrb	r2, [r3, #30]
 800dff6:	4b27      	ldr	r3, [pc, #156]	; (800e094 <tcp_fasttmr+0xbc>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d03f      	beq.n	800e07e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dffe:	4b25      	ldr	r3, [pc, #148]	; (800e094 <tcp_fasttmr+0xbc>)
 800e000:	781a      	ldrb	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	8b5b      	ldrh	r3, [r3, #26]
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d010      	beq.n	800e034 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	8b5b      	ldrh	r3, [r3, #26]
 800e016:	f043 0302 	orr.w	r3, r3, #2
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f004 f80d 	bl	8012040 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	8b5b      	ldrh	r3, [r3, #26]
 800e02a:	f023 0303 	bic.w	r3, r3, #3
 800e02e:	b29a      	uxth	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	8b5b      	ldrh	r3, [r3, #26]
 800e038:	f003 0308 	and.w	r3, r3, #8
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d009      	beq.n	800e054 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	8b5b      	ldrh	r3, [r3, #26]
 800e044:	f023 0308 	bic.w	r3, r3, #8
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff f86a 	bl	800d128 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00a      	beq.n	800e078 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e062:	4b0e      	ldr	r3, [pc, #56]	; (800e09c <tcp_fasttmr+0xc4>)
 800e064:	2200      	movs	r2, #0
 800e066:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f819 	bl	800e0a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e06e:	4b0b      	ldr	r3, [pc, #44]	; (800e09c <tcp_fasttmr+0xc4>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d000      	beq.n	800e078 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e076:	e7b8      	b.n	800dfea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	607b      	str	r3, [r7, #4]
 800e07c:	e002      	b.n	800e084 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1b3      	bne.n	800dff2 <tcp_fasttmr+0x1a>
    }
  }
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	20008c56 	.word	0x20008c56
 800e098:	2000fad8 	.word	0x2000fad8
 800e09c:	2000fad4 	.word	0x2000fad4

0800e0a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e0a0:	b590      	push	{r4, r7, lr}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <tcp_process_refused_data+0x22>
 800e0ae:	4b37      	ldr	r3, [pc, #220]	; (800e18c <tcp_process_refused_data+0xec>)
 800e0b0:	f240 6209 	movw	r2, #1545	; 0x609
 800e0b4:	4936      	ldr	r1, [pc, #216]	; (800e190 <tcp_process_refused_data+0xf0>)
 800e0b6:	4837      	ldr	r0, [pc, #220]	; (800e194 <tcp_process_refused_data+0xf4>)
 800e0b8:	f00a f900 	bl	80182bc <iprintf>
 800e0bc:	f06f 030f 	mvn.w	r3, #15
 800e0c0:	e060      	b.n	800e184 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0c6:	7b5b      	ldrb	r3, [r3, #13]
 800e0c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <tcp_process_refused_data+0x58>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6918      	ldr	r0, [r3, #16]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	47a0      	blx	r4
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
 800e0f6:	e007      	b.n	800e108 <tcp_process_refused_data+0x68>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	2000      	movs	r0, #0
 800e100:	f000 f8c0 	bl	800e284 <tcp_recv_null>
 800e104:	4603      	mov	r3, r0
 800e106:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d12a      	bne.n	800e166 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e110:	7bbb      	ldrb	r3, [r7, #14]
 800e112:	f003 0320 	and.w	r3, r3, #32
 800e116:	2b00      	cmp	r3, #0
 800e118:	d033      	beq.n	800e182 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e11e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e122:	d005      	beq.n	800e130 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e128:	3301      	adds	r3, #1
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00b      	beq.n	800e152 <tcp_process_refused_data+0xb2>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6918      	ldr	r0, [r3, #16]
 800e144:	2300      	movs	r3, #0
 800e146:	2200      	movs	r2, #0
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	47a0      	blx	r4
 800e14c:	4603      	mov	r3, r0
 800e14e:	73fb      	strb	r3, [r7, #15]
 800e150:	e001      	b.n	800e156 <tcp_process_refused_data+0xb6>
 800e152:	2300      	movs	r3, #0
 800e154:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e15a:	f113 0f0d 	cmn.w	r3, #13
 800e15e:	d110      	bne.n	800e182 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e160:	f06f 030c 	mvn.w	r3, #12
 800e164:	e00e      	b.n	800e184 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e16a:	f113 0f0d 	cmn.w	r3, #13
 800e16e:	d102      	bne.n	800e176 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e170:	f06f 030c 	mvn.w	r3, #12
 800e174:	e006      	b.n	800e184 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e17c:	f06f 0304 	mvn.w	r3, #4
 800e180:	e000      	b.n	800e184 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd90      	pop	{r4, r7, pc}
 800e18c:	0801aba4 	.word	0x0801aba4
 800e190:	0801b0b4 	.word	0x0801b0b4
 800e194:	0801abe8 	.word	0x0801abe8

0800e198 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e1a0:	e007      	b.n	800e1b2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 f809 	bl	800e1c0 <tcp_seg_free>
    seg = next;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1f4      	bne.n	800e1a2 <tcp_segs_free+0xa>
  }
}
 800e1b8:	bf00      	nop
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00c      	beq.n	800e1e8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d004      	beq.n	800e1e0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe fb58 	bl	800c890 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e1e0:	6879      	ldr	r1, [r7, #4]
 800e1e2:	2003      	movs	r0, #3
 800e1e4:	f7fd fd26 	bl	800bc34 <memp_free>
  }
}
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d107      	bne.n	800e212 <tcp_setprio+0x22>
 800e202:	4b07      	ldr	r3, [pc, #28]	; (800e220 <tcp_setprio+0x30>)
 800e204:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e208:	4906      	ldr	r1, [pc, #24]	; (800e224 <tcp_setprio+0x34>)
 800e20a:	4807      	ldr	r0, [pc, #28]	; (800e228 <tcp_setprio+0x38>)
 800e20c:	f00a f856 	bl	80182bc <iprintf>
 800e210:	e002      	b.n	800e218 <tcp_setprio+0x28>

  pcb->prio = prio;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	78fa      	ldrb	r2, [r7, #3]
 800e216:	755a      	strb	r2, [r3, #21]
}
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	0801aba4 	.word	0x0801aba4
 800e224:	0801b0dc 	.word	0x0801b0dc
 800e228:	0801abe8 	.word	0x0801abe8

0800e22c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <tcp_seg_copy+0x1c>
 800e23a:	4b0f      	ldr	r3, [pc, #60]	; (800e278 <tcp_seg_copy+0x4c>)
 800e23c:	f240 6282 	movw	r2, #1666	; 0x682
 800e240:	490e      	ldr	r1, [pc, #56]	; (800e27c <tcp_seg_copy+0x50>)
 800e242:	480f      	ldr	r0, [pc, #60]	; (800e280 <tcp_seg_copy+0x54>)
 800e244:	f00a f83a 	bl	80182bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e248:	2003      	movs	r0, #3
 800e24a:	f7fd fca1 	bl	800bb90 <memp_malloc>
 800e24e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <tcp_seg_copy+0x2e>
    return NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	e00a      	b.n	800e270 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e25a:	2210      	movs	r2, #16
 800e25c:	6879      	ldr	r1, [r7, #4]
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f00a f819 	bl	8018296 <memcpy>
  pbuf_ref(cseg->p);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fe fbb7 	bl	800c9dc <pbuf_ref>
  return cseg;
 800e26e:	68fb      	ldr	r3, [r7, #12]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	0801aba4 	.word	0x0801aba4
 800e27c:	0801b0f8 	.word	0x0801b0f8
 800e280:	0801abe8 	.word	0x0801abe8

0800e284 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d109      	bne.n	800e2ac <tcp_recv_null+0x28>
 800e298:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <tcp_recv_null+0x60>)
 800e29a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e29e:	4912      	ldr	r1, [pc, #72]	; (800e2e8 <tcp_recv_null+0x64>)
 800e2a0:	4812      	ldr	r0, [pc, #72]	; (800e2ec <tcp_recv_null+0x68>)
 800e2a2:	f00a f80b 	bl	80182bc <iprintf>
 800e2a6:	f06f 030f 	mvn.w	r3, #15
 800e2aa:	e016      	b.n	800e2da <tcp_recv_null+0x56>

  if (p != NULL) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d009      	beq.n	800e2c6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	891b      	ldrh	r3, [r3, #8]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	68b8      	ldr	r0, [r7, #8]
 800e2ba:	f7ff fab9 	bl	800d830 <tcp_recved>
    pbuf_free(p);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f7fe fae6 	bl	800c890 <pbuf_free>
 800e2c4:	e008      	b.n	800e2d8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e2c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d104      	bne.n	800e2d8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e2ce:	68b8      	ldr	r0, [r7, #8]
 800e2d0:	f7fe ff90 	bl	800d1f4 <tcp_close>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	e000      	b.n	800e2da <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	0801aba4 	.word	0x0801aba4
 800e2e8:	0801b114 	.word	0x0801b114
 800e2ec:	0801abe8 	.word	0x0801abe8

0800e2f0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	db01      	blt.n	800e306 <tcp_kill_prio+0x16>
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	e000      	b.n	800e308 <tcp_kill_prio+0x18>
 800e306:	237f      	movs	r3, #127	; 0x7f
 800e308:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e30a:	7afb      	ldrb	r3, [r7, #11]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d034      	beq.n	800e37a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e310:	7afb      	ldrb	r3, [r7, #11]
 800e312:	3b01      	subs	r3, #1
 800e314:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e31a:	2300      	movs	r3, #0
 800e31c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e31e:	4b19      	ldr	r3, [pc, #100]	; (800e384 <tcp_kill_prio+0x94>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	617b      	str	r3, [r7, #20]
 800e324:	e01f      	b.n	800e366 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	7d5b      	ldrb	r3, [r3, #21]
 800e32a:	7afa      	ldrb	r2, [r7, #11]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d80c      	bhi.n	800e34a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e334:	7afa      	ldrb	r2, [r7, #11]
 800e336:	429a      	cmp	r2, r3
 800e338:	d112      	bne.n	800e360 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e33a:	4b13      	ldr	r3, [pc, #76]	; (800e388 <tcp_kill_prio+0x98>)
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	429a      	cmp	r2, r3
 800e348:	d80a      	bhi.n	800e360 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e34a:	4b0f      	ldr	r3, [pc, #60]	; (800e388 <tcp_kill_prio+0x98>)
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	1ad3      	subs	r3, r2, r3
 800e354:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	7d5b      	ldrb	r3, [r3, #21]
 800e35e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	617b      	str	r3, [r7, #20]
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1dc      	bne.n	800e326 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d004      	beq.n	800e37c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e372:	6938      	ldr	r0, [r7, #16]
 800e374:	f7ff f882 	bl	800d47c <tcp_abort>
 800e378:	e000      	b.n	800e37c <tcp_kill_prio+0x8c>
    return;
 800e37a:	bf00      	nop
  }
}
 800e37c:	3718      	adds	r7, #24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	2000fad8 	.word	0x2000fad8
 800e388:	2000fadc 	.word	0x2000fadc

0800e38c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	4603      	mov	r3, r0
 800e394:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	2b08      	cmp	r3, #8
 800e39a:	d009      	beq.n	800e3b0 <tcp_kill_state+0x24>
 800e39c:	79fb      	ldrb	r3, [r7, #7]
 800e39e:	2b09      	cmp	r3, #9
 800e3a0:	d006      	beq.n	800e3b0 <tcp_kill_state+0x24>
 800e3a2:	4b1a      	ldr	r3, [pc, #104]	; (800e40c <tcp_kill_state+0x80>)
 800e3a4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e3a8:	4919      	ldr	r1, [pc, #100]	; (800e410 <tcp_kill_state+0x84>)
 800e3aa:	481a      	ldr	r0, [pc, #104]	; (800e414 <tcp_kill_state+0x88>)
 800e3ac:	f009 ff86 	bl	80182bc <iprintf>

  inactivity = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3b8:	4b17      	ldr	r3, [pc, #92]	; (800e418 <tcp_kill_state+0x8c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	617b      	str	r3, [r7, #20]
 800e3be:	e017      	b.n	800e3f0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	7d1b      	ldrb	r3, [r3, #20]
 800e3c4:	79fa      	ldrb	r2, [r7, #7]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d10f      	bne.n	800e3ea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e3ca:	4b14      	ldr	r3, [pc, #80]	; (800e41c <tcp_kill_state+0x90>)
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d807      	bhi.n	800e3ea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e3da:	4b10      	ldr	r3, [pc, #64]	; (800e41c <tcp_kill_state+0x90>)
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1e4      	bne.n	800e3c0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d003      	beq.n	800e404 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	6938      	ldr	r0, [r7, #16]
 800e400:	f7fe ff7e 	bl	800d300 <tcp_abandon>
  }
}
 800e404:	bf00      	nop
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	0801aba4 	.word	0x0801aba4
 800e410:	0801b130 	.word	0x0801b130
 800e414:	0801abe8 	.word	0x0801abe8
 800e418:	2000fad8 	.word	0x2000fad8
 800e41c:	2000fadc 	.word	0x2000fadc

0800e420 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e426:	2300      	movs	r3, #0
 800e428:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e42a:	2300      	movs	r3, #0
 800e42c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e42e:	4b12      	ldr	r3, [pc, #72]	; (800e478 <tcp_kill_timewait+0x58>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	60fb      	str	r3, [r7, #12]
 800e434:	e012      	b.n	800e45c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <tcp_kill_timewait+0x5c>)
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6a1b      	ldr	r3, [r3, #32]
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	429a      	cmp	r2, r3
 800e444:	d807      	bhi.n	800e456 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e446:	4b0d      	ldr	r3, [pc, #52]	; (800e47c <tcp_kill_timewait+0x5c>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a1b      	ldr	r3, [r3, #32]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1e9      	bne.n	800e436 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e468:	68b8      	ldr	r0, [r7, #8]
 800e46a:	f7ff f807 	bl	800d47c <tcp_abort>
  }
}
 800e46e:	bf00      	nop
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	2000fae8 	.word	0x2000fae8
 800e47c:	2000fadc 	.word	0x2000fadc

0800e480 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e486:	4b10      	ldr	r3, [pc, #64]	; (800e4c8 <tcp_handle_closepend+0x48>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e48c:	e014      	b.n	800e4b8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	8b5b      	ldrh	r3, [r3, #26]
 800e498:	f003 0308 	and.w	r3, r3, #8
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d009      	beq.n	800e4b4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	8b5b      	ldrh	r3, [r3, #26]
 800e4a4:	f023 0308 	bic.w	r3, r3, #8
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f7fe fe3a 	bl	800d128 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1e7      	bne.n	800e48e <tcp_handle_closepend+0xe>
  }
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	2000fad8 	.word	0x2000fad8

0800e4cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	f7fd fb5a 	bl	800bb90 <memp_malloc>
 800e4dc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d126      	bne.n	800e532 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e4e4:	f7ff ffcc 	bl	800e480 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e4e8:	f7ff ff9a 	bl	800e420 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4ec:	2001      	movs	r0, #1
 800e4ee:	f7fd fb4f 	bl	800bb90 <memp_malloc>
 800e4f2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d11b      	bne.n	800e532 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e4fa:	2009      	movs	r0, #9
 800e4fc:	f7ff ff46 	bl	800e38c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e500:	2001      	movs	r0, #1
 800e502:	f7fd fb45 	bl	800bb90 <memp_malloc>
 800e506:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d111      	bne.n	800e532 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e50e:	2008      	movs	r0, #8
 800e510:	f7ff ff3c 	bl	800e38c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e514:	2001      	movs	r0, #1
 800e516:	f7fd fb3b 	bl	800bb90 <memp_malloc>
 800e51a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d107      	bne.n	800e532 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e522:	79fb      	ldrb	r3, [r7, #7]
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff fee3 	bl	800e2f0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e52a:	2001      	movs	r0, #1
 800e52c:	f7fd fb30 	bl	800bb90 <memp_malloc>
 800e530:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d03f      	beq.n	800e5b8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e538:	229c      	movs	r2, #156	; 0x9c
 800e53a:	2100      	movs	r1, #0
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f009 feb5 	bl	80182ac <memset>
    pcb->prio = prio;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	79fa      	ldrb	r2, [r7, #7]
 800e546:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e54e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	22ff      	movs	r2, #255	; 0xff
 800e566:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e56e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2206      	movs	r2, #6
 800e574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2206      	movs	r2, #6
 800e57c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e584:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2201      	movs	r2, #1
 800e58a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e58e:	4b0d      	ldr	r3, [pc, #52]	; (800e5c4 <tcp_alloc+0xf8>)
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e596:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <tcp_alloc+0xfc>)
 800e598:	781a      	ldrb	r2, [r3, #0]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e5a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	4a08      	ldr	r2, [pc, #32]	; (800e5cc <tcp_alloc+0x100>)
 800e5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	4a07      	ldr	r2, [pc, #28]	; (800e5d0 <tcp_alloc+0x104>)
 800e5b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	2000fadc 	.word	0x2000fadc
 800e5c8:	20008c56 	.word	0x20008c56
 800e5cc:	0800e285 	.word	0x0800e285
 800e5d0:	006ddd00 	.word	0x006ddd00

0800e5d4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	4603      	mov	r3, r0
 800e5dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e5de:	2040      	movs	r0, #64	; 0x40
 800e5e0:	f7ff ff74 	bl	800e4cc <tcp_alloc>
 800e5e4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3710      	adds	r7, #16
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	611a      	str	r2, [r3, #16]
  }
}
 800e606:	bf00      	nop
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
	...

0800e614 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00e      	beq.n	800e642 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d106      	bne.n	800e63a <tcp_recv+0x26>
 800e62c:	4b07      	ldr	r3, [pc, #28]	; (800e64c <tcp_recv+0x38>)
 800e62e:	f240 72df 	movw	r2, #2015	; 0x7df
 800e632:	4907      	ldr	r1, [pc, #28]	; (800e650 <tcp_recv+0x3c>)
 800e634:	4807      	ldr	r0, [pc, #28]	; (800e654 <tcp_recv+0x40>)
 800e636:	f009 fe41 	bl	80182bc <iprintf>
    pcb->recv = recv;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	683a      	ldr	r2, [r7, #0]
 800e63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e642:	bf00      	nop
 800e644:	3708      	adds	r7, #8
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	0801aba4 	.word	0x0801aba4
 800e650:	0801b140 	.word	0x0801b140
 800e654:	0801abe8 	.word	0x0801abe8

0800e658 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00e      	beq.n	800e686 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	7d1b      	ldrb	r3, [r3, #20]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d106      	bne.n	800e67e <tcp_sent+0x26>
 800e670:	4b07      	ldr	r3, [pc, #28]	; (800e690 <tcp_sent+0x38>)
 800e672:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e676:	4907      	ldr	r1, [pc, #28]	; (800e694 <tcp_sent+0x3c>)
 800e678:	4807      	ldr	r0, [pc, #28]	; (800e698 <tcp_sent+0x40>)
 800e67a:	f009 fe1f 	bl	80182bc <iprintf>
    pcb->sent = sent;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	683a      	ldr	r2, [r7, #0]
 800e682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e686:	bf00      	nop
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	0801aba4 	.word	0x0801aba4
 800e694:	0801b168 	.word	0x0801b168
 800e698:	0801abe8 	.word	0x0801abe8

0800e69c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00e      	beq.n	800e6ca <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d106      	bne.n	800e6c2 <tcp_err+0x26>
 800e6b4:	4b07      	ldr	r3, [pc, #28]	; (800e6d4 <tcp_err+0x38>)
 800e6b6:	f640 020d 	movw	r2, #2061	; 0x80d
 800e6ba:	4907      	ldr	r1, [pc, #28]	; (800e6d8 <tcp_err+0x3c>)
 800e6bc:	4807      	ldr	r0, [pc, #28]	; (800e6dc <tcp_err+0x40>)
 800e6be:	f009 fdfd 	bl	80182bc <iprintf>
    pcb->errf = err;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e6ca:	bf00      	nop
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	0801aba4 	.word	0x0801aba4
 800e6d8:	0801b190 	.word	0x0801b190
 800e6dc:	0801abe8 	.word	0x0801abe8

0800e6e0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d008      	beq.n	800e702 <tcp_accept+0x22>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	7d1b      	ldrb	r3, [r3, #20]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d104      	bne.n	800e702 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	683a      	ldr	r2, [r7, #0]
 800e700:	619a      	str	r2, [r3, #24]
  }
}
 800e702:	bf00      	nop
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
	...

0800e710 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d107      	bne.n	800e734 <tcp_poll+0x24>
 800e724:	4b0e      	ldr	r3, [pc, #56]	; (800e760 <tcp_poll+0x50>)
 800e726:	f640 023d 	movw	r2, #2109	; 0x83d
 800e72a:	490e      	ldr	r1, [pc, #56]	; (800e764 <tcp_poll+0x54>)
 800e72c:	480e      	ldr	r0, [pc, #56]	; (800e768 <tcp_poll+0x58>)
 800e72e:	f009 fdc5 	bl	80182bc <iprintf>
 800e732:	e011      	b.n	800e758 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	7d1b      	ldrb	r3, [r3, #20]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d106      	bne.n	800e74a <tcp_poll+0x3a>
 800e73c:	4b08      	ldr	r3, [pc, #32]	; (800e760 <tcp_poll+0x50>)
 800e73e:	f640 023e 	movw	r2, #2110	; 0x83e
 800e742:	490a      	ldr	r1, [pc, #40]	; (800e76c <tcp_poll+0x5c>)
 800e744:	4808      	ldr	r0, [pc, #32]	; (800e768 <tcp_poll+0x58>)
 800e746:	f009 fdb9 	bl	80182bc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	79fa      	ldrb	r2, [r7, #7]
 800e756:	775a      	strb	r2, [r3, #29]
}
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	0801aba4 	.word	0x0801aba4
 800e764:	0801b1b8 	.word	0x0801b1b8
 800e768:	0801abe8 	.word	0x0801abe8
 800e76c:	0801b1d0 	.word	0x0801b1d0

0800e770 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d107      	bne.n	800e78e <tcp_pcb_purge+0x1e>
 800e77e:	4b21      	ldr	r3, [pc, #132]	; (800e804 <tcp_pcb_purge+0x94>)
 800e780:	f640 0251 	movw	r2, #2129	; 0x851
 800e784:	4920      	ldr	r1, [pc, #128]	; (800e808 <tcp_pcb_purge+0x98>)
 800e786:	4821      	ldr	r0, [pc, #132]	; (800e80c <tcp_pcb_purge+0x9c>)
 800e788:	f009 fd98 	bl	80182bc <iprintf>
 800e78c:	e037      	b.n	800e7fe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d033      	beq.n	800e7fe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e79a:	2b0a      	cmp	r3, #10
 800e79c:	d02f      	beq.n	800e7fe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d02b      	beq.n	800e7fe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d007      	beq.n	800e7be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fe f86c 	bl	800c890 <pbuf_free>
      pcb->refused_data = NULL;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d002      	beq.n	800e7cc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f986 	bl	800ead8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7d2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fcdd 	bl	800e198 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7ff fcd8 	bl	800e198 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	0801aba4 	.word	0x0801aba4
 800e808:	0801b1f0 	.word	0x0801b1f0
 800e80c:	0801abe8 	.word	0x0801abe8

0800e810 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d106      	bne.n	800e82e <tcp_pcb_remove+0x1e>
 800e820:	4b3e      	ldr	r3, [pc, #248]	; (800e91c <tcp_pcb_remove+0x10c>)
 800e822:	f640 0283 	movw	r2, #2179	; 0x883
 800e826:	493e      	ldr	r1, [pc, #248]	; (800e920 <tcp_pcb_remove+0x110>)
 800e828:	483e      	ldr	r0, [pc, #248]	; (800e924 <tcp_pcb_remove+0x114>)
 800e82a:	f009 fd47 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d106      	bne.n	800e842 <tcp_pcb_remove+0x32>
 800e834:	4b39      	ldr	r3, [pc, #228]	; (800e91c <tcp_pcb_remove+0x10c>)
 800e836:	f640 0284 	movw	r2, #2180	; 0x884
 800e83a:	493b      	ldr	r1, [pc, #236]	; (800e928 <tcp_pcb_remove+0x118>)
 800e83c:	4839      	ldr	r0, [pc, #228]	; (800e924 <tcp_pcb_remove+0x114>)
 800e83e:	f009 fd3d 	bl	80182bc <iprintf>

  TCP_RMV(pcblist, pcb);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d105      	bne.n	800e858 <tcp_pcb_remove+0x48>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	68da      	ldr	r2, [r3, #12]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	e013      	b.n	800e880 <tcp_pcb_remove+0x70>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	60fb      	str	r3, [r7, #12]
 800e85e:	e00c      	b.n	800e87a <tcp_pcb_remove+0x6a>
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	d104      	bne.n	800e874 <tcp_pcb_remove+0x64>
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	68da      	ldr	r2, [r3, #12]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	60da      	str	r2, [r3, #12]
 800e872:	e005      	b.n	800e880 <tcp_pcb_remove+0x70>
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	60fb      	str	r3, [r7, #12]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1ef      	bne.n	800e860 <tcp_pcb_remove+0x50>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2200      	movs	r2, #0
 800e884:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e886:	6838      	ldr	r0, [r7, #0]
 800e888:	f7ff ff72 	bl	800e770 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	7d1b      	ldrb	r3, [r3, #20]
 800e890:	2b0a      	cmp	r3, #10
 800e892:	d013      	beq.n	800e8bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d00f      	beq.n	800e8bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	8b5b      	ldrh	r3, [r3, #26]
 800e8a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d009      	beq.n	800e8bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	8b5b      	ldrh	r3, [r3, #26]
 800e8ac:	f043 0302 	orr.w	r3, r3, #2
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8b6:	6838      	ldr	r0, [r7, #0]
 800e8b8:	f003 fbc2 	bl	8012040 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	7d1b      	ldrb	r3, [r3, #20]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d020      	beq.n	800e906 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d006      	beq.n	800e8da <tcp_pcb_remove+0xca>
 800e8cc:	4b13      	ldr	r3, [pc, #76]	; (800e91c <tcp_pcb_remove+0x10c>)
 800e8ce:	f640 0293 	movw	r2, #2195	; 0x893
 800e8d2:	4916      	ldr	r1, [pc, #88]	; (800e92c <tcp_pcb_remove+0x11c>)
 800e8d4:	4813      	ldr	r0, [pc, #76]	; (800e924 <tcp_pcb_remove+0x114>)
 800e8d6:	f009 fcf1 	bl	80182bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d006      	beq.n	800e8f0 <tcp_pcb_remove+0xe0>
 800e8e2:	4b0e      	ldr	r3, [pc, #56]	; (800e91c <tcp_pcb_remove+0x10c>)
 800e8e4:	f640 0294 	movw	r2, #2196	; 0x894
 800e8e8:	4911      	ldr	r1, [pc, #68]	; (800e930 <tcp_pcb_remove+0x120>)
 800e8ea:	480e      	ldr	r0, [pc, #56]	; (800e924 <tcp_pcb_remove+0x114>)
 800e8ec:	f009 fce6 	bl	80182bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <tcp_pcb_remove+0xf6>
 800e8f8:	4b08      	ldr	r3, [pc, #32]	; (800e91c <tcp_pcb_remove+0x10c>)
 800e8fa:	f640 0296 	movw	r2, #2198	; 0x896
 800e8fe:	490d      	ldr	r1, [pc, #52]	; (800e934 <tcp_pcb_remove+0x124>)
 800e900:	4808      	ldr	r0, [pc, #32]	; (800e924 <tcp_pcb_remove+0x114>)
 800e902:	f009 fcdb 	bl	80182bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2200      	movs	r2, #0
 800e90a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2200      	movs	r2, #0
 800e910:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e912:	bf00      	nop
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	0801aba4 	.word	0x0801aba4
 800e920:	0801b20c 	.word	0x0801b20c
 800e924:	0801abe8 	.word	0x0801abe8
 800e928:	0801b228 	.word	0x0801b228
 800e92c:	0801b248 	.word	0x0801b248
 800e930:	0801b260 	.word	0x0801b260
 800e934:	0801b27c 	.word	0x0801b27c

0800e938 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d106      	bne.n	800e954 <tcp_next_iss+0x1c>
 800e946:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <tcp_next_iss+0x38>)
 800e948:	f640 02af 	movw	r2, #2223	; 0x8af
 800e94c:	4909      	ldr	r1, [pc, #36]	; (800e974 <tcp_next_iss+0x3c>)
 800e94e:	480a      	ldr	r0, [pc, #40]	; (800e978 <tcp_next_iss+0x40>)
 800e950:	f009 fcb4 	bl	80182bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e954:	4b09      	ldr	r3, [pc, #36]	; (800e97c <tcp_next_iss+0x44>)
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	4b09      	ldr	r3, [pc, #36]	; (800e980 <tcp_next_iss+0x48>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4413      	add	r3, r2
 800e95e:	4a07      	ldr	r2, [pc, #28]	; (800e97c <tcp_next_iss+0x44>)
 800e960:	6013      	str	r3, [r2, #0]
  return iss;
 800e962:	4b06      	ldr	r3, [pc, #24]	; (800e97c <tcp_next_iss+0x44>)
 800e964:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e966:	4618      	mov	r0, r3
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	0801aba4 	.word	0x0801aba4
 800e974:	0801b294 	.word	0x0801b294
 800e978:	0801abe8 	.word	0x0801abe8
 800e97c:	20000014 	.word	0x20000014
 800e980:	2000fadc 	.word	0x2000fadc

0800e984 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	4603      	mov	r3, r0
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d106      	bne.n	800e9a6 <tcp_eff_send_mss_netif+0x22>
 800e998:	4b14      	ldr	r3, [pc, #80]	; (800e9ec <tcp_eff_send_mss_netif+0x68>)
 800e99a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e99e:	4914      	ldr	r1, [pc, #80]	; (800e9f0 <tcp_eff_send_mss_netif+0x6c>)
 800e9a0:	4814      	ldr	r0, [pc, #80]	; (800e9f4 <tcp_eff_send_mss_netif+0x70>)
 800e9a2:	f009 fc8b 	bl	80182bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e9ac:	89fb      	ldrh	r3, [r7, #14]
 800e9ae:	e019      	b.n	800e9e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e9b6:	8afb      	ldrh	r3, [r7, #22]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d012      	beq.n	800e9e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e9bc:	2328      	movs	r3, #40	; 0x28
 800e9be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e9c0:	8afa      	ldrh	r2, [r7, #22]
 800e9c2:	8abb      	ldrh	r3, [r7, #20]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d904      	bls.n	800e9d2 <tcp_eff_send_mss_netif+0x4e>
 800e9c8:	8afa      	ldrh	r2, [r7, #22]
 800e9ca:	8abb      	ldrh	r3, [r7, #20]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	e000      	b.n	800e9d4 <tcp_eff_send_mss_netif+0x50>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e9d6:	8a7a      	ldrh	r2, [r7, #18]
 800e9d8:	89fb      	ldrh	r3, [r7, #14]
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	bf28      	it	cs
 800e9de:	4613      	movcs	r3, r2
 800e9e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e9e2:	89fb      	ldrh	r3, [r7, #14]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	0801aba4 	.word	0x0801aba4
 800e9f0:	0801b2b0 	.word	0x0801b2b0
 800e9f4:	0801abe8 	.word	0x0801abe8

0800e9f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d119      	bne.n	800ea40 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ea0c:	4b10      	ldr	r3, [pc, #64]	; (800ea50 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ea0e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ea12:	4910      	ldr	r1, [pc, #64]	; (800ea54 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ea14:	4810      	ldr	r0, [pc, #64]	; (800ea58 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ea16:	f009 fc51 	bl	80182bc <iprintf>

  while (pcb != NULL) {
 800ea1a:	e011      	b.n	800ea40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d108      	bne.n	800ea3a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f7fe fd24 	bl	800d47c <tcp_abort>
      pcb = next;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	60fb      	str	r3, [r7, #12]
 800ea38:	e002      	b.n	800ea40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1ea      	bne.n	800ea1c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	0801aba4 	.word	0x0801aba4
 800ea54:	0801b2d8 	.word	0x0801b2d8
 800ea58:	0801abe8 	.word	0x0801abe8

0800ea5c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d02a      	beq.n	800eac2 <tcp_netif_ip_addr_changed+0x66>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d026      	beq.n	800eac2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ea74:	4b15      	ldr	r3, [pc, #84]	; (800eacc <tcp_netif_ip_addr_changed+0x70>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4619      	mov	r1, r3
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7ff ffbc 	bl	800e9f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ea80:	4b13      	ldr	r3, [pc, #76]	; (800ead0 <tcp_netif_ip_addr_changed+0x74>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4619      	mov	r1, r3
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7ff ffb6 	bl	800e9f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d017      	beq.n	800eac2 <tcp_netif_ip_addr_changed+0x66>
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d013      	beq.n	800eac2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea9a:	4b0e      	ldr	r3, [pc, #56]	; (800ead4 <tcp_netif_ip_addr_changed+0x78>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	60fb      	str	r3, [r7, #12]
 800eaa0:	e00c      	b.n	800eabc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d103      	bne.n	800eab6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1ef      	bne.n	800eaa2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	2000fad8 	.word	0x2000fad8
 800ead0:	2000fae4 	.word	0x2000fae4
 800ead4:	2000fae0 	.word	0x2000fae0

0800ead8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d007      	beq.n	800eaf8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7ff fb53 	bl	800e198 <tcp_segs_free>
    pcb->ooseq = NULL;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eb00:	b590      	push	{r4, r7, lr}
 800eb02:	b08d      	sub	sp, #52	; 0x34
 800eb04:	af04      	add	r7, sp, #16
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d105      	bne.n	800eb1c <tcp_input+0x1c>
 800eb10:	4b9b      	ldr	r3, [pc, #620]	; (800ed80 <tcp_input+0x280>)
 800eb12:	2283      	movs	r2, #131	; 0x83
 800eb14:	499b      	ldr	r1, [pc, #620]	; (800ed84 <tcp_input+0x284>)
 800eb16:	489c      	ldr	r0, [pc, #624]	; (800ed88 <tcp_input+0x288>)
 800eb18:	f009 fbd0 	bl	80182bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	4a9a      	ldr	r2, [pc, #616]	; (800ed8c <tcp_input+0x28c>)
 800eb22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	895b      	ldrh	r3, [r3, #10]
 800eb28:	2b13      	cmp	r3, #19
 800eb2a:	f240 83c4 	bls.w	800f2b6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eb2e:	4b98      	ldr	r3, [pc, #608]	; (800ed90 <tcp_input+0x290>)
 800eb30:	695a      	ldr	r2, [r3, #20]
 800eb32:	4b97      	ldr	r3, [pc, #604]	; (800ed90 <tcp_input+0x290>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f008 fa2b 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f040 83ba 	bne.w	800f2ba <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800eb46:	4b92      	ldr	r3, [pc, #584]	; (800ed90 <tcp_input+0x290>)
 800eb48:	695b      	ldr	r3, [r3, #20]
 800eb4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eb4e:	2be0      	cmp	r3, #224	; 0xe0
 800eb50:	f000 83b3 	beq.w	800f2ba <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eb54:	4b8d      	ldr	r3, [pc, #564]	; (800ed8c <tcp_input+0x28c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fc fb2b 	bl	800b1b8 <lwip_htons>
 800eb62:	4603      	mov	r3, r0
 800eb64:	0b1b      	lsrs	r3, r3, #12
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800eb6e:	7cbb      	ldrb	r3, [r7, #18]
 800eb70:	2b13      	cmp	r3, #19
 800eb72:	f240 83a2 	bls.w	800f2ba <tcp_input+0x7ba>
 800eb76:	7cbb      	ldrb	r3, [r7, #18]
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	891b      	ldrh	r3, [r3, #8]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	f200 839b 	bhi.w	800f2ba <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800eb84:	7cbb      	ldrb	r3, [r7, #18]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	3b14      	subs	r3, #20
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	4b81      	ldr	r3, [pc, #516]	; (800ed94 <tcp_input+0x294>)
 800eb8e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800eb90:	4b81      	ldr	r3, [pc, #516]	; (800ed98 <tcp_input+0x298>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	895a      	ldrh	r2, [r3, #10]
 800eb9a:	7cbb      	ldrb	r3, [r7, #18]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d309      	bcc.n	800ebb6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800eba2:	4b7c      	ldr	r3, [pc, #496]	; (800ed94 <tcp_input+0x294>)
 800eba4:	881a      	ldrh	r2, [r3, #0]
 800eba6:	4b7d      	ldr	r3, [pc, #500]	; (800ed9c <tcp_input+0x29c>)
 800eba8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ebaa:	7cbb      	ldrb	r3, [r7, #18]
 800ebac:	4619      	mov	r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7fd fde8 	bl	800c784 <pbuf_remove_header>
 800ebb4:	e04e      	b.n	800ec54 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d105      	bne.n	800ebca <tcp_input+0xca>
 800ebbe:	4b70      	ldr	r3, [pc, #448]	; (800ed80 <tcp_input+0x280>)
 800ebc0:	22c2      	movs	r2, #194	; 0xc2
 800ebc2:	4977      	ldr	r1, [pc, #476]	; (800eda0 <tcp_input+0x2a0>)
 800ebc4:	4870      	ldr	r0, [pc, #448]	; (800ed88 <tcp_input+0x288>)
 800ebc6:	f009 fb79 	bl	80182bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ebca:	2114      	movs	r1, #20
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7fd fdd9 	bl	800c784 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	895a      	ldrh	r2, [r3, #10]
 800ebd6:	4b71      	ldr	r3, [pc, #452]	; (800ed9c <tcp_input+0x29c>)
 800ebd8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ebda:	4b6e      	ldr	r3, [pc, #440]	; (800ed94 <tcp_input+0x294>)
 800ebdc:	881a      	ldrh	r2, [r3, #0]
 800ebde:	4b6f      	ldr	r3, [pc, #444]	; (800ed9c <tcp_input+0x29c>)
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ebe6:	4b6d      	ldr	r3, [pc, #436]	; (800ed9c <tcp_input+0x29c>)
 800ebe8:	881b      	ldrh	r3, [r3, #0]
 800ebea:	4619      	mov	r1, r3
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7fd fdc9 	bl	800c784 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	895b      	ldrh	r3, [r3, #10]
 800ebf8:	8a3a      	ldrh	r2, [r7, #16]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	f200 835f 	bhi.w	800f2be <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	4a64      	ldr	r2, [pc, #400]	; (800ed98 <tcp_input+0x298>)
 800ec08:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	8a3a      	ldrh	r2, [r7, #16]
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fd fdb6 	bl	800c784 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	891a      	ldrh	r2, [r3, #8]
 800ec1c:	8a3b      	ldrh	r3, [r7, #16]
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	895b      	ldrh	r3, [r3, #10]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <tcp_input+0x13a>
 800ec2e:	4b54      	ldr	r3, [pc, #336]	; (800ed80 <tcp_input+0x280>)
 800ec30:	22df      	movs	r2, #223	; 0xdf
 800ec32:	495c      	ldr	r1, [pc, #368]	; (800eda4 <tcp_input+0x2a4>)
 800ec34:	4854      	ldr	r0, [pc, #336]	; (800ed88 <tcp_input+0x288>)
 800ec36:	f009 fb41 	bl	80182bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	891a      	ldrh	r2, [r3, #8]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	891b      	ldrh	r3, [r3, #8]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d005      	beq.n	800ec54 <tcp_input+0x154>
 800ec48:	4b4d      	ldr	r3, [pc, #308]	; (800ed80 <tcp_input+0x280>)
 800ec4a:	22e0      	movs	r2, #224	; 0xe0
 800ec4c:	4956      	ldr	r1, [pc, #344]	; (800eda8 <tcp_input+0x2a8>)
 800ec4e:	484e      	ldr	r0, [pc, #312]	; (800ed88 <tcp_input+0x288>)
 800ec50:	f009 fb34 	bl	80182bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ec54:	4b4d      	ldr	r3, [pc, #308]	; (800ed8c <tcp_input+0x28c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	881b      	ldrh	r3, [r3, #0]
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	4b4b      	ldr	r3, [pc, #300]	; (800ed8c <tcp_input+0x28c>)
 800ec5e:	681c      	ldr	r4, [r3, #0]
 800ec60:	4610      	mov	r0, r2
 800ec62:	f7fc faa9 	bl	800b1b8 <lwip_htons>
 800ec66:	4603      	mov	r3, r0
 800ec68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ec6a:	4b48      	ldr	r3, [pc, #288]	; (800ed8c <tcp_input+0x28c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	885b      	ldrh	r3, [r3, #2]
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	4b46      	ldr	r3, [pc, #280]	; (800ed8c <tcp_input+0x28c>)
 800ec74:	681c      	ldr	r4, [r3, #0]
 800ec76:	4610      	mov	r0, r2
 800ec78:	f7fc fa9e 	bl	800b1b8 <lwip_htons>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ec80:	4b42      	ldr	r3, [pc, #264]	; (800ed8c <tcp_input+0x28c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	4b41      	ldr	r3, [pc, #260]	; (800ed8c <tcp_input+0x28c>)
 800ec88:	681c      	ldr	r4, [r3, #0]
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	f7fc faa9 	bl	800b1e2 <lwip_htonl>
 800ec90:	4603      	mov	r3, r0
 800ec92:	6063      	str	r3, [r4, #4]
 800ec94:	6863      	ldr	r3, [r4, #4]
 800ec96:	4a45      	ldr	r2, [pc, #276]	; (800edac <tcp_input+0x2ac>)
 800ec98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ec9a:	4b3c      	ldr	r3, [pc, #240]	; (800ed8c <tcp_input+0x28c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	689a      	ldr	r2, [r3, #8]
 800eca0:	4b3a      	ldr	r3, [pc, #232]	; (800ed8c <tcp_input+0x28c>)
 800eca2:	681c      	ldr	r4, [r3, #0]
 800eca4:	4610      	mov	r0, r2
 800eca6:	f7fc fa9c 	bl	800b1e2 <lwip_htonl>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	60a3      	str	r3, [r4, #8]
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	4a3f      	ldr	r2, [pc, #252]	; (800edb0 <tcp_input+0x2b0>)
 800ecb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ecb4:	4b35      	ldr	r3, [pc, #212]	; (800ed8c <tcp_input+0x28c>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	89db      	ldrh	r3, [r3, #14]
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	4b33      	ldr	r3, [pc, #204]	; (800ed8c <tcp_input+0x28c>)
 800ecbe:	681c      	ldr	r4, [r3, #0]
 800ecc0:	4610      	mov	r0, r2
 800ecc2:	f7fc fa79 	bl	800b1b8 <lwip_htons>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ecca:	4b30      	ldr	r3, [pc, #192]	; (800ed8c <tcp_input+0x28c>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	899b      	ldrh	r3, [r3, #12]
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fc fa70 	bl	800b1b8 <lwip_htons>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ece0:	b2da      	uxtb	r2, r3
 800ece2:	4b34      	ldr	r3, [pc, #208]	; (800edb4 <tcp_input+0x2b4>)
 800ece4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	891a      	ldrh	r2, [r3, #8]
 800ecea:	4b33      	ldr	r3, [pc, #204]	; (800edb8 <tcp_input+0x2b8>)
 800ecec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ecee:	4b31      	ldr	r3, [pc, #196]	; (800edb4 <tcp_input+0x2b4>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	f003 0303 	and.w	r3, r3, #3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00c      	beq.n	800ed14 <tcp_input+0x214>
    tcplen++;
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	; (800edb8 <tcp_input+0x2b8>)
 800ecfc:	881b      	ldrh	r3, [r3, #0]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	4b2d      	ldr	r3, [pc, #180]	; (800edb8 <tcp_input+0x2b8>)
 800ed04:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	891a      	ldrh	r2, [r3, #8]
 800ed0a:	4b2b      	ldr	r3, [pc, #172]	; (800edb8 <tcp_input+0x2b8>)
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	f200 82d7 	bhi.w	800f2c2 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ed14:	2300      	movs	r3, #0
 800ed16:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed18:	4b28      	ldr	r3, [pc, #160]	; (800edbc <tcp_input+0x2bc>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	61fb      	str	r3, [r7, #28]
 800ed1e:	e09d      	b.n	800ee5c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	7d1b      	ldrb	r3, [r3, #20]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d105      	bne.n	800ed34 <tcp_input+0x234>
 800ed28:	4b15      	ldr	r3, [pc, #84]	; (800ed80 <tcp_input+0x280>)
 800ed2a:	22fb      	movs	r2, #251	; 0xfb
 800ed2c:	4924      	ldr	r1, [pc, #144]	; (800edc0 <tcp_input+0x2c0>)
 800ed2e:	4816      	ldr	r0, [pc, #88]	; (800ed88 <tcp_input+0x288>)
 800ed30:	f009 fac4 	bl	80182bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	7d1b      	ldrb	r3, [r3, #20]
 800ed38:	2b0a      	cmp	r3, #10
 800ed3a:	d105      	bne.n	800ed48 <tcp_input+0x248>
 800ed3c:	4b10      	ldr	r3, [pc, #64]	; (800ed80 <tcp_input+0x280>)
 800ed3e:	22fc      	movs	r2, #252	; 0xfc
 800ed40:	4920      	ldr	r1, [pc, #128]	; (800edc4 <tcp_input+0x2c4>)
 800ed42:	4811      	ldr	r0, [pc, #68]	; (800ed88 <tcp_input+0x288>)
 800ed44:	f009 faba 	bl	80182bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d105      	bne.n	800ed5c <tcp_input+0x25c>
 800ed50:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <tcp_input+0x280>)
 800ed52:	22fd      	movs	r2, #253	; 0xfd
 800ed54:	491c      	ldr	r1, [pc, #112]	; (800edc8 <tcp_input+0x2c8>)
 800ed56:	480c      	ldr	r0, [pc, #48]	; (800ed88 <tcp_input+0x288>)
 800ed58:	f009 fab0 	bl	80182bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	7a1b      	ldrb	r3, [r3, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d033      	beq.n	800edcc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	7a1a      	ldrb	r2, [r3, #8]
 800ed68:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <tcp_input+0x290>)
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed70:	3301      	adds	r3, #1
 800ed72:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d029      	beq.n	800edcc <tcp_input+0x2cc>
      prev = pcb;
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	61bb      	str	r3, [r7, #24]
      continue;
 800ed7c:	e06b      	b.n	800ee56 <tcp_input+0x356>
 800ed7e:	bf00      	nop
 800ed80:	0801b30c 	.word	0x0801b30c
 800ed84:	0801b340 	.word	0x0801b340
 800ed88:	0801b358 	.word	0x0801b358
 800ed8c:	20008c68 	.word	0x20008c68
 800ed90:	2000c3a4 	.word	0x2000c3a4
 800ed94:	20008c6c 	.word	0x20008c6c
 800ed98:	20008c70 	.word	0x20008c70
 800ed9c:	20008c6e 	.word	0x20008c6e
 800eda0:	0801b380 	.word	0x0801b380
 800eda4:	0801b390 	.word	0x0801b390
 800eda8:	0801b39c 	.word	0x0801b39c
 800edac:	20008c78 	.word	0x20008c78
 800edb0:	20008c7c 	.word	0x20008c7c
 800edb4:	20008c84 	.word	0x20008c84
 800edb8:	20008c82 	.word	0x20008c82
 800edbc:	2000fad8 	.word	0x2000fad8
 800edc0:	0801b3bc 	.word	0x0801b3bc
 800edc4:	0801b3e4 	.word	0x0801b3e4
 800edc8:	0801b410 	.word	0x0801b410
    }

    if (pcb->remote_port == tcphdr->src &&
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	8b1a      	ldrh	r2, [r3, #24]
 800edd0:	4b94      	ldr	r3, [pc, #592]	; (800f024 <tcp_input+0x524>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	429a      	cmp	r2, r3
 800edda:	d13a      	bne.n	800ee52 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	8ada      	ldrh	r2, [r3, #22]
 800ede0:	4b90      	ldr	r3, [pc, #576]	; (800f024 <tcp_input+0x524>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	885b      	ldrh	r3, [r3, #2]
 800ede6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ede8:	429a      	cmp	r2, r3
 800edea:	d132      	bne.n	800ee52 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	685a      	ldr	r2, [r3, #4]
 800edf0:	4b8d      	ldr	r3, [pc, #564]	; (800f028 <tcp_input+0x528>)
 800edf2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d12c      	bne.n	800ee52 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	4b8a      	ldr	r3, [pc, #552]	; (800f028 <tcp_input+0x528>)
 800edfe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d126      	bne.n	800ee52 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	69fa      	ldr	r2, [r7, #28]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d106      	bne.n	800ee1c <tcp_input+0x31c>
 800ee0e:	4b87      	ldr	r3, [pc, #540]	; (800f02c <tcp_input+0x52c>)
 800ee10:	f240 120d 	movw	r2, #269	; 0x10d
 800ee14:	4986      	ldr	r1, [pc, #536]	; (800f030 <tcp_input+0x530>)
 800ee16:	4887      	ldr	r0, [pc, #540]	; (800f034 <tcp_input+0x534>)
 800ee18:	f009 fa50 	bl	80182bc <iprintf>
      if (prev != NULL) {
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00a      	beq.n	800ee38 <tcp_input+0x338>
        prev->next = pcb->next;
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	68da      	ldr	r2, [r3, #12]
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ee2a:	4b83      	ldr	r3, [pc, #524]	; (800f038 <tcp_input+0x538>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ee32:	4a81      	ldr	r2, [pc, #516]	; (800f038 <tcp_input+0x538>)
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	69fa      	ldr	r2, [r7, #28]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d111      	bne.n	800ee66 <tcp_input+0x366>
 800ee42:	4b7a      	ldr	r3, [pc, #488]	; (800f02c <tcp_input+0x52c>)
 800ee44:	f240 1215 	movw	r2, #277	; 0x115
 800ee48:	497c      	ldr	r1, [pc, #496]	; (800f03c <tcp_input+0x53c>)
 800ee4a:	487a      	ldr	r0, [pc, #488]	; (800f034 <tcp_input+0x534>)
 800ee4c:	f009 fa36 	bl	80182bc <iprintf>
      break;
 800ee50:	e009      	b.n	800ee66 <tcp_input+0x366>
    }
    prev = pcb;
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	61fb      	str	r3, [r7, #28]
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f47f af5e 	bne.w	800ed20 <tcp_input+0x220>
 800ee64:	e000      	b.n	800ee68 <tcp_input+0x368>
      break;
 800ee66:	bf00      	nop
  }

  if (pcb == NULL) {
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f040 8095 	bne.w	800ef9a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee70:	4b73      	ldr	r3, [pc, #460]	; (800f040 <tcp_input+0x540>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	61fb      	str	r3, [r7, #28]
 800ee76:	e03f      	b.n	800eef8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	7d1b      	ldrb	r3, [r3, #20]
 800ee7c:	2b0a      	cmp	r3, #10
 800ee7e:	d006      	beq.n	800ee8e <tcp_input+0x38e>
 800ee80:	4b6a      	ldr	r3, [pc, #424]	; (800f02c <tcp_input+0x52c>)
 800ee82:	f240 121f 	movw	r2, #287	; 0x11f
 800ee86:	496f      	ldr	r1, [pc, #444]	; (800f044 <tcp_input+0x544>)
 800ee88:	486a      	ldr	r0, [pc, #424]	; (800f034 <tcp_input+0x534>)
 800ee8a:	f009 fa17 	bl	80182bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	7a1b      	ldrb	r3, [r3, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d009      	beq.n	800eeaa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	7a1a      	ldrb	r2, [r3, #8]
 800ee9a:	4b63      	ldr	r3, [pc, #396]	; (800f028 <tcp_input+0x528>)
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eea2:	3301      	adds	r3, #1
 800eea4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d122      	bne.n	800eef0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	8b1a      	ldrh	r2, [r3, #24]
 800eeae:	4b5d      	ldr	r3, [pc, #372]	; (800f024 <tcp_input+0x524>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d11b      	bne.n	800eef2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	8ada      	ldrh	r2, [r3, #22]
 800eebe:	4b59      	ldr	r3, [pc, #356]	; (800f024 <tcp_input+0x524>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	885b      	ldrh	r3, [r3, #2]
 800eec4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d113      	bne.n	800eef2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	685a      	ldr	r2, [r3, #4]
 800eece:	4b56      	ldr	r3, [pc, #344]	; (800f028 <tcp_input+0x528>)
 800eed0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d10d      	bne.n	800eef2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	4b53      	ldr	r3, [pc, #332]	; (800f028 <tcp_input+0x528>)
 800eedc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eede:	429a      	cmp	r2, r3
 800eee0:	d107      	bne.n	800eef2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800eee2:	69f8      	ldr	r0, [r7, #28]
 800eee4:	f000 fb52 	bl	800f58c <tcp_timewait_input>
        }
        pbuf_free(p);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f7fd fcd1 	bl	800c890 <pbuf_free>
        return;
 800eeee:	e1ee      	b.n	800f2ce <tcp_input+0x7ce>
        continue;
 800eef0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	61fb      	str	r3, [r7, #28]
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1bc      	bne.n	800ee78 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef02:	4b51      	ldr	r3, [pc, #324]	; (800f048 <tcp_input+0x548>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	e02a      	b.n	800ef60 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	7a1b      	ldrb	r3, [r3, #8]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00c      	beq.n	800ef2c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	7a1a      	ldrb	r2, [r3, #8]
 800ef16:	4b44      	ldr	r3, [pc, #272]	; (800f028 <tcp_input+0x528>)
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef1e:	3301      	adds	r3, #1
 800ef20:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d002      	beq.n	800ef2c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	61bb      	str	r3, [r7, #24]
        continue;
 800ef2a:	e016      	b.n	800ef5a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	8ada      	ldrh	r2, [r3, #22]
 800ef30:	4b3c      	ldr	r3, [pc, #240]	; (800f024 <tcp_input+0x524>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	885b      	ldrh	r3, [r3, #2]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d10c      	bne.n	800ef56 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	4b39      	ldr	r3, [pc, #228]	; (800f028 <tcp_input+0x528>)
 800ef42:	695b      	ldr	r3, [r3, #20]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d00f      	beq.n	800ef68 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00d      	beq.n	800ef6a <tcp_input+0x46a>
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d009      	beq.n	800ef6a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1d1      	bne.n	800ef0a <tcp_input+0x40a>
 800ef66:	e000      	b.n	800ef6a <tcp_input+0x46a>
            break;
 800ef68:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d014      	beq.n	800ef9a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00a      	beq.n	800ef8c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	68da      	ldr	r2, [r3, #12]
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ef7e:	4b32      	ldr	r3, [pc, #200]	; (800f048 <tcp_input+0x548>)
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ef86:	4a30      	ldr	r2, [pc, #192]	; (800f048 <tcp_input+0x548>)
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ef8c:	6978      	ldr	r0, [r7, #20]
 800ef8e:	f000 f9ff 	bl	800f390 <tcp_listen_input>
      }
      pbuf_free(p);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7fd fc7c 	bl	800c890 <pbuf_free>
      return;
 800ef98:	e199      	b.n	800f2ce <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f000 8160 	beq.w	800f262 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800efa2:	4b2a      	ldr	r3, [pc, #168]	; (800f04c <tcp_input+0x54c>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	891a      	ldrh	r2, [r3, #8]
 800efac:	4b27      	ldr	r3, [pc, #156]	; (800f04c <tcp_input+0x54c>)
 800efae:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800efb0:	4a26      	ldr	r2, [pc, #152]	; (800f04c <tcp_input+0x54c>)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800efb6:	4b1b      	ldr	r3, [pc, #108]	; (800f024 <tcp_input+0x524>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a24      	ldr	r2, [pc, #144]	; (800f04c <tcp_input+0x54c>)
 800efbc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800efbe:	4b24      	ldr	r3, [pc, #144]	; (800f050 <tcp_input+0x550>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800efc4:	4b23      	ldr	r3, [pc, #140]	; (800f054 <tcp_input+0x554>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800efca:	4b23      	ldr	r3, [pc, #140]	; (800f058 <tcp_input+0x558>)
 800efcc:	2200      	movs	r2, #0
 800efce:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800efd0:	4b22      	ldr	r3, [pc, #136]	; (800f05c <tcp_input+0x55c>)
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	f003 0308 	and.w	r3, r3, #8
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d006      	beq.n	800efea <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7b5b      	ldrb	r3, [r3, #13]
 800efe0:	f043 0301 	orr.w	r3, r3, #1
 800efe4:	b2da      	uxtb	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d038      	beq.n	800f064 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eff2:	69f8      	ldr	r0, [r7, #28]
 800eff4:	f7ff f854 	bl	800e0a0 <tcp_process_refused_data>
 800eff8:	4603      	mov	r3, r0
 800effa:	f113 0f0d 	cmn.w	r3, #13
 800effe:	d007      	beq.n	800f010 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f004:	2b00      	cmp	r3, #0
 800f006:	d02d      	beq.n	800f064 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f008:	4b15      	ldr	r3, [pc, #84]	; (800f060 <tcp_input+0x560>)
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d029      	beq.n	800f064 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f014:	2b00      	cmp	r3, #0
 800f016:	f040 8104 	bne.w	800f222 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f01a:	69f8      	ldr	r0, [r7, #28]
 800f01c:	f003 fe26 	bl	8012c6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f020:	e0ff      	b.n	800f222 <tcp_input+0x722>
 800f022:	bf00      	nop
 800f024:	20008c68 	.word	0x20008c68
 800f028:	2000c3a4 	.word	0x2000c3a4
 800f02c:	0801b30c 	.word	0x0801b30c
 800f030:	0801b438 	.word	0x0801b438
 800f034:	0801b358 	.word	0x0801b358
 800f038:	2000fad8 	.word	0x2000fad8
 800f03c:	0801b464 	.word	0x0801b464
 800f040:	2000fae8 	.word	0x2000fae8
 800f044:	0801b490 	.word	0x0801b490
 800f048:	2000fae0 	.word	0x2000fae0
 800f04c:	20008c58 	.word	0x20008c58
 800f050:	20008c88 	.word	0x20008c88
 800f054:	20008c85 	.word	0x20008c85
 800f058:	20008c80 	.word	0x20008c80
 800f05c:	20008c84 	.word	0x20008c84
 800f060:	20008c82 	.word	0x20008c82
      }
    }
    tcp_input_pcb = pcb;
 800f064:	4a9b      	ldr	r2, [pc, #620]	; (800f2d4 <tcp_input+0x7d4>)
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f06a:	69f8      	ldr	r0, [r7, #28]
 800f06c:	f000 fb0a 	bl	800f684 <tcp_process>
 800f070:	4603      	mov	r3, r0
 800f072:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f074:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f078:	f113 0f0d 	cmn.w	r3, #13
 800f07c:	f000 80d3 	beq.w	800f226 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f080:	4b95      	ldr	r3, [pc, #596]	; (800f2d8 <tcp_input+0x7d8>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	f003 0308 	and.w	r3, r3, #8
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d015      	beq.n	800f0b8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f092:	2b00      	cmp	r3, #0
 800f094:	d008      	beq.n	800f0a8 <tcp_input+0x5a8>
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f09c:	69fa      	ldr	r2, [r7, #28]
 800f09e:	6912      	ldr	r2, [r2, #16]
 800f0a0:	f06f 010d 	mvn.w	r1, #13
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f0a8:	69f9      	ldr	r1, [r7, #28]
 800f0aa:	488c      	ldr	r0, [pc, #560]	; (800f2dc <tcp_input+0x7dc>)
 800f0ac:	f7ff fbb0 	bl	800e810 <tcp_pcb_remove>
        tcp_free(pcb);
 800f0b0:	69f8      	ldr	r0, [r7, #28]
 800f0b2:	f7fd fea9 	bl	800ce08 <tcp_free>
 800f0b6:	e0c1      	b.n	800f23c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f0bc:	4b88      	ldr	r3, [pc, #544]	; (800f2e0 <tcp_input+0x7e0>)
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d01d      	beq.n	800f100 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f0c4:	4b86      	ldr	r3, [pc, #536]	; (800f2e0 <tcp_input+0x7e0>)
 800f0c6:	881b      	ldrh	r3, [r3, #0]
 800f0c8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f0ca:	69fb      	ldr	r3, [r7, #28]
 800f0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00a      	beq.n	800f0ea <tcp_input+0x5ea>
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0da:	69fa      	ldr	r2, [r7, #28]
 800f0dc:	6910      	ldr	r0, [r2, #16]
 800f0de:	89fa      	ldrh	r2, [r7, #14]
 800f0e0:	69f9      	ldr	r1, [r7, #28]
 800f0e2:	4798      	blx	r3
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	74fb      	strb	r3, [r7, #19]
 800f0e8:	e001      	b.n	800f0ee <tcp_input+0x5ee>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f0ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0f2:	f113 0f0d 	cmn.w	r3, #13
 800f0f6:	f000 8098 	beq.w	800f22a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f0fa:	4b79      	ldr	r3, [pc, #484]	; (800f2e0 <tcp_input+0x7e0>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f100:	69f8      	ldr	r0, [r7, #28]
 800f102:	f000 f905 	bl	800f310 <tcp_input_delayed_close>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f040 8090 	bne.w	800f22e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f10e:	4b75      	ldr	r3, [pc, #468]	; (800f2e4 <tcp_input+0x7e4>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d041      	beq.n	800f19a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d006      	beq.n	800f12c <tcp_input+0x62c>
 800f11e:	4b72      	ldr	r3, [pc, #456]	; (800f2e8 <tcp_input+0x7e8>)
 800f120:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f124:	4971      	ldr	r1, [pc, #452]	; (800f2ec <tcp_input+0x7ec>)
 800f126:	4872      	ldr	r0, [pc, #456]	; (800f2f0 <tcp_input+0x7f0>)
 800f128:	f009 f8c8 	bl	80182bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f003 0310 	and.w	r3, r3, #16
 800f134:	2b00      	cmp	r3, #0
 800f136:	d008      	beq.n	800f14a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f138:	4b6a      	ldr	r3, [pc, #424]	; (800f2e4 <tcp_input+0x7e4>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7fd fba7 	bl	800c890 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f142:	69f8      	ldr	r0, [r7, #28]
 800f144:	f7fe f99a 	bl	800d47c <tcp_abort>
            goto aborted;
 800f148:	e078      	b.n	800f23c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00c      	beq.n	800f16e <tcp_input+0x66e>
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	6918      	ldr	r0, [r3, #16]
 800f15e:	4b61      	ldr	r3, [pc, #388]	; (800f2e4 <tcp_input+0x7e4>)
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	2300      	movs	r3, #0
 800f164:	69f9      	ldr	r1, [r7, #28]
 800f166:	47a0      	blx	r4
 800f168:	4603      	mov	r3, r0
 800f16a:	74fb      	strb	r3, [r7, #19]
 800f16c:	e008      	b.n	800f180 <tcp_input+0x680>
 800f16e:	4b5d      	ldr	r3, [pc, #372]	; (800f2e4 <tcp_input+0x7e4>)
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	2300      	movs	r3, #0
 800f174:	69f9      	ldr	r1, [r7, #28]
 800f176:	2000      	movs	r0, #0
 800f178:	f7ff f884 	bl	800e284 <tcp_recv_null>
 800f17c:	4603      	mov	r3, r0
 800f17e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f180:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f184:	f113 0f0d 	cmn.w	r3, #13
 800f188:	d053      	beq.n	800f232 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f18a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d003      	beq.n	800f19a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f192:	4b54      	ldr	r3, [pc, #336]	; (800f2e4 <tcp_input+0x7e4>)
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f19a:	4b4f      	ldr	r3, [pc, #316]	; (800f2d8 <tcp_input+0x7d8>)
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	f003 0320 	and.w	r3, r3, #32
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d030      	beq.n	800f208 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d009      	beq.n	800f1c2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1b2:	7b5a      	ldrb	r2, [r3, #13]
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1b8:	f042 0220 	orr.w	r2, r2, #32
 800f1bc:	b2d2      	uxtb	r2, r2
 800f1be:	735a      	strb	r2, [r3, #13]
 800f1c0:	e022      	b.n	800f208 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f1ca:	d005      	beq.n	800f1d8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00b      	beq.n	800f1fa <tcp_input+0x6fa>
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	6918      	ldr	r0, [r3, #16]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	69f9      	ldr	r1, [r7, #28]
 800f1f2:	47a0      	blx	r4
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	74fb      	strb	r3, [r7, #19]
 800f1f8:	e001      	b.n	800f1fe <tcp_input+0x6fe>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f1fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f202:	f113 0f0d 	cmn.w	r3, #13
 800f206:	d016      	beq.n	800f236 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f208:	4b32      	ldr	r3, [pc, #200]	; (800f2d4 <tcp_input+0x7d4>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f000 f87e 	bl	800f310 <tcp_input_delayed_close>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10f      	bne.n	800f23a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f21a:	69f8      	ldr	r0, [r7, #28]
 800f21c:	f002 ff10 	bl	8012040 <tcp_output>
 800f220:	e00c      	b.n	800f23c <tcp_input+0x73c>
        goto aborted;
 800f222:	bf00      	nop
 800f224:	e00a      	b.n	800f23c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f226:	bf00      	nop
 800f228:	e008      	b.n	800f23c <tcp_input+0x73c>
              goto aborted;
 800f22a:	bf00      	nop
 800f22c:	e006      	b.n	800f23c <tcp_input+0x73c>
          goto aborted;
 800f22e:	bf00      	nop
 800f230:	e004      	b.n	800f23c <tcp_input+0x73c>
            goto aborted;
 800f232:	bf00      	nop
 800f234:	e002      	b.n	800f23c <tcp_input+0x73c>
              goto aborted;
 800f236:	bf00      	nop
 800f238:	e000      	b.n	800f23c <tcp_input+0x73c>
          goto aborted;
 800f23a:	bf00      	nop
    tcp_input_pcb = NULL;
 800f23c:	4b25      	ldr	r3, [pc, #148]	; (800f2d4 <tcp_input+0x7d4>)
 800f23e:	2200      	movs	r2, #0
 800f240:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f242:	4b28      	ldr	r3, [pc, #160]	; (800f2e4 <tcp_input+0x7e4>)
 800f244:	2200      	movs	r2, #0
 800f246:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f248:	4b2a      	ldr	r3, [pc, #168]	; (800f2f4 <tcp_input+0x7f4>)
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d03d      	beq.n	800f2cc <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800f250:	4b28      	ldr	r3, [pc, #160]	; (800f2f4 <tcp_input+0x7f4>)
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	4618      	mov	r0, r3
 800f256:	f7fd fb1b 	bl	800c890 <pbuf_free>
      inseg.p = NULL;
 800f25a:	4b26      	ldr	r3, [pc, #152]	; (800f2f4 <tcp_input+0x7f4>)
 800f25c:	2200      	movs	r2, #0
 800f25e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f260:	e034      	b.n	800f2cc <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f262:	4b25      	ldr	r3, [pc, #148]	; (800f2f8 <tcp_input+0x7f8>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	899b      	ldrh	r3, [r3, #12]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fb ffa4 	bl	800b1b8 <lwip_htons>
 800f270:	4603      	mov	r3, r0
 800f272:	b2db      	uxtb	r3, r3
 800f274:	f003 0304 	and.w	r3, r3, #4
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d118      	bne.n	800f2ae <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f27c:	4b1f      	ldr	r3, [pc, #124]	; (800f2fc <tcp_input+0x7fc>)
 800f27e:	6819      	ldr	r1, [r3, #0]
 800f280:	4b1f      	ldr	r3, [pc, #124]	; (800f300 <tcp_input+0x800>)
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	461a      	mov	r2, r3
 800f286:	4b1f      	ldr	r3, [pc, #124]	; (800f304 <tcp_input+0x804>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f28c:	4b1a      	ldr	r3, [pc, #104]	; (800f2f8 <tcp_input+0x7f8>)
 800f28e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f290:	885b      	ldrh	r3, [r3, #2]
 800f292:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f294:	4a18      	ldr	r2, [pc, #96]	; (800f2f8 <tcp_input+0x7f8>)
 800f296:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f298:	8812      	ldrh	r2, [r2, #0]
 800f29a:	b292      	uxth	r2, r2
 800f29c:	9202      	str	r2, [sp, #8]
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	4b19      	ldr	r3, [pc, #100]	; (800f308 <tcp_input+0x808>)
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4b19      	ldr	r3, [pc, #100]	; (800f30c <tcp_input+0x80c>)
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	f003 fc8d 	bl	8012bc8 <tcp_rst>
    pbuf_free(p);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7fd faee 	bl	800c890 <pbuf_free>
  return;
 800f2b4:	e00a      	b.n	800f2cc <tcp_input+0x7cc>
    goto dropped;
 800f2b6:	bf00      	nop
 800f2b8:	e004      	b.n	800f2c4 <tcp_input+0x7c4>
dropped:
 800f2ba:	bf00      	nop
 800f2bc:	e002      	b.n	800f2c4 <tcp_input+0x7c4>
      goto dropped;
 800f2be:	bf00      	nop
 800f2c0:	e000      	b.n	800f2c4 <tcp_input+0x7c4>
      goto dropped;
 800f2c2:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7fd fae3 	bl	800c890 <pbuf_free>
 800f2ca:	e000      	b.n	800f2ce <tcp_input+0x7ce>
  return;
 800f2cc:	bf00      	nop
}
 800f2ce:	3724      	adds	r7, #36	; 0x24
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd90      	pop	{r4, r7, pc}
 800f2d4:	2000faec 	.word	0x2000faec
 800f2d8:	20008c85 	.word	0x20008c85
 800f2dc:	2000fad8 	.word	0x2000fad8
 800f2e0:	20008c80 	.word	0x20008c80
 800f2e4:	20008c88 	.word	0x20008c88
 800f2e8:	0801b30c 	.word	0x0801b30c
 800f2ec:	0801b4c0 	.word	0x0801b4c0
 800f2f0:	0801b358 	.word	0x0801b358
 800f2f4:	20008c58 	.word	0x20008c58
 800f2f8:	20008c68 	.word	0x20008c68
 800f2fc:	20008c7c 	.word	0x20008c7c
 800f300:	20008c82 	.word	0x20008c82
 800f304:	20008c78 	.word	0x20008c78
 800f308:	2000c3b4 	.word	0x2000c3b4
 800f30c:	2000c3b8 	.word	0x2000c3b8

0800f310 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d106      	bne.n	800f32c <tcp_input_delayed_close+0x1c>
 800f31e:	4b17      	ldr	r3, [pc, #92]	; (800f37c <tcp_input_delayed_close+0x6c>)
 800f320:	f240 225a 	movw	r2, #602	; 0x25a
 800f324:	4916      	ldr	r1, [pc, #88]	; (800f380 <tcp_input_delayed_close+0x70>)
 800f326:	4817      	ldr	r0, [pc, #92]	; (800f384 <tcp_input_delayed_close+0x74>)
 800f328:	f008 ffc8 	bl	80182bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f32c:	4b16      	ldr	r3, [pc, #88]	; (800f388 <tcp_input_delayed_close+0x78>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	f003 0310 	and.w	r3, r3, #16
 800f334:	2b00      	cmp	r3, #0
 800f336:	d01c      	beq.n	800f372 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	8b5b      	ldrh	r3, [r3, #26]
 800f33c:	f003 0310 	and.w	r3, r3, #16
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10d      	bne.n	800f360 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d008      	beq.n	800f360 <tcp_input_delayed_close+0x50>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	6912      	ldr	r2, [r2, #16]
 800f358:	f06f 010e 	mvn.w	r1, #14
 800f35c:	4610      	mov	r0, r2
 800f35e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	480a      	ldr	r0, [pc, #40]	; (800f38c <tcp_input_delayed_close+0x7c>)
 800f364:	f7ff fa54 	bl	800e810 <tcp_pcb_remove>
    tcp_free(pcb);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7fd fd4d 	bl	800ce08 <tcp_free>
    return 1;
 800f36e:	2301      	movs	r3, #1
 800f370:	e000      	b.n	800f374 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	0801b30c 	.word	0x0801b30c
 800f380:	0801b4dc 	.word	0x0801b4dc
 800f384:	0801b358 	.word	0x0801b358
 800f388:	20008c85 	.word	0x20008c85
 800f38c:	2000fad8 	.word	0x2000fad8

0800f390 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f390:	b590      	push	{r4, r7, lr}
 800f392:	b08b      	sub	sp, #44	; 0x2c
 800f394:	af04      	add	r7, sp, #16
 800f396:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f398:	4b6f      	ldr	r3, [pc, #444]	; (800f558 <tcp_listen_input+0x1c8>)
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	f003 0304 	and.w	r3, r3, #4
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f040 80d3 	bne.w	800f54c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d106      	bne.n	800f3ba <tcp_listen_input+0x2a>
 800f3ac:	4b6b      	ldr	r3, [pc, #428]	; (800f55c <tcp_listen_input+0x1cc>)
 800f3ae:	f240 2281 	movw	r2, #641	; 0x281
 800f3b2:	496b      	ldr	r1, [pc, #428]	; (800f560 <tcp_listen_input+0x1d0>)
 800f3b4:	486b      	ldr	r0, [pc, #428]	; (800f564 <tcp_listen_input+0x1d4>)
 800f3b6:	f008 ff81 	bl	80182bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f3ba:	4b67      	ldr	r3, [pc, #412]	; (800f558 <tcp_listen_input+0x1c8>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	f003 0310 	and.w	r3, r3, #16
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d019      	beq.n	800f3fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3c6:	4b68      	ldr	r3, [pc, #416]	; (800f568 <tcp_listen_input+0x1d8>)
 800f3c8:	6819      	ldr	r1, [r3, #0]
 800f3ca:	4b68      	ldr	r3, [pc, #416]	; (800f56c <tcp_listen_input+0x1dc>)
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	4b67      	ldr	r3, [pc, #412]	; (800f570 <tcp_listen_input+0x1e0>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3d6:	4b67      	ldr	r3, [pc, #412]	; (800f574 <tcp_listen_input+0x1e4>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3da:	885b      	ldrh	r3, [r3, #2]
 800f3dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3de:	4a65      	ldr	r2, [pc, #404]	; (800f574 <tcp_listen_input+0x1e4>)
 800f3e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3e2:	8812      	ldrh	r2, [r2, #0]
 800f3e4:	b292      	uxth	r2, r2
 800f3e6:	9202      	str	r2, [sp, #8]
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	4b63      	ldr	r3, [pc, #396]	; (800f578 <tcp_listen_input+0x1e8>)
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	4b63      	ldr	r3, [pc, #396]	; (800f57c <tcp_listen_input+0x1ec>)
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f003 fbe8 	bl	8012bc8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f3f8:	e0aa      	b.n	800f550 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800f3fa:	4b57      	ldr	r3, [pc, #348]	; (800f558 <tcp_listen_input+0x1c8>)
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	f003 0302 	and.w	r3, r3, #2
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 80a4 	beq.w	800f550 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	7d5b      	ldrb	r3, [r3, #21]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7ff f85d 	bl	800e4cc <tcp_alloc>
 800f412:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d111      	bne.n	800f43e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00a      	beq.n	800f438 <tcp_listen_input+0xa8>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	699b      	ldr	r3, [r3, #24]
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	6910      	ldr	r0, [r2, #16]
 800f42a:	f04f 32ff 	mov.w	r2, #4294967295
 800f42e:	2100      	movs	r1, #0
 800f430:	4798      	blx	r3
 800f432:	4603      	mov	r3, r0
 800f434:	73bb      	strb	r3, [r7, #14]
      return;
 800f436:	e08c      	b.n	800f552 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f438:	23f0      	movs	r3, #240	; 0xf0
 800f43a:	73bb      	strb	r3, [r7, #14]
      return;
 800f43c:	e089      	b.n	800f552 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f43e:	4b50      	ldr	r3, [pc, #320]	; (800f580 <tcp_listen_input+0x1f0>)
 800f440:	695a      	ldr	r2, [r3, #20]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f446:	4b4e      	ldr	r3, [pc, #312]	; (800f580 <tcp_listen_input+0x1f0>)
 800f448:	691a      	ldr	r2, [r3, #16]
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	8ada      	ldrh	r2, [r3, #22]
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f456:	4b47      	ldr	r3, [pc, #284]	; (800f574 <tcp_listen_input+0x1e4>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	b29a      	uxth	r2, r3
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2203      	movs	r2, #3
 800f466:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f468:	4b41      	ldr	r3, [pc, #260]	; (800f570 <tcp_listen_input+0x1e0>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f47a:	6978      	ldr	r0, [r7, #20]
 800f47c:	f7ff fa5c 	bl	800e938 <tcp_next_iss>
 800f480:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	693a      	ldr	r2, [r7, #16]
 800f486:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	693a      	ldr	r2, [r7, #16]
 800f492:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f49a:	4b35      	ldr	r3, [pc, #212]	; (800f570 <tcp_listen_input+0x1e0>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	1e5a      	subs	r2, r3, #1
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	691a      	ldr	r2, [r3, #16]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	7a5b      	ldrb	r3, [r3, #9]
 800f4b6:	f003 030c 	and.w	r3, r3, #12
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	7a1a      	ldrb	r2, [r3, #8]
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f4c8:	4b2e      	ldr	r3, [pc, #184]	; (800f584 <tcp_listen_input+0x1f4>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	60da      	str	r2, [r3, #12]
 800f4d0:	4a2c      	ldr	r2, [pc, #176]	; (800f584 <tcp_listen_input+0x1f4>)
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	6013      	str	r3, [r2, #0]
 800f4d6:	f003 fd39 	bl	8012f4c <tcp_timer_needed>
 800f4da:	4b2b      	ldr	r3, [pc, #172]	; (800f588 <tcp_listen_input+0x1f8>)
 800f4dc:	2201      	movs	r2, #1
 800f4de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f4e0:	6978      	ldr	r0, [r7, #20]
 800f4e2:	f001 fd8f 	bl	8011004 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f4e6:	4b23      	ldr	r3, [pc, #140]	; (800f574 <tcp_listen_input+0x1e4>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	89db      	ldrh	r3, [r3, #14]
 800f4ec:	b29a      	uxth	r2, r3
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	3304      	adds	r3, #4
 800f508:	4618      	mov	r0, r3
 800f50a:	f007 fa91 	bl	8016a30 <ip4_route>
 800f50e:	4601      	mov	r1, r0
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	3304      	adds	r3, #4
 800f514:	461a      	mov	r2, r3
 800f516:	4620      	mov	r0, r4
 800f518:	f7ff fa34 	bl	800e984 <tcp_eff_send_mss_netif>
 800f51c:	4603      	mov	r3, r0
 800f51e:	461a      	mov	r2, r3
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f524:	2112      	movs	r1, #18
 800f526:	6978      	ldr	r0, [r7, #20]
 800f528:	f002 fc9c 	bl	8011e64 <tcp_enqueue_flags>
 800f52c:	4603      	mov	r3, r0
 800f52e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d004      	beq.n	800f542 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f538:	2100      	movs	r1, #0
 800f53a:	6978      	ldr	r0, [r7, #20]
 800f53c:	f7fd fee0 	bl	800d300 <tcp_abandon>
      return;
 800f540:	e007      	b.n	800f552 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800f542:	6978      	ldr	r0, [r7, #20]
 800f544:	f002 fd7c 	bl	8012040 <tcp_output>
  return;
 800f548:	bf00      	nop
 800f54a:	e001      	b.n	800f550 <tcp_listen_input+0x1c0>
    return;
 800f54c:	bf00      	nop
 800f54e:	e000      	b.n	800f552 <tcp_listen_input+0x1c2>
  return;
 800f550:	bf00      	nop
}
 800f552:	371c      	adds	r7, #28
 800f554:	46bd      	mov	sp, r7
 800f556:	bd90      	pop	{r4, r7, pc}
 800f558:	20008c84 	.word	0x20008c84
 800f55c:	0801b30c 	.word	0x0801b30c
 800f560:	0801b504 	.word	0x0801b504
 800f564:	0801b358 	.word	0x0801b358
 800f568:	20008c7c 	.word	0x20008c7c
 800f56c:	20008c82 	.word	0x20008c82
 800f570:	20008c78 	.word	0x20008c78
 800f574:	20008c68 	.word	0x20008c68
 800f578:	2000c3b4 	.word	0x2000c3b4
 800f57c:	2000c3b8 	.word	0x2000c3b8
 800f580:	2000c3a4 	.word	0x2000c3a4
 800f584:	2000fad8 	.word	0x2000fad8
 800f588:	2000fad4 	.word	0x2000fad4

0800f58c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af04      	add	r7, sp, #16
 800f592:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f594:	4b30      	ldr	r3, [pc, #192]	; (800f658 <tcp_timewait_input+0xcc>)
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	f003 0304 	and.w	r3, r3, #4
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d154      	bne.n	800f64a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d106      	bne.n	800f5b4 <tcp_timewait_input+0x28>
 800f5a6:	4b2d      	ldr	r3, [pc, #180]	; (800f65c <tcp_timewait_input+0xd0>)
 800f5a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f5ac:	492c      	ldr	r1, [pc, #176]	; (800f660 <tcp_timewait_input+0xd4>)
 800f5ae:	482d      	ldr	r0, [pc, #180]	; (800f664 <tcp_timewait_input+0xd8>)
 800f5b0:	f008 fe84 	bl	80182bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f5b4:	4b28      	ldr	r3, [pc, #160]	; (800f658 <tcp_timewait_input+0xcc>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f003 0302 	and.w	r3, r3, #2
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d02a      	beq.n	800f616 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f5c0:	4b29      	ldr	r3, [pc, #164]	; (800f668 <tcp_timewait_input+0xdc>)
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	db2d      	blt.n	800f62a <tcp_timewait_input+0x9e>
 800f5ce:	4b26      	ldr	r3, [pc, #152]	; (800f668 <tcp_timewait_input+0xdc>)
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d6:	6879      	ldr	r1, [r7, #4]
 800f5d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f5da:	440b      	add	r3, r1
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	dc23      	bgt.n	800f62a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5e2:	4b22      	ldr	r3, [pc, #136]	; (800f66c <tcp_timewait_input+0xe0>)
 800f5e4:	6819      	ldr	r1, [r3, #0]
 800f5e6:	4b22      	ldr	r3, [pc, #136]	; (800f670 <tcp_timewait_input+0xe4>)
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4b1e      	ldr	r3, [pc, #120]	; (800f668 <tcp_timewait_input+0xdc>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5f2:	4b20      	ldr	r3, [pc, #128]	; (800f674 <tcp_timewait_input+0xe8>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5f6:	885b      	ldrh	r3, [r3, #2]
 800f5f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5fa:	4a1e      	ldr	r2, [pc, #120]	; (800f674 <tcp_timewait_input+0xe8>)
 800f5fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5fe:	8812      	ldrh	r2, [r2, #0]
 800f600:	b292      	uxth	r2, r2
 800f602:	9202      	str	r2, [sp, #8]
 800f604:	9301      	str	r3, [sp, #4]
 800f606:	4b1c      	ldr	r3, [pc, #112]	; (800f678 <tcp_timewait_input+0xec>)
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	4b1c      	ldr	r3, [pc, #112]	; (800f67c <tcp_timewait_input+0xf0>)
 800f60c:	4602      	mov	r2, r0
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f003 fada 	bl	8012bc8 <tcp_rst>
      return;
 800f614:	e01c      	b.n	800f650 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f616:	4b10      	ldr	r3, [pc, #64]	; (800f658 <tcp_timewait_input+0xcc>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d003      	beq.n	800f62a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f622:	4b17      	ldr	r3, [pc, #92]	; (800f680 <tcp_timewait_input+0xf4>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f62a:	4b11      	ldr	r3, [pc, #68]	; (800f670 <tcp_timewait_input+0xe4>)
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00d      	beq.n	800f64e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	8b5b      	ldrh	r3, [r3, #26]
 800f636:	f043 0302 	orr.w	r3, r3, #2
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f002 fcfd 	bl	8012040 <tcp_output>
  }
  return;
 800f646:	bf00      	nop
 800f648:	e001      	b.n	800f64e <tcp_timewait_input+0xc2>
    return;
 800f64a:	bf00      	nop
 800f64c:	e000      	b.n	800f650 <tcp_timewait_input+0xc4>
  return;
 800f64e:	bf00      	nop
}
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20008c84 	.word	0x20008c84
 800f65c:	0801b30c 	.word	0x0801b30c
 800f660:	0801b524 	.word	0x0801b524
 800f664:	0801b358 	.word	0x0801b358
 800f668:	20008c78 	.word	0x20008c78
 800f66c:	20008c7c 	.word	0x20008c7c
 800f670:	20008c82 	.word	0x20008c82
 800f674:	20008c68 	.word	0x20008c68
 800f678:	2000c3b4 	.word	0x2000c3b4
 800f67c:	2000c3b8 	.word	0x2000c3b8
 800f680:	2000fadc 	.word	0x2000fadc

0800f684 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f684:	b590      	push	{r4, r7, lr}
 800f686:	b08d      	sub	sp, #52	; 0x34
 800f688:	af04      	add	r7, sp, #16
 800f68a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f68c:	2300      	movs	r3, #0
 800f68e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d106      	bne.n	800f6a8 <tcp_process+0x24>
 800f69a:	4ba5      	ldr	r3, [pc, #660]	; (800f930 <tcp_process+0x2ac>)
 800f69c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f6a0:	49a4      	ldr	r1, [pc, #656]	; (800f934 <tcp_process+0x2b0>)
 800f6a2:	48a5      	ldr	r0, [pc, #660]	; (800f938 <tcp_process+0x2b4>)
 800f6a4:	f008 fe0a 	bl	80182bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f6a8:	4ba4      	ldr	r3, [pc, #656]	; (800f93c <tcp_process+0x2b8>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	f003 0304 	and.w	r3, r3, #4
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d04e      	beq.n	800f752 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7d1b      	ldrb	r3, [r3, #20]
 800f6b8:	2b02      	cmp	r3, #2
 800f6ba:	d108      	bne.n	800f6ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6c0:	4b9f      	ldr	r3, [pc, #636]	; (800f940 <tcp_process+0x2bc>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d123      	bne.n	800f710 <tcp_process+0x8c>
        acceptable = 1;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	76fb      	strb	r3, [r7, #27]
 800f6cc:	e020      	b.n	800f710 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6d2:	4b9c      	ldr	r3, [pc, #624]	; (800f944 <tcp_process+0x2c0>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d102      	bne.n	800f6e0 <tcp_process+0x5c>
        acceptable = 1;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	76fb      	strb	r3, [r7, #27]
 800f6de:	e017      	b.n	800f710 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6e0:	4b98      	ldr	r3, [pc, #608]	; (800f944 <tcp_process+0x2c0>)
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	db10      	blt.n	800f710 <tcp_process+0x8c>
 800f6ee:	4b95      	ldr	r3, [pc, #596]	; (800f944 <tcp_process+0x2c0>)
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f6:	6879      	ldr	r1, [r7, #4]
 800f6f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6fa:	440b      	add	r3, r1
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dc06      	bgt.n	800f710 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8b5b      	ldrh	r3, [r3, #26]
 800f706:	f043 0302 	orr.w	r3, r3, #2
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f710:	7efb      	ldrb	r3, [r7, #27]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d01b      	beq.n	800f74e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7d1b      	ldrb	r3, [r3, #20]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d106      	bne.n	800f72c <tcp_process+0xa8>
 800f71e:	4b84      	ldr	r3, [pc, #528]	; (800f930 <tcp_process+0x2ac>)
 800f720:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f724:	4988      	ldr	r1, [pc, #544]	; (800f948 <tcp_process+0x2c4>)
 800f726:	4884      	ldr	r0, [pc, #528]	; (800f938 <tcp_process+0x2b4>)
 800f728:	f008 fdc8 	bl	80182bc <iprintf>
      recv_flags |= TF_RESET;
 800f72c:	4b87      	ldr	r3, [pc, #540]	; (800f94c <tcp_process+0x2c8>)
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f043 0308 	orr.w	r3, r3, #8
 800f734:	b2da      	uxtb	r2, r3
 800f736:	4b85      	ldr	r3, [pc, #532]	; (800f94c <tcp_process+0x2c8>)
 800f738:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	8b5b      	ldrh	r3, [r3, #26]
 800f73e:	f023 0301 	bic.w	r3, r3, #1
 800f742:	b29a      	uxth	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f748:	f06f 030d 	mvn.w	r3, #13
 800f74c:	e37a      	b.n	800fe44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	e378      	b.n	800fe44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f752:	4b7a      	ldr	r3, [pc, #488]	; (800f93c <tcp_process+0x2b8>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	f003 0302 	and.w	r3, r3, #2
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d010      	beq.n	800f780 <tcp_process+0xfc>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	7d1b      	ldrb	r3, [r3, #20]
 800f762:	2b02      	cmp	r3, #2
 800f764:	d00c      	beq.n	800f780 <tcp_process+0xfc>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	7d1b      	ldrb	r3, [r3, #20]
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d008      	beq.n	800f780 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8b5b      	ldrh	r3, [r3, #26]
 800f772:	f043 0302 	orr.w	r3, r3, #2
 800f776:	b29a      	uxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	e361      	b.n	800fe44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	8b5b      	ldrh	r3, [r3, #26]
 800f784:	f003 0310 	and.w	r3, r3, #16
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d103      	bne.n	800f794 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f78c:	4b70      	ldr	r3, [pc, #448]	; (800f950 <tcp_process+0x2cc>)
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f001 fc2d 	bl	8011004 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	7d1b      	ldrb	r3, [r3, #20]
 800f7ae:	3b02      	subs	r3, #2
 800f7b0:	2b07      	cmp	r3, #7
 800f7b2:	f200 8337 	bhi.w	800fe24 <tcp_process+0x7a0>
 800f7b6:	a201      	add	r2, pc, #4	; (adr r2, 800f7bc <tcp_process+0x138>)
 800f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7bc:	0800f7dd 	.word	0x0800f7dd
 800f7c0:	0800fa0d 	.word	0x0800fa0d
 800f7c4:	0800fb85 	.word	0x0800fb85
 800f7c8:	0800fbaf 	.word	0x0800fbaf
 800f7cc:	0800fcd3 	.word	0x0800fcd3
 800f7d0:	0800fb85 	.word	0x0800fb85
 800f7d4:	0800fd5f 	.word	0x0800fd5f
 800f7d8:	0800fdef 	.word	0x0800fdef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f7dc:	4b57      	ldr	r3, [pc, #348]	; (800f93c <tcp_process+0x2b8>)
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	f003 0310 	and.w	r3, r3, #16
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 80e4 	beq.w	800f9b2 <tcp_process+0x32e>
 800f7ea:	4b54      	ldr	r3, [pc, #336]	; (800f93c <tcp_process+0x2b8>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	f003 0302 	and.w	r3, r3, #2
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f000 80dd 	beq.w	800f9b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7fc:	1c5a      	adds	r2, r3, #1
 800f7fe:	4b50      	ldr	r3, [pc, #320]	; (800f940 <tcp_process+0x2bc>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	429a      	cmp	r2, r3
 800f804:	f040 80d5 	bne.w	800f9b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f808:	4b4e      	ldr	r3, [pc, #312]	; (800f944 <tcp_process+0x2c0>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	1c5a      	adds	r2, r3, #1
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f81a:	4b49      	ldr	r3, [pc, #292]	; (800f940 <tcp_process+0x2bc>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f822:	4b4c      	ldr	r3, [pc, #304]	; (800f954 <tcp_process+0x2d0>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	89db      	ldrh	r3, [r3, #14]
 800f828:	b29a      	uxth	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f83c:	4b41      	ldr	r3, [pc, #260]	; (800f944 <tcp_process+0x2c0>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	1e5a      	subs	r2, r3, #1
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2204      	movs	r2, #4
 800f84a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	3304      	adds	r3, #4
 800f854:	4618      	mov	r0, r3
 800f856:	f007 f8eb 	bl	8016a30 <ip4_route>
 800f85a:	4601      	mov	r1, r0
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3304      	adds	r3, #4
 800f860:	461a      	mov	r2, r3
 800f862:	4620      	mov	r0, r4
 800f864:	f7ff f88e 	bl	800e984 <tcp_eff_send_mss_netif>
 800f868:	4603      	mov	r3, r0
 800f86a:	461a      	mov	r2, r3
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f874:	009a      	lsls	r2, r3, #2
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f87a:	005b      	lsls	r3, r3, #1
 800f87c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f880:	428b      	cmp	r3, r1
 800f882:	bf38      	it	cc
 800f884:	460b      	movcc	r3, r1
 800f886:	429a      	cmp	r2, r3
 800f888:	d204      	bcs.n	800f894 <tcp_process+0x210>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	b29b      	uxth	r3, r3
 800f892:	e00d      	b.n	800f8b0 <tcp_process+0x22c>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d904      	bls.n	800f8ac <tcp_process+0x228>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8a6:	005b      	lsls	r3, r3, #1
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	e001      	b.n	800f8b0 <tcp_process+0x22c>
 800f8ac:	f241 131c 	movw	r3, #4380	; 0x111c
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d106      	bne.n	800f8ce <tcp_process+0x24a>
 800f8c0:	4b1b      	ldr	r3, [pc, #108]	; (800f930 <tcp_process+0x2ac>)
 800f8c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f8c6:	4924      	ldr	r1, [pc, #144]	; (800f958 <tcp_process+0x2d4>)
 800f8c8:	481b      	ldr	r0, [pc, #108]	; (800f938 <tcp_process+0x2b4>)
 800f8ca:	f008 fcf7 	bl	80182bc <iprintf>
        --pcb->snd_queuelen;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d111      	bne.n	800f90e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f8f0:	69fb      	ldr	r3, [r7, #28]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d106      	bne.n	800f904 <tcp_process+0x280>
 800f8f6:	4b0e      	ldr	r3, [pc, #56]	; (800f930 <tcp_process+0x2ac>)
 800f8f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f8fc:	4917      	ldr	r1, [pc, #92]	; (800f95c <tcp_process+0x2d8>)
 800f8fe:	480e      	ldr	r0, [pc, #56]	; (800f938 <tcp_process+0x2b4>)
 800f900:	f008 fcdc 	bl	80182bc <iprintf>
          pcb->unsent = rseg->next;
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f90c:	e003      	b.n	800f916 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f916:	69f8      	ldr	r0, [r7, #28]
 800f918:	f7fe fc52 	bl	800e1c0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f920:	2b00      	cmp	r3, #0
 800f922:	d11d      	bne.n	800f960 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f92a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f92c:	e01f      	b.n	800f96e <tcp_process+0x2ea>
 800f92e:	bf00      	nop
 800f930:	0801b30c 	.word	0x0801b30c
 800f934:	0801b544 	.word	0x0801b544
 800f938:	0801b358 	.word	0x0801b358
 800f93c:	20008c84 	.word	0x20008c84
 800f940:	20008c7c 	.word	0x20008c7c
 800f944:	20008c78 	.word	0x20008c78
 800f948:	0801b560 	.word	0x0801b560
 800f94c:	20008c85 	.word	0x20008c85
 800f950:	2000fadc 	.word	0x2000fadc
 800f954:	20008c68 	.word	0x20008c68
 800f958:	0801b580 	.word	0x0801b580
 800f95c:	0801b598 	.word	0x0801b598
        } else {
          pcb->rtime = 0;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f974:	2b00      	cmp	r3, #0
 800f976:	d00a      	beq.n	800f98e <tcp_process+0x30a>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	6910      	ldr	r0, [r2, #16]
 800f982:	2200      	movs	r2, #0
 800f984:	6879      	ldr	r1, [r7, #4]
 800f986:	4798      	blx	r3
 800f988:	4603      	mov	r3, r0
 800f98a:	76bb      	strb	r3, [r7, #26]
 800f98c:	e001      	b.n	800f992 <tcp_process+0x30e>
 800f98e:	2300      	movs	r3, #0
 800f990:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f992:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f996:	f113 0f0d 	cmn.w	r3, #13
 800f99a:	d102      	bne.n	800f9a2 <tcp_process+0x31e>
          return ERR_ABRT;
 800f99c:	f06f 030c 	mvn.w	r3, #12
 800f9a0:	e250      	b.n	800fe44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	8b5b      	ldrh	r3, [r3, #26]
 800f9a6:	f043 0302 	orr.w	r3, r3, #2
 800f9aa:	b29a      	uxth	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f9b0:	e23a      	b.n	800fe28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f9b2:	4b9d      	ldr	r3, [pc, #628]	; (800fc28 <tcp_process+0x5a4>)
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	f003 0310 	and.w	r3, r3, #16
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f000 8234 	beq.w	800fe28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c0:	4b9a      	ldr	r3, [pc, #616]	; (800fc2c <tcp_process+0x5a8>)
 800f9c2:	6819      	ldr	r1, [r3, #0]
 800f9c4:	4b9a      	ldr	r3, [pc, #616]	; (800fc30 <tcp_process+0x5ac>)
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4b9a      	ldr	r3, [pc, #616]	; (800fc34 <tcp_process+0x5b0>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9d0:	4b99      	ldr	r3, [pc, #612]	; (800fc38 <tcp_process+0x5b4>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9d4:	885b      	ldrh	r3, [r3, #2]
 800f9d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9d8:	4a97      	ldr	r2, [pc, #604]	; (800fc38 <tcp_process+0x5b4>)
 800f9da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9dc:	8812      	ldrh	r2, [r2, #0]
 800f9de:	b292      	uxth	r2, r2
 800f9e0:	9202      	str	r2, [sp, #8]
 800f9e2:	9301      	str	r3, [sp, #4]
 800f9e4:	4b95      	ldr	r3, [pc, #596]	; (800fc3c <tcp_process+0x5b8>)
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4b95      	ldr	r3, [pc, #596]	; (800fc40 <tcp_process+0x5bc>)
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f003 f8eb 	bl	8012bc8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9f8:	2b05      	cmp	r3, #5
 800f9fa:	f200 8215 	bhi.w	800fe28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f002 feab 	bl	8012760 <tcp_rexmit_rto>
      break;
 800fa0a:	e20d      	b.n	800fe28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fa0c:	4b86      	ldr	r3, [pc, #536]	; (800fc28 <tcp_process+0x5a4>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	f003 0310 	and.w	r3, r3, #16
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f000 80a1 	beq.w	800fb5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa1a:	4b84      	ldr	r3, [pc, #528]	; (800fc2c <tcp_process+0x5a8>)
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	3b01      	subs	r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	db7e      	blt.n	800fb28 <tcp_process+0x4a4>
 800fa2a:	4b80      	ldr	r3, [pc, #512]	; (800fc2c <tcp_process+0x5a8>)
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa32:	1ad3      	subs	r3, r2, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	dc77      	bgt.n	800fb28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2204      	movs	r2, #4
 800fa3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fa46:	23fa      	movs	r3, #250	; 0xfa
 800fa48:	76bb      	strb	r3, [r7, #26]
 800fa4a:	e01d      	b.n	800fa88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d106      	bne.n	800fa64 <tcp_process+0x3e0>
 800fa56:	4b7b      	ldr	r3, [pc, #492]	; (800fc44 <tcp_process+0x5c0>)
 800fa58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fa5c:	497a      	ldr	r1, [pc, #488]	; (800fc48 <tcp_process+0x5c4>)
 800fa5e:	487b      	ldr	r0, [pc, #492]	; (800fc4c <tcp_process+0x5c8>)
 800fa60:	f008 fc2c 	bl	80182bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00a      	beq.n	800fa84 <tcp_process+0x400>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	6910      	ldr	r0, [r2, #16]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	6879      	ldr	r1, [r7, #4]
 800fa7c:	4798      	blx	r3
 800fa7e:	4603      	mov	r3, r0
 800fa80:	76bb      	strb	r3, [r7, #26]
 800fa82:	e001      	b.n	800fa88 <tcp_process+0x404>
 800fa84:	23f0      	movs	r3, #240	; 0xf0
 800fa86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fa88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00a      	beq.n	800faa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fa90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa94:	f113 0f0d 	cmn.w	r3, #13
 800fa98:	d002      	beq.n	800faa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7fd fcee 	bl	800d47c <tcp_abort>
            }
            return ERR_ABRT;
 800faa0:	f06f 030c 	mvn.w	r3, #12
 800faa4:	e1ce      	b.n	800fe44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f000 fae0 	bl	801006c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800faac:	4b68      	ldr	r3, [pc, #416]	; (800fc50 <tcp_process+0x5cc>)
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d005      	beq.n	800fac0 <tcp_process+0x43c>
            recv_acked--;
 800fab4:	4b66      	ldr	r3, [pc, #408]	; (800fc50 <tcp_process+0x5cc>)
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	3b01      	subs	r3, #1
 800faba:	b29a      	uxth	r2, r3
 800fabc:	4b64      	ldr	r3, [pc, #400]	; (800fc50 <tcp_process+0x5cc>)
 800fabe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fac4:	009a      	lsls	r2, r3, #2
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faca:	005b      	lsls	r3, r3, #1
 800facc:	f241 111c 	movw	r1, #4380	; 0x111c
 800fad0:	428b      	cmp	r3, r1
 800fad2:	bf38      	it	cc
 800fad4:	460b      	movcc	r3, r1
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d204      	bcs.n	800fae4 <tcp_process+0x460>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	e00d      	b.n	800fb00 <tcp_process+0x47c>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	f241 121c 	movw	r2, #4380	; 0x111c
 800faee:	4293      	cmp	r3, r2
 800faf0:	d904      	bls.n	800fafc <tcp_process+0x478>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faf6:	005b      	lsls	r3, r3, #1
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	e001      	b.n	800fb00 <tcp_process+0x47c>
 800fafc:	f241 131c 	movw	r3, #4380	; 0x111c
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fb06:	4b53      	ldr	r3, [pc, #332]	; (800fc54 <tcp_process+0x5d0>)
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	f003 0320 	and.w	r3, r3, #32
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d037      	beq.n	800fb82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8b5b      	ldrh	r3, [r3, #26]
 800fb16:	f043 0302 	orr.w	r3, r3, #2
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2207      	movs	r2, #7
 800fb24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fb26:	e02c      	b.n	800fb82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb28:	4b40      	ldr	r3, [pc, #256]	; (800fc2c <tcp_process+0x5a8>)
 800fb2a:	6819      	ldr	r1, [r3, #0]
 800fb2c:	4b40      	ldr	r3, [pc, #256]	; (800fc30 <tcp_process+0x5ac>)
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	461a      	mov	r2, r3
 800fb32:	4b40      	ldr	r3, [pc, #256]	; (800fc34 <tcp_process+0x5b0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb38:	4b3f      	ldr	r3, [pc, #252]	; (800fc38 <tcp_process+0x5b4>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb3c:	885b      	ldrh	r3, [r3, #2]
 800fb3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb40:	4a3d      	ldr	r2, [pc, #244]	; (800fc38 <tcp_process+0x5b4>)
 800fb42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb44:	8812      	ldrh	r2, [r2, #0]
 800fb46:	b292      	uxth	r2, r2
 800fb48:	9202      	str	r2, [sp, #8]
 800fb4a:	9301      	str	r3, [sp, #4]
 800fb4c:	4b3b      	ldr	r3, [pc, #236]	; (800fc3c <tcp_process+0x5b8>)
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	4b3b      	ldr	r3, [pc, #236]	; (800fc40 <tcp_process+0x5bc>)
 800fb52:	4602      	mov	r2, r0
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f003 f837 	bl	8012bc8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fb5a:	e167      	b.n	800fe2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fb5c:	4b32      	ldr	r3, [pc, #200]	; (800fc28 <tcp_process+0x5a4>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f003 0302 	and.w	r3, r3, #2
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f000 8161 	beq.w	800fe2c <tcp_process+0x7a8>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6e:	1e5a      	subs	r2, r3, #1
 800fb70:	4b30      	ldr	r3, [pc, #192]	; (800fc34 <tcp_process+0x5b0>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	f040 8159 	bne.w	800fe2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f002 fe12 	bl	80127a4 <tcp_rexmit>
      break;
 800fb80:	e154      	b.n	800fe2c <tcp_process+0x7a8>
 800fb82:	e153      	b.n	800fe2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 fa71 	bl	801006c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fb8a:	4b32      	ldr	r3, [pc, #200]	; (800fc54 <tcp_process+0x5d0>)
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	f003 0320 	and.w	r3, r3, #32
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f000 814c 	beq.w	800fe30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	8b5b      	ldrh	r3, [r3, #26]
 800fb9c:	f043 0302 	orr.w	r3, r3, #2
 800fba0:	b29a      	uxth	r2, r3
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2207      	movs	r2, #7
 800fbaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fbac:	e140      	b.n	800fe30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fa5c 	bl	801006c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fbb4:	4b27      	ldr	r3, [pc, #156]	; (800fc54 <tcp_process+0x5d0>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	f003 0320 	and.w	r3, r3, #32
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d071      	beq.n	800fca4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fbc0:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <tcp_process+0x5a4>)
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	f003 0310 	and.w	r3, r3, #16
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d060      	beq.n	800fc8e <tcp_process+0x60a>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbd0:	4b16      	ldr	r3, [pc, #88]	; (800fc2c <tcp_process+0x5a8>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d15a      	bne.n	800fc8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d156      	bne.n	800fc8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8b5b      	ldrh	r3, [r3, #26]
 800fbe4:	f043 0302 	orr.w	r3, r3, #2
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7fe fdbe 	bl	800e770 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fbf4:	4b18      	ldr	r3, [pc, #96]	; (800fc58 <tcp_process+0x5d4>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d105      	bne.n	800fc0a <tcp_process+0x586>
 800fbfe:	4b16      	ldr	r3, [pc, #88]	; (800fc58 <tcp_process+0x5d4>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	4a14      	ldr	r2, [pc, #80]	; (800fc58 <tcp_process+0x5d4>)
 800fc06:	6013      	str	r3, [r2, #0]
 800fc08:	e02e      	b.n	800fc68 <tcp_process+0x5e4>
 800fc0a:	4b13      	ldr	r3, [pc, #76]	; (800fc58 <tcp_process+0x5d4>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	617b      	str	r3, [r7, #20]
 800fc10:	e027      	b.n	800fc62 <tcp_process+0x5de>
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d11f      	bne.n	800fc5c <tcp_process+0x5d8>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	68da      	ldr	r2, [r3, #12]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	60da      	str	r2, [r3, #12]
 800fc24:	e020      	b.n	800fc68 <tcp_process+0x5e4>
 800fc26:	bf00      	nop
 800fc28:	20008c84 	.word	0x20008c84
 800fc2c:	20008c7c 	.word	0x20008c7c
 800fc30:	20008c82 	.word	0x20008c82
 800fc34:	20008c78 	.word	0x20008c78
 800fc38:	20008c68 	.word	0x20008c68
 800fc3c:	2000c3b4 	.word	0x2000c3b4
 800fc40:	2000c3b8 	.word	0x2000c3b8
 800fc44:	0801b30c 	.word	0x0801b30c
 800fc48:	0801b5ac 	.word	0x0801b5ac
 800fc4c:	0801b358 	.word	0x0801b358
 800fc50:	20008c80 	.word	0x20008c80
 800fc54:	20008c85 	.word	0x20008c85
 800fc58:	2000fad8 	.word	0x2000fad8
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1d4      	bne.n	800fc12 <tcp_process+0x58e>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	60da      	str	r2, [r3, #12]
 800fc6e:	4b77      	ldr	r3, [pc, #476]	; (800fe4c <tcp_process+0x7c8>)
 800fc70:	2201      	movs	r2, #1
 800fc72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	220a      	movs	r2, #10
 800fc78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fc7a:	4b75      	ldr	r3, [pc, #468]	; (800fe50 <tcp_process+0x7cc>)
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	60da      	str	r2, [r3, #12]
 800fc82:	4a73      	ldr	r2, [pc, #460]	; (800fe50 <tcp_process+0x7cc>)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6013      	str	r3, [r2, #0]
 800fc88:	f003 f960 	bl	8012f4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fc8c:	e0d2      	b.n	800fe34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	8b5b      	ldrh	r3, [r3, #26]
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2208      	movs	r2, #8
 800fca0:	751a      	strb	r2, [r3, #20]
      break;
 800fca2:	e0c7      	b.n	800fe34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fca4:	4b6b      	ldr	r3, [pc, #428]	; (800fe54 <tcp_process+0x7d0>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 0310 	and.w	r3, r3, #16
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 80c1 	beq.w	800fe34 <tcp_process+0x7b0>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcb6:	4b68      	ldr	r3, [pc, #416]	; (800fe58 <tcp_process+0x7d4>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	f040 80ba 	bne.w	800fe34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f040 80b5 	bne.w	800fe34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2206      	movs	r2, #6
 800fcce:	751a      	strb	r2, [r3, #20]
      break;
 800fcd0:	e0b0      	b.n	800fe34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f9ca 	bl	801006c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fcd8:	4b60      	ldr	r3, [pc, #384]	; (800fe5c <tcp_process+0x7d8>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	f003 0320 	and.w	r3, r3, #32
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f000 80a9 	beq.w	800fe38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	8b5b      	ldrh	r3, [r3, #26]
 800fcea:	f043 0302 	orr.w	r3, r3, #2
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7fe fd3b 	bl	800e770 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fcfa:	4b59      	ldr	r3, [pc, #356]	; (800fe60 <tcp_process+0x7dc>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d105      	bne.n	800fd10 <tcp_process+0x68c>
 800fd04:	4b56      	ldr	r3, [pc, #344]	; (800fe60 <tcp_process+0x7dc>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	4a55      	ldr	r2, [pc, #340]	; (800fe60 <tcp_process+0x7dc>)
 800fd0c:	6013      	str	r3, [r2, #0]
 800fd0e:	e013      	b.n	800fd38 <tcp_process+0x6b4>
 800fd10:	4b53      	ldr	r3, [pc, #332]	; (800fe60 <tcp_process+0x7dc>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	613b      	str	r3, [r7, #16]
 800fd16:	e00c      	b.n	800fd32 <tcp_process+0x6ae>
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d104      	bne.n	800fd2c <tcp_process+0x6a8>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	68da      	ldr	r2, [r3, #12]
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	60da      	str	r2, [r3, #12]
 800fd2a:	e005      	b.n	800fd38 <tcp_process+0x6b4>
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	613b      	str	r3, [r7, #16]
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1ef      	bne.n	800fd18 <tcp_process+0x694>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	60da      	str	r2, [r3, #12]
 800fd3e:	4b43      	ldr	r3, [pc, #268]	; (800fe4c <tcp_process+0x7c8>)
 800fd40:	2201      	movs	r2, #1
 800fd42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	220a      	movs	r2, #10
 800fd48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fd4a:	4b41      	ldr	r3, [pc, #260]	; (800fe50 <tcp_process+0x7cc>)
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	60da      	str	r2, [r3, #12]
 800fd52:	4a3f      	ldr	r2, [pc, #252]	; (800fe50 <tcp_process+0x7cc>)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6013      	str	r3, [r2, #0]
 800fd58:	f003 f8f8 	bl	8012f4c <tcp_timer_needed>
      }
      break;
 800fd5c:	e06c      	b.n	800fe38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f984 	bl	801006c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fd64:	4b3b      	ldr	r3, [pc, #236]	; (800fe54 <tcp_process+0x7d0>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	f003 0310 	and.w	r3, r3, #16
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d065      	beq.n	800fe3c <tcp_process+0x7b8>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd74:	4b38      	ldr	r3, [pc, #224]	; (800fe58 <tcp_process+0x7d4>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d15f      	bne.n	800fe3c <tcp_process+0x7b8>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d15b      	bne.n	800fe3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7fe fcf3 	bl	800e770 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd8a:	4b35      	ldr	r3, [pc, #212]	; (800fe60 <tcp_process+0x7dc>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d105      	bne.n	800fda0 <tcp_process+0x71c>
 800fd94:	4b32      	ldr	r3, [pc, #200]	; (800fe60 <tcp_process+0x7dc>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	4a31      	ldr	r2, [pc, #196]	; (800fe60 <tcp_process+0x7dc>)
 800fd9c:	6013      	str	r3, [r2, #0]
 800fd9e:	e013      	b.n	800fdc8 <tcp_process+0x744>
 800fda0:	4b2f      	ldr	r3, [pc, #188]	; (800fe60 <tcp_process+0x7dc>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	60fb      	str	r3, [r7, #12]
 800fda6:	e00c      	b.n	800fdc2 <tcp_process+0x73e>
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d104      	bne.n	800fdbc <tcp_process+0x738>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68da      	ldr	r2, [r3, #12]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	e005      	b.n	800fdc8 <tcp_process+0x744>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1ef      	bne.n	800fda8 <tcp_process+0x724>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	60da      	str	r2, [r3, #12]
 800fdce:	4b1f      	ldr	r3, [pc, #124]	; (800fe4c <tcp_process+0x7c8>)
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	220a      	movs	r2, #10
 800fdd8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fdda:	4b1d      	ldr	r3, [pc, #116]	; (800fe50 <tcp_process+0x7cc>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	60da      	str	r2, [r3, #12]
 800fde2:	4a1b      	ldr	r2, [pc, #108]	; (800fe50 <tcp_process+0x7cc>)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	f003 f8b0 	bl	8012f4c <tcp_timer_needed>
      }
      break;
 800fdec:	e026      	b.n	800fe3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 f93c 	bl	801006c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fdf4:	4b17      	ldr	r3, [pc, #92]	; (800fe54 <tcp_process+0x7d0>)
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f003 0310 	and.w	r3, r3, #16
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d01f      	beq.n	800fe40 <tcp_process+0x7bc>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe04:	4b14      	ldr	r3, [pc, #80]	; (800fe58 <tcp_process+0x7d4>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d119      	bne.n	800fe40 <tcp_process+0x7bc>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d115      	bne.n	800fe40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fe14:	4b11      	ldr	r3, [pc, #68]	; (800fe5c <tcp_process+0x7d8>)
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	f043 0310 	orr.w	r3, r3, #16
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	4b0f      	ldr	r3, [pc, #60]	; (800fe5c <tcp_process+0x7d8>)
 800fe20:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fe22:	e00d      	b.n	800fe40 <tcp_process+0x7bc>
    default:
      break;
 800fe24:	bf00      	nop
 800fe26:	e00c      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe28:	bf00      	nop
 800fe2a:	e00a      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe2c:	bf00      	nop
 800fe2e:	e008      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe30:	bf00      	nop
 800fe32:	e006      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe34:	bf00      	nop
 800fe36:	e004      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe38:	bf00      	nop
 800fe3a:	e002      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe3c:	bf00      	nop
 800fe3e:	e000      	b.n	800fe42 <tcp_process+0x7be>
      break;
 800fe40:	bf00      	nop
  }
  return ERR_OK;
 800fe42:	2300      	movs	r3, #0
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3724      	adds	r7, #36	; 0x24
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd90      	pop	{r4, r7, pc}
 800fe4c:	2000fad4 	.word	0x2000fad4
 800fe50:	2000fae8 	.word	0x2000fae8
 800fe54:	20008c84 	.word	0x20008c84
 800fe58:	20008c7c 	.word	0x20008c7c
 800fe5c:	20008c85 	.word	0x20008c85
 800fe60:	2000fad8 	.word	0x2000fad8

0800fe64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fe64:	b590      	push	{r4, r7, lr}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d106      	bne.n	800fe82 <tcp_oos_insert_segment+0x1e>
 800fe74:	4b3b      	ldr	r3, [pc, #236]	; (800ff64 <tcp_oos_insert_segment+0x100>)
 800fe76:	f240 421f 	movw	r2, #1055	; 0x41f
 800fe7a:	493b      	ldr	r1, [pc, #236]	; (800ff68 <tcp_oos_insert_segment+0x104>)
 800fe7c:	483b      	ldr	r0, [pc, #236]	; (800ff6c <tcp_oos_insert_segment+0x108>)
 800fe7e:	f008 fa1d 	bl	80182bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	899b      	ldrh	r3, [r3, #12]
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fb f994 	bl	800b1b8 <lwip_htons>
 800fe90:	4603      	mov	r3, r0
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	f003 0301 	and.w	r3, r3, #1
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d028      	beq.n	800feee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fe9c:	6838      	ldr	r0, [r7, #0]
 800fe9e:	f7fe f97b 	bl	800e198 <tcp_segs_free>
    next = NULL;
 800fea2:	2300      	movs	r3, #0
 800fea4:	603b      	str	r3, [r7, #0]
 800fea6:	e056      	b.n	800ff56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	899b      	ldrh	r3, [r3, #12]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fb f981 	bl	800b1b8 <lwip_htons>
 800feb6:	4603      	mov	r3, r0
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	f003 0301 	and.w	r3, r3, #1
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00d      	beq.n	800fede <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	899b      	ldrh	r3, [r3, #12]
 800fec8:	b29c      	uxth	r4, r3
 800feca:	2001      	movs	r0, #1
 800fecc:	f7fb f974 	bl	800b1b8 <lwip_htons>
 800fed0:	4603      	mov	r3, r0
 800fed2:	461a      	mov	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	68db      	ldr	r3, [r3, #12]
 800fed8:	4322      	orrs	r2, r4
 800feda:	b292      	uxth	r2, r2
 800fedc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f7fe f969 	bl	800e1c0 <tcp_seg_free>
    while (next &&
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00e      	beq.n	800ff12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	891b      	ldrh	r3, [r3, #8]
 800fef8:	461a      	mov	r2, r3
 800fefa:	4b1d      	ldr	r3, [pc, #116]	; (800ff70 <tcp_oos_insert_segment+0x10c>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	441a      	add	r2, r3
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	8909      	ldrh	r1, [r1, #8]
 800ff0a:	440b      	add	r3, r1
 800ff0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	daca      	bge.n	800fea8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d01e      	beq.n	800ff56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	891b      	ldrh	r3, [r3, #8]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4b14      	ldr	r3, [pc, #80]	; (800ff70 <tcp_oos_insert_segment+0x10c>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	441a      	add	r2, r3
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	dd12      	ble.n	800ff56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	4b0d      	ldr	r3, [pc, #52]	; (800ff70 <tcp_oos_insert_segment+0x10c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	1ad3      	subs	r3, r2, r3
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	685a      	ldr	r2, [r3, #4]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	891b      	ldrh	r3, [r3, #8]
 800ff4e:	4619      	mov	r1, r3
 800ff50:	4610      	mov	r0, r2
 800ff52:	f7fc fb17 	bl	800c584 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	683a      	ldr	r2, [r7, #0]
 800ff5a:	601a      	str	r2, [r3, #0]
}
 800ff5c:	bf00      	nop
 800ff5e:	3714      	adds	r7, #20
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd90      	pop	{r4, r7, pc}
 800ff64:	0801b30c 	.word	0x0801b30c
 800ff68:	0801b5cc 	.word	0x0801b5cc
 800ff6c:	0801b358 	.word	0x0801b358
 800ff70:	20008c78 	.word	0x20008c78

0800ff74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ff74:	b5b0      	push	{r4, r5, r7, lr}
 800ff76:	b086      	sub	sp, #24
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
 800ff80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ff82:	e03e      	b.n	8010002 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fc fd0a 	bl	800c9ac <pbuf_clen>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffa2:	8a7a      	ldrh	r2, [r7, #18]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d906      	bls.n	800ffb6 <tcp_free_acked_segments+0x42>
 800ffa8:	4b2a      	ldr	r3, [pc, #168]	; (8010054 <tcp_free_acked_segments+0xe0>)
 800ffaa:	f240 4257 	movw	r2, #1111	; 0x457
 800ffae:	492a      	ldr	r1, [pc, #168]	; (8010058 <tcp_free_acked_segments+0xe4>)
 800ffb0:	482a      	ldr	r0, [pc, #168]	; (801005c <tcp_free_acked_segments+0xe8>)
 800ffb2:	f008 f983 	bl	80182bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ffbc:	8a7b      	ldrh	r3, [r7, #18]
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	891a      	ldrh	r2, [r3, #8]
 800ffcc:	4b24      	ldr	r3, [pc, #144]	; (8010060 <tcp_free_acked_segments+0xec>)
 800ffce:	881b      	ldrh	r3, [r3, #0]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	4b22      	ldr	r3, [pc, #136]	; (8010060 <tcp_free_acked_segments+0xec>)
 800ffd6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ffd8:	6978      	ldr	r0, [r7, #20]
 800ffda:	f7fe f8f1 	bl	800e1c0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00c      	beq.n	8010002 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d109      	bne.n	8010002 <tcp_free_acked_segments+0x8e>
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d106      	bne.n	8010002 <tcp_free_acked_segments+0x8e>
 800fff4:	4b17      	ldr	r3, [pc, #92]	; (8010054 <tcp_free_acked_segments+0xe0>)
 800fff6:	f240 4262 	movw	r2, #1122	; 0x462
 800fffa:	491a      	ldr	r1, [pc, #104]	; (8010064 <tcp_free_acked_segments+0xf0>)
 800fffc:	4817      	ldr	r0, [pc, #92]	; (801005c <tcp_free_acked_segments+0xe8>)
 800fffe:	f008 f95d 	bl	80182bc <iprintf>
  while (seg_list != NULL &&
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d020      	beq.n	801004a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	4618      	mov	r0, r3
 8010010:	f7fb f8e7 	bl	800b1e2 <lwip_htonl>
 8010014:	4604      	mov	r4, r0
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	891b      	ldrh	r3, [r3, #8]
 801001a:	461d      	mov	r5, r3
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	899b      	ldrh	r3, [r3, #12]
 8010022:	b29b      	uxth	r3, r3
 8010024:	4618      	mov	r0, r3
 8010026:	f7fb f8c7 	bl	800b1b8 <lwip_htons>
 801002a:	4603      	mov	r3, r0
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0303 	and.w	r3, r3, #3
 8010032:	2b00      	cmp	r3, #0
 8010034:	d001      	beq.n	801003a <tcp_free_acked_segments+0xc6>
 8010036:	2301      	movs	r3, #1
 8010038:	e000      	b.n	801003c <tcp_free_acked_segments+0xc8>
 801003a:	2300      	movs	r3, #0
 801003c:	442b      	add	r3, r5
 801003e:	18e2      	adds	r2, r4, r3
 8010040:	4b09      	ldr	r3, [pc, #36]	; (8010068 <tcp_free_acked_segments+0xf4>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010046:	2b00      	cmp	r3, #0
 8010048:	dd9c      	ble.n	800ff84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801004a:	68bb      	ldr	r3, [r7, #8]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3718      	adds	r7, #24
 8010050:	46bd      	mov	sp, r7
 8010052:	bdb0      	pop	{r4, r5, r7, pc}
 8010054:	0801b30c 	.word	0x0801b30c
 8010058:	0801b5f4 	.word	0x0801b5f4
 801005c:	0801b358 	.word	0x0801b358
 8010060:	20008c80 	.word	0x20008c80
 8010064:	0801b61c 	.word	0x0801b61c
 8010068:	20008c7c 	.word	0x20008c7c

0801006c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801006c:	b5b0      	push	{r4, r5, r7, lr}
 801006e:	b094      	sub	sp, #80	; 0x50
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d106      	bne.n	801008c <tcp_receive+0x20>
 801007e:	4ba6      	ldr	r3, [pc, #664]	; (8010318 <tcp_receive+0x2ac>)
 8010080:	f240 427b 	movw	r2, #1147	; 0x47b
 8010084:	49a5      	ldr	r1, [pc, #660]	; (801031c <tcp_receive+0x2b0>)
 8010086:	48a6      	ldr	r0, [pc, #664]	; (8010320 <tcp_receive+0x2b4>)
 8010088:	f008 f918 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	7d1b      	ldrb	r3, [r3, #20]
 8010090:	2b03      	cmp	r3, #3
 8010092:	d806      	bhi.n	80100a2 <tcp_receive+0x36>
 8010094:	4ba0      	ldr	r3, [pc, #640]	; (8010318 <tcp_receive+0x2ac>)
 8010096:	f240 427c 	movw	r2, #1148	; 0x47c
 801009a:	49a2      	ldr	r1, [pc, #648]	; (8010324 <tcp_receive+0x2b8>)
 801009c:	48a0      	ldr	r0, [pc, #640]	; (8010320 <tcp_receive+0x2b4>)
 801009e:	f008 f90d 	bl	80182bc <iprintf>

  if (flags & TCP_ACK) {
 80100a2:	4ba1      	ldr	r3, [pc, #644]	; (8010328 <tcp_receive+0x2bc>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	f003 0310 	and.w	r3, r3, #16
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 8263 	beq.w	8010576 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100b6:	461a      	mov	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100bc:	4413      	add	r3, r2
 80100be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100c4:	4b99      	ldr	r3, [pc, #612]	; (801032c <tcp_receive+0x2c0>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	db1b      	blt.n	8010106 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100d2:	4b96      	ldr	r3, [pc, #600]	; (801032c <tcp_receive+0x2c0>)
 80100d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d106      	bne.n	80100e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80100de:	4b94      	ldr	r3, [pc, #592]	; (8010330 <tcp_receive+0x2c4>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	db0e      	blt.n	8010106 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80100ec:	4b90      	ldr	r3, [pc, #576]	; (8010330 <tcp_receive+0x2c4>)
 80100ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d125      	bne.n	8010140 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80100f4:	4b8f      	ldr	r3, [pc, #572]	; (8010334 <tcp_receive+0x2c8>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	89db      	ldrh	r3, [r3, #14]
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010102:	429a      	cmp	r2, r3
 8010104:	d91c      	bls.n	8010140 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010106:	4b8b      	ldr	r3, [pc, #556]	; (8010334 <tcp_receive+0x2c8>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	89db      	ldrh	r3, [r3, #14]
 801010c:	b29a      	uxth	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010120:	429a      	cmp	r2, r3
 8010122:	d205      	bcs.n	8010130 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010130:	4b7e      	ldr	r3, [pc, #504]	; (801032c <tcp_receive+0x2c0>)
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010138:	4b7d      	ldr	r3, [pc, #500]	; (8010330 <tcp_receive+0x2c4>)
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010140:	4b7b      	ldr	r3, [pc, #492]	; (8010330 <tcp_receive+0x2c4>)
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	2b00      	cmp	r3, #0
 801014c:	dc58      	bgt.n	8010200 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801014e:	4b7a      	ldr	r3, [pc, #488]	; (8010338 <tcp_receive+0x2cc>)
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d14b      	bne.n	80101ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010160:	4413      	add	r3, r2
 8010162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010164:	429a      	cmp	r2, r3
 8010166:	d142      	bne.n	80101ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801016e:	2b00      	cmp	r3, #0
 8010170:	db3d      	blt.n	80101ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010176:	4b6e      	ldr	r3, [pc, #440]	; (8010330 <tcp_receive+0x2c4>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d137      	bne.n	80101ee <tcp_receive+0x182>
              found_dupack = 1;
 801017e:	2301      	movs	r3, #1
 8010180:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010188:	2bff      	cmp	r3, #255	; 0xff
 801018a:	d007      	beq.n	801019c <tcp_receive+0x130>
                ++pcb->dupacks;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010192:	3301      	adds	r3, #1
 8010194:	b2da      	uxtb	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d91b      	bls.n	80101de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101b0:	4413      	add	r3, r2
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d30a      	bcc.n	80101d4 <tcp_receive+0x168>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101c8:	4413      	add	r3, r2
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80101d2:	e004      	b.n	80101de <tcp_receive+0x172>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101e4:	2b02      	cmp	r3, #2
 80101e6:	d902      	bls.n	80101ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f002 fb47 	bl	801287c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80101ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f040 8160 	bne.w	80104b6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80101fe:	e15a      	b.n	80104b6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010200:	4b4b      	ldr	r3, [pc, #300]	; (8010330 <tcp_receive+0x2c4>)
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	3b01      	subs	r3, #1
 801020c:	2b00      	cmp	r3, #0
 801020e:	f2c0 814d 	blt.w	80104ac <tcp_receive+0x440>
 8010212:	4b47      	ldr	r3, [pc, #284]	; (8010330 <tcp_receive+0x2c4>)
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801021a:	1ad3      	subs	r3, r2, r3
 801021c:	2b00      	cmp	r3, #0
 801021e:	f300 8145 	bgt.w	80104ac <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	8b5b      	ldrh	r3, [r3, #26]
 8010226:	f003 0304 	and.w	r3, r3, #4
 801022a:	2b00      	cmp	r3, #0
 801022c:	d010      	beq.n	8010250 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	8b5b      	ldrh	r3, [r3, #26]
 8010232:	f023 0304 	bic.w	r3, r3, #4
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801025e:	10db      	asrs	r3, r3, #3
 8010260:	b21b      	sxth	r3, r3
 8010262:	b29a      	uxth	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801026a:	b29b      	uxth	r3, r3
 801026c:	4413      	add	r3, r2
 801026e:	b29b      	uxth	r3, r3
 8010270:	b21a      	sxth	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010278:	4b2d      	ldr	r3, [pc, #180]	; (8010330 <tcp_receive+0x2c4>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	b29a      	uxth	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010282:	b29b      	uxth	r3, r3
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010290:	4b27      	ldr	r3, [pc, #156]	; (8010330 <tcp_receive+0x2c4>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	7d1b      	ldrb	r3, [r3, #20]
 801029c:	2b03      	cmp	r3, #3
 801029e:	f240 8096 	bls.w	80103ce <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d244      	bcs.n	801033c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8b5b      	ldrh	r3, [r3, #26]
 80102b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <tcp_receive+0x256>
 80102be:	2301      	movs	r3, #1
 80102c0:	e000      	b.n	80102c4 <tcp_receive+0x258>
 80102c2:	2302      	movs	r3, #2
 80102c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80102c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d2:	fb12 f303 	smulbb	r3, r2, r3
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80102da:	4293      	cmp	r3, r2
 80102dc:	bf28      	it	cs
 80102de:	4613      	movcs	r3, r2
 80102e0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102ea:	4413      	add	r3, r2
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d309      	bcc.n	801030c <tcp_receive+0x2a0>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010300:	4413      	add	r3, r2
 8010302:	b29a      	uxth	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801030a:	e060      	b.n	80103ce <tcp_receive+0x362>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010312:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010316:	e05a      	b.n	80103ce <tcp_receive+0x362>
 8010318:	0801b30c 	.word	0x0801b30c
 801031c:	0801b63c 	.word	0x0801b63c
 8010320:	0801b358 	.word	0x0801b358
 8010324:	0801b658 	.word	0x0801b658
 8010328:	20008c84 	.word	0x20008c84
 801032c:	20008c78 	.word	0x20008c78
 8010330:	20008c7c 	.word	0x20008c7c
 8010334:	20008c68 	.word	0x20008c68
 8010338:	20008c82 	.word	0x20008c82
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010344:	4413      	add	r3, r2
 8010346:	b29a      	uxth	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801034e:	429a      	cmp	r2, r3
 8010350:	d309      	bcc.n	8010366 <tcp_receive+0x2fa>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010358:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801035a:	4413      	add	r3, r2
 801035c:	b29a      	uxth	r2, r3
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010364:	e004      	b.n	8010370 <tcp_receive+0x304>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801036c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801037c:	429a      	cmp	r2, r3
 801037e:	d326      	bcc.n	80103ce <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	b29a      	uxth	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103a0:	4413      	add	r3, r2
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d30a      	bcc.n	80103c4 <tcp_receive+0x358>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103b8:	4413      	add	r3, r2
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103c2:	e004      	b.n	80103ce <tcp_receive+0x362>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d6:	4a98      	ldr	r2, [pc, #608]	; (8010638 <tcp_receive+0x5cc>)
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff fdcb 	bl	800ff74 <tcp_free_acked_segments>
 80103de:	4602      	mov	r2, r0
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ec:	4a93      	ldr	r2, [pc, #588]	; (801063c <tcp_receive+0x5d0>)
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff fdc0 	bl	800ff74 <tcp_free_acked_segments>
 80103f4:	4602      	mov	r2, r0
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d104      	bne.n	801040c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010408:	861a      	strh	r2, [r3, #48]	; 0x30
 801040a:	e002      	b.n	8010412 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801041c:	2b00      	cmp	r3, #0
 801041e:	d103      	bne.n	8010428 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801042e:	4b84      	ldr	r3, [pc, #528]	; (8010640 <tcp_receive+0x5d4>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	4413      	add	r3, r2
 8010434:	b29a      	uxth	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	8b5b      	ldrh	r3, [r3, #26]
 8010440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010444:	2b00      	cmp	r3, #0
 8010446:	d035      	beq.n	80104b4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801044c:	2b00      	cmp	r3, #0
 801044e:	d118      	bne.n	8010482 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00c      	beq.n	8010472 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	f7fa febc 	bl	800b1e2 <lwip_htonl>
 801046a:	4603      	mov	r3, r0
 801046c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801046e:	2b00      	cmp	r3, #0
 8010470:	dc20      	bgt.n	80104b4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	8b5b      	ldrh	r3, [r3, #26]
 8010476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010480:	e018      	b.n	80104b4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	4618      	mov	r0, r3
 8010490:	f7fa fea7 	bl	800b1e2 <lwip_htonl>
 8010494:	4603      	mov	r3, r0
 8010496:	1ae3      	subs	r3, r4, r3
 8010498:	2b00      	cmp	r3, #0
 801049a:	dc0b      	bgt.n	80104b4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8b5b      	ldrh	r3, [r3, #26]
 80104a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104aa:	e003      	b.n	80104b4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f002 fbdd 	bl	8012c6c <tcp_send_empty_ack>
 80104b2:	e000      	b.n	80104b6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104b4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d05b      	beq.n	8010576 <tcp_receive+0x50a>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80104c2:	4b60      	ldr	r3, [pc, #384]	; (8010644 <tcp_receive+0x5d8>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	da54      	bge.n	8010576 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80104cc:	4b5e      	ldr	r3, [pc, #376]	; (8010648 <tcp_receive+0x5dc>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	b29b      	uxth	r3, r3
 80104dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80104e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104ea:	10db      	asrs	r3, r3, #3
 80104ec:	b21b      	sxth	r3, r3
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104fe:	b29a      	uxth	r2, r3
 8010500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010504:	4413      	add	r3, r2
 8010506:	b29b      	uxth	r3, r3
 8010508:	b21a      	sxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801050e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010512:	2b00      	cmp	r3, #0
 8010514:	da05      	bge.n	8010522 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010516:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801051a:	425b      	negs	r3, r3
 801051c:	b29b      	uxth	r3, r3
 801051e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010522:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801052c:	109b      	asrs	r3, r3, #2
 801052e:	b21b      	sxth	r3, r3
 8010530:	b29b      	uxth	r3, r3
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	b29b      	uxth	r3, r3
 8010536:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010540:	b29a      	uxth	r2, r3
 8010542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010546:	4413      	add	r3, r2
 8010548:	b29b      	uxth	r3, r3
 801054a:	b21a      	sxth	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010556:	10db      	asrs	r3, r3, #3
 8010558:	b21b      	sxth	r3, r3
 801055a:	b29a      	uxth	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010562:	b29b      	uxth	r3, r3
 8010564:	4413      	add	r3, r2
 8010566:	b29b      	uxth	r3, r3
 8010568:	b21a      	sxth	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010576:	4b35      	ldr	r3, [pc, #212]	; (801064c <tcp_receive+0x5e0>)
 8010578:	881b      	ldrh	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 84e1 	beq.w	8010f42 <tcp_receive+0xed6>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	7d1b      	ldrb	r3, [r3, #20]
 8010584:	2b06      	cmp	r3, #6
 8010586:	f200 84dc 	bhi.w	8010f42 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801058e:	4b30      	ldr	r3, [pc, #192]	; (8010650 <tcp_receive+0x5e4>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	3b01      	subs	r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	f2c0 808e 	blt.w	80106b8 <tcp_receive+0x64c>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105a0:	4b2a      	ldr	r3, [pc, #168]	; (801064c <tcp_receive+0x5e0>)
 80105a2:	881b      	ldrh	r3, [r3, #0]
 80105a4:	4619      	mov	r1, r3
 80105a6:	4b2a      	ldr	r3, [pc, #168]	; (8010650 <tcp_receive+0x5e4>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	440b      	add	r3, r1
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	3301      	adds	r3, #1
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f300 8081 	bgt.w	80106b8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80105b6:	4b27      	ldr	r3, [pc, #156]	; (8010654 <tcp_receive+0x5e8>)
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105c0:	4b23      	ldr	r3, [pc, #140]	; (8010650 <tcp_receive+0x5e4>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80105c8:	4b22      	ldr	r3, [pc, #136]	; (8010654 <tcp_receive+0x5e8>)
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d106      	bne.n	80105de <tcp_receive+0x572>
 80105d0:	4b21      	ldr	r3, [pc, #132]	; (8010658 <tcp_receive+0x5ec>)
 80105d2:	f240 5294 	movw	r2, #1428	; 0x594
 80105d6:	4921      	ldr	r1, [pc, #132]	; (801065c <tcp_receive+0x5f0>)
 80105d8:	4821      	ldr	r0, [pc, #132]	; (8010660 <tcp_receive+0x5f4>)
 80105da:	f007 fe6f 	bl	80182bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d906      	bls.n	80105f6 <tcp_receive+0x58a>
 80105e8:	4b1b      	ldr	r3, [pc, #108]	; (8010658 <tcp_receive+0x5ec>)
 80105ea:	f240 5295 	movw	r2, #1429	; 0x595
 80105ee:	491d      	ldr	r1, [pc, #116]	; (8010664 <tcp_receive+0x5f8>)
 80105f0:	481b      	ldr	r0, [pc, #108]	; (8010660 <tcp_receive+0x5f4>)
 80105f2:	f007 fe63 	bl	80182bc <iprintf>
      off = (u16_t)off32;
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80105fc:	4b15      	ldr	r3, [pc, #84]	; (8010654 <tcp_receive+0x5e8>)
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	891b      	ldrh	r3, [r3, #8]
 8010602:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010606:	429a      	cmp	r2, r3
 8010608:	d906      	bls.n	8010618 <tcp_receive+0x5ac>
 801060a:	4b13      	ldr	r3, [pc, #76]	; (8010658 <tcp_receive+0x5ec>)
 801060c:	f240 5297 	movw	r2, #1431	; 0x597
 8010610:	4915      	ldr	r1, [pc, #84]	; (8010668 <tcp_receive+0x5fc>)
 8010612:	4813      	ldr	r0, [pc, #76]	; (8010660 <tcp_receive+0x5f4>)
 8010614:	f007 fe52 	bl	80182bc <iprintf>
      inseg.len -= off;
 8010618:	4b0e      	ldr	r3, [pc, #56]	; (8010654 <tcp_receive+0x5e8>)
 801061a:	891a      	ldrh	r2, [r3, #8]
 801061c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	b29a      	uxth	r2, r3
 8010624:	4b0b      	ldr	r3, [pc, #44]	; (8010654 <tcp_receive+0x5e8>)
 8010626:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010628:	4b0a      	ldr	r3, [pc, #40]	; (8010654 <tcp_receive+0x5e8>)
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	891a      	ldrh	r2, [r3, #8]
 801062e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010636:	e029      	b.n	801068c <tcp_receive+0x620>
 8010638:	0801b674 	.word	0x0801b674
 801063c:	0801b67c 	.word	0x0801b67c
 8010640:	20008c80 	.word	0x20008c80
 8010644:	20008c7c 	.word	0x20008c7c
 8010648:	2000fadc 	.word	0x2000fadc
 801064c:	20008c82 	.word	0x20008c82
 8010650:	20008c78 	.word	0x20008c78
 8010654:	20008c58 	.word	0x20008c58
 8010658:	0801b30c 	.word	0x0801b30c
 801065c:	0801b684 	.word	0x0801b684
 8010660:	0801b358 	.word	0x0801b358
 8010664:	0801b694 	.word	0x0801b694
 8010668:	0801b6a4 	.word	0x0801b6a4
        off -= p->len;
 801066c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801066e:	895b      	ldrh	r3, [r3, #10]
 8010670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801067a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801067c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801067e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010682:	2200      	movs	r2, #0
 8010684:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801068c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801068e:	895b      	ldrh	r3, [r3, #10]
 8010690:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010694:	429a      	cmp	r2, r3
 8010696:	d8e9      	bhi.n	801066c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801069c:	4619      	mov	r1, r3
 801069e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80106a0:	f7fc f870 	bl	800c784 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a8:	4a91      	ldr	r2, [pc, #580]	; (80108f0 <tcp_receive+0x884>)
 80106aa:	6013      	str	r3, [r2, #0]
 80106ac:	4b91      	ldr	r3, [pc, #580]	; (80108f4 <tcp_receive+0x888>)
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	4a8f      	ldr	r2, [pc, #572]	; (80108f0 <tcp_receive+0x884>)
 80106b2:	6812      	ldr	r2, [r2, #0]
 80106b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80106b6:	e00d      	b.n	80106d4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80106b8:	4b8d      	ldr	r3, [pc, #564]	; (80108f0 <tcp_receive+0x884>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	da06      	bge.n	80106d4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8b5b      	ldrh	r3, [r3, #26]
 80106ca:	f043 0302 	orr.w	r3, r3, #2
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80106d4:	4b86      	ldr	r3, [pc, #536]	; (80108f0 <tcp_receive+0x884>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f2c0 842a 	blt.w	8010f38 <tcp_receive+0xecc>
 80106e4:	4b82      	ldr	r3, [pc, #520]	; (80108f0 <tcp_receive+0x884>)
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ec:	6879      	ldr	r1, [r7, #4]
 80106ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106f0:	440b      	add	r3, r1
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	3301      	adds	r3, #1
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f300 841e 	bgt.w	8010f38 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010700:	4b7b      	ldr	r3, [pc, #492]	; (80108f0 <tcp_receive+0x884>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	429a      	cmp	r2, r3
 8010706:	f040 829a 	bne.w	8010c3e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801070a:	4b7a      	ldr	r3, [pc, #488]	; (80108f4 <tcp_receive+0x888>)
 801070c:	891c      	ldrh	r4, [r3, #8]
 801070e:	4b79      	ldr	r3, [pc, #484]	; (80108f4 <tcp_receive+0x888>)
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	899b      	ldrh	r3, [r3, #12]
 8010714:	b29b      	uxth	r3, r3
 8010716:	4618      	mov	r0, r3
 8010718:	f7fa fd4e 	bl	800b1b8 <lwip_htons>
 801071c:	4603      	mov	r3, r0
 801071e:	b2db      	uxtb	r3, r3
 8010720:	f003 0303 	and.w	r3, r3, #3
 8010724:	2b00      	cmp	r3, #0
 8010726:	d001      	beq.n	801072c <tcp_receive+0x6c0>
 8010728:	2301      	movs	r3, #1
 801072a:	e000      	b.n	801072e <tcp_receive+0x6c2>
 801072c:	2300      	movs	r3, #0
 801072e:	4423      	add	r3, r4
 8010730:	b29a      	uxth	r2, r3
 8010732:	4b71      	ldr	r3, [pc, #452]	; (80108f8 <tcp_receive+0x88c>)
 8010734:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801073a:	4b6f      	ldr	r3, [pc, #444]	; (80108f8 <tcp_receive+0x88c>)
 801073c:	881b      	ldrh	r3, [r3, #0]
 801073e:	429a      	cmp	r2, r3
 8010740:	d275      	bcs.n	801082e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010742:	4b6c      	ldr	r3, [pc, #432]	; (80108f4 <tcp_receive+0x888>)
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	899b      	ldrh	r3, [r3, #12]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7fa fd34 	bl	800b1b8 <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	b2db      	uxtb	r3, r3
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	2b00      	cmp	r3, #0
 801075a:	d01f      	beq.n	801079c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801075c:	4b65      	ldr	r3, [pc, #404]	; (80108f4 <tcp_receive+0x888>)
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	899b      	ldrh	r3, [r3, #12]
 8010762:	b29b      	uxth	r3, r3
 8010764:	b21b      	sxth	r3, r3
 8010766:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801076a:	b21c      	sxth	r4, r3
 801076c:	4b61      	ldr	r3, [pc, #388]	; (80108f4 <tcp_receive+0x888>)
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	b29b      	uxth	r3, r3
 8010774:	4618      	mov	r0, r3
 8010776:	f7fa fd1f 	bl	800b1b8 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	b29b      	uxth	r3, r3
 8010780:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010784:	b29b      	uxth	r3, r3
 8010786:	4618      	mov	r0, r3
 8010788:	f7fa fd16 	bl	800b1b8 <lwip_htons>
 801078c:	4603      	mov	r3, r0
 801078e:	b21b      	sxth	r3, r3
 8010790:	4323      	orrs	r3, r4
 8010792:	b21a      	sxth	r2, r3
 8010794:	4b57      	ldr	r3, [pc, #348]	; (80108f4 <tcp_receive+0x888>)
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	b292      	uxth	r2, r2
 801079a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107a0:	4b54      	ldr	r3, [pc, #336]	; (80108f4 <tcp_receive+0x888>)
 80107a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80107a4:	4b53      	ldr	r3, [pc, #332]	; (80108f4 <tcp_receive+0x888>)
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	899b      	ldrh	r3, [r3, #12]
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fa fd03 	bl	800b1b8 <lwip_htons>
 80107b2:	4603      	mov	r3, r0
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	f003 0302 	and.w	r3, r3, #2
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d005      	beq.n	80107ca <tcp_receive+0x75e>
            inseg.len -= 1;
 80107be:	4b4d      	ldr	r3, [pc, #308]	; (80108f4 <tcp_receive+0x888>)
 80107c0:	891b      	ldrh	r3, [r3, #8]
 80107c2:	3b01      	subs	r3, #1
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	4b4b      	ldr	r3, [pc, #300]	; (80108f4 <tcp_receive+0x888>)
 80107c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80107ca:	4b4a      	ldr	r3, [pc, #296]	; (80108f4 <tcp_receive+0x888>)
 80107cc:	685a      	ldr	r2, [r3, #4]
 80107ce:	4b49      	ldr	r3, [pc, #292]	; (80108f4 <tcp_receive+0x888>)
 80107d0:	891b      	ldrh	r3, [r3, #8]
 80107d2:	4619      	mov	r1, r3
 80107d4:	4610      	mov	r0, r2
 80107d6:	f7fb fed5 	bl	800c584 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80107da:	4b46      	ldr	r3, [pc, #280]	; (80108f4 <tcp_receive+0x888>)
 80107dc:	891c      	ldrh	r4, [r3, #8]
 80107de:	4b45      	ldr	r3, [pc, #276]	; (80108f4 <tcp_receive+0x888>)
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	899b      	ldrh	r3, [r3, #12]
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fa fce6 	bl	800b1b8 <lwip_htons>
 80107ec:	4603      	mov	r3, r0
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	f003 0303 	and.w	r3, r3, #3
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d001      	beq.n	80107fc <tcp_receive+0x790>
 80107f8:	2301      	movs	r3, #1
 80107fa:	e000      	b.n	80107fe <tcp_receive+0x792>
 80107fc:	2300      	movs	r3, #0
 80107fe:	4423      	add	r3, r4
 8010800:	b29a      	uxth	r2, r3
 8010802:	4b3d      	ldr	r3, [pc, #244]	; (80108f8 <tcp_receive+0x88c>)
 8010804:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010806:	4b3c      	ldr	r3, [pc, #240]	; (80108f8 <tcp_receive+0x88c>)
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	461a      	mov	r2, r3
 801080c:	4b38      	ldr	r3, [pc, #224]	; (80108f0 <tcp_receive+0x884>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	441a      	add	r2, r3
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010816:	6879      	ldr	r1, [r7, #4]
 8010818:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801081a:	440b      	add	r3, r1
 801081c:	429a      	cmp	r2, r3
 801081e:	d006      	beq.n	801082e <tcp_receive+0x7c2>
 8010820:	4b36      	ldr	r3, [pc, #216]	; (80108fc <tcp_receive+0x890>)
 8010822:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010826:	4936      	ldr	r1, [pc, #216]	; (8010900 <tcp_receive+0x894>)
 8010828:	4836      	ldr	r0, [pc, #216]	; (8010904 <tcp_receive+0x898>)
 801082a:	f007 fd47 	bl	80182bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 80e7 	beq.w	8010a06 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010838:	4b2e      	ldr	r3, [pc, #184]	; (80108f4 <tcp_receive+0x888>)
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	899b      	ldrh	r3, [r3, #12]
 801083e:	b29b      	uxth	r3, r3
 8010840:	4618      	mov	r0, r3
 8010842:	f7fa fcb9 	bl	800b1b8 <lwip_htons>
 8010846:	4603      	mov	r3, r0
 8010848:	b2db      	uxtb	r3, r3
 801084a:	f003 0301 	and.w	r3, r3, #1
 801084e:	2b00      	cmp	r3, #0
 8010850:	d010      	beq.n	8010874 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010852:	e00a      	b.n	801086a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010858:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7fd fcab 	bl	800e1c0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1f0      	bne.n	8010854 <tcp_receive+0x7e8>
 8010872:	e0c8      	b.n	8010a06 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010878:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801087a:	e052      	b.n	8010922 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	899b      	ldrh	r3, [r3, #12]
 8010882:	b29b      	uxth	r3, r3
 8010884:	4618      	mov	r0, r3
 8010886:	f7fa fc97 	bl	800b1b8 <lwip_htons>
 801088a:	4603      	mov	r3, r0
 801088c:	b2db      	uxtb	r3, r3
 801088e:	f003 0301 	and.w	r3, r3, #1
 8010892:	2b00      	cmp	r3, #0
 8010894:	d03d      	beq.n	8010912 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010896:	4b17      	ldr	r3, [pc, #92]	; (80108f4 <tcp_receive+0x888>)
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	899b      	ldrh	r3, [r3, #12]
 801089c:	b29b      	uxth	r3, r3
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fa fc8a 	bl	800b1b8 <lwip_htons>
 80108a4:	4603      	mov	r3, r0
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d130      	bne.n	8010912 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80108b0:	4b10      	ldr	r3, [pc, #64]	; (80108f4 <tcp_receive+0x888>)
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	899b      	ldrh	r3, [r3, #12]
 80108b6:	b29c      	uxth	r4, r3
 80108b8:	2001      	movs	r0, #1
 80108ba:	f7fa fc7d 	bl	800b1b8 <lwip_htons>
 80108be:	4603      	mov	r3, r0
 80108c0:	461a      	mov	r2, r3
 80108c2:	4b0c      	ldr	r3, [pc, #48]	; (80108f4 <tcp_receive+0x888>)
 80108c4:	68db      	ldr	r3, [r3, #12]
 80108c6:	4322      	orrs	r2, r4
 80108c8:	b292      	uxth	r2, r2
 80108ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80108cc:	4b09      	ldr	r3, [pc, #36]	; (80108f4 <tcp_receive+0x888>)
 80108ce:	891c      	ldrh	r4, [r3, #8]
 80108d0:	4b08      	ldr	r3, [pc, #32]	; (80108f4 <tcp_receive+0x888>)
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	899b      	ldrh	r3, [r3, #12]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fa fc6d 	bl	800b1b8 <lwip_htons>
 80108de:	4603      	mov	r3, r0
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	f003 0303 	and.w	r3, r3, #3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d00e      	beq.n	8010908 <tcp_receive+0x89c>
 80108ea:	2301      	movs	r3, #1
 80108ec:	e00d      	b.n	801090a <tcp_receive+0x89e>
 80108ee:	bf00      	nop
 80108f0:	20008c78 	.word	0x20008c78
 80108f4:	20008c58 	.word	0x20008c58
 80108f8:	20008c82 	.word	0x20008c82
 80108fc:	0801b30c 	.word	0x0801b30c
 8010900:	0801b6b4 	.word	0x0801b6b4
 8010904:	0801b358 	.word	0x0801b358
 8010908:	2300      	movs	r3, #0
 801090a:	4423      	add	r3, r4
 801090c:	b29a      	uxth	r2, r3
 801090e:	4b98      	ldr	r3, [pc, #608]	; (8010b70 <tcp_receive+0xb04>)
 8010910:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010914:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801091c:	6938      	ldr	r0, [r7, #16]
 801091e:	f7fd fc4f 	bl	800e1c0 <tcp_seg_free>
            while (next &&
 8010922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00e      	beq.n	8010946 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010928:	4b91      	ldr	r3, [pc, #580]	; (8010b70 <tcp_receive+0xb04>)
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	461a      	mov	r2, r3
 801092e:	4b91      	ldr	r3, [pc, #580]	; (8010b74 <tcp_receive+0xb08>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	441a      	add	r2, r3
 8010934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801093c:	8909      	ldrh	r1, [r1, #8]
 801093e:	440b      	add	r3, r1
 8010940:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010942:	2b00      	cmp	r3, #0
 8010944:	da9a      	bge.n	801087c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010948:	2b00      	cmp	r3, #0
 801094a:	d059      	beq.n	8010a00 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801094c:	4b88      	ldr	r3, [pc, #544]	; (8010b70 <tcp_receive+0xb04>)
 801094e:	881b      	ldrh	r3, [r3, #0]
 8010950:	461a      	mov	r2, r3
 8010952:	4b88      	ldr	r3, [pc, #544]	; (8010b74 <tcp_receive+0xb08>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	441a      	add	r2, r3
 8010958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010960:	2b00      	cmp	r3, #0
 8010962:	dd4d      	ble.n	8010a00 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	b29a      	uxth	r2, r3
 801096c:	4b81      	ldr	r3, [pc, #516]	; (8010b74 <tcp_receive+0xb08>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	b29b      	uxth	r3, r3
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	b29a      	uxth	r2, r3
 8010976:	4b80      	ldr	r3, [pc, #512]	; (8010b78 <tcp_receive+0xb0c>)
 8010978:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801097a:	4b7f      	ldr	r3, [pc, #508]	; (8010b78 <tcp_receive+0xb0c>)
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	899b      	ldrh	r3, [r3, #12]
 8010980:	b29b      	uxth	r3, r3
 8010982:	4618      	mov	r0, r3
 8010984:	f7fa fc18 	bl	800b1b8 <lwip_htons>
 8010988:	4603      	mov	r3, r0
 801098a:	b2db      	uxtb	r3, r3
 801098c:	f003 0302 	and.w	r3, r3, #2
 8010990:	2b00      	cmp	r3, #0
 8010992:	d005      	beq.n	80109a0 <tcp_receive+0x934>
                inseg.len -= 1;
 8010994:	4b78      	ldr	r3, [pc, #480]	; (8010b78 <tcp_receive+0xb0c>)
 8010996:	891b      	ldrh	r3, [r3, #8]
 8010998:	3b01      	subs	r3, #1
 801099a:	b29a      	uxth	r2, r3
 801099c:	4b76      	ldr	r3, [pc, #472]	; (8010b78 <tcp_receive+0xb0c>)
 801099e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80109a0:	4b75      	ldr	r3, [pc, #468]	; (8010b78 <tcp_receive+0xb0c>)
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	4b74      	ldr	r3, [pc, #464]	; (8010b78 <tcp_receive+0xb0c>)
 80109a6:	891b      	ldrh	r3, [r3, #8]
 80109a8:	4619      	mov	r1, r3
 80109aa:	4610      	mov	r0, r2
 80109ac:	f7fb fdea 	bl	800c584 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80109b0:	4b71      	ldr	r3, [pc, #452]	; (8010b78 <tcp_receive+0xb0c>)
 80109b2:	891c      	ldrh	r4, [r3, #8]
 80109b4:	4b70      	ldr	r3, [pc, #448]	; (8010b78 <tcp_receive+0xb0c>)
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	899b      	ldrh	r3, [r3, #12]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fa fbfb 	bl	800b1b8 <lwip_htons>
 80109c2:	4603      	mov	r3, r0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	f003 0303 	and.w	r3, r3, #3
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <tcp_receive+0x966>
 80109ce:	2301      	movs	r3, #1
 80109d0:	e000      	b.n	80109d4 <tcp_receive+0x968>
 80109d2:	2300      	movs	r3, #0
 80109d4:	4423      	add	r3, r4
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	4b65      	ldr	r3, [pc, #404]	; (8010b70 <tcp_receive+0xb04>)
 80109da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80109dc:	4b64      	ldr	r3, [pc, #400]	; (8010b70 <tcp_receive+0xb04>)
 80109de:	881b      	ldrh	r3, [r3, #0]
 80109e0:	461a      	mov	r2, r3
 80109e2:	4b64      	ldr	r3, [pc, #400]	; (8010b74 <tcp_receive+0xb08>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	441a      	add	r2, r3
 80109e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d006      	beq.n	8010a00 <tcp_receive+0x994>
 80109f2:	4b62      	ldr	r3, [pc, #392]	; (8010b7c <tcp_receive+0xb10>)
 80109f4:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80109f8:	4961      	ldr	r1, [pc, #388]	; (8010b80 <tcp_receive+0xb14>)
 80109fa:	4862      	ldr	r0, [pc, #392]	; (8010b84 <tcp_receive+0xb18>)
 80109fc:	f007 fc5e 	bl	80182bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a04:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010a06:	4b5a      	ldr	r3, [pc, #360]	; (8010b70 <tcp_receive+0xb04>)
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	4b59      	ldr	r3, [pc, #356]	; (8010b74 <tcp_receive+0xb08>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	441a      	add	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a1a:	4b55      	ldr	r3, [pc, #340]	; (8010b70 <tcp_receive+0xb04>)
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d206      	bcs.n	8010a30 <tcp_receive+0x9c4>
 8010a22:	4b56      	ldr	r3, [pc, #344]	; (8010b7c <tcp_receive+0xb10>)
 8010a24:	f240 6207 	movw	r2, #1543	; 0x607
 8010a28:	4957      	ldr	r1, [pc, #348]	; (8010b88 <tcp_receive+0xb1c>)
 8010a2a:	4856      	ldr	r0, [pc, #344]	; (8010b84 <tcp_receive+0xb18>)
 8010a2c:	f007 fc46 	bl	80182bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a34:	4b4e      	ldr	r3, [pc, #312]	; (8010b70 <tcp_receive+0xb04>)
 8010a36:	881b      	ldrh	r3, [r3, #0]
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7fc fe9b 	bl	800d77c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010a46:	4b4c      	ldr	r3, [pc, #304]	; (8010b78 <tcp_receive+0xb0c>)
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	891b      	ldrh	r3, [r3, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d006      	beq.n	8010a5e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010a50:	4b49      	ldr	r3, [pc, #292]	; (8010b78 <tcp_receive+0xb0c>)
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	4a4d      	ldr	r2, [pc, #308]	; (8010b8c <tcp_receive+0xb20>)
 8010a56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010a58:	4b47      	ldr	r3, [pc, #284]	; (8010b78 <tcp_receive+0xb0c>)
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a5e:	4b46      	ldr	r3, [pc, #280]	; (8010b78 <tcp_receive+0xb0c>)
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	899b      	ldrh	r3, [r3, #12]
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fa fba6 	bl	800b1b8 <lwip_htons>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	f003 0301 	and.w	r3, r3, #1
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f000 80b8 	beq.w	8010bea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010a7a:	4b45      	ldr	r3, [pc, #276]	; (8010b90 <tcp_receive+0xb24>)
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	f043 0320 	orr.w	r3, r3, #32
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	4b42      	ldr	r3, [pc, #264]	; (8010b90 <tcp_receive+0xb24>)
 8010a86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010a88:	e0af      	b.n	8010bea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	4a36      	ldr	r2, [pc, #216]	; (8010b74 <tcp_receive+0xb08>)
 8010a9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	891b      	ldrh	r3, [r3, #8]
 8010aa0:	461c      	mov	r4, r3
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	899b      	ldrh	r3, [r3, #12]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fa fb84 	bl	800b1b8 <lwip_htons>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	f003 0303 	and.w	r3, r3, #3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <tcp_receive+0xa54>
 8010abc:	2301      	movs	r3, #1
 8010abe:	e000      	b.n	8010ac2 <tcp_receive+0xa56>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	191a      	adds	r2, r3, r4
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac8:	441a      	add	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ad2:	461c      	mov	r4, r3
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	891b      	ldrh	r3, [r3, #8]
 8010ad8:	461d      	mov	r5, r3
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	899b      	ldrh	r3, [r3, #12]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fa fb68 	bl	800b1b8 <lwip_htons>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	f003 0303 	and.w	r3, r3, #3
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <tcp_receive+0xa8c>
 8010af4:	2301      	movs	r3, #1
 8010af6:	e000      	b.n	8010afa <tcp_receive+0xa8e>
 8010af8:	2300      	movs	r3, #0
 8010afa:	442b      	add	r3, r5
 8010afc:	429c      	cmp	r4, r3
 8010afe:	d206      	bcs.n	8010b0e <tcp_receive+0xaa2>
 8010b00:	4b1e      	ldr	r3, [pc, #120]	; (8010b7c <tcp_receive+0xb10>)
 8010b02:	f240 622c 	movw	r2, #1580	; 0x62c
 8010b06:	4923      	ldr	r1, [pc, #140]	; (8010b94 <tcp_receive+0xb28>)
 8010b08:	481e      	ldr	r0, [pc, #120]	; (8010b84 <tcp_receive+0xb18>)
 8010b0a:	f007 fbd7 	bl	80182bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	891b      	ldrh	r3, [r3, #8]
 8010b12:	461c      	mov	r4, r3
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	899b      	ldrh	r3, [r3, #12]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fa fb4b 	bl	800b1b8 <lwip_htons>
 8010b22:	4603      	mov	r3, r0
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	f003 0303 	and.w	r3, r3, #3
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d001      	beq.n	8010b32 <tcp_receive+0xac6>
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e000      	b.n	8010b34 <tcp_receive+0xac8>
 8010b32:	2300      	movs	r3, #0
 8010b34:	1919      	adds	r1, r3, r4
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b3a:	b28b      	uxth	r3, r1
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f7fc fe19 	bl	800d77c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	891b      	ldrh	r3, [r3, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d028      	beq.n	8010ba6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010b54:	4b0d      	ldr	r3, [pc, #52]	; (8010b8c <tcp_receive+0xb20>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d01d      	beq.n	8010b98 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010b5c:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <tcp_receive+0xb20>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	4619      	mov	r1, r3
 8010b66:	4610      	mov	r0, r2
 8010b68:	f7fb ff60 	bl	800ca2c <pbuf_cat>
 8010b6c:	e018      	b.n	8010ba0 <tcp_receive+0xb34>
 8010b6e:	bf00      	nop
 8010b70:	20008c82 	.word	0x20008c82
 8010b74:	20008c78 	.word	0x20008c78
 8010b78:	20008c58 	.word	0x20008c58
 8010b7c:	0801b30c 	.word	0x0801b30c
 8010b80:	0801b6ec 	.word	0x0801b6ec
 8010b84:	0801b358 	.word	0x0801b358
 8010b88:	0801b728 	.word	0x0801b728
 8010b8c:	20008c88 	.word	0x20008c88
 8010b90:	20008c85 	.word	0x20008c85
 8010b94:	0801b748 	.word	0x0801b748
            } else {
              recv_data = cseg->p;
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	4a70      	ldr	r2, [pc, #448]	; (8010d60 <tcp_receive+0xcf4>)
 8010b9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	899b      	ldrh	r3, [r3, #12]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fa fb02 	bl	800b1b8 <lwip_htons>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	f003 0301 	and.w	r3, r3, #1
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00d      	beq.n	8010bdc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010bc0:	4b68      	ldr	r3, [pc, #416]	; (8010d64 <tcp_receive+0xcf8>)
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f043 0320 	orr.w	r3, r3, #32
 8010bc8:	b2da      	uxtb	r2, r3
 8010bca:	4b66      	ldr	r3, [pc, #408]	; (8010d64 <tcp_receive+0xcf8>)
 8010bcc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	7d1b      	ldrb	r3, [r3, #20]
 8010bd2:	2b04      	cmp	r3, #4
 8010bd4:	d102      	bne.n	8010bdc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2207      	movs	r2, #7
 8010bda:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010be4:	68b8      	ldr	r0, [r7, #8]
 8010be6:	f7fd faeb 	bl	800e1c0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d008      	beq.n	8010c04 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	685a      	ldr	r2, [r3, #4]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	f43f af43 	beq.w	8010a8a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	8b5b      	ldrh	r3, [r3, #26]
 8010c08:	f003 0301 	and.w	r3, r3, #1
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d00e      	beq.n	8010c2e <tcp_receive+0xbc2>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	8b5b      	ldrh	r3, [r3, #26]
 8010c14:	f023 0301 	bic.w	r3, r3, #1
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	835a      	strh	r2, [r3, #26]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	8b5b      	ldrh	r3, [r3, #26]
 8010c22:	f043 0302 	orr.w	r3, r3, #2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010c2c:	e188      	b.n	8010f40 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	8b5b      	ldrh	r3, [r3, #26]
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010c3c:	e180      	b.n	8010f40 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d106      	bne.n	8010c54 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010c46:	4848      	ldr	r0, [pc, #288]	; (8010d68 <tcp_receive+0xcfc>)
 8010c48:	f7fd faf0 	bl	800e22c <tcp_seg_copy>
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	675a      	str	r2, [r3, #116]	; 0x74
 8010c52:	e16d      	b.n	8010f30 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010c54:	2300      	movs	r3, #0
 8010c56:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c5e:	e157      	b.n	8010f10 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	685a      	ldr	r2, [r3, #4]
 8010c66:	4b41      	ldr	r3, [pc, #260]	; (8010d6c <tcp_receive+0xd00>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d11d      	bne.n	8010caa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010c6e:	4b3e      	ldr	r3, [pc, #248]	; (8010d68 <tcp_receive+0xcfc>)
 8010c70:	891a      	ldrh	r2, [r3, #8]
 8010c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c74:	891b      	ldrh	r3, [r3, #8]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	f240 814f 	bls.w	8010f1a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010c7c:	483a      	ldr	r0, [pc, #232]	; (8010d68 <tcp_receive+0xcfc>)
 8010c7e:	f7fd fad5 	bl	800e22c <tcp_seg_copy>
 8010c82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	f000 8149 	beq.w	8010f1e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c94:	697a      	ldr	r2, [r7, #20]
 8010c96:	601a      	str	r2, [r3, #0]
 8010c98:	e002      	b.n	8010ca0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ca2:	6978      	ldr	r0, [r7, #20]
 8010ca4:	f7ff f8de 	bl	800fe64 <tcp_oos_insert_segment>
                }
                break;
 8010ca8:	e139      	b.n	8010f1e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d117      	bne.n	8010ce0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010cb0:	4b2e      	ldr	r3, [pc, #184]	; (8010d6c <tcp_receive+0xd00>)
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	1ad3      	subs	r3, r2, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	da57      	bge.n	8010d70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010cc0:	4829      	ldr	r0, [pc, #164]	; (8010d68 <tcp_receive+0xcfc>)
 8010cc2:	f7fd fab3 	bl	800e22c <tcp_seg_copy>
 8010cc6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f000 8129 	beq.w	8010f22 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	69ba      	ldr	r2, [r7, #24]
 8010cd4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cd8:	69b8      	ldr	r0, [r7, #24]
 8010cda:	f7ff f8c3 	bl	800fe64 <tcp_oos_insert_segment>
                  }
                  break;
 8010cde:	e120      	b.n	8010f22 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010ce0:	4b22      	ldr	r3, [pc, #136]	; (8010d6c <tcp_receive+0xd00>)
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	3b01      	subs	r3, #1
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	db3e      	blt.n	8010d70 <tcp_receive+0xd04>
 8010cf2:	4b1e      	ldr	r3, [pc, #120]	; (8010d6c <tcp_receive+0xd00>)
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	1ad3      	subs	r3, r2, r3
 8010cfe:	3301      	adds	r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	dc35      	bgt.n	8010d70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d04:	4818      	ldr	r0, [pc, #96]	; (8010d68 <tcp_receive+0xcfc>)
 8010d06:	f7fd fa91 	bl	800e22c <tcp_seg_copy>
 8010d0a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f000 8109 	beq.w	8010f26 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d1c:	8912      	ldrh	r2, [r2, #8]
 8010d1e:	441a      	add	r2, r3
 8010d20:	4b12      	ldr	r3, [pc, #72]	; (8010d6c <tcp_receive+0xd00>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	1ad3      	subs	r3, r2, r3
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	dd12      	ble.n	8010d50 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010d2a:	4b10      	ldr	r3, [pc, #64]	; (8010d6c <tcp_receive+0xd00>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d3e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d42:	685a      	ldr	r2, [r3, #4]
 8010d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d46:	891b      	ldrh	r3, [r3, #8]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	f7fb fc1a 	bl	800c584 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d52:	69fa      	ldr	r2, [r7, #28]
 8010d54:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d58:	69f8      	ldr	r0, [r7, #28]
 8010d5a:	f7ff f883 	bl	800fe64 <tcp_oos_insert_segment>
                  }
                  break;
 8010d5e:	e0e2      	b.n	8010f26 <tcp_receive+0xeba>
 8010d60:	20008c88 	.word	0x20008c88
 8010d64:	20008c85 	.word	0x20008c85
 8010d68:	20008c58 	.word	0x20008c58
 8010d6c:	20008c78 	.word	0x20008c78
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d72:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f040 80c6 	bne.w	8010f0a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010d7e:	4b80      	ldr	r3, [pc, #512]	; (8010f80 <tcp_receive+0xf14>)
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f340 80bd 	ble.w	8010f0a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	899b      	ldrh	r3, [r3, #12]
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fa fa0d 	bl	800b1b8 <lwip_htons>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	f040 80bf 	bne.w	8010f2a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010dac:	4875      	ldr	r0, [pc, #468]	; (8010f84 <tcp_receive+0xf18>)
 8010dae:	f7fd fa3d 	bl	800e22c <tcp_seg_copy>
 8010db2:	4602      	mov	r2, r0
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 80b6 	beq.w	8010f2e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dca:	8912      	ldrh	r2, [r2, #8]
 8010dcc:	441a      	add	r2, r3
 8010dce:	4b6c      	ldr	r3, [pc, #432]	; (8010f80 <tcp_receive+0xf14>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	dd12      	ble.n	8010dfe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010dd8:	4b69      	ldr	r3, [pc, #420]	; (8010f80 <tcp_receive+0xf14>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df0:	685a      	ldr	r2, [r3, #4]
 8010df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df4:	891b      	ldrh	r3, [r3, #8]
 8010df6:	4619      	mov	r1, r3
 8010df8:	4610      	mov	r0, r2
 8010dfa:	f7fb fbc3 	bl	800c584 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010dfe:	4b62      	ldr	r3, [pc, #392]	; (8010f88 <tcp_receive+0xf1c>)
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	461a      	mov	r2, r3
 8010e04:	4b5e      	ldr	r3, [pc, #376]	; (8010f80 <tcp_receive+0xf14>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	441a      	add	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e0e:	6879      	ldr	r1, [r7, #4]
 8010e10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e12:	440b      	add	r3, r1
 8010e14:	1ad3      	subs	r3, r2, r3
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f340 8089 	ble.w	8010f2e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	899b      	ldrh	r3, [r3, #12]
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fa f9c6 	bl	800b1b8 <lwip_htons>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	f003 0301 	and.w	r3, r3, #1
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d022      	beq.n	8010e7e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	899b      	ldrh	r3, [r3, #12]
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	b21b      	sxth	r3, r3
 8010e44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e48:	b21c      	sxth	r4, r3
 8010e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	899b      	ldrh	r3, [r3, #12]
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fa f9af 	bl	800b1b8 <lwip_htons>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fa f9a6 	bl	800b1b8 <lwip_htons>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	b21b      	sxth	r3, r3
 8010e70:	4323      	orrs	r3, r4
 8010e72:	b21a      	sxth	r2, r3
 8010e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	b292      	uxth	r2, r2
 8010e7c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e82:	b29a      	uxth	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e88:	4413      	add	r3, r2
 8010e8a:	b299      	uxth	r1, r3
 8010e8c:	4b3c      	ldr	r3, [pc, #240]	; (8010f80 <tcp_receive+0xf14>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	1a8a      	subs	r2, r1, r2
 8010e98:	b292      	uxth	r2, r2
 8010e9a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	685a      	ldr	r2, [r3, #4]
 8010ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	891b      	ldrh	r3, [r3, #8]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	4610      	mov	r0, r2
 8010eac:	f7fb fb6a 	bl	800c584 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	891c      	ldrh	r4, [r3, #8]
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	899b      	ldrh	r3, [r3, #12]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7fa f979 	bl	800b1b8 <lwip_htons>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	f003 0303 	and.w	r3, r3, #3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <tcp_receive+0xe6a>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e000      	b.n	8010ed8 <tcp_receive+0xe6c>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	4423      	add	r3, r4
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	4b2a      	ldr	r3, [pc, #168]	; (8010f88 <tcp_receive+0xf1c>)
 8010ede:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010ee0:	4b29      	ldr	r3, [pc, #164]	; (8010f88 <tcp_receive+0xf1c>)
 8010ee2:	881b      	ldrh	r3, [r3, #0]
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	4b26      	ldr	r3, [pc, #152]	; (8010f80 <tcp_receive+0xf14>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	441a      	add	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef0:	6879      	ldr	r1, [r7, #4]
 8010ef2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ef4:	440b      	add	r3, r1
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d019      	beq.n	8010f2e <tcp_receive+0xec2>
 8010efa:	4b24      	ldr	r3, [pc, #144]	; (8010f8c <tcp_receive+0xf20>)
 8010efc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010f00:	4923      	ldr	r1, [pc, #140]	; (8010f90 <tcp_receive+0xf24>)
 8010f02:	4824      	ldr	r0, [pc, #144]	; (8010f94 <tcp_receive+0xf28>)
 8010f04:	f007 f9da 	bl	80182bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010f08:	e011      	b.n	8010f2e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	f47f aea4 	bne.w	8010c60 <tcp_receive+0xbf4>
 8010f18:	e00a      	b.n	8010f30 <tcp_receive+0xec4>
                break;
 8010f1a:	bf00      	nop
 8010f1c:	e008      	b.n	8010f30 <tcp_receive+0xec4>
                break;
 8010f1e:	bf00      	nop
 8010f20:	e006      	b.n	8010f30 <tcp_receive+0xec4>
                  break;
 8010f22:	bf00      	nop
 8010f24:	e004      	b.n	8010f30 <tcp_receive+0xec4>
                  break;
 8010f26:	bf00      	nop
 8010f28:	e002      	b.n	8010f30 <tcp_receive+0xec4>
                  break;
 8010f2a:	bf00      	nop
 8010f2c:	e000      	b.n	8010f30 <tcp_receive+0xec4>
                break;
 8010f2e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f001 fe9b 	bl	8012c6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010f36:	e003      	b.n	8010f40 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 fe97 	bl	8012c6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f3e:	e01a      	b.n	8010f76 <tcp_receive+0xf0a>
 8010f40:	e019      	b.n	8010f76 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010f42:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <tcp_receive+0xf14>)
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	db0a      	blt.n	8010f66 <tcp_receive+0xefa>
 8010f50:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <tcp_receive+0xf14>)
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f58:	6879      	ldr	r1, [r7, #4]
 8010f5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f5c:	440b      	add	r3, r1
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	3301      	adds	r3, #1
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	dd07      	ble.n	8010f76 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8b5b      	ldrh	r3, [r3, #26]
 8010f6a:	f043 0302 	orr.w	r3, r3, #2
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010f74:	e7ff      	b.n	8010f76 <tcp_receive+0xf0a>
 8010f76:	bf00      	nop
 8010f78:	3750      	adds	r7, #80	; 0x50
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	20008c78 	.word	0x20008c78
 8010f84:	20008c58 	.word	0x20008c58
 8010f88:	20008c82 	.word	0x20008c82
 8010f8c:	0801b30c 	.word	0x0801b30c
 8010f90:	0801b6b4 	.word	0x0801b6b4
 8010f94:	0801b358 	.word	0x0801b358

08010f98 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010f9e:	4b15      	ldr	r3, [pc, #84]	; (8010ff4 <tcp_get_next_optbyte+0x5c>)
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	1c5a      	adds	r2, r3, #1
 8010fa4:	b291      	uxth	r1, r2
 8010fa6:	4a13      	ldr	r2, [pc, #76]	; (8010ff4 <tcp_get_next_optbyte+0x5c>)
 8010fa8:	8011      	strh	r1, [r2, #0]
 8010faa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010fac:	4b12      	ldr	r3, [pc, #72]	; (8010ff8 <tcp_get_next_optbyte+0x60>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d004      	beq.n	8010fbe <tcp_get_next_optbyte+0x26>
 8010fb4:	4b11      	ldr	r3, [pc, #68]	; (8010ffc <tcp_get_next_optbyte+0x64>)
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	88fa      	ldrh	r2, [r7, #6]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d208      	bcs.n	8010fd0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010fbe:	4b10      	ldr	r3, [pc, #64]	; (8011000 <tcp_get_next_optbyte+0x68>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	3314      	adds	r3, #20
 8010fc4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010fc6:	88fb      	ldrh	r3, [r7, #6]
 8010fc8:	683a      	ldr	r2, [r7, #0]
 8010fca:	4413      	add	r3, r2
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	e00b      	b.n	8010fe8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010fd0:	88fb      	ldrh	r3, [r7, #6]
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	4b09      	ldr	r3, [pc, #36]	; (8010ffc <tcp_get_next_optbyte+0x64>)
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010fde:	4b06      	ldr	r3, [pc, #24]	; (8010ff8 <tcp_get_next_optbyte+0x60>)
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	797b      	ldrb	r3, [r7, #5]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	20008c74 	.word	0x20008c74
 8010ff8:	20008c70 	.word	0x20008c70
 8010ffc:	20008c6e 	.word	0x20008c6e
 8011000:	20008c68 	.word	0x20008c68

08011004 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d106      	bne.n	8011020 <tcp_parseopt+0x1c>
 8011012:	4b31      	ldr	r3, [pc, #196]	; (80110d8 <tcp_parseopt+0xd4>)
 8011014:	f240 727d 	movw	r2, #1917	; 0x77d
 8011018:	4930      	ldr	r1, [pc, #192]	; (80110dc <tcp_parseopt+0xd8>)
 801101a:	4831      	ldr	r0, [pc, #196]	; (80110e0 <tcp_parseopt+0xdc>)
 801101c:	f007 f94e 	bl	80182bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011020:	4b30      	ldr	r3, [pc, #192]	; (80110e4 <tcp_parseopt+0xe0>)
 8011022:	881b      	ldrh	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d053      	beq.n	80110d0 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011028:	4b2f      	ldr	r3, [pc, #188]	; (80110e8 <tcp_parseopt+0xe4>)
 801102a:	2200      	movs	r2, #0
 801102c:	801a      	strh	r2, [r3, #0]
 801102e:	e043      	b.n	80110b8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8011030:	f7ff ffb2 	bl	8010f98 <tcp_get_next_optbyte>
 8011034:	4603      	mov	r3, r0
 8011036:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011038:	7bfb      	ldrb	r3, [r7, #15]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d03c      	beq.n	80110b8 <tcp_parseopt+0xb4>
 801103e:	2b02      	cmp	r3, #2
 8011040:	d002      	beq.n	8011048 <tcp_parseopt+0x44>
 8011042:	2b00      	cmp	r3, #0
 8011044:	d03f      	beq.n	80110c6 <tcp_parseopt+0xc2>
 8011046:	e026      	b.n	8011096 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011048:	f7ff ffa6 	bl	8010f98 <tcp_get_next_optbyte>
 801104c:	4603      	mov	r3, r0
 801104e:	2b04      	cmp	r3, #4
 8011050:	d13b      	bne.n	80110ca <tcp_parseopt+0xc6>
 8011052:	4b25      	ldr	r3, [pc, #148]	; (80110e8 <tcp_parseopt+0xe4>)
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	3302      	adds	r3, #2
 8011058:	4a22      	ldr	r2, [pc, #136]	; (80110e4 <tcp_parseopt+0xe0>)
 801105a:	8812      	ldrh	r2, [r2, #0]
 801105c:	4293      	cmp	r3, r2
 801105e:	dc34      	bgt.n	80110ca <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011060:	f7ff ff9a 	bl	8010f98 <tcp_get_next_optbyte>
 8011064:	4603      	mov	r3, r0
 8011066:	b29b      	uxth	r3, r3
 8011068:	021b      	lsls	r3, r3, #8
 801106a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801106c:	f7ff ff94 	bl	8010f98 <tcp_get_next_optbyte>
 8011070:	4603      	mov	r3, r0
 8011072:	b29a      	uxth	r2, r3
 8011074:	89bb      	ldrh	r3, [r7, #12]
 8011076:	4313      	orrs	r3, r2
 8011078:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801107a:	89bb      	ldrh	r3, [r7, #12]
 801107c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011080:	d804      	bhi.n	801108c <tcp_parseopt+0x88>
 8011082:	89bb      	ldrh	r3, [r7, #12]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <tcp_parseopt+0x88>
 8011088:	89ba      	ldrh	r2, [r7, #12]
 801108a:	e001      	b.n	8011090 <tcp_parseopt+0x8c>
 801108c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011094:	e010      	b.n	80110b8 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011096:	f7ff ff7f 	bl	8010f98 <tcp_get_next_optbyte>
 801109a:	4603      	mov	r3, r0
 801109c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801109e:	7afb      	ldrb	r3, [r7, #11]
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d914      	bls.n	80110ce <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80110a4:	7afb      	ldrb	r3, [r7, #11]
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	4b0f      	ldr	r3, [pc, #60]	; (80110e8 <tcp_parseopt+0xe4>)
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	4413      	add	r3, r2
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	3b02      	subs	r3, #2
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	4b0c      	ldr	r3, [pc, #48]	; (80110e8 <tcp_parseopt+0xe4>)
 80110b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110b8:	4b0b      	ldr	r3, [pc, #44]	; (80110e8 <tcp_parseopt+0xe4>)
 80110ba:	881a      	ldrh	r2, [r3, #0]
 80110bc:	4b09      	ldr	r3, [pc, #36]	; (80110e4 <tcp_parseopt+0xe0>)
 80110be:	881b      	ldrh	r3, [r3, #0]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d3b5      	bcc.n	8011030 <tcp_parseopt+0x2c>
 80110c4:	e004      	b.n	80110d0 <tcp_parseopt+0xcc>
          return;
 80110c6:	bf00      	nop
 80110c8:	e002      	b.n	80110d0 <tcp_parseopt+0xcc>
            return;
 80110ca:	bf00      	nop
 80110cc:	e000      	b.n	80110d0 <tcp_parseopt+0xcc>
            return;
 80110ce:	bf00      	nop
      }
    }
  }
}
 80110d0:	3710      	adds	r7, #16
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	0801b30c 	.word	0x0801b30c
 80110dc:	0801b770 	.word	0x0801b770
 80110e0:	0801b358 	.word	0x0801b358
 80110e4:	20008c6c 	.word	0x20008c6c
 80110e8:	20008c74 	.word	0x20008c74

080110ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80110f0:	4b05      	ldr	r3, [pc, #20]	; (8011108 <tcp_trigger_input_pcb_close+0x1c>)
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	f043 0310 	orr.w	r3, r3, #16
 80110f8:	b2da      	uxtb	r2, r3
 80110fa:	4b03      	ldr	r3, [pc, #12]	; (8011108 <tcp_trigger_input_pcb_close+0x1c>)
 80110fc:	701a      	strb	r2, [r3, #0]
}
 80110fe:	bf00      	nop
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	20008c85 	.word	0x20008c85

0801110c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00a      	beq.n	8011134 <tcp_route+0x28>
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7a1b      	ldrb	r3, [r3, #8]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d006      	beq.n	8011134 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	7a1b      	ldrb	r3, [r3, #8]
 801112a:	4618      	mov	r0, r3
 801112c:	f7fb f826 	bl	800c17c <netif_get_by_index>
 8011130:	4603      	mov	r3, r0
 8011132:	e003      	b.n	801113c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f005 fc7b 	bl	8016a30 <ip4_route>
 801113a:	4603      	mov	r3, r0
  }
}
 801113c:	4618      	mov	r0, r3
 801113e:	3710      	adds	r7, #16
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011144:	b590      	push	{r4, r7, lr}
 8011146:	b087      	sub	sp, #28
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	603b      	str	r3, [r7, #0]
 8011150:	4613      	mov	r3, r2
 8011152:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d105      	bne.n	8011166 <tcp_create_segment+0x22>
 801115a:	4b44      	ldr	r3, [pc, #272]	; (801126c <tcp_create_segment+0x128>)
 801115c:	22a3      	movs	r2, #163	; 0xa3
 801115e:	4944      	ldr	r1, [pc, #272]	; (8011270 <tcp_create_segment+0x12c>)
 8011160:	4844      	ldr	r0, [pc, #272]	; (8011274 <tcp_create_segment+0x130>)
 8011162:	f007 f8ab 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d105      	bne.n	8011178 <tcp_create_segment+0x34>
 801116c:	4b3f      	ldr	r3, [pc, #252]	; (801126c <tcp_create_segment+0x128>)
 801116e:	22a4      	movs	r2, #164	; 0xa4
 8011170:	4941      	ldr	r1, [pc, #260]	; (8011278 <tcp_create_segment+0x134>)
 8011172:	4840      	ldr	r0, [pc, #256]	; (8011274 <tcp_create_segment+0x130>)
 8011174:	f007 f8a2 	bl	80182bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011178:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	b2db      	uxtb	r3, r3
 8011180:	f003 0304 	and.w	r3, r3, #4
 8011184:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011186:	2003      	movs	r0, #3
 8011188:	f7fa fd02 	bl	800bb90 <memp_malloc>
 801118c:	6138      	str	r0, [r7, #16]
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d104      	bne.n	801119e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011194:	68b8      	ldr	r0, [r7, #8]
 8011196:	f7fb fb7b 	bl	800c890 <pbuf_free>
    return NULL;
 801119a:	2300      	movs	r3, #0
 801119c:	e061      	b.n	8011262 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80111a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2200      	movs	r2, #0
 80111aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	891a      	ldrh	r2, [r3, #8]
 80111b6:	7dfb      	ldrb	r3, [r7, #23]
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d205      	bcs.n	80111ca <tcp_create_segment+0x86>
 80111be:	4b2b      	ldr	r3, [pc, #172]	; (801126c <tcp_create_segment+0x128>)
 80111c0:	22b0      	movs	r2, #176	; 0xb0
 80111c2:	492e      	ldr	r1, [pc, #184]	; (801127c <tcp_create_segment+0x138>)
 80111c4:	482b      	ldr	r0, [pc, #172]	; (8011274 <tcp_create_segment+0x130>)
 80111c6:	f007 f879 	bl	80182bc <iprintf>
  seg->len = p->tot_len - optlen;
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	891a      	ldrh	r2, [r3, #8]
 80111ce:	7dfb      	ldrb	r3, [r7, #23]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80111da:	2114      	movs	r1, #20
 80111dc:	68b8      	ldr	r0, [r7, #8]
 80111de:	f7fb fac1 	bl	800c764 <pbuf_add_header>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d004      	beq.n	80111f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80111e8:	6938      	ldr	r0, [r7, #16]
 80111ea:	f7fc ffe9 	bl	800e1c0 <tcp_seg_free>
    return NULL;
 80111ee:	2300      	movs	r3, #0
 80111f0:	e037      	b.n	8011262 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	685a      	ldr	r2, [r3, #4]
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	8ada      	ldrh	r2, [r3, #22]
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	68dc      	ldr	r4, [r3, #12]
 8011204:	4610      	mov	r0, r2
 8011206:	f7f9 ffd7 	bl	800b1b8 <lwip_htons>
 801120a:	4603      	mov	r3, r0
 801120c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	8b1a      	ldrh	r2, [r3, #24]
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	68dc      	ldr	r4, [r3, #12]
 8011216:	4610      	mov	r0, r2
 8011218:	f7f9 ffce 	bl	800b1b8 <lwip_htons>
 801121c:	4603      	mov	r3, r0
 801121e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	68dc      	ldr	r4, [r3, #12]
 8011224:	6838      	ldr	r0, [r7, #0]
 8011226:	f7f9 ffdc 	bl	800b1e2 <lwip_htonl>
 801122a:	4603      	mov	r3, r0
 801122c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801122e:	7dfb      	ldrb	r3, [r7, #23]
 8011230:	089b      	lsrs	r3, r3, #2
 8011232:	b2db      	uxtb	r3, r3
 8011234:	b29b      	uxth	r3, r3
 8011236:	3305      	adds	r3, #5
 8011238:	b29b      	uxth	r3, r3
 801123a:	031b      	lsls	r3, r3, #12
 801123c:	b29a      	uxth	r2, r3
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4313      	orrs	r3, r2
 8011244:	b29a      	uxth	r2, r3
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	68dc      	ldr	r4, [r3, #12]
 801124a:	4610      	mov	r0, r2
 801124c:	f7f9 ffb4 	bl	800b1b8 <lwip_htons>
 8011250:	4603      	mov	r3, r0
 8011252:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	2200      	movs	r2, #0
 801125a:	749a      	strb	r2, [r3, #18]
 801125c:	2200      	movs	r2, #0
 801125e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011260:	693b      	ldr	r3, [r7, #16]
}
 8011262:	4618      	mov	r0, r3
 8011264:	371c      	adds	r7, #28
 8011266:	46bd      	mov	sp, r7
 8011268:	bd90      	pop	{r4, r7, pc}
 801126a:	bf00      	nop
 801126c:	0801b78c 	.word	0x0801b78c
 8011270:	0801b7c0 	.word	0x0801b7c0
 8011274:	0801b7e0 	.word	0x0801b7e0
 8011278:	0801b808 	.word	0x0801b808
 801127c:	0801b82c 	.word	0x0801b82c

08011280 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	607b      	str	r3, [r7, #4]
 8011288:	4603      	mov	r3, r0
 801128a:	73fb      	strb	r3, [r7, #15]
 801128c:	460b      	mov	r3, r1
 801128e:	81bb      	strh	r3, [r7, #12]
 8011290:	4613      	mov	r3, r2
 8011292:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011294:	89bb      	ldrh	r3, [r7, #12]
 8011296:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d105      	bne.n	80112aa <tcp_pbuf_prealloc+0x2a>
 801129e:	4b30      	ldr	r3, [pc, #192]	; (8011360 <tcp_pbuf_prealloc+0xe0>)
 80112a0:	22e8      	movs	r2, #232	; 0xe8
 80112a2:	4930      	ldr	r1, [pc, #192]	; (8011364 <tcp_pbuf_prealloc+0xe4>)
 80112a4:	4830      	ldr	r0, [pc, #192]	; (8011368 <tcp_pbuf_prealloc+0xe8>)
 80112a6:	f007 f809 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d105      	bne.n	80112bc <tcp_pbuf_prealloc+0x3c>
 80112b0:	4b2b      	ldr	r3, [pc, #172]	; (8011360 <tcp_pbuf_prealloc+0xe0>)
 80112b2:	22e9      	movs	r2, #233	; 0xe9
 80112b4:	492d      	ldr	r1, [pc, #180]	; (801136c <tcp_pbuf_prealloc+0xec>)
 80112b6:	482c      	ldr	r0, [pc, #176]	; (8011368 <tcp_pbuf_prealloc+0xe8>)
 80112b8:	f007 f800 	bl	80182bc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80112bc:	89ba      	ldrh	r2, [r7, #12]
 80112be:	897b      	ldrh	r3, [r7, #10]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d221      	bcs.n	8011308 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80112c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80112c8:	f003 0302 	and.w	r3, r3, #2
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d111      	bne.n	80112f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80112d0:	6a3b      	ldr	r3, [r7, #32]
 80112d2:	8b5b      	ldrh	r3, [r3, #26]
 80112d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d115      	bne.n	8011308 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80112dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d007      	beq.n	80112f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80112e4:	6a3b      	ldr	r3, [r7, #32]
 80112e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d103      	bne.n	80112f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80112ec:	6a3b      	ldr	r3, [r7, #32]
 80112ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d009      	beq.n	8011308 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80112f4:	89bb      	ldrh	r3, [r7, #12]
 80112f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80112fa:	f023 0203 	bic.w	r2, r3, #3
 80112fe:	897b      	ldrh	r3, [r7, #10]
 8011300:	4293      	cmp	r3, r2
 8011302:	bf28      	it	cs
 8011304:	4613      	movcs	r3, r2
 8011306:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011308:	8af9      	ldrh	r1, [r7, #22]
 801130a:	7bfb      	ldrb	r3, [r7, #15]
 801130c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011310:	4618      	mov	r0, r3
 8011312:	f7fa ffdd 	bl	800c2d0 <pbuf_alloc>
 8011316:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d101      	bne.n	8011322 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801131e:	2300      	movs	r3, #0
 8011320:	e019      	b.n	8011356 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d006      	beq.n	8011338 <tcp_pbuf_prealloc+0xb8>
 801132a:	4b0d      	ldr	r3, [pc, #52]	; (8011360 <tcp_pbuf_prealloc+0xe0>)
 801132c:	f240 120b 	movw	r2, #267	; 0x10b
 8011330:	490f      	ldr	r1, [pc, #60]	; (8011370 <tcp_pbuf_prealloc+0xf0>)
 8011332:	480d      	ldr	r0, [pc, #52]	; (8011368 <tcp_pbuf_prealloc+0xe8>)
 8011334:	f006 ffc2 	bl	80182bc <iprintf>
  *oversize = p->len - length;
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	895a      	ldrh	r2, [r3, #10]
 801133c:	89bb      	ldrh	r3, [r7, #12]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	b29a      	uxth	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	89ba      	ldrh	r2, [r7, #12]
 801134a:	811a      	strh	r2, [r3, #8]
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	891a      	ldrh	r2, [r3, #8]
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	815a      	strh	r2, [r3, #10]
  return p;
 8011354:	693b      	ldr	r3, [r7, #16]
}
 8011356:	4618      	mov	r0, r3
 8011358:	3718      	adds	r7, #24
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	0801b78c 	.word	0x0801b78c
 8011364:	0801b844 	.word	0x0801b844
 8011368:	0801b7e0 	.word	0x0801b7e0
 801136c:	0801b868 	.word	0x0801b868
 8011370:	0801b888 	.word	0x0801b888

08011374 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	460b      	mov	r3, r1
 801137e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d106      	bne.n	8011394 <tcp_write_checks+0x20>
 8011386:	4b33      	ldr	r3, [pc, #204]	; (8011454 <tcp_write_checks+0xe0>)
 8011388:	f240 1233 	movw	r2, #307	; 0x133
 801138c:	4932      	ldr	r1, [pc, #200]	; (8011458 <tcp_write_checks+0xe4>)
 801138e:	4833      	ldr	r0, [pc, #204]	; (801145c <tcp_write_checks+0xe8>)
 8011390:	f006 ff94 	bl	80182bc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	7d1b      	ldrb	r3, [r3, #20]
 8011398:	2b04      	cmp	r3, #4
 801139a:	d00e      	beq.n	80113ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80113a0:	2b07      	cmp	r3, #7
 80113a2:	d00a      	beq.n	80113ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d006      	beq.n	80113ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80113b0:	2b03      	cmp	r3, #3
 80113b2:	d002      	beq.n	80113ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80113b4:	f06f 030a 	mvn.w	r3, #10
 80113b8:	e048      	b.n	801144c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80113ba:	887b      	ldrh	r3, [r7, #2]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <tcp_write_checks+0x50>
    return ERR_OK;
 80113c0:	2300      	movs	r3, #0
 80113c2:	e043      	b.n	801144c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80113ca:	887a      	ldrh	r2, [r7, #2]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d909      	bls.n	80113e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8b5b      	ldrh	r3, [r3, #26]
 80113d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113d8:	b29a      	uxth	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80113de:	f04f 33ff 	mov.w	r3, #4294967295
 80113e2:	e033      	b.n	801144c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113ea:	2b08      	cmp	r3, #8
 80113ec:	d909      	bls.n	8011402 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	8b5b      	ldrh	r3, [r3, #26]
 80113f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80113fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011400:	e024      	b.n	801144c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00f      	beq.n	801142c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011410:	2b00      	cmp	r3, #0
 8011412:	d11a      	bne.n	801144a <tcp_write_checks+0xd6>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011418:	2b00      	cmp	r3, #0
 801141a:	d116      	bne.n	801144a <tcp_write_checks+0xd6>
 801141c:	4b0d      	ldr	r3, [pc, #52]	; (8011454 <tcp_write_checks+0xe0>)
 801141e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011422:	490f      	ldr	r1, [pc, #60]	; (8011460 <tcp_write_checks+0xec>)
 8011424:	480d      	ldr	r0, [pc, #52]	; (801145c <tcp_write_checks+0xe8>)
 8011426:	f006 ff49 	bl	80182bc <iprintf>
 801142a:	e00e      	b.n	801144a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011430:	2b00      	cmp	r3, #0
 8011432:	d103      	bne.n	801143c <tcp_write_checks+0xc8>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011438:	2b00      	cmp	r3, #0
 801143a:	d006      	beq.n	801144a <tcp_write_checks+0xd6>
 801143c:	4b05      	ldr	r3, [pc, #20]	; (8011454 <tcp_write_checks+0xe0>)
 801143e:	f240 1259 	movw	r2, #345	; 0x159
 8011442:	4908      	ldr	r1, [pc, #32]	; (8011464 <tcp_write_checks+0xf0>)
 8011444:	4805      	ldr	r0, [pc, #20]	; (801145c <tcp_write_checks+0xe8>)
 8011446:	f006 ff39 	bl	80182bc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	0801b78c 	.word	0x0801b78c
 8011458:	0801b89c 	.word	0x0801b89c
 801145c:	0801b7e0 	.word	0x0801b7e0
 8011460:	0801b8bc 	.word	0x0801b8bc
 8011464:	0801b8f8 	.word	0x0801b8f8

08011468 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011468:	b590      	push	{r4, r7, lr}
 801146a:	b09b      	sub	sp, #108	; 0x6c
 801146c:	af04      	add	r7, sp, #16
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	4611      	mov	r1, r2
 8011474:	461a      	mov	r2, r3
 8011476:	460b      	mov	r3, r1
 8011478:	80fb      	strh	r3, [r7, #6]
 801147a:	4613      	mov	r3, r2
 801147c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801147e:	2300      	movs	r3, #0
 8011480:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011482:	2300      	movs	r3, #0
 8011484:	653b      	str	r3, [r7, #80]	; 0x50
 8011486:	2300      	movs	r3, #0
 8011488:	64fb      	str	r3, [r7, #76]	; 0x4c
 801148a:	2300      	movs	r3, #0
 801148c:	64bb      	str	r3, [r7, #72]	; 0x48
 801148e:	2300      	movs	r3, #0
 8011490:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011492:	2300      	movs	r3, #0
 8011494:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011498:	2300      	movs	r3, #0
 801149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80114a6:	2300      	movs	r3, #0
 80114a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d109      	bne.n	80114c4 <tcp_write+0x5c>
 80114b0:	4ba5      	ldr	r3, [pc, #660]	; (8011748 <tcp_write+0x2e0>)
 80114b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80114b6:	49a5      	ldr	r1, [pc, #660]	; (801174c <tcp_write+0x2e4>)
 80114b8:	48a5      	ldr	r0, [pc, #660]	; (8011750 <tcp_write+0x2e8>)
 80114ba:	f006 feff 	bl	80182bc <iprintf>
 80114be:	f06f 030f 	mvn.w	r3, #15
 80114c2:	e32c      	b.n	8011b1e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80114ca:	085b      	lsrs	r3, r3, #1
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114d2:	4293      	cmp	r3, r2
 80114d4:	bf28      	it	cs
 80114d6:	4613      	movcs	r3, r2
 80114d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80114da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d102      	bne.n	80114e6 <tcp_write+0x7e>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114e4:	e000      	b.n	80114e8 <tcp_write+0x80>
 80114e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d109      	bne.n	8011504 <tcp_write+0x9c>
 80114f0:	4b95      	ldr	r3, [pc, #596]	; (8011748 <tcp_write+0x2e0>)
 80114f2:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80114f6:	4997      	ldr	r1, [pc, #604]	; (8011754 <tcp_write+0x2ec>)
 80114f8:	4895      	ldr	r0, [pc, #596]	; (8011750 <tcp_write+0x2e8>)
 80114fa:	f006 fedf 	bl	80182bc <iprintf>
 80114fe:	f06f 030f 	mvn.w	r3, #15
 8011502:	e30c      	b.n	8011b1e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011504:	88fb      	ldrh	r3, [r7, #6]
 8011506:	4619      	mov	r1, r3
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f7ff ff33 	bl	8011374 <tcp_write_checks>
 801150e:	4603      	mov	r3, r0
 8011510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011514:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <tcp_write+0xba>
    return err;
 801151c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011520:	e2fd      	b.n	8011b1e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011528:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801152c:	2300      	movs	r3, #0
 801152e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011536:	2b00      	cmp	r3, #0
 8011538:	f000 80f7 	beq.w	801172a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011540:	653b      	str	r3, [r7, #80]	; 0x50
 8011542:	e002      	b.n	801154a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801154a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1f8      	bne.n	8011544 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011554:	7a9b      	ldrb	r3, [r3, #10]
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	b29b      	uxth	r3, r3
 801155a:	f003 0304 	and.w	r3, r3, #4
 801155e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011560:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011564:	891b      	ldrh	r3, [r3, #8]
 8011566:	4619      	mov	r1, r3
 8011568:	8c3b      	ldrh	r3, [r7, #32]
 801156a:	440b      	add	r3, r1
 801156c:	429a      	cmp	r2, r3
 801156e:	da06      	bge.n	801157e <tcp_write+0x116>
 8011570:	4b75      	ldr	r3, [pc, #468]	; (8011748 <tcp_write+0x2e0>)
 8011572:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011576:	4978      	ldr	r1, [pc, #480]	; (8011758 <tcp_write+0x2f0>)
 8011578:	4875      	ldr	r0, [pc, #468]	; (8011750 <tcp_write+0x2e8>)
 801157a:	f006 fe9f 	bl	80182bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801157e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011580:	891a      	ldrh	r2, [r3, #8]
 8011582:	8c3b      	ldrh	r3, [r7, #32]
 8011584:	4413      	add	r3, r2
 8011586:	b29b      	uxth	r3, r3
 8011588:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011594:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011596:	8a7b      	ldrh	r3, [r7, #18]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d027      	beq.n	80115ec <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801159c:	8a7b      	ldrh	r3, [r7, #18]
 801159e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d206      	bcs.n	80115b2 <tcp_write+0x14a>
 80115a4:	4b68      	ldr	r3, [pc, #416]	; (8011748 <tcp_write+0x2e0>)
 80115a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80115aa:	496c      	ldr	r1, [pc, #432]	; (801175c <tcp_write+0x2f4>)
 80115ac:	4868      	ldr	r0, [pc, #416]	; (8011750 <tcp_write+0x2e8>)
 80115ae:	f006 fe85 	bl	80182bc <iprintf>
      seg = last_unsent;
 80115b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80115b6:	8a7b      	ldrh	r3, [r7, #18]
 80115b8:	88fa      	ldrh	r2, [r7, #6]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d901      	bls.n	80115c2 <tcp_write+0x15a>
 80115be:	8a7b      	ldrh	r3, [r7, #18]
 80115c0:	e000      	b.n	80115c4 <tcp_write+0x15c>
 80115c2:	88fb      	ldrh	r3, [r7, #6]
 80115c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80115c6:	4293      	cmp	r3, r2
 80115c8:	bfa8      	it	ge
 80115ca:	4613      	movge	r3, r2
 80115cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80115ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115d4:	4413      	add	r3, r2
 80115d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80115da:	8a7a      	ldrh	r2, [r7, #18]
 80115dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80115e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80115e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115e8:	1ad3      	subs	r3, r2, r3
 80115ea:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80115ec:	8a7b      	ldrh	r3, [r7, #18]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00b      	beq.n	801160a <tcp_write+0x1a2>
 80115f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115f6:	88fb      	ldrh	r3, [r7, #6]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d006      	beq.n	801160a <tcp_write+0x1a2>
 80115fc:	4b52      	ldr	r3, [pc, #328]	; (8011748 <tcp_write+0x2e0>)
 80115fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011602:	4957      	ldr	r1, [pc, #348]	; (8011760 <tcp_write+0x2f8>)
 8011604:	4852      	ldr	r0, [pc, #328]	; (8011750 <tcp_write+0x2e8>)
 8011606:	f006 fe59 	bl	80182bc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801160a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801160e:	88fb      	ldrh	r3, [r7, #6]
 8011610:	429a      	cmp	r2, r3
 8011612:	f080 8168 	bcs.w	80118e6 <tcp_write+0x47e>
 8011616:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011618:	2b00      	cmp	r3, #0
 801161a:	f000 8164 	beq.w	80118e6 <tcp_write+0x47e>
 801161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011620:	891b      	ldrh	r3, [r3, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	f000 815f 	beq.w	80118e6 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011628:	88fa      	ldrh	r2, [r7, #6]
 801162a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801162e:	1ad2      	subs	r2, r2, r3
 8011630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011632:	4293      	cmp	r3, r2
 8011634:	bfa8      	it	ge
 8011636:	4613      	movge	r3, r2
 8011638:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801163c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801163e:	797b      	ldrb	r3, [r7, #5]
 8011640:	f003 0301 	and.w	r3, r3, #1
 8011644:	2b00      	cmp	r3, #0
 8011646:	d027      	beq.n	8011698 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011648:	f107 0012 	add.w	r0, r7, #18
 801164c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801164e:	8bf9      	ldrh	r1, [r7, #30]
 8011650:	2301      	movs	r3, #1
 8011652:	9302      	str	r3, [sp, #8]
 8011654:	797b      	ldrb	r3, [r7, #5]
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	4603      	mov	r3, r0
 801165e:	2000      	movs	r0, #0
 8011660:	f7ff fe0e 	bl	8011280 <tcp_pbuf_prealloc>
 8011664:	6578      	str	r0, [r7, #84]	; 0x54
 8011666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011668:	2b00      	cmp	r3, #0
 801166a:	f000 8226 	beq.w	8011aba <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801166e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011670:	6858      	ldr	r0, [r3, #4]
 8011672:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011676:	68ba      	ldr	r2, [r7, #8]
 8011678:	4413      	add	r3, r2
 801167a:	8bfa      	ldrh	r2, [r7, #30]
 801167c:	4619      	mov	r1, r3
 801167e:	f006 fe0a 	bl	8018296 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011682:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011684:	f7fb f992 	bl	800c9ac <pbuf_clen>
 8011688:	4603      	mov	r3, r0
 801168a:	461a      	mov	r2, r3
 801168c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011690:	4413      	add	r3, r2
 8011692:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011696:	e041      	b.n	801171c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	637b      	str	r3, [r7, #52]	; 0x34
 801169e:	e002      	b.n	80116a6 <tcp_write+0x23e>
 80116a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	637b      	str	r3, [r7, #52]	; 0x34
 80116a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1f8      	bne.n	80116a0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80116ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b0:	7b1b      	ldrb	r3, [r3, #12]
 80116b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d115      	bne.n	80116e6 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80116ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116c0:	8952      	ldrh	r2, [r2, #10]
 80116c2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d10d      	bne.n	80116e6 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80116ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d006      	beq.n	80116e0 <tcp_write+0x278>
 80116d2:	4b1d      	ldr	r3, [pc, #116]	; (8011748 <tcp_write+0x2e0>)
 80116d4:	f240 2231 	movw	r2, #561	; 0x231
 80116d8:	4922      	ldr	r1, [pc, #136]	; (8011764 <tcp_write+0x2fc>)
 80116da:	481d      	ldr	r0, [pc, #116]	; (8011750 <tcp_write+0x2e8>)
 80116dc:	f006 fdee 	bl	80182bc <iprintf>
          extendlen = seglen;
 80116e0:	8bfb      	ldrh	r3, [r7, #30]
 80116e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80116e4:	e01a      	b.n	801171c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80116e6:	8bfb      	ldrh	r3, [r7, #30]
 80116e8:	2201      	movs	r2, #1
 80116ea:	4619      	mov	r1, r3
 80116ec:	2000      	movs	r0, #0
 80116ee:	f7fa fdef 	bl	800c2d0 <pbuf_alloc>
 80116f2:	6578      	str	r0, [r7, #84]	; 0x54
 80116f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 81e1 	beq.w	8011abe <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80116fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011700:	68ba      	ldr	r2, [r7, #8]
 8011702:	441a      	add	r2, r3
 8011704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011706:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011708:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801170a:	f7fb f94f 	bl	800c9ac <pbuf_clen>
 801170e:	4603      	mov	r3, r0
 8011710:	461a      	mov	r2, r3
 8011712:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011716:	4413      	add	r3, r2
 8011718:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801171c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011720:	8bfb      	ldrh	r3, [r7, #30]
 8011722:	4413      	add	r3, r2
 8011724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011728:	e0dd      	b.n	80118e6 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011730:	2b00      	cmp	r3, #0
 8011732:	f000 80d8 	beq.w	80118e6 <tcp_write+0x47e>
 8011736:	4b04      	ldr	r3, [pc, #16]	; (8011748 <tcp_write+0x2e0>)
 8011738:	f240 224b 	movw	r2, #587	; 0x24b
 801173c:	490a      	ldr	r1, [pc, #40]	; (8011768 <tcp_write+0x300>)
 801173e:	4804      	ldr	r0, [pc, #16]	; (8011750 <tcp_write+0x2e8>)
 8011740:	f006 fdbc 	bl	80182bc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011744:	e0cf      	b.n	80118e6 <tcp_write+0x47e>
 8011746:	bf00      	nop
 8011748:	0801b78c 	.word	0x0801b78c
 801174c:	0801b92c 	.word	0x0801b92c
 8011750:	0801b7e0 	.word	0x0801b7e0
 8011754:	0801b944 	.word	0x0801b944
 8011758:	0801b978 	.word	0x0801b978
 801175c:	0801b990 	.word	0x0801b990
 8011760:	0801b9b0 	.word	0x0801b9b0
 8011764:	0801b9d0 	.word	0x0801b9d0
 8011768:	0801b9fc 	.word	0x0801b9fc
    struct pbuf *p;
    u16_t left = len - pos;
 801176c:	88fa      	ldrh	r2, [r7, #6]
 801176e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011776:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801177a:	b29b      	uxth	r3, r3
 801177c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011782:	8b7a      	ldrh	r2, [r7, #26]
 8011784:	8bbb      	ldrh	r3, [r7, #28]
 8011786:	4293      	cmp	r3, r2
 8011788:	bf28      	it	cs
 801178a:	4613      	movcs	r3, r2
 801178c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801178e:	797b      	ldrb	r3, [r7, #5]
 8011790:	f003 0301 	and.w	r3, r3, #1
 8011794:	2b00      	cmp	r3, #0
 8011796:	d036      	beq.n	8011806 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011798:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801179c:	b29a      	uxth	r2, r3
 801179e:	8b3b      	ldrh	r3, [r7, #24]
 80117a0:	4413      	add	r3, r2
 80117a2:	b299      	uxth	r1, r3
 80117a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	bf0c      	ite	eq
 80117aa:	2301      	moveq	r3, #1
 80117ac:	2300      	movne	r3, #0
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	f107 0012 	add.w	r0, r7, #18
 80117b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117b6:	9302      	str	r3, [sp, #8]
 80117b8:	797b      	ldrb	r3, [r7, #5]
 80117ba:	9301      	str	r3, [sp, #4]
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	9300      	str	r3, [sp, #0]
 80117c0:	4603      	mov	r3, r0
 80117c2:	2036      	movs	r0, #54	; 0x36
 80117c4:	f7ff fd5c 	bl	8011280 <tcp_pbuf_prealloc>
 80117c8:	6338      	str	r0, [r7, #48]	; 0x30
 80117ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 8178 	beq.w	8011ac2 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80117d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d4:	895b      	ldrh	r3, [r3, #10]
 80117d6:	8b3a      	ldrh	r2, [r7, #24]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d906      	bls.n	80117ea <tcp_write+0x382>
 80117dc:	4b8c      	ldr	r3, [pc, #560]	; (8011a10 <tcp_write+0x5a8>)
 80117de:	f240 2267 	movw	r2, #615	; 0x267
 80117e2:	498c      	ldr	r1, [pc, #560]	; (8011a14 <tcp_write+0x5ac>)
 80117e4:	488c      	ldr	r0, [pc, #560]	; (8011a18 <tcp_write+0x5b0>)
 80117e6:	f006 fd69 	bl	80182bc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	685a      	ldr	r2, [r3, #4]
 80117ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80117f2:	18d0      	adds	r0, r2, r3
 80117f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	4413      	add	r3, r2
 80117fc:	8b3a      	ldrh	r2, [r7, #24]
 80117fe:	4619      	mov	r1, r3
 8011800:	f006 fd49 	bl	8018296 <memcpy>
 8011804:	e02f      	b.n	8011866 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011806:	8a7b      	ldrh	r3, [r7, #18]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d006      	beq.n	801181a <tcp_write+0x3b2>
 801180c:	4b80      	ldr	r3, [pc, #512]	; (8011a10 <tcp_write+0x5a8>)
 801180e:	f240 2271 	movw	r2, #625	; 0x271
 8011812:	4982      	ldr	r1, [pc, #520]	; (8011a1c <tcp_write+0x5b4>)
 8011814:	4880      	ldr	r0, [pc, #512]	; (8011a18 <tcp_write+0x5b0>)
 8011816:	f006 fd51 	bl	80182bc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801181a:	8b3b      	ldrh	r3, [r7, #24]
 801181c:	2201      	movs	r2, #1
 801181e:	4619      	mov	r1, r3
 8011820:	2036      	movs	r0, #54	; 0x36
 8011822:	f7fa fd55 	bl	800c2d0 <pbuf_alloc>
 8011826:	6178      	str	r0, [r7, #20]
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2b00      	cmp	r3, #0
 801182c:	f000 814b 	beq.w	8011ac6 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011830:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011834:	68ba      	ldr	r2, [r7, #8]
 8011836:	441a      	add	r2, r3
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801183c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011840:	b29b      	uxth	r3, r3
 8011842:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011846:	4619      	mov	r1, r3
 8011848:	2036      	movs	r0, #54	; 0x36
 801184a:	f7fa fd41 	bl	800c2d0 <pbuf_alloc>
 801184e:	6338      	str	r0, [r7, #48]	; 0x30
 8011850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011852:	2b00      	cmp	r3, #0
 8011854:	d103      	bne.n	801185e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011856:	6978      	ldr	r0, [r7, #20]
 8011858:	f7fb f81a 	bl	800c890 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801185c:	e136      	b.n	8011acc <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801185e:	6979      	ldr	r1, [r7, #20]
 8011860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011862:	f7fb f8e3 	bl	800ca2c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011868:	f7fb f8a0 	bl	800c9ac <pbuf_clen>
 801186c:	4603      	mov	r3, r0
 801186e:	461a      	mov	r2, r3
 8011870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011874:	4413      	add	r3, r2
 8011876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801187a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801187e:	2b09      	cmp	r3, #9
 8011880:	d903      	bls.n	801188a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011884:	f7fb f804 	bl	800c890 <pbuf_free>
      goto memerr;
 8011888:	e120      	b.n	8011acc <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801188e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011892:	441a      	add	r2, r3
 8011894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	4613      	mov	r3, r2
 801189c:	2200      	movs	r2, #0
 801189e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f7ff fc4f 	bl	8011144 <tcp_create_segment>
 80118a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80118a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	f000 810d 	beq.w	8011aca <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80118b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d102      	bne.n	80118bc <tcp_write+0x454>
      queue = seg;
 80118b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118b8:	647b      	str	r3, [r7, #68]	; 0x44
 80118ba:	e00c      	b.n	80118d6 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80118bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d106      	bne.n	80118d0 <tcp_write+0x468>
 80118c2:	4b53      	ldr	r3, [pc, #332]	; (8011a10 <tcp_write+0x5a8>)
 80118c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80118c8:	4955      	ldr	r1, [pc, #340]	; (8011a20 <tcp_write+0x5b8>)
 80118ca:	4853      	ldr	r0, [pc, #332]	; (8011a18 <tcp_write+0x5b0>)
 80118cc:	f006 fcf6 	bl	80182bc <iprintf>
      prev_seg->next = seg;
 80118d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80118d4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80118d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118d8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80118da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118de:	8b3b      	ldrh	r3, [r7, #24]
 80118e0:	4413      	add	r3, r2
 80118e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80118e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118ea:	88fb      	ldrh	r3, [r7, #6]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	f4ff af3d 	bcc.w	801176c <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80118f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d02c      	beq.n	8011952 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80118f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118fe:	e01e      	b.n	801193e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011902:	891a      	ldrh	r2, [r3, #8]
 8011904:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011906:	4413      	add	r3, r2
 8011908:	b29a      	uxth	r2, r3
 801190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d110      	bne.n	8011938 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801191c:	8952      	ldrh	r2, [r2, #10]
 801191e:	4413      	add	r3, r2
 8011920:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011922:	68b9      	ldr	r1, [r7, #8]
 8011924:	4618      	mov	r0, r3
 8011926:	f006 fcb6 	bl	8018296 <memcpy>
        p->len += oversize_used;
 801192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192c:	895a      	ldrh	r2, [r3, #10]
 801192e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011930:	4413      	add	r3, r2
 8011932:	b29a      	uxth	r2, r3
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	2b00      	cmp	r3, #0
 8011942:	d1dd      	bne.n	8011900 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8011944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011946:	891a      	ldrh	r2, [r3, #8]
 8011948:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801194a:	4413      	add	r3, r2
 801194c:	b29a      	uxth	r2, r3
 801194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011950:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011952:	8a7a      	ldrh	r2, [r7, #18]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801195c:	2b00      	cmp	r3, #0
 801195e:	d018      	beq.n	8011992 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011962:	2b00      	cmp	r3, #0
 8011964:	d106      	bne.n	8011974 <tcp_write+0x50c>
 8011966:	4b2a      	ldr	r3, [pc, #168]	; (8011a10 <tcp_write+0x5a8>)
 8011968:	f240 22e1 	movw	r2, #737	; 0x2e1
 801196c:	492d      	ldr	r1, [pc, #180]	; (8011a24 <tcp_write+0x5bc>)
 801196e:	482a      	ldr	r0, [pc, #168]	; (8011a18 <tcp_write+0x5b0>)
 8011970:	f006 fca4 	bl	80182bc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801197a:	4618      	mov	r0, r3
 801197c:	f7fb f856 	bl	800ca2c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011982:	891a      	ldrh	r2, [r3, #8]
 8011984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011986:	891b      	ldrh	r3, [r3, #8]
 8011988:	4413      	add	r3, r2
 801198a:	b29a      	uxth	r2, r3
 801198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801198e:	811a      	strh	r2, [r3, #8]
 8011990:	e037      	b.n	8011a02 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011992:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011994:	2b00      	cmp	r3, #0
 8011996:	d034      	beq.n	8011a02 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801199a:	2b00      	cmp	r3, #0
 801199c:	d003      	beq.n	80119a6 <tcp_write+0x53e>
 801199e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d106      	bne.n	80119b4 <tcp_write+0x54c>
 80119a6:	4b1a      	ldr	r3, [pc, #104]	; (8011a10 <tcp_write+0x5a8>)
 80119a8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80119ac:	491e      	ldr	r1, [pc, #120]	; (8011a28 <tcp_write+0x5c0>)
 80119ae:	481a      	ldr	r0, [pc, #104]	; (8011a18 <tcp_write+0x5b0>)
 80119b0:	f006 fc84 	bl	80182bc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80119b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80119ba:	e009      	b.n	80119d0 <tcp_write+0x568>
      p->tot_len += extendlen;
 80119bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119be:	891a      	ldrh	r2, [r3, #8]
 80119c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119c2:	4413      	add	r3, r2
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80119ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80119d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d1f1      	bne.n	80119bc <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 80119d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119da:	891a      	ldrh	r2, [r3, #8]
 80119dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119de:	4413      	add	r3, r2
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80119e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e8:	895a      	ldrh	r2, [r3, #10]
 80119ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119ec:	4413      	add	r3, r2
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80119f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119f6:	891a      	ldrh	r2, [r3, #8]
 80119f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119fa:	4413      	add	r3, r2
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a00:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d111      	bne.n	8011a2c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a0e:	e010      	b.n	8011a32 <tcp_write+0x5ca>
 8011a10:	0801b78c 	.word	0x0801b78c
 8011a14:	0801ba2c 	.word	0x0801ba2c
 8011a18:	0801b7e0 	.word	0x0801b7e0
 8011a1c:	0801ba6c 	.word	0x0801ba6c
 8011a20:	0801ba7c 	.word	0x0801ba7c
 8011a24:	0801ba90 	.word	0x0801ba90
 8011a28:	0801bac8 	.word	0x0801bac8
  } else {
    last_unsent->next = queue;
 8011a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a30:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a36:	88fb      	ldrh	r3, [r7, #6]
 8011a38:	441a      	add	r2, r3
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011a44:	88fb      	ldrh	r3, [r7, #6]
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011a56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00e      	beq.n	8011a82 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d10a      	bne.n	8011a82 <tcp_write+0x61a>
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d106      	bne.n	8011a82 <tcp_write+0x61a>
 8011a74:	4b2c      	ldr	r3, [pc, #176]	; (8011b28 <tcp_write+0x6c0>)
 8011a76:	f240 3213 	movw	r2, #787	; 0x313
 8011a7a:	492c      	ldr	r1, [pc, #176]	; (8011b2c <tcp_write+0x6c4>)
 8011a7c:	482c      	ldr	r0, [pc, #176]	; (8011b30 <tcp_write+0x6c8>)
 8011a7e:	f006 fc1d 	bl	80182bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d016      	beq.n	8011ab6 <tcp_write+0x64e>
 8011a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d012      	beq.n	8011ab6 <tcp_write+0x64e>
 8011a90:	797b      	ldrb	r3, [r7, #5]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d10d      	bne.n	8011ab6 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	899b      	ldrh	r3, [r3, #12]
 8011aa0:	b29c      	uxth	r4, r3
 8011aa2:	2008      	movs	r0, #8
 8011aa4:	f7f9 fb88 	bl	800b1b8 <lwip_htons>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	461a      	mov	r2, r3
 8011aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	4322      	orrs	r2, r4
 8011ab2:	b292      	uxth	r2, r2
 8011ab4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	e031      	b.n	8011b1e <tcp_write+0x6b6>
          goto memerr;
 8011aba:	bf00      	nop
 8011abc:	e006      	b.n	8011acc <tcp_write+0x664>
            goto memerr;
 8011abe:	bf00      	nop
 8011ac0:	e004      	b.n	8011acc <tcp_write+0x664>
        goto memerr;
 8011ac2:	bf00      	nop
 8011ac4:	e002      	b.n	8011acc <tcp_write+0x664>
        goto memerr;
 8011ac6:	bf00      	nop
 8011ac8:	e000      	b.n	8011acc <tcp_write+0x664>
      goto memerr;
 8011aca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	8b5b      	ldrh	r3, [r3, #26]
 8011ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d002      	beq.n	8011ae6 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011ae0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ae2:	f7fa fed5 	bl	800c890 <pbuf_free>
  }
  if (queue != NULL) {
 8011ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8011aec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011aee:	f7fc fb53 	bl	800e198 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00e      	beq.n	8011b1a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d10a      	bne.n	8011b1a <tcp_write+0x6b2>
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d106      	bne.n	8011b1a <tcp_write+0x6b2>
 8011b0c:	4b06      	ldr	r3, [pc, #24]	; (8011b28 <tcp_write+0x6c0>)
 8011b0e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011b12:	4906      	ldr	r1, [pc, #24]	; (8011b2c <tcp_write+0x6c4>)
 8011b14:	4806      	ldr	r0, [pc, #24]	; (8011b30 <tcp_write+0x6c8>)
 8011b16:	f006 fbd1 	bl	80182bc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	375c      	adds	r7, #92	; 0x5c
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd90      	pop	{r4, r7, pc}
 8011b26:	bf00      	nop
 8011b28:	0801b78c 	.word	0x0801b78c
 8011b2c:	0801bb00 	.word	0x0801bb00
 8011b30:	0801b7e0 	.word	0x0801b7e0

08011b34 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011b34:	b590      	push	{r4, r7, lr}
 8011b36:	b08b      	sub	sp, #44	; 0x2c
 8011b38:	af02      	add	r7, sp, #8
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011b40:	2300      	movs	r3, #0
 8011b42:	61fb      	str	r3, [r7, #28]
 8011b44:	2300      	movs	r3, #0
 8011b46:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d106      	bne.n	8011b60 <tcp_split_unsent_seg+0x2c>
 8011b52:	4b95      	ldr	r3, [pc, #596]	; (8011da8 <tcp_split_unsent_seg+0x274>)
 8011b54:	f240 324b 	movw	r2, #843	; 0x34b
 8011b58:	4994      	ldr	r1, [pc, #592]	; (8011dac <tcp_split_unsent_seg+0x278>)
 8011b5a:	4895      	ldr	r0, [pc, #596]	; (8011db0 <tcp_split_unsent_seg+0x27c>)
 8011b5c:	f006 fbae 	bl	80182bc <iprintf>

  useg = pcb->unsent;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b64:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d102      	bne.n	8011b72 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b70:	e116      	b.n	8011da0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011b72:	887b      	ldrh	r3, [r7, #2]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d109      	bne.n	8011b8c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011b78:	4b8b      	ldr	r3, [pc, #556]	; (8011da8 <tcp_split_unsent_seg+0x274>)
 8011b7a:	f240 3253 	movw	r2, #851	; 0x353
 8011b7e:	498d      	ldr	r1, [pc, #564]	; (8011db4 <tcp_split_unsent_seg+0x280>)
 8011b80:	488b      	ldr	r0, [pc, #556]	; (8011db0 <tcp_split_unsent_seg+0x27c>)
 8011b82:	f006 fb9b 	bl	80182bc <iprintf>
    return ERR_VAL;
 8011b86:	f06f 0305 	mvn.w	r3, #5
 8011b8a:	e109      	b.n	8011da0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	891b      	ldrh	r3, [r3, #8]
 8011b90:	887a      	ldrh	r2, [r7, #2]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d301      	bcc.n	8011b9a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011b96:	2300      	movs	r3, #0
 8011b98:	e102      	b.n	8011da0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b9e:	887a      	ldrh	r2, [r7, #2]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d906      	bls.n	8011bb2 <tcp_split_unsent_seg+0x7e>
 8011ba4:	4b80      	ldr	r3, [pc, #512]	; (8011da8 <tcp_split_unsent_seg+0x274>)
 8011ba6:	f240 325b 	movw	r2, #859	; 0x35b
 8011baa:	4983      	ldr	r1, [pc, #524]	; (8011db8 <tcp_split_unsent_seg+0x284>)
 8011bac:	4880      	ldr	r0, [pc, #512]	; (8011db0 <tcp_split_unsent_seg+0x27c>)
 8011bae:	f006 fb85 	bl	80182bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	891b      	ldrh	r3, [r3, #8]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d106      	bne.n	8011bc8 <tcp_split_unsent_seg+0x94>
 8011bba:	4b7b      	ldr	r3, [pc, #492]	; (8011da8 <tcp_split_unsent_seg+0x274>)
 8011bbc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011bc0:	497e      	ldr	r1, [pc, #504]	; (8011dbc <tcp_split_unsent_seg+0x288>)
 8011bc2:	487b      	ldr	r0, [pc, #492]	; (8011db0 <tcp_split_unsent_seg+0x27c>)
 8011bc4:	f006 fb7a 	bl	80182bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	7a9b      	ldrb	r3, [r3, #10]
 8011bcc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011bce:	7bfb      	ldrb	r3, [r7, #15]
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	f003 0304 	and.w	r3, r3, #4
 8011bd8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	891a      	ldrh	r2, [r3, #8]
 8011bde:	887b      	ldrh	r3, [r7, #2]
 8011be0:	1ad3      	subs	r3, r2, r3
 8011be2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	89bb      	ldrh	r3, [r7, #12]
 8011bea:	4413      	add	r3, r2
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	2036      	movs	r0, #54	; 0x36
 8011bf6:	f7fa fb6b 	bl	800c2d0 <pbuf_alloc>
 8011bfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	f000 80b7 	beq.w	8011d72 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	685b      	ldr	r3, [r3, #4]
 8011c08:	891a      	ldrh	r2, [r3, #8]
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	891b      	ldrh	r3, [r3, #8]
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	887b      	ldrh	r3, [r7, #2]
 8011c14:	4413      	add	r3, r2
 8011c16:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	6858      	ldr	r0, [r3, #4]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	685a      	ldr	r2, [r3, #4]
 8011c20:	7bbb      	ldrb	r3, [r7, #14]
 8011c22:	18d1      	adds	r1, r2, r3
 8011c24:	897b      	ldrh	r3, [r7, #10]
 8011c26:	89ba      	ldrh	r2, [r7, #12]
 8011c28:	f7fb f838 	bl	800cc9c <pbuf_copy_partial>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	461a      	mov	r2, r3
 8011c30:	89bb      	ldrh	r3, [r7, #12]
 8011c32:	4293      	cmp	r3, r2
 8011c34:	f040 809f 	bne.w	8011d76 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	899b      	ldrh	r3, [r3, #12]
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f9 fab9 	bl	800b1b8 <lwip_htons>
 8011c46:	4603      	mov	r3, r0
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c4e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011c50:	2300      	movs	r3, #0
 8011c52:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011c54:	7efb      	ldrb	r3, [r7, #27]
 8011c56:	f003 0308 	and.w	r3, r3, #8
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d007      	beq.n	8011c6e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011c5e:	7efb      	ldrb	r3, [r7, #27]
 8011c60:	f023 0308 	bic.w	r3, r3, #8
 8011c64:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c66:	7ebb      	ldrb	r3, [r7, #26]
 8011c68:	f043 0308 	orr.w	r3, r3, #8
 8011c6c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011c6e:	7efb      	ldrb	r3, [r7, #27]
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d007      	beq.n	8011c88 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011c78:	7efb      	ldrb	r3, [r7, #27]
 8011c7a:	f023 0301 	bic.w	r3, r3, #1
 8011c7e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011c80:	7ebb      	ldrb	r3, [r7, #26]
 8011c82:	f043 0301 	orr.w	r3, r3, #1
 8011c86:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	68db      	ldr	r3, [r3, #12]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7f9 faa7 	bl	800b1e2 <lwip_htonl>
 8011c94:	4602      	mov	r2, r0
 8011c96:	887b      	ldrh	r3, [r7, #2]
 8011c98:	18d1      	adds	r1, r2, r3
 8011c9a:	7eba      	ldrb	r2, [r7, #26]
 8011c9c:	7bfb      	ldrb	r3, [r7, #15]
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	6939      	ldr	r1, [r7, #16]
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff fa4d 	bl	8011144 <tcp_create_segment>
 8011caa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d063      	beq.n	8011d7a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fa fe78 	bl	800c9ac <pbuf_clen>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cc6:	1a9b      	subs	r3, r3, r2
 8011cc8:	b29a      	uxth	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	6858      	ldr	r0, [r3, #4]
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	891a      	ldrh	r2, [r3, #8]
 8011cda:	89bb      	ldrh	r3, [r7, #12]
 8011cdc:	1ad3      	subs	r3, r2, r3
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	f7fa fc4f 	bl	800c584 <pbuf_realloc>
  useg->len -= remainder;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	891a      	ldrh	r2, [r3, #8]
 8011cea:	89bb      	ldrh	r3, [r7, #12]
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	b29c      	uxth	r4, r3
 8011cfc:	7efb      	ldrb	r3, [r7, #27]
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7f9 fa59 	bl	800b1b8 <lwip_htons>
 8011d06:	4603      	mov	r3, r0
 8011d08:	461a      	mov	r2, r3
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	4322      	orrs	r2, r4
 8011d10:	b292      	uxth	r2, r2
 8011d12:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fa fe47 	bl	800c9ac <pbuf_clen>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	461a      	mov	r2, r3
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d28:	4413      	add	r3, r2
 8011d2a:	b29a      	uxth	r2, r3
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fa fe38 	bl	800c9ac <pbuf_clen>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	461a      	mov	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d46:	4413      	add	r3, r2
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	69fa      	ldr	r2, [r7, #28]
 8011d5c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d103      	bne.n	8011d6e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	e016      	b.n	8011da0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011d72:	bf00      	nop
 8011d74:	e002      	b.n	8011d7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d76:	bf00      	nop
 8011d78:	e000      	b.n	8011d7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d7a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d006      	beq.n	8011d90 <tcp_split_unsent_seg+0x25c>
 8011d82:	4b09      	ldr	r3, [pc, #36]	; (8011da8 <tcp_split_unsent_seg+0x274>)
 8011d84:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011d88:	490d      	ldr	r1, [pc, #52]	; (8011dc0 <tcp_split_unsent_seg+0x28c>)
 8011d8a:	4809      	ldr	r0, [pc, #36]	; (8011db0 <tcp_split_unsent_seg+0x27c>)
 8011d8c:	f006 fa96 	bl	80182bc <iprintf>
  if (p != NULL) {
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d002      	beq.n	8011d9c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011d96:	6938      	ldr	r0, [r7, #16]
 8011d98:	f7fa fd7a 	bl	800c890 <pbuf_free>
  }

  return ERR_MEM;
 8011d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3724      	adds	r7, #36	; 0x24
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd90      	pop	{r4, r7, pc}
 8011da8:	0801b78c 	.word	0x0801b78c
 8011dac:	0801bb20 	.word	0x0801bb20
 8011db0:	0801b7e0 	.word	0x0801b7e0
 8011db4:	0801bb44 	.word	0x0801bb44
 8011db8:	0801bb68 	.word	0x0801bb68
 8011dbc:	0801bb78 	.word	0x0801bb78
 8011dc0:	0801bb88 	.word	0x0801bb88

08011dc4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011dc4:	b590      	push	{r4, r7, lr}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d106      	bne.n	8011de0 <tcp_send_fin+0x1c>
 8011dd2:	4b21      	ldr	r3, [pc, #132]	; (8011e58 <tcp_send_fin+0x94>)
 8011dd4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011dd8:	4920      	ldr	r1, [pc, #128]	; (8011e5c <tcp_send_fin+0x98>)
 8011dda:	4821      	ldr	r0, [pc, #132]	; (8011e60 <tcp_send_fin+0x9c>)
 8011ddc:	f006 fa6e 	bl	80182bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d02e      	beq.n	8011e46 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dec:	60fb      	str	r3, [r7, #12]
 8011dee:	e002      	b.n	8011df6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1f8      	bne.n	8011df0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	899b      	ldrh	r3, [r3, #12]
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7f9 f9d6 	bl	800b1b8 <lwip_htons>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	f003 0307 	and.w	r3, r3, #7
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d116      	bne.n	8011e46 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	899b      	ldrh	r3, [r3, #12]
 8011e1e:	b29c      	uxth	r4, r3
 8011e20:	2001      	movs	r0, #1
 8011e22:	f7f9 f9c9 	bl	800b1b8 <lwip_htons>
 8011e26:	4603      	mov	r3, r0
 8011e28:	461a      	mov	r2, r3
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	4322      	orrs	r2, r4
 8011e30:	b292      	uxth	r2, r2
 8011e32:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	8b5b      	ldrh	r3, [r3, #26]
 8011e38:	f043 0320 	orr.w	r3, r3, #32
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011e42:	2300      	movs	r3, #0
 8011e44:	e004      	b.n	8011e50 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011e46:	2101      	movs	r1, #1
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f000 f80b 	bl	8011e64 <tcp_enqueue_flags>
 8011e4e:	4603      	mov	r3, r0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3714      	adds	r7, #20
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd90      	pop	{r4, r7, pc}
 8011e58:	0801b78c 	.word	0x0801b78c
 8011e5c:	0801bb94 	.word	0x0801bb94
 8011e60:	0801b7e0 	.word	0x0801b7e0

08011e64 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08a      	sub	sp, #40	; 0x28
 8011e68:	af02      	add	r7, sp, #8
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011e78:	78fb      	ldrb	r3, [r7, #3]
 8011e7a:	f003 0303 	and.w	r3, r3, #3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d106      	bne.n	8011e90 <tcp_enqueue_flags+0x2c>
 8011e82:	4b67      	ldr	r3, [pc, #412]	; (8012020 <tcp_enqueue_flags+0x1bc>)
 8011e84:	f240 4212 	movw	r2, #1042	; 0x412
 8011e88:	4966      	ldr	r1, [pc, #408]	; (8012024 <tcp_enqueue_flags+0x1c0>)
 8011e8a:	4867      	ldr	r0, [pc, #412]	; (8012028 <tcp_enqueue_flags+0x1c4>)
 8011e8c:	f006 fa16 	bl	80182bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d106      	bne.n	8011ea4 <tcp_enqueue_flags+0x40>
 8011e96:	4b62      	ldr	r3, [pc, #392]	; (8012020 <tcp_enqueue_flags+0x1bc>)
 8011e98:	f240 4213 	movw	r2, #1043	; 0x413
 8011e9c:	4963      	ldr	r1, [pc, #396]	; (801202c <tcp_enqueue_flags+0x1c8>)
 8011e9e:	4862      	ldr	r0, [pc, #392]	; (8012028 <tcp_enqueue_flags+0x1c4>)
 8011ea0:	f006 fa0c 	bl	80182bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011ea4:	78fb      	ldrb	r3, [r7, #3]
 8011ea6:	f003 0302 	and.w	r3, r3, #2
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d001      	beq.n	8011eb2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011eb2:	7ffb      	ldrb	r3, [r7, #31]
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	f003 0304 	and.w	r3, r3, #4
 8011ebc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	2036      	movs	r0, #54	; 0x36
 8011eca:	f7fa fa01 	bl	800c2d0 <pbuf_alloc>
 8011ece:	6138      	str	r0, [r7, #16]
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d109      	bne.n	8011eea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	8b5b      	ldrh	r3, [r3, #26]
 8011eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ee8:	e095      	b.n	8012016 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	895a      	ldrh	r2, [r3, #10]
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d206      	bcs.n	8011f04 <tcp_enqueue_flags+0xa0>
 8011ef6:	4b4a      	ldr	r3, [pc, #296]	; (8012020 <tcp_enqueue_flags+0x1bc>)
 8011ef8:	f240 423a 	movw	r2, #1082	; 0x43a
 8011efc:	494c      	ldr	r1, [pc, #304]	; (8012030 <tcp_enqueue_flags+0x1cc>)
 8011efe:	484a      	ldr	r0, [pc, #296]	; (8012028 <tcp_enqueue_flags+0x1c4>)
 8011f00:	f006 f9dc 	bl	80182bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011f08:	78fa      	ldrb	r2, [r7, #3]
 8011f0a:	7ffb      	ldrb	r3, [r7, #31]
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	460b      	mov	r3, r1
 8011f10:	6939      	ldr	r1, [r7, #16]
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7ff f916 	bl	8011144 <tcp_create_segment>
 8011f18:	60f8      	str	r0, [r7, #12]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d109      	bne.n	8011f34 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	8b5b      	ldrh	r3, [r3, #26]
 8011f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f32:	e070      	b.n	8012016 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	f003 0303 	and.w	r3, r3, #3
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d006      	beq.n	8011f4e <tcp_enqueue_flags+0xea>
 8011f40:	4b37      	ldr	r3, [pc, #220]	; (8012020 <tcp_enqueue_flags+0x1bc>)
 8011f42:	f240 4242 	movw	r2, #1090	; 0x442
 8011f46:	493b      	ldr	r1, [pc, #236]	; (8012034 <tcp_enqueue_flags+0x1d0>)
 8011f48:	4837      	ldr	r0, [pc, #220]	; (8012028 <tcp_enqueue_flags+0x1c4>)
 8011f4a:	f006 f9b7 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	891b      	ldrh	r3, [r3, #8]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d006      	beq.n	8011f64 <tcp_enqueue_flags+0x100>
 8011f56:	4b32      	ldr	r3, [pc, #200]	; (8012020 <tcp_enqueue_flags+0x1bc>)
 8011f58:	f240 4243 	movw	r2, #1091	; 0x443
 8011f5c:	4936      	ldr	r1, [pc, #216]	; (8012038 <tcp_enqueue_flags+0x1d4>)
 8011f5e:	4832      	ldr	r0, [pc, #200]	; (8012028 <tcp_enqueue_flags+0x1c4>)
 8011f60:	f006 f9ac 	bl	80182bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d103      	bne.n	8011f74 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f72:	e00d      	b.n	8011f90 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f78:	61bb      	str	r3, [r7, #24]
 8011f7a:	e002      	b.n	8011f82 <tcp_enqueue_flags+0x11e>
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	61bb      	str	r3, [r7, #24]
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d1f8      	bne.n	8011f7c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2200      	movs	r2, #0
 8011f94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011f98:	78fb      	ldrb	r3, [r7, #3]
 8011f9a:	f003 0302 	and.w	r3, r3, #2
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d104      	bne.n	8011fac <tcp_enqueue_flags+0x148>
 8011fa2:	78fb      	ldrb	r3, [r7, #3]
 8011fa4:	f003 0301 	and.w	r3, r3, #1
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d004      	beq.n	8011fb6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fb0:	1c5a      	adds	r2, r3, #1
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011fb6:	78fb      	ldrb	r3, [r7, #3]
 8011fb8:	f003 0301 	and.w	r3, r3, #1
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d006      	beq.n	8011fce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	8b5b      	ldrh	r3, [r3, #26]
 8011fc4:	f043 0320 	orr.w	r3, r3, #32
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fa fcea 	bl	800c9ac <pbuf_clen>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	461a      	mov	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fe2:	4413      	add	r3, r2
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d00e      	beq.n	8012014 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d10a      	bne.n	8012014 <tcp_enqueue_flags+0x1b0>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012002:	2b00      	cmp	r3, #0
 8012004:	d106      	bne.n	8012014 <tcp_enqueue_flags+0x1b0>
 8012006:	4b06      	ldr	r3, [pc, #24]	; (8012020 <tcp_enqueue_flags+0x1bc>)
 8012008:	f240 4266 	movw	r2, #1126	; 0x466
 801200c:	490b      	ldr	r1, [pc, #44]	; (801203c <tcp_enqueue_flags+0x1d8>)
 801200e:	4806      	ldr	r0, [pc, #24]	; (8012028 <tcp_enqueue_flags+0x1c4>)
 8012010:	f006 f954 	bl	80182bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012014:	2300      	movs	r3, #0
}
 8012016:	4618      	mov	r0, r3
 8012018:	3720      	adds	r7, #32
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	0801b78c 	.word	0x0801b78c
 8012024:	0801bbb0 	.word	0x0801bbb0
 8012028:	0801b7e0 	.word	0x0801b7e0
 801202c:	0801bc08 	.word	0x0801bc08
 8012030:	0801bc28 	.word	0x0801bc28
 8012034:	0801bc64 	.word	0x0801bc64
 8012038:	0801bc7c 	.word	0x0801bc7c
 801203c:	0801bca8 	.word	0x0801bca8

08012040 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012040:	b5b0      	push	{r4, r5, r7, lr}
 8012042:	b08a      	sub	sp, #40	; 0x28
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_output+0x1c>
 801204e:	4ba0      	ldr	r3, [pc, #640]	; (80122d0 <tcp_output+0x290>)
 8012050:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012054:	499f      	ldr	r1, [pc, #636]	; (80122d4 <tcp_output+0x294>)
 8012056:	48a0      	ldr	r0, [pc, #640]	; (80122d8 <tcp_output+0x298>)
 8012058:	f006 f930 	bl	80182bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	7d1b      	ldrb	r3, [r3, #20]
 8012060:	2b01      	cmp	r3, #1
 8012062:	d106      	bne.n	8012072 <tcp_output+0x32>
 8012064:	4b9a      	ldr	r3, [pc, #616]	; (80122d0 <tcp_output+0x290>)
 8012066:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801206a:	499c      	ldr	r1, [pc, #624]	; (80122dc <tcp_output+0x29c>)
 801206c:	489a      	ldr	r0, [pc, #616]	; (80122d8 <tcp_output+0x298>)
 801206e:	f006 f925 	bl	80182bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012072:	4b9b      	ldr	r3, [pc, #620]	; (80122e0 <tcp_output+0x2a0>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	429a      	cmp	r2, r3
 801207a:	d101      	bne.n	8012080 <tcp_output+0x40>
    return ERR_OK;
 801207c:	2300      	movs	r3, #0
 801207e:	e1d2      	b.n	8012426 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801208c:	429a      	cmp	r2, r3
 801208e:	d203      	bcs.n	8012098 <tcp_output+0x58>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012096:	e002      	b.n	801209e <tcp_output+0x5e>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801209e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80120a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10b      	bne.n	80120c4 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	8b5b      	ldrh	r3, [r3, #26]
 80120b0:	f003 0302 	and.w	r3, r3, #2
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	f000 81a9 	beq.w	801240c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 fdd6 	bl	8012c6c <tcp_send_empty_ack>
 80120c0:	4603      	mov	r3, r0
 80120c2:	e1b0      	b.n	8012426 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80120c4:	6879      	ldr	r1, [r7, #4]
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	3304      	adds	r3, #4
 80120ca:	461a      	mov	r2, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7ff f81d 	bl	801110c <tcp_route>
 80120d2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d102      	bne.n	80120e0 <tcp_output+0xa0>
    return ERR_RTE;
 80120da:	f06f 0303 	mvn.w	r3, #3
 80120de:	e1a2      	b.n	8012426 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <tcp_output+0xae>
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d111      	bne.n	8012112 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d002      	beq.n	80120fa <tcp_output+0xba>
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	3304      	adds	r3, #4
 80120f8:	e000      	b.n	80120fc <tcp_output+0xbc>
 80120fa:	2300      	movs	r3, #0
 80120fc:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d102      	bne.n	801210a <tcp_output+0xca>
      return ERR_RTE;
 8012104:	f06f 0303 	mvn.w	r3, #3
 8012108:	e18d      	b.n	8012426 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	4618      	mov	r0, r3
 801211a:	f7f9 f862 	bl	800b1e2 <lwip_htonl>
 801211e:	4602      	mov	r2, r0
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012124:	1ad3      	subs	r3, r2, r3
 8012126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012128:	8912      	ldrh	r2, [r2, #8]
 801212a:	4413      	add	r3, r2
 801212c:	69ba      	ldr	r2, [r7, #24]
 801212e:	429a      	cmp	r2, r3
 8012130:	d227      	bcs.n	8012182 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012138:	461a      	mov	r2, r3
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	4293      	cmp	r3, r2
 801213e:	d114      	bne.n	801216a <tcp_output+0x12a>
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012144:	2b00      	cmp	r3, #0
 8012146:	d110      	bne.n	801216a <tcp_output+0x12a>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10b      	bne.n	801216a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2200      	movs	r2, #0
 8012156:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2201      	movs	r2, #1
 801215e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	8b5b      	ldrh	r3, [r3, #26]
 801216e:	f003 0302 	and.w	r3, r3, #2
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 814c 	beq.w	8012410 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 fd77 	bl	8012c6c <tcp_send_empty_ack>
 801217e:	4603      	mov	r3, r0
 8012180:	e151      	b.n	8012426 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801218e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 811b 	beq.w	80123ce <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8012198:	e002      	b.n	80121a0 <tcp_output+0x160>
 801219a:	6a3b      	ldr	r3, [r7, #32]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	623b      	str	r3, [r7, #32]
 80121a0:	6a3b      	ldr	r3, [r7, #32]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d1f8      	bne.n	801219a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80121a8:	e111      	b.n	80123ce <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	899b      	ldrh	r3, [r3, #12]
 80121b0:	b29b      	uxth	r3, r3
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7f9 f800 	bl	800b1b8 <lwip_htons>
 80121b8:	4603      	mov	r3, r0
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	f003 0304 	and.w	r3, r3, #4
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d006      	beq.n	80121d2 <tcp_output+0x192>
 80121c4:	4b42      	ldr	r3, [pc, #264]	; (80122d0 <tcp_output+0x290>)
 80121c6:	f240 5237 	movw	r2, #1335	; 0x537
 80121ca:	4946      	ldr	r1, [pc, #280]	; (80122e4 <tcp_output+0x2a4>)
 80121cc:	4842      	ldr	r0, [pc, #264]	; (80122d8 <tcp_output+0x298>)
 80121ce:	f006 f875 	bl	80182bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d01f      	beq.n	801221a <tcp_output+0x1da>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8b5b      	ldrh	r3, [r3, #26]
 80121de:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d119      	bne.n	801221a <tcp_output+0x1da>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00b      	beq.n	8012206 <tcp_output+0x1c6>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d110      	bne.n	801221a <tcp_output+0x1da>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121fc:	891a      	ldrh	r2, [r3, #8]
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012202:	429a      	cmp	r2, r3
 8012204:	d209      	bcs.n	801221a <tcp_output+0x1da>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801220c:	2b00      	cmp	r3, #0
 801220e:	d004      	beq.n	801221a <tcp_output+0x1da>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012216:	2b08      	cmp	r3, #8
 8012218:	d901      	bls.n	801221e <tcp_output+0x1de>
 801221a:	2301      	movs	r3, #1
 801221c:	e000      	b.n	8012220 <tcp_output+0x1e0>
 801221e:	2300      	movs	r3, #0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d106      	bne.n	8012232 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8b5b      	ldrh	r3, [r3, #26]
 8012228:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801222c:	2b00      	cmp	r3, #0
 801222e:	f000 80e3 	beq.w	80123f8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	7d1b      	ldrb	r3, [r3, #20]
 8012236:	2b02      	cmp	r3, #2
 8012238:	d00d      	beq.n	8012256 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223c:	68db      	ldr	r3, [r3, #12]
 801223e:	899b      	ldrh	r3, [r3, #12]
 8012240:	b29c      	uxth	r4, r3
 8012242:	2010      	movs	r0, #16
 8012244:	f7f8 ffb8 	bl	800b1b8 <lwip_htons>
 8012248:	4603      	mov	r3, r0
 801224a:	461a      	mov	r2, r3
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	4322      	orrs	r2, r4
 8012252:	b292      	uxth	r2, r2
 8012254:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012256:	697a      	ldr	r2, [r7, #20]
 8012258:	6879      	ldr	r1, [r7, #4]
 801225a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801225c:	f000 f908 	bl	8012470 <tcp_output_segment>
 8012260:	4603      	mov	r3, r0
 8012262:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d009      	beq.n	8012280 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	8b5b      	ldrh	r3, [r3, #26]
 8012270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012274:	b29a      	uxth	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	835a      	strh	r2, [r3, #26]
      return err;
 801227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801227e:	e0d2      	b.n	8012426 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	7d1b      	ldrb	r3, [r3, #20]
 801228c:	2b02      	cmp	r3, #2
 801228e:	d006      	beq.n	801229e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	8b5b      	ldrh	r3, [r3, #26]
 8012294:	f023 0303 	bic.w	r3, r3, #3
 8012298:	b29a      	uxth	r2, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	68db      	ldr	r3, [r3, #12]
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7f8 ff9c 	bl	800b1e2 <lwip_htonl>
 80122aa:	4604      	mov	r4, r0
 80122ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ae:	891b      	ldrh	r3, [r3, #8]
 80122b0:	461d      	mov	r5, r3
 80122b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b4:	68db      	ldr	r3, [r3, #12]
 80122b6:	899b      	ldrh	r3, [r3, #12]
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7f8 ff7c 	bl	800b1b8 <lwip_htons>
 80122c0:	4603      	mov	r3, r0
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	f003 0303 	and.w	r3, r3, #3
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d00d      	beq.n	80122e8 <tcp_output+0x2a8>
 80122cc:	2301      	movs	r3, #1
 80122ce:	e00c      	b.n	80122ea <tcp_output+0x2aa>
 80122d0:	0801b78c 	.word	0x0801b78c
 80122d4:	0801bcd0 	.word	0x0801bcd0
 80122d8:	0801b7e0 	.word	0x0801b7e0
 80122dc:	0801bce8 	.word	0x0801bce8
 80122e0:	2000faec 	.word	0x2000faec
 80122e4:	0801bd10 	.word	0x0801bd10
 80122e8:	2300      	movs	r3, #0
 80122ea:	442b      	add	r3, r5
 80122ec:	4423      	add	r3, r4
 80122ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	da02      	bge.n	8012302 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	68ba      	ldr	r2, [r7, #8]
 8012300:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012304:	891b      	ldrh	r3, [r3, #8]
 8012306:	461c      	mov	r4, r3
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	899b      	ldrh	r3, [r3, #12]
 801230e:	b29b      	uxth	r3, r3
 8012310:	4618      	mov	r0, r3
 8012312:	f7f8 ff51 	bl	800b1b8 <lwip_htons>
 8012316:	4603      	mov	r3, r0
 8012318:	b2db      	uxtb	r3, r3
 801231a:	f003 0303 	and.w	r3, r3, #3
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <tcp_output+0x2e6>
 8012322:	2301      	movs	r3, #1
 8012324:	e000      	b.n	8012328 <tcp_output+0x2e8>
 8012326:	2300      	movs	r3, #0
 8012328:	4423      	add	r3, r4
 801232a:	2b00      	cmp	r3, #0
 801232c:	d049      	beq.n	80123c2 <tcp_output+0x382>
      seg->next = NULL;
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	2200      	movs	r2, #0
 8012332:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012338:	2b00      	cmp	r3, #0
 801233a:	d105      	bne.n	8012348 <tcp_output+0x308>
        pcb->unacked = seg;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012340:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012344:	623b      	str	r3, [r7, #32]
 8012346:	e03f      	b.n	80123c8 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	4618      	mov	r0, r3
 8012350:	f7f8 ff47 	bl	800b1e2 <lwip_htonl>
 8012354:	4604      	mov	r4, r0
 8012356:	6a3b      	ldr	r3, [r7, #32]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	f7f8 ff40 	bl	800b1e2 <lwip_htonl>
 8012362:	4603      	mov	r3, r0
 8012364:	1ae3      	subs	r3, r4, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	da24      	bge.n	80123b4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	3370      	adds	r3, #112	; 0x70
 801236e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012370:	e002      	b.n	8012378 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d011      	beq.n	80123a4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	f7f8 ff2a 	bl	800b1e2 <lwip_htonl>
 801238e:	4604      	mov	r4, r0
 8012390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	4618      	mov	r0, r3
 8012398:	f7f8 ff23 	bl	800b1e2 <lwip_htonl>
 801239c:	4603      	mov	r3, r0
 801239e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	dbe6      	blt.n	8012372 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123b0:	601a      	str	r2, [r3, #0]
 80123b2:	e009      	b.n	80123c8 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80123ba:	6a3b      	ldr	r3, [r7, #32]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	623b      	str	r3, [r7, #32]
 80123c0:	e002      	b.n	80123c8 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80123c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123c4:	f7fb fefc 	bl	800e1c0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80123ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d012      	beq.n	80123fa <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80123d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	4618      	mov	r0, r3
 80123dc:	f7f8 ff01 	bl	800b1e2 <lwip_htonl>
 80123e0:	4602      	mov	r2, r0
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123ea:	8912      	ldrh	r2, [r2, #8]
 80123ec:	4413      	add	r3, r2
  while (seg != NULL &&
 80123ee:	69ba      	ldr	r2, [r7, #24]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	f4bf aeda 	bcs.w	80121aa <tcp_output+0x16a>
 80123f6:	e000      	b.n	80123fa <tcp_output+0x3ba>
      break;
 80123f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d108      	bne.n	8012414 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2200      	movs	r2, #0
 8012406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801240a:	e004      	b.n	8012416 <tcp_output+0x3d6>
    goto output_done;
 801240c:	bf00      	nop
 801240e:	e002      	b.n	8012416 <tcp_output+0x3d6>
    goto output_done;
 8012410:	bf00      	nop
 8012412:	e000      	b.n	8012416 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012414:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	8b5b      	ldrh	r3, [r3, #26]
 801241a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801241e:	b29a      	uxth	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3728      	adds	r7, #40	; 0x28
 801242a:	46bd      	mov	sp, r7
 801242c:	bdb0      	pop	{r4, r5, r7, pc}
 801242e:	bf00      	nop

08012430 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d106      	bne.n	801244c <tcp_output_segment_busy+0x1c>
 801243e:	4b09      	ldr	r3, [pc, #36]	; (8012464 <tcp_output_segment_busy+0x34>)
 8012440:	f240 529a 	movw	r2, #1434	; 0x59a
 8012444:	4908      	ldr	r1, [pc, #32]	; (8012468 <tcp_output_segment_busy+0x38>)
 8012446:	4809      	ldr	r0, [pc, #36]	; (801246c <tcp_output_segment_busy+0x3c>)
 8012448:	f005 ff38 	bl	80182bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	7b9b      	ldrb	r3, [r3, #14]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d001      	beq.n	801245a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012456:	2301      	movs	r3, #1
 8012458:	e000      	b.n	801245c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	0801b78c 	.word	0x0801b78c
 8012468:	0801bd28 	.word	0x0801bd28
 801246c:	0801b7e0 	.word	0x0801b7e0

08012470 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012470:	b5b0      	push	{r4, r5, r7, lr}
 8012472:	b08c      	sub	sp, #48	; 0x30
 8012474:	af04      	add	r7, sp, #16
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <tcp_output_segment+0x20>
 8012482:	4b64      	ldr	r3, [pc, #400]	; (8012614 <tcp_output_segment+0x1a4>)
 8012484:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012488:	4963      	ldr	r1, [pc, #396]	; (8012618 <tcp_output_segment+0x1a8>)
 801248a:	4864      	ldr	r0, [pc, #400]	; (801261c <tcp_output_segment+0x1ac>)
 801248c:	f005 ff16 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d106      	bne.n	80124a4 <tcp_output_segment+0x34>
 8012496:	4b5f      	ldr	r3, [pc, #380]	; (8012614 <tcp_output_segment+0x1a4>)
 8012498:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801249c:	4960      	ldr	r1, [pc, #384]	; (8012620 <tcp_output_segment+0x1b0>)
 801249e:	485f      	ldr	r0, [pc, #380]	; (801261c <tcp_output_segment+0x1ac>)
 80124a0:	f005 ff0c 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <tcp_output_segment+0x48>
 80124aa:	4b5a      	ldr	r3, [pc, #360]	; (8012614 <tcp_output_segment+0x1a4>)
 80124ac:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80124b0:	495c      	ldr	r1, [pc, #368]	; (8012624 <tcp_output_segment+0x1b4>)
 80124b2:	485a      	ldr	r0, [pc, #360]	; (801261c <tcp_output_segment+0x1ac>)
 80124b4:	f005 ff02 	bl	80182bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	f7ff ffb9 	bl	8012430 <tcp_output_segment_busy>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d001      	beq.n	80124c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80124c4:	2300      	movs	r3, #0
 80124c6:	e0a0      	b.n	801260a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	68dc      	ldr	r4, [r3, #12]
 80124d0:	4610      	mov	r0, r2
 80124d2:	f7f8 fe86 	bl	800b1e2 <lwip_htonl>
 80124d6:	4603      	mov	r3, r0
 80124d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	68dc      	ldr	r4, [r3, #12]
 80124e2:	4610      	mov	r0, r2
 80124e4:	f7f8 fe68 	bl	800b1b8 <lwip_htons>
 80124e8:	4603      	mov	r3, r0
 80124ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80124f4:	441a      	add	r2, r3
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	3314      	adds	r3, #20
 8012500:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	7a9b      	ldrb	r3, [r3, #10]
 8012506:	f003 0301 	and.w	r3, r3, #1
 801250a:	2b00      	cmp	r3, #0
 801250c:	d015      	beq.n	801253a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	3304      	adds	r3, #4
 8012512:	461a      	mov	r2, r3
 8012514:	6879      	ldr	r1, [r7, #4]
 8012516:	f44f 7006 	mov.w	r0, #536	; 0x218
 801251a:	f7fc fa33 	bl	800e984 <tcp_eff_send_mss_netif>
 801251e:	4603      	mov	r3, r0
 8012520:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012522:	8b7b      	ldrh	r3, [r7, #26]
 8012524:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012528:	4618      	mov	r0, r3
 801252a:	f7f8 fe5a 	bl	800b1e2 <lwip_htonl>
 801252e:	4602      	mov	r2, r0
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	3304      	adds	r3, #4
 8012538:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012540:	2b00      	cmp	r3, #0
 8012542:	da02      	bge.n	801254a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	2200      	movs	r2, #0
 8012548:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801254e:	2b00      	cmp	r3, #0
 8012550:	d10c      	bne.n	801256c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012552:	4b35      	ldr	r3, [pc, #212]	; (8012628 <tcp_output_segment+0x1b8>)
 8012554:	681a      	ldr	r2, [r3, #0]
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	68db      	ldr	r3, [r3, #12]
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	4618      	mov	r0, r3
 8012562:	f7f8 fe3e 	bl	800b1e2 <lwip_htonl>
 8012566:	4602      	mov	r2, r0
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	461a      	mov	r2, r3
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	1ad3      	subs	r3, r2, r3
 801257a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	8959      	ldrh	r1, [r3, #10]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	8b3a      	ldrh	r2, [r7, #24]
 8012588:	1a8a      	subs	r2, r1, r2
 801258a:	b292      	uxth	r2, r2
 801258c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	8919      	ldrh	r1, [r3, #8]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	8b3a      	ldrh	r2, [r7, #24]
 801259a:	1a8a      	subs	r2, r1, r2
 801259c:	b292      	uxth	r2, r2
 801259e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	68d2      	ldr	r2, [r2, #12]
 80125a8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	2200      	movs	r2, #0
 80125b0:	741a      	strb	r2, [r3, #16]
 80125b2:	2200      	movs	r2, #0
 80125b4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	68db      	ldr	r3, [r3, #12]
 80125ba:	f103 0214 	add.w	r2, r3, #20
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	7a9b      	ldrb	r3, [r3, #10]
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	f003 0304 	and.w	r3, r3, #4
 80125c8:	4413      	add	r3, r2
 80125ca:	69fa      	ldr	r2, [r7, #28]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d006      	beq.n	80125de <tcp_output_segment+0x16e>
 80125d0:	4b10      	ldr	r3, [pc, #64]	; (8012614 <tcp_output_segment+0x1a4>)
 80125d2:	f240 621c 	movw	r2, #1564	; 0x61c
 80125d6:	4915      	ldr	r1, [pc, #84]	; (801262c <tcp_output_segment+0x1bc>)
 80125d8:	4810      	ldr	r0, [pc, #64]	; (801261c <tcp_output_segment+0x1ac>)
 80125da:	f005 fe6f 	bl	80182bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	6858      	ldr	r0, [r3, #4]
 80125e2:	68b9      	ldr	r1, [r7, #8]
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	1d1c      	adds	r4, r3, #4
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	7add      	ldrb	r5, [r3, #11]
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	7a9b      	ldrb	r3, [r3, #10]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	9202      	str	r2, [sp, #8]
 80125f4:	2206      	movs	r2, #6
 80125f6:	9201      	str	r2, [sp, #4]
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	462b      	mov	r3, r5
 80125fc:	4622      	mov	r2, r4
 80125fe:	f004 fbf1 	bl	8016de4 <ip4_output_if>
 8012602:	4603      	mov	r3, r0
 8012604:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012606:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3720      	adds	r7, #32
 801260e:	46bd      	mov	sp, r7
 8012610:	bdb0      	pop	{r4, r5, r7, pc}
 8012612:	bf00      	nop
 8012614:	0801b78c 	.word	0x0801b78c
 8012618:	0801bd50 	.word	0x0801bd50
 801261c:	0801b7e0 	.word	0x0801b7e0
 8012620:	0801bd70 	.word	0x0801bd70
 8012624:	0801bd90 	.word	0x0801bd90
 8012628:	2000fadc 	.word	0x2000fadc
 801262c:	0801bdb4 	.word	0x0801bdb4

08012630 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012630:	b5b0      	push	{r4, r5, r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d106      	bne.n	801264c <tcp_rexmit_rto_prepare+0x1c>
 801263e:	4b31      	ldr	r3, [pc, #196]	; (8012704 <tcp_rexmit_rto_prepare+0xd4>)
 8012640:	f240 6263 	movw	r2, #1635	; 0x663
 8012644:	4930      	ldr	r1, [pc, #192]	; (8012708 <tcp_rexmit_rto_prepare+0xd8>)
 8012646:	4831      	ldr	r0, [pc, #196]	; (801270c <tcp_rexmit_rto_prepare+0xdc>)
 8012648:	f005 fe38 	bl	80182bc <iprintf>

  if (pcb->unacked == NULL) {
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012650:	2b00      	cmp	r3, #0
 8012652:	d102      	bne.n	801265a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012654:	f06f 0305 	mvn.w	r3, #5
 8012658:	e050      	b.n	80126fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801265e:	60fb      	str	r3, [r7, #12]
 8012660:	e00b      	b.n	801267a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f7ff fee4 	bl	8012430 <tcp_output_segment_busy>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d002      	beq.n	8012674 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801266e:	f06f 0305 	mvn.w	r3, #5
 8012672:	e043      	b.n	80126fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	60fb      	str	r3, [r7, #12]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1ef      	bne.n	8012662 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f7ff fed4 	bl	8012430 <tcp_output_segment_busy>
 8012688:	4603      	mov	r3, r0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d002      	beq.n	8012694 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801268e:	f06f 0305 	mvn.w	r3, #5
 8012692:	e033      	b.n	80126fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	8b5b      	ldrh	r3, [r3, #26]
 80126ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80126b2:	b29a      	uxth	r2, r3
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7f8 fd8f 	bl	800b1e2 <lwip_htonl>
 80126c4:	4604      	mov	r4, r0
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	891b      	ldrh	r3, [r3, #8]
 80126ca:	461d      	mov	r5, r3
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7f8 fd6f 	bl	800b1b8 <lwip_htons>
 80126da:	4603      	mov	r3, r0
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	f003 0303 	and.w	r3, r3, #3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <tcp_rexmit_rto_prepare+0xba>
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <tcp_rexmit_rto_prepare+0xbc>
 80126ea:	2300      	movs	r3, #0
 80126ec:	442b      	add	r3, r5
 80126ee:	18e2      	adds	r2, r4, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2200      	movs	r2, #0
 80126f8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80126fa:	2300      	movs	r3, #0
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bdb0      	pop	{r4, r5, r7, pc}
 8012704:	0801b78c 	.word	0x0801b78c
 8012708:	0801bdc8 	.word	0x0801bdc8
 801270c:	0801b7e0 	.word	0x0801b7e0

08012710 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d106      	bne.n	801272c <tcp_rexmit_rto_commit+0x1c>
 801271e:	4b0d      	ldr	r3, [pc, #52]	; (8012754 <tcp_rexmit_rto_commit+0x44>)
 8012720:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012724:	490c      	ldr	r1, [pc, #48]	; (8012758 <tcp_rexmit_rto_commit+0x48>)
 8012726:	480d      	ldr	r0, [pc, #52]	; (801275c <tcp_rexmit_rto_commit+0x4c>)
 8012728:	f005 fdc8 	bl	80182bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012732:	2bff      	cmp	r3, #255	; 0xff
 8012734:	d007      	beq.n	8012746 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801273c:	3301      	adds	r3, #1
 801273e:	b2da      	uxtb	r2, r3
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7ff fc7a 	bl	8012040 <tcp_output>
}
 801274c:	bf00      	nop
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	0801b78c 	.word	0x0801b78c
 8012758:	0801bdec 	.word	0x0801bdec
 801275c:	0801b7e0 	.word	0x0801b7e0

08012760 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d106      	bne.n	801277c <tcp_rexmit_rto+0x1c>
 801276e:	4b0a      	ldr	r3, [pc, #40]	; (8012798 <tcp_rexmit_rto+0x38>)
 8012770:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012774:	4909      	ldr	r1, [pc, #36]	; (801279c <tcp_rexmit_rto+0x3c>)
 8012776:	480a      	ldr	r0, [pc, #40]	; (80127a0 <tcp_rexmit_rto+0x40>)
 8012778:	f005 fda0 	bl	80182bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff ff57 	bl	8012630 <tcp_rexmit_rto_prepare>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d102      	bne.n	801278e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7ff ffc1 	bl	8012710 <tcp_rexmit_rto_commit>
  }
}
 801278e:	bf00      	nop
 8012790:	3708      	adds	r7, #8
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	0801b78c 	.word	0x0801b78c
 801279c:	0801be10 	.word	0x0801be10
 80127a0:	0801b7e0 	.word	0x0801b7e0

080127a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80127a4:	b590      	push	{r4, r7, lr}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_rexmit+0x1c>
 80127b2:	4b2f      	ldr	r3, [pc, #188]	; (8012870 <tcp_rexmit+0xcc>)
 80127b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80127b8:	492e      	ldr	r1, [pc, #184]	; (8012874 <tcp_rexmit+0xd0>)
 80127ba:	482f      	ldr	r0, [pc, #188]	; (8012878 <tcp_rexmit+0xd4>)
 80127bc:	f005 fd7e 	bl	80182bc <iprintf>

  if (pcb->unacked == NULL) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d102      	bne.n	80127ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 80127c8:	f06f 0305 	mvn.w	r3, #5
 80127cc:	e04c      	b.n	8012868 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80127d4:	68b8      	ldr	r0, [r7, #8]
 80127d6:	f7ff fe2b 	bl	8012430 <tcp_output_segment_busy>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d002      	beq.n	80127e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80127e0:	f06f 0305 	mvn.w	r3, #5
 80127e4:	e040      	b.n	8012868 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	336c      	adds	r3, #108	; 0x6c
 80127f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80127f4:	e002      	b.n	80127fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d011      	beq.n	8012828 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	4618      	mov	r0, r3
 801280e:	f7f8 fce8 	bl	800b1e2 <lwip_htonl>
 8012812:	4604      	mov	r4, r0
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	4618      	mov	r0, r3
 801281c:	f7f8 fce1 	bl	800b1e2 <lwip_htonl>
 8012820:	4603      	mov	r3, r0
 8012822:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012824:	2b00      	cmp	r3, #0
 8012826:	dbe6      	blt.n	80127f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	68ba      	ldr	r2, [r7, #8]
 8012834:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d103      	bne.n	8012846 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2200      	movs	r2, #0
 8012842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801284c:	2bff      	cmp	r3, #255	; 0xff
 801284e:	d007      	beq.n	8012860 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012856:	3301      	adds	r3, #1
 8012858:	b2da      	uxtb	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012866:	2300      	movs	r3, #0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3714      	adds	r7, #20
 801286c:	46bd      	mov	sp, r7
 801286e:	bd90      	pop	{r4, r7, pc}
 8012870:	0801b78c 	.word	0x0801b78c
 8012874:	0801be2c 	.word	0x0801be2c
 8012878:	0801b7e0 	.word	0x0801b7e0

0801287c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d106      	bne.n	8012898 <tcp_rexmit_fast+0x1c>
 801288a:	4b2e      	ldr	r3, [pc, #184]	; (8012944 <tcp_rexmit_fast+0xc8>)
 801288c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012890:	492d      	ldr	r1, [pc, #180]	; (8012948 <tcp_rexmit_fast+0xcc>)
 8012892:	482e      	ldr	r0, [pc, #184]	; (801294c <tcp_rexmit_fast+0xd0>)
 8012894:	f005 fd12 	bl	80182bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801289c:	2b00      	cmp	r3, #0
 801289e:	d04d      	beq.n	801293c <tcp_rexmit_fast+0xc0>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	8b5b      	ldrh	r3, [r3, #26]
 80128a4:	f003 0304 	and.w	r3, r3, #4
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d147      	bne.n	801293c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff ff79 	bl	80127a4 <tcp_rexmit>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d141      	bne.n	801293c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d207      	bcs.n	80128d8 <tcp_rexmit_fast+0x5c>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80128ce:	0fda      	lsrs	r2, r3, #31
 80128d0:	4413      	add	r3, r2
 80128d2:	105b      	asrs	r3, r3, #1
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	e006      	b.n	80128e6 <tcp_rexmit_fast+0x6a>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128de:	0fda      	lsrs	r2, r3, #31
 80128e0:	4413      	add	r3, r2
 80128e2:	105b      	asrs	r3, r3, #1
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80128f2:	461a      	mov	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128f8:	005b      	lsls	r3, r3, #1
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d206      	bcs.n	801290c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012902:	005b      	lsls	r3, r3, #1
 8012904:	b29a      	uxth	r2, r3
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012916:	4619      	mov	r1, r3
 8012918:	0049      	lsls	r1, r1, #1
 801291a:	440b      	add	r3, r1
 801291c:	b29b      	uxth	r3, r3
 801291e:	4413      	add	r3, r2
 8012920:	b29a      	uxth	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	8b5b      	ldrh	r3, [r3, #26]
 801292c:	f043 0304 	orr.w	r3, r3, #4
 8012930:	b29a      	uxth	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801293c:	bf00      	nop
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	0801b78c 	.word	0x0801b78c
 8012948:	0801be44 	.word	0x0801be44
 801294c:	0801b7e0 	.word	0x0801b7e0

08012950 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	607b      	str	r3, [r7, #4]
 801295a:	460b      	mov	r3, r1
 801295c:	817b      	strh	r3, [r7, #10]
 801295e:	4613      	mov	r3, r2
 8012960:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012962:	897a      	ldrh	r2, [r7, #10]
 8012964:	893b      	ldrh	r3, [r7, #8]
 8012966:	4413      	add	r3, r2
 8012968:	b29b      	uxth	r3, r3
 801296a:	3314      	adds	r3, #20
 801296c:	b29b      	uxth	r3, r3
 801296e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012972:	4619      	mov	r1, r3
 8012974:	2022      	movs	r0, #34	; 0x22
 8012976:	f7f9 fcab 	bl	800c2d0 <pbuf_alloc>
 801297a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d04e      	beq.n	8012a20 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	895b      	ldrh	r3, [r3, #10]
 8012986:	461a      	mov	r2, r3
 8012988:	897b      	ldrh	r3, [r7, #10]
 801298a:	3314      	adds	r3, #20
 801298c:	429a      	cmp	r2, r3
 801298e:	da06      	bge.n	801299e <tcp_output_alloc_header_common+0x4e>
 8012990:	4b26      	ldr	r3, [pc, #152]	; (8012a2c <tcp_output_alloc_header_common+0xdc>)
 8012992:	f240 7224 	movw	r2, #1828	; 0x724
 8012996:	4926      	ldr	r1, [pc, #152]	; (8012a30 <tcp_output_alloc_header_common+0xe0>)
 8012998:	4826      	ldr	r0, [pc, #152]	; (8012a34 <tcp_output_alloc_header_common+0xe4>)
 801299a:	f005 fc8f 	bl	80182bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80129a4:	8c3b      	ldrh	r3, [r7, #32]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7f8 fc06 	bl	800b1b8 <lwip_htons>
 80129ac:	4603      	mov	r3, r0
 80129ae:	461a      	mov	r2, r3
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80129b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7f8 fbfe 	bl	800b1b8 <lwip_htons>
 80129bc:	4603      	mov	r3, r0
 80129be:	461a      	mov	r2, r3
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80129ca:	68f8      	ldr	r0, [r7, #12]
 80129cc:	f7f8 fc09 	bl	800b1e2 <lwip_htonl>
 80129d0:	4602      	mov	r2, r0
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80129d6:	897b      	ldrh	r3, [r7, #10]
 80129d8:	089b      	lsrs	r3, r3, #2
 80129da:	b29b      	uxth	r3, r3
 80129dc:	3305      	adds	r3, #5
 80129de:	b29b      	uxth	r3, r3
 80129e0:	031b      	lsls	r3, r3, #12
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	4313      	orrs	r3, r2
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7f8 fbe2 	bl	800b1b8 <lwip_htons>
 80129f4:	4603      	mov	r3, r0
 80129f6:	461a      	mov	r2, r3
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80129fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7f8 fbda 	bl	800b1b8 <lwip_htons>
 8012a04:	4603      	mov	r3, r0
 8012a06:	461a      	mov	r2, r3
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	741a      	strb	r2, [r3, #16]
 8012a12:	2200      	movs	r2, #0
 8012a14:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	749a      	strb	r2, [r3, #18]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012a20:	697b      	ldr	r3, [r7, #20]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	0801b78c 	.word	0x0801b78c
 8012a30:	0801be64 	.word	0x0801be64
 8012a34:	0801b7e0 	.word	0x0801b7e0

08012a38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012a38:	b5b0      	push	{r4, r5, r7, lr}
 8012a3a:	b08a      	sub	sp, #40	; 0x28
 8012a3c:	af04      	add	r7, sp, #16
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	607b      	str	r3, [r7, #4]
 8012a42:	460b      	mov	r3, r1
 8012a44:	817b      	strh	r3, [r7, #10]
 8012a46:	4613      	mov	r3, r2
 8012a48:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d106      	bne.n	8012a5e <tcp_output_alloc_header+0x26>
 8012a50:	4b15      	ldr	r3, [pc, #84]	; (8012aa8 <tcp_output_alloc_header+0x70>)
 8012a52:	f240 7242 	movw	r2, #1858	; 0x742
 8012a56:	4915      	ldr	r1, [pc, #84]	; (8012aac <tcp_output_alloc_header+0x74>)
 8012a58:	4815      	ldr	r0, [pc, #84]	; (8012ab0 <tcp_output_alloc_header+0x78>)
 8012a5a:	f005 fc2f 	bl	80182bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	8adb      	ldrh	r3, [r3, #22]
 8012a66:	68fa      	ldr	r2, [r7, #12]
 8012a68:	8b12      	ldrh	r2, [r2, #24]
 8012a6a:	68f9      	ldr	r1, [r7, #12]
 8012a6c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012a6e:	893d      	ldrh	r5, [r7, #8]
 8012a70:	897c      	ldrh	r4, [r7, #10]
 8012a72:	9103      	str	r1, [sp, #12]
 8012a74:	2110      	movs	r1, #16
 8012a76:	9102      	str	r1, [sp, #8]
 8012a78:	9201      	str	r2, [sp, #4]
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	462a      	mov	r2, r5
 8012a80:	4621      	mov	r1, r4
 8012a82:	f7ff ff65 	bl	8012950 <tcp_output_alloc_header_common>
 8012a86:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d006      	beq.n	8012a9c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a96:	441a      	add	r2, r3
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012a9c:	697b      	ldr	r3, [r7, #20]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3718      	adds	r7, #24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	0801b78c 	.word	0x0801b78c
 8012aac:	0801be94 	.word	0x0801be94
 8012ab0:	0801b7e0 	.word	0x0801b7e0

08012ab4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b088      	sub	sp, #32
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	71fb      	strb	r3, [r7, #7]
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012aca:	2300      	movs	r3, #0
 8012acc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d106      	bne.n	8012ae2 <tcp_output_fill_options+0x2e>
 8012ad4:	4b13      	ldr	r3, [pc, #76]	; (8012b24 <tcp_output_fill_options+0x70>)
 8012ad6:	f240 7256 	movw	r2, #1878	; 0x756
 8012ada:	4913      	ldr	r1, [pc, #76]	; (8012b28 <tcp_output_fill_options+0x74>)
 8012adc:	4813      	ldr	r0, [pc, #76]	; (8012b2c <tcp_output_fill_options+0x78>)
 8012ade:	f005 fbed 	bl	80182bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	3314      	adds	r3, #20
 8012aec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	f103 0214 	add.w	r2, r3, #20
 8012af4:	8bfb      	ldrh	r3, [r7, #30]
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	4619      	mov	r1, r3
 8012afa:	79fb      	ldrb	r3, [r7, #7]
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	f003 0304 	and.w	r3, r3, #4
 8012b02:	440b      	add	r3, r1
 8012b04:	4413      	add	r3, r2
 8012b06:	697a      	ldr	r2, [r7, #20]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d006      	beq.n	8012b1a <tcp_output_fill_options+0x66>
 8012b0c:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <tcp_output_fill_options+0x70>)
 8012b0e:	f240 7275 	movw	r2, #1909	; 0x775
 8012b12:	4907      	ldr	r1, [pc, #28]	; (8012b30 <tcp_output_fill_options+0x7c>)
 8012b14:	4805      	ldr	r0, [pc, #20]	; (8012b2c <tcp_output_fill_options+0x78>)
 8012b16:	f005 fbd1 	bl	80182bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012b1a:	bf00      	nop
 8012b1c:	3720      	adds	r7, #32
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	0801b78c 	.word	0x0801b78c
 8012b28:	0801bebc 	.word	0x0801bebc
 8012b2c:	0801b7e0 	.word	0x0801b7e0
 8012b30:	0801bdb4 	.word	0x0801bdb4

08012b34 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b08a      	sub	sp, #40	; 0x28
 8012b38:	af04      	add	r7, sp, #16
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
 8012b40:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <tcp_output_control_segment+0x22>
 8012b48:	4b1c      	ldr	r3, [pc, #112]	; (8012bbc <tcp_output_control_segment+0x88>)
 8012b4a:	f240 7287 	movw	r2, #1927	; 0x787
 8012b4e:	491c      	ldr	r1, [pc, #112]	; (8012bc0 <tcp_output_control_segment+0x8c>)
 8012b50:	481c      	ldr	r0, [pc, #112]	; (8012bc4 <tcp_output_control_segment+0x90>)
 8012b52:	f005 fbb3 	bl	80182bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	6879      	ldr	r1, [r7, #4]
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f7fe fad6 	bl	801110c <tcp_route>
 8012b60:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d102      	bne.n	8012b6e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012b68:	23fc      	movs	r3, #252	; 0xfc
 8012b6a:	75fb      	strb	r3, [r7, #23]
 8012b6c:	e01c      	b.n	8012ba8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d006      	beq.n	8012b82 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	7adb      	ldrb	r3, [r3, #11]
 8012b78:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	7a9b      	ldrb	r3, [r3, #10]
 8012b7e:	757b      	strb	r3, [r7, #21]
 8012b80:	e003      	b.n	8012b8a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012b82:	23ff      	movs	r3, #255	; 0xff
 8012b84:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012b8a:	7dba      	ldrb	r2, [r7, #22]
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	9302      	str	r3, [sp, #8]
 8012b90:	2306      	movs	r3, #6
 8012b92:	9301      	str	r3, [sp, #4]
 8012b94:	7d7b      	ldrb	r3, [r7, #21]
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	4613      	mov	r3, r2
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	68b8      	ldr	r0, [r7, #8]
 8012ba0:	f004 f920 	bl	8016de4 <ip4_output_if>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012ba8:	68b8      	ldr	r0, [r7, #8]
 8012baa:	f7f9 fe71 	bl	800c890 <pbuf_free>
  return err;
 8012bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3718      	adds	r7, #24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	0801b78c 	.word	0x0801b78c
 8012bc0:	0801bee4 	.word	0x0801bee4
 8012bc4:	0801b7e0 	.word	0x0801b7e0

08012bc8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012bc8:	b590      	push	{r4, r7, lr}
 8012bca:	b08b      	sub	sp, #44	; 0x2c
 8012bcc:	af04      	add	r7, sp, #16
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	607a      	str	r2, [r7, #4]
 8012bd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <tcp_rst+0x22>
 8012bdc:	4b1f      	ldr	r3, [pc, #124]	; (8012c5c <tcp_rst+0x94>)
 8012bde:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012be2:	491f      	ldr	r1, [pc, #124]	; (8012c60 <tcp_rst+0x98>)
 8012be4:	481f      	ldr	r0, [pc, #124]	; (8012c64 <tcp_rst+0x9c>)
 8012be6:	f005 fb69 	bl	80182bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d106      	bne.n	8012bfe <tcp_rst+0x36>
 8012bf0:	4b1a      	ldr	r3, [pc, #104]	; (8012c5c <tcp_rst+0x94>)
 8012bf2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012bf6:	491c      	ldr	r1, [pc, #112]	; (8012c68 <tcp_rst+0xa0>)
 8012bf8:	481a      	ldr	r0, [pc, #104]	; (8012c64 <tcp_rst+0x9c>)
 8012bfa:	f005 fb5f 	bl	80182bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bfe:	2300      	movs	r3, #0
 8012c00:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c02:	f246 0308 	movw	r3, #24584	; 0x6008
 8012c06:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012c08:	7dfb      	ldrb	r3, [r7, #23]
 8012c0a:	b29c      	uxth	r4, r3
 8012c0c:	68b8      	ldr	r0, [r7, #8]
 8012c0e:	f7f8 fae8 	bl	800b1e2 <lwip_htonl>
 8012c12:	4602      	mov	r2, r0
 8012c14:	8abb      	ldrh	r3, [r7, #20]
 8012c16:	9303      	str	r3, [sp, #12]
 8012c18:	2314      	movs	r3, #20
 8012c1a:	9302      	str	r3, [sp, #8]
 8012c1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012c1e:	9301      	str	r3, [sp, #4]
 8012c20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c22:	9300      	str	r3, [sp, #0]
 8012c24:	4613      	mov	r3, r2
 8012c26:	2200      	movs	r2, #0
 8012c28:	4621      	mov	r1, r4
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff fe90 	bl	8012950 <tcp_output_alloc_header_common>
 8012c30:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d00c      	beq.n	8012c52 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c38:	7dfb      	ldrb	r3, [r7, #23]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	6939      	ldr	r1, [r7, #16]
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f7ff ff38 	bl	8012ab4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	6939      	ldr	r1, [r7, #16]
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff ff72 	bl	8012b34 <tcp_output_control_segment>
 8012c50:	e000      	b.n	8012c54 <tcp_rst+0x8c>
    return;
 8012c52:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012c54:	371c      	adds	r7, #28
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd90      	pop	{r4, r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	0801b78c 	.word	0x0801b78c
 8012c60:	0801bf10 	.word	0x0801bf10
 8012c64:	0801b7e0 	.word	0x0801b7e0
 8012c68:	0801bf2c 	.word	0x0801bf2c

08012c6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012c6c:	b590      	push	{r4, r7, lr}
 8012c6e:	b087      	sub	sp, #28
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012c74:	2300      	movs	r3, #0
 8012c76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <tcp_send_empty_ack+0x24>
 8012c82:	4b28      	ldr	r3, [pc, #160]	; (8012d24 <tcp_send_empty_ack+0xb8>)
 8012c84:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012c88:	4927      	ldr	r1, [pc, #156]	; (8012d28 <tcp_send_empty_ack+0xbc>)
 8012c8a:	4828      	ldr	r0, [pc, #160]	; (8012d2c <tcp_send_empty_ack+0xc0>)
 8012c8c:	f005 fb16 	bl	80182bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c90:	7dfb      	ldrb	r3, [r7, #23]
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	f003 0304 	and.w	r3, r3, #4
 8012c9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012c9c:	7d7b      	ldrb	r3, [r7, #21]
 8012c9e:	b29c      	uxth	r4, r3
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f8 fa9c 	bl	800b1e2 <lwip_htonl>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2200      	movs	r2, #0
 8012cae:	4621      	mov	r1, r4
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7ff fec1 	bl	8012a38 <tcp_output_alloc_header>
 8012cb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d109      	bne.n	8012cd2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	8b5b      	ldrh	r3, [r3, #26]
 8012cc2:	f043 0303 	orr.w	r3, r3, #3
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012ccc:	f06f 0301 	mvn.w	r3, #1
 8012cd0:	e023      	b.n	8012d1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012cd2:	7dbb      	ldrb	r3, [r7, #22]
 8012cd4:	7dfa      	ldrb	r2, [r7, #23]
 8012cd6:	6939      	ldr	r1, [r7, #16]
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff feeb 	bl	8012ab4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	6939      	ldr	r1, [r7, #16]
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7ff ff24 	bl	8012b34 <tcp_output_control_segment>
 8012cec:	4603      	mov	r3, r0
 8012cee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d007      	beq.n	8012d08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	8b5b      	ldrh	r3, [r3, #26]
 8012cfc:	f043 0303 	orr.w	r3, r3, #3
 8012d00:	b29a      	uxth	r2, r3
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	835a      	strh	r2, [r3, #26]
 8012d06:	e006      	b.n	8012d16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	8b5b      	ldrh	r3, [r3, #26]
 8012d0c:	f023 0303 	bic.w	r3, r3, #3
 8012d10:	b29a      	uxth	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	371c      	adds	r7, #28
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd90      	pop	{r4, r7, pc}
 8012d22:	bf00      	nop
 8012d24:	0801b78c 	.word	0x0801b78c
 8012d28:	0801bf48 	.word	0x0801bf48
 8012d2c:	0801b7e0 	.word	0x0801b7e0

08012d30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012d30:	b590      	push	{r4, r7, lr}
 8012d32:	b087      	sub	sp, #28
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d38:	2300      	movs	r3, #0
 8012d3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d106      	bne.n	8012d50 <tcp_keepalive+0x20>
 8012d42:	4b18      	ldr	r3, [pc, #96]	; (8012da4 <tcp_keepalive+0x74>)
 8012d44:	f640 0224 	movw	r2, #2084	; 0x824
 8012d48:	4917      	ldr	r1, [pc, #92]	; (8012da8 <tcp_keepalive+0x78>)
 8012d4a:	4818      	ldr	r0, [pc, #96]	; (8012dac <tcp_keepalive+0x7c>)
 8012d4c:	f005 fab6 	bl	80182bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012d50:	7dfb      	ldrb	r3, [r7, #23]
 8012d52:	b29c      	uxth	r4, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7f8 fa41 	bl	800b1e2 <lwip_htonl>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2200      	movs	r2, #0
 8012d64:	4621      	mov	r1, r4
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f7ff fe66 	bl	8012a38 <tcp_output_alloc_header>
 8012d6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d102      	bne.n	8012d7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012d74:	f04f 33ff 	mov.w	r3, #4294967295
 8012d78:	e010      	b.n	8012d9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	6939      	ldr	r1, [r7, #16]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fe97 	bl	8012ab4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	6939      	ldr	r1, [r7, #16]
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff fed0 	bl	8012b34 <tcp_output_control_segment>
 8012d94:	4603      	mov	r3, r0
 8012d96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	371c      	adds	r7, #28
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd90      	pop	{r4, r7, pc}
 8012da4:	0801b78c 	.word	0x0801b78c
 8012da8:	0801bf68 	.word	0x0801bf68
 8012dac:	0801b7e0 	.word	0x0801b7e0

08012db0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012db0:	b590      	push	{r4, r7, lr}
 8012db2:	b08b      	sub	sp, #44	; 0x2c
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012db8:	2300      	movs	r3, #0
 8012dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d106      	bne.n	8012dd2 <tcp_zero_window_probe+0x22>
 8012dc4:	4b4c      	ldr	r3, [pc, #304]	; (8012ef8 <tcp_zero_window_probe+0x148>)
 8012dc6:	f640 024f 	movw	r2, #2127	; 0x84f
 8012dca:	494c      	ldr	r1, [pc, #304]	; (8012efc <tcp_zero_window_probe+0x14c>)
 8012dcc:	484c      	ldr	r0, [pc, #304]	; (8012f00 <tcp_zero_window_probe+0x150>)
 8012dce:	f005 fa75 	bl	80182bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d101      	bne.n	8012de2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012dde:	2300      	movs	r3, #0
 8012de0:	e086      	b.n	8012ef0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012de8:	2bff      	cmp	r3, #255	; 0xff
 8012dea:	d007      	beq.n	8012dfc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012df2:	3301      	adds	r3, #1
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012dfc:	6a3b      	ldr	r3, [r7, #32]
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	899b      	ldrh	r3, [r3, #12]
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f8 f9d7 	bl	800b1b8 <lwip_htons>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	f003 0301 	and.w	r3, r3, #1
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d005      	beq.n	8012e22 <tcp_zero_window_probe+0x72>
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	891b      	ldrh	r3, [r3, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d101      	bne.n	8012e22 <tcp_zero_window_probe+0x72>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e000      	b.n	8012e24 <tcp_zero_window_probe+0x74>
 8012e22:	2300      	movs	r3, #0
 8012e24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012e26:	7ffb      	ldrb	r3, [r7, #31]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	bf0c      	ite	eq
 8012e2c:	2301      	moveq	r3, #1
 8012e2e:	2300      	movne	r3, #0
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e38:	b299      	uxth	r1, r3
 8012e3a:	6a3b      	ldr	r3, [r7, #32]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	8bba      	ldrh	r2, [r7, #28]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f7ff fdf8 	bl	8012a38 <tcp_output_alloc_header>
 8012e48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d102      	bne.n	8012e56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012e50:	f04f 33ff 	mov.w	r3, #4294967295
 8012e54:	e04c      	b.n	8012ef0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012e5c:	7ffb      	ldrb	r3, [r7, #31]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d011      	beq.n	8012e86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	899b      	ldrh	r3, [r3, #12]
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	b21b      	sxth	r3, r3
 8012e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e6e:	b21c      	sxth	r4, r3
 8012e70:	2011      	movs	r0, #17
 8012e72:	f7f8 f9a1 	bl	800b1b8 <lwip_htons>
 8012e76:	4603      	mov	r3, r0
 8012e78:	b21b      	sxth	r3, r3
 8012e7a:	4323      	orrs	r3, r4
 8012e7c:	b21b      	sxth	r3, r3
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	819a      	strh	r2, [r3, #12]
 8012e84:	e010      	b.n	8012ea8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	3314      	adds	r3, #20
 8012e8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	6858      	ldr	r0, [r3, #4]
 8012e92:	6a3b      	ldr	r3, [r7, #32]
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	891a      	ldrh	r2, [r3, #8]
 8012e98:	6a3b      	ldr	r3, [r7, #32]
 8012e9a:	891b      	ldrh	r3, [r3, #8]
 8012e9c:	1ad3      	subs	r3, r2, r3
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	6939      	ldr	r1, [r7, #16]
 8012ea4:	f7f9 fefa 	bl	800cc9c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ea8:	6a3b      	ldr	r3, [r7, #32]
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7f8 f997 	bl	800b1e2 <lwip_htonl>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	da02      	bge.n	8012ecc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	69b9      	ldr	r1, [r7, #24]
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ff fded 	bl	8012ab4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	3304      	adds	r3, #4
 8012ee0:	69b9      	ldr	r1, [r7, #24]
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7ff fe26 	bl	8012b34 <tcp_output_control_segment>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012eec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	372c      	adds	r7, #44	; 0x2c
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd90      	pop	{r4, r7, pc}
 8012ef8:	0801b78c 	.word	0x0801b78c
 8012efc:	0801bf84 	.word	0x0801bf84
 8012f00:	0801b7e0 	.word	0x0801b7e0

08012f04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012f0c:	f7f9 ffb4 	bl	800ce78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012f10:	4b0a      	ldr	r3, [pc, #40]	; (8012f3c <tcpip_tcp_timer+0x38>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d103      	bne.n	8012f20 <tcpip_tcp_timer+0x1c>
 8012f18:	4b09      	ldr	r3, [pc, #36]	; (8012f40 <tcpip_tcp_timer+0x3c>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d005      	beq.n	8012f2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f20:	2200      	movs	r2, #0
 8012f22:	4908      	ldr	r1, [pc, #32]	; (8012f44 <tcpip_tcp_timer+0x40>)
 8012f24:	20fa      	movs	r0, #250	; 0xfa
 8012f26:	f000 f8f1 	bl	801310c <sys_timeout>
 8012f2a:	e002      	b.n	8012f32 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012f2c:	4b06      	ldr	r3, [pc, #24]	; (8012f48 <tcpip_tcp_timer+0x44>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
  }
}
 8012f32:	bf00      	nop
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	2000fad8 	.word	0x2000fad8
 8012f40:	2000fae8 	.word	0x2000fae8
 8012f44:	08012f05 	.word	0x08012f05
 8012f48:	20008c94 	.word	0x20008c94

08012f4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012f50:	4b0a      	ldr	r3, [pc, #40]	; (8012f7c <tcp_timer_needed+0x30>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10f      	bne.n	8012f78 <tcp_timer_needed+0x2c>
 8012f58:	4b09      	ldr	r3, [pc, #36]	; (8012f80 <tcp_timer_needed+0x34>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d103      	bne.n	8012f68 <tcp_timer_needed+0x1c>
 8012f60:	4b08      	ldr	r3, [pc, #32]	; (8012f84 <tcp_timer_needed+0x38>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d007      	beq.n	8012f78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012f68:	4b04      	ldr	r3, [pc, #16]	; (8012f7c <tcp_timer_needed+0x30>)
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f6e:	2200      	movs	r2, #0
 8012f70:	4905      	ldr	r1, [pc, #20]	; (8012f88 <tcp_timer_needed+0x3c>)
 8012f72:	20fa      	movs	r0, #250	; 0xfa
 8012f74:	f000 f8ca 	bl	801310c <sys_timeout>
  }
}
 8012f78:	bf00      	nop
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	20008c94 	.word	0x20008c94
 8012f80:	2000fad8 	.word	0x2000fad8
 8012f84:	2000fae8 	.word	0x2000fae8
 8012f88:	08012f05 	.word	0x08012f05

08012f8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012f98:	200a      	movs	r0, #10
 8012f9a:	f7f8 fdf9 	bl	800bb90 <memp_malloc>
 8012f9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d109      	bne.n	8012fba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d151      	bne.n	8013050 <sys_timeout_abs+0xc4>
 8012fac:	4b2a      	ldr	r3, [pc, #168]	; (8013058 <sys_timeout_abs+0xcc>)
 8012fae:	22be      	movs	r2, #190	; 0xbe
 8012fb0:	492a      	ldr	r1, [pc, #168]	; (801305c <sys_timeout_abs+0xd0>)
 8012fb2:	482b      	ldr	r0, [pc, #172]	; (8013060 <sys_timeout_abs+0xd4>)
 8012fb4:	f005 f982 	bl	80182bc <iprintf>
    return;
 8012fb8:	e04a      	b.n	8013050 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	68ba      	ldr	r2, [r7, #8]
 8012fc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012fd2:	4b24      	ldr	r3, [pc, #144]	; (8013064 <sys_timeout_abs+0xd8>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d103      	bne.n	8012fe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012fda:	4a22      	ldr	r2, [pc, #136]	; (8013064 <sys_timeout_abs+0xd8>)
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	6013      	str	r3, [r2, #0]
    return;
 8012fe0:	e037      	b.n	8013052 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	685a      	ldr	r2, [r3, #4]
 8012fe6:	4b1f      	ldr	r3, [pc, #124]	; (8013064 <sys_timeout_abs+0xd8>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	1ad3      	subs	r3, r2, r3
 8012fee:	0fdb      	lsrs	r3, r3, #31
 8012ff0:	f003 0301 	and.w	r3, r3, #1
 8012ff4:	b2db      	uxtb	r3, r3
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d007      	beq.n	801300a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012ffa:	4b1a      	ldr	r3, [pc, #104]	; (8013064 <sys_timeout_abs+0xd8>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013002:	4a18      	ldr	r2, [pc, #96]	; (8013064 <sys_timeout_abs+0xd8>)
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	e023      	b.n	8013052 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801300a:	4b16      	ldr	r3, [pc, #88]	; (8013064 <sys_timeout_abs+0xd8>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	617b      	str	r3, [r7, #20]
 8013010:	e01a      	b.n	8013048 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00b      	beq.n	8013032 <sys_timeout_abs+0xa6>
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	685a      	ldr	r2, [r3, #4]
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	0fdb      	lsrs	r3, r3, #31
 8013028:	f003 0301 	and.w	r3, r3, #1
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d007      	beq.n	8013042 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	693a      	ldr	r2, [r7, #16]
 801303e:	601a      	str	r2, [r3, #0]
        break;
 8013040:	e007      	b.n	8013052 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	617b      	str	r3, [r7, #20]
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1e1      	bne.n	8013012 <sys_timeout_abs+0x86>
 801304e:	e000      	b.n	8013052 <sys_timeout_abs+0xc6>
    return;
 8013050:	bf00      	nop
      }
    }
  }
}
 8013052:	3718      	adds	r7, #24
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	0801bfa8 	.word	0x0801bfa8
 801305c:	0801bfdc 	.word	0x0801bfdc
 8013060:	0801c01c 	.word	0x0801c01c
 8013064:	20008c8c 	.word	0x20008c8c

08013068 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	4798      	blx	r3

  now = sys_now();
 801307a:	f7f1 ff3d 	bl	8004ef8 <sys_now>
 801307e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	4b0f      	ldr	r3, [pc, #60]	; (80130c4 <lwip_cyclic_timer+0x5c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4413      	add	r3, r2
 801308a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801308c:	68fa      	ldr	r2, [r7, #12]
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	0fdb      	lsrs	r3, r3, #31
 8013094:	f003 0301 	and.w	r3, r3, #1
 8013098:	b2db      	uxtb	r3, r3
 801309a:	2b00      	cmp	r3, #0
 801309c:	d009      	beq.n	80130b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	4413      	add	r3, r2
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	4907      	ldr	r1, [pc, #28]	; (80130c8 <lwip_cyclic_timer+0x60>)
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7ff ff6e 	bl	8012f8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80130b0:	e004      	b.n	80130bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4904      	ldr	r1, [pc, #16]	; (80130c8 <lwip_cyclic_timer+0x60>)
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f7ff ff68 	bl	8012f8c <sys_timeout_abs>
}
 80130bc:	bf00      	nop
 80130be:	3718      	adds	r7, #24
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	20008c90 	.word	0x20008c90
 80130c8:	08013069 	.word	0x08013069

080130cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130d2:	2301      	movs	r3, #1
 80130d4:	607b      	str	r3, [r7, #4]
 80130d6:	e00e      	b.n	80130f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80130d8:	4a0a      	ldr	r2, [pc, #40]	; (8013104 <sys_timeouts_init+0x38>)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	00db      	lsls	r3, r3, #3
 80130e4:	4a07      	ldr	r2, [pc, #28]	; (8013104 <sys_timeouts_init+0x38>)
 80130e6:	4413      	add	r3, r2
 80130e8:	461a      	mov	r2, r3
 80130ea:	4907      	ldr	r1, [pc, #28]	; (8013108 <sys_timeouts_init+0x3c>)
 80130ec:	f000 f80e 	bl	801310c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	3301      	adds	r3, #1
 80130f4:	607b      	str	r3, [r7, #4]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b04      	cmp	r3, #4
 80130fa:	d9ed      	bls.n	80130d8 <sys_timeouts_init+0xc>
  }
}
 80130fc:	bf00      	nop
 80130fe:	3708      	adds	r7, #8
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	08028340 	.word	0x08028340
 8013108:	08013069 	.word	0x08013069

0801310c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801311e:	d306      	bcc.n	801312e <sys_timeout+0x22>
 8013120:	4b0a      	ldr	r3, [pc, #40]	; (801314c <sys_timeout+0x40>)
 8013122:	f240 1229 	movw	r2, #297	; 0x129
 8013126:	490a      	ldr	r1, [pc, #40]	; (8013150 <sys_timeout+0x44>)
 8013128:	480a      	ldr	r0, [pc, #40]	; (8013154 <sys_timeout+0x48>)
 801312a:	f005 f8c7 	bl	80182bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801312e:	f7f1 fee3 	bl	8004ef8 <sys_now>
 8013132:	4602      	mov	r2, r0
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	4413      	add	r3, r2
 8013138:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	68b9      	ldr	r1, [r7, #8]
 801313e:	6978      	ldr	r0, [r7, #20]
 8013140:	f7ff ff24 	bl	8012f8c <sys_timeout_abs>
#endif
}
 8013144:	bf00      	nop
 8013146:	3718      	adds	r7, #24
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	0801bfa8 	.word	0x0801bfa8
 8013150:	0801c044 	.word	0x0801c044
 8013154:	0801c01c 	.word	0x0801c01c

08013158 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b084      	sub	sp, #16
 801315c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801315e:	f7f1 fecb 	bl	8004ef8 <sys_now>
 8013162:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013164:	4b17      	ldr	r3, [pc, #92]	; (80131c4 <sys_check_timeouts+0x6c>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d022      	beq.n	80131b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	68fa      	ldr	r2, [r7, #12]
 8013176:	1ad3      	subs	r3, r2, r3
 8013178:	0fdb      	lsrs	r3, r3, #31
 801317a:	f003 0301 	and.w	r3, r3, #1
 801317e:	b2db      	uxtb	r3, r3
 8013180:	2b00      	cmp	r3, #0
 8013182:	d11a      	bne.n	80131ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4a0e      	ldr	r2, [pc, #56]	; (80131c4 <sys_check_timeouts+0x6c>)
 801318a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	689b      	ldr	r3, [r3, #8]
 8013190:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	68db      	ldr	r3, [r3, #12]
 8013196:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4a0a      	ldr	r2, [pc, #40]	; (80131c8 <sys_check_timeouts+0x70>)
 801319e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80131a0:	68b9      	ldr	r1, [r7, #8]
 80131a2:	200a      	movs	r0, #10
 80131a4:	f7f8 fd46 	bl	800bc34 <memp_free>
    if (handler != NULL) {
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d0da      	beq.n	8013164 <sys_check_timeouts+0xc>
      handler(arg);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6838      	ldr	r0, [r7, #0]
 80131b2:	4798      	blx	r3
  do {
 80131b4:	e7d6      	b.n	8013164 <sys_check_timeouts+0xc>
      return;
 80131b6:	bf00      	nop
 80131b8:	e000      	b.n	80131bc <sys_check_timeouts+0x64>
      return;
 80131ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80131bc:	3710      	adds	r7, #16
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	20008c8c 	.word	0x20008c8c
 80131c8:	20008c90 	.word	0x20008c90

080131cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80131d2:	4b16      	ldr	r3, [pc, #88]	; (801322c <sys_timeouts_sleeptime+0x60>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d102      	bne.n	80131e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80131da:	f04f 33ff 	mov.w	r3, #4294967295
 80131de:	e020      	b.n	8013222 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80131e0:	f7f1 fe8a 	bl	8004ef8 <sys_now>
 80131e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80131e6:	4b11      	ldr	r3, [pc, #68]	; (801322c <sys_timeouts_sleeptime+0x60>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	685a      	ldr	r2, [r3, #4]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	1ad3      	subs	r3, r2, r3
 80131f0:	0fdb      	lsrs	r3, r3, #31
 80131f2:	f003 0301 	and.w	r3, r3, #1
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d001      	beq.n	8013200 <sys_timeouts_sleeptime+0x34>
    return 0;
 80131fc:	2300      	movs	r3, #0
 80131fe:	e010      	b.n	8013222 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013200:	4b0a      	ldr	r3, [pc, #40]	; (801322c <sys_timeouts_sleeptime+0x60>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	1ad3      	subs	r3, r2, r3
 801320a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	2b00      	cmp	r3, #0
 8013210:	da06      	bge.n	8013220 <sys_timeouts_sleeptime+0x54>
 8013212:	4b07      	ldr	r3, [pc, #28]	; (8013230 <sys_timeouts_sleeptime+0x64>)
 8013214:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013218:	4906      	ldr	r1, [pc, #24]	; (8013234 <sys_timeouts_sleeptime+0x68>)
 801321a:	4807      	ldr	r0, [pc, #28]	; (8013238 <sys_timeouts_sleeptime+0x6c>)
 801321c:	f005 f84e 	bl	80182bc <iprintf>
    return ret;
 8013220:	683b      	ldr	r3, [r7, #0]
  }
}
 8013222:	4618      	mov	r0, r3
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	20008c8c 	.word	0x20008c8c
 8013230:	0801bfa8 	.word	0x0801bfa8
 8013234:	0801c07c 	.word	0x0801c07c
 8013238:	0801c01c 	.word	0x0801c01c

0801323c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013240:	f005 f854 	bl	80182ec <rand>
 8013244:	4603      	mov	r3, r0
 8013246:	b29b      	uxth	r3, r3
 8013248:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801324c:	b29b      	uxth	r3, r3
 801324e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013252:	b29a      	uxth	r2, r3
 8013254:	4b01      	ldr	r3, [pc, #4]	; (801325c <udp_init+0x20>)
 8013256:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013258:	bf00      	nop
 801325a:	bd80      	pop	{r7, pc}
 801325c:	20000018 	.word	0x20000018

08013260 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013266:	2300      	movs	r3, #0
 8013268:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801326a:	4b17      	ldr	r3, [pc, #92]	; (80132c8 <udp_new_port+0x68>)
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	1c5a      	adds	r2, r3, #1
 8013270:	b291      	uxth	r1, r2
 8013272:	4a15      	ldr	r2, [pc, #84]	; (80132c8 <udp_new_port+0x68>)
 8013274:	8011      	strh	r1, [r2, #0]
 8013276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801327a:	4293      	cmp	r3, r2
 801327c:	d103      	bne.n	8013286 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801327e:	4b12      	ldr	r3, [pc, #72]	; (80132c8 <udp_new_port+0x68>)
 8013280:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013284:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013286:	4b11      	ldr	r3, [pc, #68]	; (80132cc <udp_new_port+0x6c>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	603b      	str	r3, [r7, #0]
 801328c:	e011      	b.n	80132b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	8a5a      	ldrh	r2, [r3, #18]
 8013292:	4b0d      	ldr	r3, [pc, #52]	; (80132c8 <udp_new_port+0x68>)
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	429a      	cmp	r2, r3
 8013298:	d108      	bne.n	80132ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801329a:	88fb      	ldrh	r3, [r7, #6]
 801329c:	3301      	adds	r3, #1
 801329e:	80fb      	strh	r3, [r7, #6]
 80132a0:	88fb      	ldrh	r3, [r7, #6]
 80132a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80132a6:	d3e0      	bcc.n	801326a <udp_new_port+0xa>
        return 0;
 80132a8:	2300      	movs	r3, #0
 80132aa:	e007      	b.n	80132bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	68db      	ldr	r3, [r3, #12]
 80132b0:	603b      	str	r3, [r7, #0]
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d1ea      	bne.n	801328e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80132b8:	4b03      	ldr	r3, [pc, #12]	; (80132c8 <udp_new_port+0x68>)
 80132ba:	881b      	ldrh	r3, [r3, #0]
}
 80132bc:	4618      	mov	r0, r3
 80132be:	370c      	adds	r7, #12
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr
 80132c8:	20000018 	.word	0x20000018
 80132cc:	2000faf0 	.word	0x2000faf0

080132d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	4613      	mov	r3, r2
 80132dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d105      	bne.n	80132f0 <udp_input_local_match+0x20>
 80132e4:	4b27      	ldr	r3, [pc, #156]	; (8013384 <udp_input_local_match+0xb4>)
 80132e6:	2287      	movs	r2, #135	; 0x87
 80132e8:	4927      	ldr	r1, [pc, #156]	; (8013388 <udp_input_local_match+0xb8>)
 80132ea:	4828      	ldr	r0, [pc, #160]	; (801338c <udp_input_local_match+0xbc>)
 80132ec:	f004 ffe6 	bl	80182bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d105      	bne.n	8013302 <udp_input_local_match+0x32>
 80132f6:	4b23      	ldr	r3, [pc, #140]	; (8013384 <udp_input_local_match+0xb4>)
 80132f8:	2288      	movs	r2, #136	; 0x88
 80132fa:	4925      	ldr	r1, [pc, #148]	; (8013390 <udp_input_local_match+0xc0>)
 80132fc:	4823      	ldr	r0, [pc, #140]	; (801338c <udp_input_local_match+0xbc>)
 80132fe:	f004 ffdd 	bl	80182bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	7a1b      	ldrb	r3, [r3, #8]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d00b      	beq.n	8013322 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	7a1a      	ldrb	r2, [r3, #8]
 801330e:	4b21      	ldr	r3, [pc, #132]	; (8013394 <udp_input_local_match+0xc4>)
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013316:	3301      	adds	r3, #1
 8013318:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801331a:	429a      	cmp	r2, r3
 801331c:	d001      	beq.n	8013322 <udp_input_local_match+0x52>
    return 0;
 801331e:	2300      	movs	r3, #0
 8013320:	e02b      	b.n	801337a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013322:	79fb      	ldrb	r3, [r7, #7]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d018      	beq.n	801335a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d013      	beq.n	8013356 <udp_input_local_match+0x86>
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d00f      	beq.n	8013356 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013336:	4b17      	ldr	r3, [pc, #92]	; (8013394 <udp_input_local_match+0xc4>)
 8013338:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801333e:	d00a      	beq.n	8013356 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	4b13      	ldr	r3, [pc, #76]	; (8013394 <udp_input_local_match+0xc4>)
 8013346:	695b      	ldr	r3, [r3, #20]
 8013348:	405a      	eors	r2, r3
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	3308      	adds	r3, #8
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013352:	2b00      	cmp	r3, #0
 8013354:	d110      	bne.n	8013378 <udp_input_local_match+0xa8>
          return 1;
 8013356:	2301      	movs	r3, #1
 8013358:	e00f      	b.n	801337a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d009      	beq.n	8013374 <udp_input_local_match+0xa4>
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d005      	beq.n	8013374 <udp_input_local_match+0xa4>
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	4b09      	ldr	r3, [pc, #36]	; (8013394 <udp_input_local_match+0xc4>)
 801336e:	695b      	ldr	r3, [r3, #20]
 8013370:	429a      	cmp	r2, r3
 8013372:	d101      	bne.n	8013378 <udp_input_local_match+0xa8>
        return 1;
 8013374:	2301      	movs	r3, #1
 8013376:	e000      	b.n	801337a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013378:	2300      	movs	r3, #0
}
 801337a:	4618      	mov	r0, r3
 801337c:	3710      	adds	r7, #16
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	0801c090 	.word	0x0801c090
 8013388:	0801c0c0 	.word	0x0801c0c0
 801338c:	0801c0e4 	.word	0x0801c0e4
 8013390:	0801c10c 	.word	0x0801c10c
 8013394:	2000c3a4 	.word	0x2000c3a4

08013398 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013398:	b590      	push	{r4, r7, lr}
 801339a:	b08d      	sub	sp, #52	; 0x34
 801339c:	af02      	add	r7, sp, #8
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80133a2:	2300      	movs	r3, #0
 80133a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d105      	bne.n	80133b8 <udp_input+0x20>
 80133ac:	4b7c      	ldr	r3, [pc, #496]	; (80135a0 <udp_input+0x208>)
 80133ae:	22cf      	movs	r2, #207	; 0xcf
 80133b0:	497c      	ldr	r1, [pc, #496]	; (80135a4 <udp_input+0x20c>)
 80133b2:	487d      	ldr	r0, [pc, #500]	; (80135a8 <udp_input+0x210>)
 80133b4:	f004 ff82 	bl	80182bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d105      	bne.n	80133ca <udp_input+0x32>
 80133be:	4b78      	ldr	r3, [pc, #480]	; (80135a0 <udp_input+0x208>)
 80133c0:	22d0      	movs	r2, #208	; 0xd0
 80133c2:	497a      	ldr	r1, [pc, #488]	; (80135ac <udp_input+0x214>)
 80133c4:	4878      	ldr	r0, [pc, #480]	; (80135a8 <udp_input+0x210>)
 80133c6:	f004 ff79 	bl	80182bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	895b      	ldrh	r3, [r3, #10]
 80133ce:	2b07      	cmp	r3, #7
 80133d0:	d803      	bhi.n	80133da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f7f9 fa5c 	bl	800c890 <pbuf_free>
    goto end;
 80133d8:	e0de      	b.n	8013598 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80133e0:	4b73      	ldr	r3, [pc, #460]	; (80135b0 <udp_input+0x218>)
 80133e2:	695a      	ldr	r2, [r3, #20]
 80133e4:	4b72      	ldr	r3, [pc, #456]	; (80135b0 <udp_input+0x218>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	4619      	mov	r1, r3
 80133ea:	4610      	mov	r0, r2
 80133ec:	f003 fdd2 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 80133f0:	4603      	mov	r3, r0
 80133f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	881b      	ldrh	r3, [r3, #0]
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f7 fedc 	bl	800b1b8 <lwip_htons>
 8013400:	4603      	mov	r3, r0
 8013402:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	885b      	ldrh	r3, [r3, #2]
 8013408:	b29b      	uxth	r3, r3
 801340a:	4618      	mov	r0, r3
 801340c:	f7f7 fed4 	bl	800b1b8 <lwip_htons>
 8013410:	4603      	mov	r3, r0
 8013412:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013414:	2300      	movs	r3, #0
 8013416:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013418:	2300      	movs	r3, #0
 801341a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801341c:	2300      	movs	r3, #0
 801341e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013420:	4b64      	ldr	r3, [pc, #400]	; (80135b4 <udp_input+0x21c>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	627b      	str	r3, [r7, #36]	; 0x24
 8013426:	e054      	b.n	80134d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342a:	8a5b      	ldrh	r3, [r3, #18]
 801342c:	89fa      	ldrh	r2, [r7, #14]
 801342e:	429a      	cmp	r2, r3
 8013430:	d14a      	bne.n	80134c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013432:	7cfb      	ldrb	r3, [r7, #19]
 8013434:	461a      	mov	r2, r3
 8013436:	6839      	ldr	r1, [r7, #0]
 8013438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801343a:	f7ff ff49 	bl	80132d0 <udp_input_local_match>
 801343e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013440:	2b00      	cmp	r3, #0
 8013442:	d041      	beq.n	80134c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013446:	7c1b      	ldrb	r3, [r3, #16]
 8013448:	f003 0304 	and.w	r3, r3, #4
 801344c:	2b00      	cmp	r3, #0
 801344e:	d11d      	bne.n	801348c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d102      	bne.n	801345c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013458:	61fb      	str	r3, [r7, #28]
 801345a:	e017      	b.n	801348c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801345c:	7cfb      	ldrb	r3, [r7, #19]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d014      	beq.n	801348c <udp_input+0xf4>
 8013462:	4b53      	ldr	r3, [pc, #332]	; (80135b0 <udp_input+0x218>)
 8013464:	695b      	ldr	r3, [r3, #20]
 8013466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801346a:	d10f      	bne.n	801348c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	3304      	adds	r3, #4
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	429a      	cmp	r2, r3
 8013478:	d008      	beq.n	801348c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	3304      	adds	r3, #4
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	429a      	cmp	r2, r3
 8013486:	d101      	bne.n	801348c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348e:	8a9b      	ldrh	r3, [r3, #20]
 8013490:	8a3a      	ldrh	r2, [r7, #16]
 8013492:	429a      	cmp	r2, r3
 8013494:	d118      	bne.n	80134c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013498:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801349a:	2b00      	cmp	r3, #0
 801349c:	d005      	beq.n	80134aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	685a      	ldr	r2, [r3, #4]
 80134a2:	4b43      	ldr	r3, [pc, #268]	; (80135b0 <udp_input+0x218>)
 80134a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d10e      	bne.n	80134c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80134aa:	6a3b      	ldr	r3, [r7, #32]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d014      	beq.n	80134da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80134b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b2:	68da      	ldr	r2, [r3, #12]
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80134b8:	4b3e      	ldr	r3, [pc, #248]	; (80135b4 <udp_input+0x21c>)
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80134c0:	4a3c      	ldr	r2, [pc, #240]	; (80135b4 <udp_input+0x21c>)
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80134c6:	e008      	b.n	80134da <udp_input+0x142>
      }
    }

    prev = pcb;
 80134c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	627b      	str	r3, [r7, #36]	; 0x24
 80134d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1a7      	bne.n	8013428 <udp_input+0x90>
 80134d8:	e000      	b.n	80134dc <udp_input+0x144>
        break;
 80134da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80134dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d101      	bne.n	80134e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80134e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d002      	beq.n	80134f2 <udp_input+0x15a>
    for_us = 1;
 80134ec:	2301      	movs	r3, #1
 80134ee:	76fb      	strb	r3, [r7, #27]
 80134f0:	e00a      	b.n	8013508 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	3304      	adds	r3, #4
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	4b2d      	ldr	r3, [pc, #180]	; (80135b0 <udp_input+0x218>)
 80134fa:	695b      	ldr	r3, [r3, #20]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	bf0c      	ite	eq
 8013500:	2301      	moveq	r3, #1
 8013502:	2300      	movne	r3, #0
 8013504:	b2db      	uxtb	r3, r3
 8013506:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013508:	7efb      	ldrb	r3, [r7, #27]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d041      	beq.n	8013592 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801350e:	2108      	movs	r1, #8
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7f9 f937 	bl	800c784 <pbuf_remove_header>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	d00a      	beq.n	8013532 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801351c:	4b20      	ldr	r3, [pc, #128]	; (80135a0 <udp_input+0x208>)
 801351e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013522:	4925      	ldr	r1, [pc, #148]	; (80135b8 <udp_input+0x220>)
 8013524:	4820      	ldr	r0, [pc, #128]	; (80135a8 <udp_input+0x210>)
 8013526:	f004 fec9 	bl	80182bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f7f9 f9b0 	bl	800c890 <pbuf_free>
      goto end;
 8013530:	e032      	b.n	8013598 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013534:	2b00      	cmp	r3, #0
 8013536:	d012      	beq.n	801355e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353a:	699b      	ldr	r3, [r3, #24]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00a      	beq.n	8013556 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013542:	699c      	ldr	r4, [r3, #24]
 8013544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013546:	69d8      	ldr	r0, [r3, #28]
 8013548:	8a3b      	ldrh	r3, [r7, #16]
 801354a:	9300      	str	r3, [sp, #0]
 801354c:	4b1b      	ldr	r3, [pc, #108]	; (80135bc <udp_input+0x224>)
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013552:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013554:	e021      	b.n	801359a <udp_input+0x202>
        pbuf_free(p);
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f7f9 f99a 	bl	800c890 <pbuf_free>
        goto end;
 801355c:	e01c      	b.n	8013598 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801355e:	7cfb      	ldrb	r3, [r7, #19]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d112      	bne.n	801358a <udp_input+0x1f2>
 8013564:	4b12      	ldr	r3, [pc, #72]	; (80135b0 <udp_input+0x218>)
 8013566:	695b      	ldr	r3, [r3, #20]
 8013568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801356c:	2be0      	cmp	r3, #224	; 0xe0
 801356e:	d00c      	beq.n	801358a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013570:	4b0f      	ldr	r3, [pc, #60]	; (80135b0 <udp_input+0x218>)
 8013572:	899b      	ldrh	r3, [r3, #12]
 8013574:	3308      	adds	r3, #8
 8013576:	b29b      	uxth	r3, r3
 8013578:	b21b      	sxth	r3, r3
 801357a:	4619      	mov	r1, r3
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7f9 f974 	bl	800c86a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013582:	2103      	movs	r1, #3
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f003 f9c9 	bl	801691c <icmp_dest_unreach>
      pbuf_free(p);
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7f9 f980 	bl	800c890 <pbuf_free>
  return;
 8013590:	e003      	b.n	801359a <udp_input+0x202>
    pbuf_free(p);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7f9 f97c 	bl	800c890 <pbuf_free>
  return;
 8013598:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801359a:	372c      	adds	r7, #44	; 0x2c
 801359c:	46bd      	mov	sp, r7
 801359e:	bd90      	pop	{r4, r7, pc}
 80135a0:	0801c090 	.word	0x0801c090
 80135a4:	0801c134 	.word	0x0801c134
 80135a8:	0801c0e4 	.word	0x0801c0e4
 80135ac:	0801c14c 	.word	0x0801c14c
 80135b0:	2000c3a4 	.word	0x2000c3a4
 80135b4:	2000faf0 	.word	0x2000faf0
 80135b8:	0801c168 	.word	0x0801c168
 80135bc:	2000c3b4 	.word	0x2000c3b4

080135c0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b088      	sub	sp, #32
 80135c4:	af02      	add	r7, sp, #8
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d109      	bne.n	80135e8 <udp_sendto_if+0x28>
 80135d4:	4b2e      	ldr	r3, [pc, #184]	; (8013690 <udp_sendto_if+0xd0>)
 80135d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80135da:	492e      	ldr	r1, [pc, #184]	; (8013694 <udp_sendto_if+0xd4>)
 80135dc:	482e      	ldr	r0, [pc, #184]	; (8013698 <udp_sendto_if+0xd8>)
 80135de:	f004 fe6d 	bl	80182bc <iprintf>
 80135e2:	f06f 030f 	mvn.w	r3, #15
 80135e6:	e04f      	b.n	8013688 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d109      	bne.n	8013602 <udp_sendto_if+0x42>
 80135ee:	4b28      	ldr	r3, [pc, #160]	; (8013690 <udp_sendto_if+0xd0>)
 80135f0:	f240 2281 	movw	r2, #641	; 0x281
 80135f4:	4929      	ldr	r1, [pc, #164]	; (801369c <udp_sendto_if+0xdc>)
 80135f6:	4828      	ldr	r0, [pc, #160]	; (8013698 <udp_sendto_if+0xd8>)
 80135f8:	f004 fe60 	bl	80182bc <iprintf>
 80135fc:	f06f 030f 	mvn.w	r3, #15
 8013600:	e042      	b.n	8013688 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d109      	bne.n	801361c <udp_sendto_if+0x5c>
 8013608:	4b21      	ldr	r3, [pc, #132]	; (8013690 <udp_sendto_if+0xd0>)
 801360a:	f240 2282 	movw	r2, #642	; 0x282
 801360e:	4924      	ldr	r1, [pc, #144]	; (80136a0 <udp_sendto_if+0xe0>)
 8013610:	4821      	ldr	r0, [pc, #132]	; (8013698 <udp_sendto_if+0xd8>)
 8013612:	f004 fe53 	bl	80182bc <iprintf>
 8013616:	f06f 030f 	mvn.w	r3, #15
 801361a:	e035      	b.n	8013688 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d109      	bne.n	8013636 <udp_sendto_if+0x76>
 8013622:	4b1b      	ldr	r3, [pc, #108]	; (8013690 <udp_sendto_if+0xd0>)
 8013624:	f240 2283 	movw	r2, #643	; 0x283
 8013628:	491e      	ldr	r1, [pc, #120]	; (80136a4 <udp_sendto_if+0xe4>)
 801362a:	481b      	ldr	r0, [pc, #108]	; (8013698 <udp_sendto_if+0xd8>)
 801362c:	f004 fe46 	bl	80182bc <iprintf>
 8013630:	f06f 030f 	mvn.w	r3, #15
 8013634:	e028      	b.n	8013688 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d009      	beq.n	8013650 <udp_sendto_if+0x90>
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d005      	beq.n	8013650 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801364c:	2be0      	cmp	r3, #224	; 0xe0
 801364e:	d103      	bne.n	8013658 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013650:	6a3b      	ldr	r3, [r7, #32]
 8013652:	3304      	adds	r3, #4
 8013654:	617b      	str	r3, [r7, #20]
 8013656:	e00b      	b.n	8013670 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681a      	ldr	r2, [r3, #0]
 801365c:	6a3b      	ldr	r3, [r7, #32]
 801365e:	3304      	adds	r3, #4
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	429a      	cmp	r2, r3
 8013664:	d002      	beq.n	801366c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013666:	f06f 0303 	mvn.w	r3, #3
 801366a:	e00d      	b.n	8013688 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013670:	887a      	ldrh	r2, [r7, #2]
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	9301      	str	r3, [sp, #4]
 8013676:	6a3b      	ldr	r3, [r7, #32]
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	4613      	mov	r3, r2
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 f811 	bl	80136a8 <udp_sendto_if_src>
 8013686:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013688:	4618      	mov	r0, r3
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	0801c090 	.word	0x0801c090
 8013694:	0801c204 	.word	0x0801c204
 8013698:	0801c0e4 	.word	0x0801c0e4
 801369c:	0801c220 	.word	0x0801c220
 80136a0:	0801c23c 	.word	0x0801c23c
 80136a4:	0801c25c 	.word	0x0801c25c

080136a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b08c      	sub	sp, #48	; 0x30
 80136ac:	af04      	add	r7, sp, #16
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]
 80136b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d109      	bne.n	80136d0 <udp_sendto_if_src+0x28>
 80136bc:	4b65      	ldr	r3, [pc, #404]	; (8013854 <udp_sendto_if_src+0x1ac>)
 80136be:	f240 22d1 	movw	r2, #721	; 0x2d1
 80136c2:	4965      	ldr	r1, [pc, #404]	; (8013858 <udp_sendto_if_src+0x1b0>)
 80136c4:	4865      	ldr	r0, [pc, #404]	; (801385c <udp_sendto_if_src+0x1b4>)
 80136c6:	f004 fdf9 	bl	80182bc <iprintf>
 80136ca:	f06f 030f 	mvn.w	r3, #15
 80136ce:	e0bc      	b.n	801384a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d109      	bne.n	80136ea <udp_sendto_if_src+0x42>
 80136d6:	4b5f      	ldr	r3, [pc, #380]	; (8013854 <udp_sendto_if_src+0x1ac>)
 80136d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80136dc:	4960      	ldr	r1, [pc, #384]	; (8013860 <udp_sendto_if_src+0x1b8>)
 80136de:	485f      	ldr	r0, [pc, #380]	; (801385c <udp_sendto_if_src+0x1b4>)
 80136e0:	f004 fdec 	bl	80182bc <iprintf>
 80136e4:	f06f 030f 	mvn.w	r3, #15
 80136e8:	e0af      	b.n	801384a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d109      	bne.n	8013704 <udp_sendto_if_src+0x5c>
 80136f0:	4b58      	ldr	r3, [pc, #352]	; (8013854 <udp_sendto_if_src+0x1ac>)
 80136f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80136f6:	495b      	ldr	r1, [pc, #364]	; (8013864 <udp_sendto_if_src+0x1bc>)
 80136f8:	4858      	ldr	r0, [pc, #352]	; (801385c <udp_sendto_if_src+0x1b4>)
 80136fa:	f004 fddf 	bl	80182bc <iprintf>
 80136fe:	f06f 030f 	mvn.w	r3, #15
 8013702:	e0a2      	b.n	801384a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	2b00      	cmp	r3, #0
 8013708:	d109      	bne.n	801371e <udp_sendto_if_src+0x76>
 801370a:	4b52      	ldr	r3, [pc, #328]	; (8013854 <udp_sendto_if_src+0x1ac>)
 801370c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013710:	4955      	ldr	r1, [pc, #340]	; (8013868 <udp_sendto_if_src+0x1c0>)
 8013712:	4852      	ldr	r0, [pc, #328]	; (801385c <udp_sendto_if_src+0x1b4>)
 8013714:	f004 fdd2 	bl	80182bc <iprintf>
 8013718:	f06f 030f 	mvn.w	r3, #15
 801371c:	e095      	b.n	801384a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013720:	2b00      	cmp	r3, #0
 8013722:	d109      	bne.n	8013738 <udp_sendto_if_src+0x90>
 8013724:	4b4b      	ldr	r3, [pc, #300]	; (8013854 <udp_sendto_if_src+0x1ac>)
 8013726:	f240 22d5 	movw	r2, #725	; 0x2d5
 801372a:	4950      	ldr	r1, [pc, #320]	; (801386c <udp_sendto_if_src+0x1c4>)
 801372c:	484b      	ldr	r0, [pc, #300]	; (801385c <udp_sendto_if_src+0x1b4>)
 801372e:	f004 fdc5 	bl	80182bc <iprintf>
 8013732:	f06f 030f 	mvn.w	r3, #15
 8013736:	e088      	b.n	801384a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	8a5b      	ldrh	r3, [r3, #18]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d10f      	bne.n	8013760 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013740:	68f9      	ldr	r1, [r7, #12]
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	8a5b      	ldrh	r3, [r3, #18]
 8013746:	461a      	mov	r2, r3
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f000 f893 	bl	8013874 <udp_bind>
 801374e:	4603      	mov	r3, r0
 8013750:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013752:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d002      	beq.n	8013760 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801375a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801375e:	e074      	b.n	801384a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	891b      	ldrh	r3, [r3, #8]
 8013764:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013768:	4293      	cmp	r3, r2
 801376a:	d902      	bls.n	8013772 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801376c:	f04f 33ff 	mov.w	r3, #4294967295
 8013770:	e06b      	b.n	801384a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013772:	2108      	movs	r1, #8
 8013774:	68b8      	ldr	r0, [r7, #8]
 8013776:	f7f8 fff5 	bl	800c764 <pbuf_add_header>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d015      	beq.n	80137ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013780:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013784:	2108      	movs	r1, #8
 8013786:	2022      	movs	r0, #34	; 0x22
 8013788:	f7f8 fda2 	bl	800c2d0 <pbuf_alloc>
 801378c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801378e:	69fb      	ldr	r3, [r7, #28]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d102      	bne.n	801379a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013794:	f04f 33ff 	mov.w	r3, #4294967295
 8013798:	e057      	b.n	801384a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	891b      	ldrh	r3, [r3, #8]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d006      	beq.n	80137b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80137a2:	68b9      	ldr	r1, [r7, #8]
 80137a4:	69f8      	ldr	r0, [r7, #28]
 80137a6:	f7f9 f997 	bl	800cad8 <pbuf_chain>
 80137aa:	e001      	b.n	80137b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	895b      	ldrh	r3, [r3, #10]
 80137b4:	2b07      	cmp	r3, #7
 80137b6:	d806      	bhi.n	80137c6 <udp_sendto_if_src+0x11e>
 80137b8:	4b26      	ldr	r3, [pc, #152]	; (8013854 <udp_sendto_if_src+0x1ac>)
 80137ba:	f240 320e 	movw	r2, #782	; 0x30e
 80137be:	492c      	ldr	r1, [pc, #176]	; (8013870 <udp_sendto_if_src+0x1c8>)
 80137c0:	4826      	ldr	r0, [pc, #152]	; (801385c <udp_sendto_if_src+0x1b4>)
 80137c2:	f004 fd7b 	bl	80182bc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	8a5b      	ldrh	r3, [r3, #18]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7f7 fcf1 	bl	800b1b8 <lwip_htons>
 80137d6:	4603      	mov	r3, r0
 80137d8:	461a      	mov	r2, r3
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80137de:	887b      	ldrh	r3, [r7, #2]
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7f7 fce9 	bl	800b1b8 <lwip_htons>
 80137e6:	4603      	mov	r3, r0
 80137e8:	461a      	mov	r2, r3
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	2200      	movs	r2, #0
 80137f2:	719a      	strb	r2, [r3, #6]
 80137f4:	2200      	movs	r2, #0
 80137f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	891b      	ldrh	r3, [r3, #8]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7f7 fcdb 	bl	800b1b8 <lwip_htons>
 8013802:	4603      	mov	r3, r0
 8013804:	461a      	mov	r2, r3
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801380a:	2311      	movs	r3, #17
 801380c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	7adb      	ldrb	r3, [r3, #11]
 8013812:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	7a9b      	ldrb	r3, [r3, #10]
 8013818:	7cb9      	ldrb	r1, [r7, #18]
 801381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801381c:	9202      	str	r2, [sp, #8]
 801381e:	7cfa      	ldrb	r2, [r7, #19]
 8013820:	9201      	str	r2, [sp, #4]
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	460b      	mov	r3, r1
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801382a:	69f8      	ldr	r0, [r7, #28]
 801382c:	f003 fb04 	bl	8016e38 <ip4_output_if_src>
 8013830:	4603      	mov	r3, r0
 8013832:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013834:	69fa      	ldr	r2, [r7, #28]
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	429a      	cmp	r2, r3
 801383a:	d004      	beq.n	8013846 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801383c:	69f8      	ldr	r0, [r7, #28]
 801383e:	f7f9 f827 	bl	800c890 <pbuf_free>
    q = NULL;
 8013842:	2300      	movs	r3, #0
 8013844:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013846:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801384a:	4618      	mov	r0, r3
 801384c:	3720      	adds	r7, #32
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	0801c090 	.word	0x0801c090
 8013858:	0801c27c 	.word	0x0801c27c
 801385c:	0801c0e4 	.word	0x0801c0e4
 8013860:	0801c29c 	.word	0x0801c29c
 8013864:	0801c2bc 	.word	0x0801c2bc
 8013868:	0801c2e0 	.word	0x0801c2e0
 801386c:	0801c304 	.word	0x0801c304
 8013870:	0801c328 	.word	0x0801c328

08013874 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b086      	sub	sp, #24
 8013878:	af00      	add	r7, sp, #0
 801387a:	60f8      	str	r0, [r7, #12]
 801387c:	60b9      	str	r1, [r7, #8]
 801387e:	4613      	mov	r3, r2
 8013880:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d101      	bne.n	801388c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013888:	4b39      	ldr	r3, [pc, #228]	; (8013970 <udp_bind+0xfc>)
 801388a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d109      	bne.n	80138a6 <udp_bind+0x32>
 8013892:	4b38      	ldr	r3, [pc, #224]	; (8013974 <udp_bind+0x100>)
 8013894:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013898:	4937      	ldr	r1, [pc, #220]	; (8013978 <udp_bind+0x104>)
 801389a:	4838      	ldr	r0, [pc, #224]	; (801397c <udp_bind+0x108>)
 801389c:	f004 fd0e 	bl	80182bc <iprintf>
 80138a0:	f06f 030f 	mvn.w	r3, #15
 80138a4:	e060      	b.n	8013968 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138aa:	4b35      	ldr	r3, [pc, #212]	; (8013980 <udp_bind+0x10c>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	617b      	str	r3, [r7, #20]
 80138b0:	e009      	b.n	80138c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d102      	bne.n	80138c0 <udp_bind+0x4c>
      rebind = 1;
 80138ba:	2301      	movs	r3, #1
 80138bc:	74fb      	strb	r3, [r7, #19]
      break;
 80138be:	e005      	b.n	80138cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	617b      	str	r3, [r7, #20]
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d1f2      	bne.n	80138b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80138cc:	88fb      	ldrh	r3, [r7, #6]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d109      	bne.n	80138e6 <udp_bind+0x72>
    port = udp_new_port();
 80138d2:	f7ff fcc5 	bl	8013260 <udp_new_port>
 80138d6:	4603      	mov	r3, r0
 80138d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80138da:	88fb      	ldrh	r3, [r7, #6]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d12c      	bne.n	801393a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80138e0:	f06f 0307 	mvn.w	r3, #7
 80138e4:	e040      	b.n	8013968 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138e6:	4b26      	ldr	r3, [pc, #152]	; (8013980 <udp_bind+0x10c>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	617b      	str	r3, [r7, #20]
 80138ec:	e022      	b.n	8013934 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d01b      	beq.n	801392e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	8a5b      	ldrh	r3, [r3, #18]
 80138fa:	88fa      	ldrh	r2, [r7, #6]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d116      	bne.n	801392e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013908:	429a      	cmp	r2, r3
 801390a:	d00d      	beq.n	8013928 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00a      	beq.n	8013928 <udp_bind+0xb4>
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d006      	beq.n	8013928 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801391a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801391c:	2b00      	cmp	r3, #0
 801391e:	d003      	beq.n	8013928 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d102      	bne.n	801392e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013928:	f06f 0307 	mvn.w	r3, #7
 801392c:	e01c      	b.n	8013968 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	68db      	ldr	r3, [r3, #12]
 8013932:	617b      	str	r3, [r7, #20]
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d1d9      	bne.n	80138ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d002      	beq.n	8013946 <udp_bind+0xd2>
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	e000      	b.n	8013948 <udp_bind+0xd4>
 8013946:	2300      	movs	r3, #0
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	88fa      	ldrh	r2, [r7, #6]
 8013950:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013952:	7cfb      	ldrb	r3, [r7, #19]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d106      	bne.n	8013966 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013958:	4b09      	ldr	r3, [pc, #36]	; (8013980 <udp_bind+0x10c>)
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013960:	4a07      	ldr	r2, [pc, #28]	; (8013980 <udp_bind+0x10c>)
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013966:	2300      	movs	r3, #0
}
 8013968:	4618      	mov	r0, r3
 801396a:	3718      	adds	r7, #24
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	08028368 	.word	0x08028368
 8013974:	0801c090 	.word	0x0801c090
 8013978:	0801c358 	.word	0x0801c358
 801397c:	0801c0e4 	.word	0x0801c0e4
 8013980:	2000faf0 	.word	0x2000faf0

08013984 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	4613      	mov	r3, r2
 8013990:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d109      	bne.n	80139ac <udp_connect+0x28>
 8013998:	4b2c      	ldr	r3, [pc, #176]	; (8013a4c <udp_connect+0xc8>)
 801399a:	f240 4235 	movw	r2, #1077	; 0x435
 801399e:	492c      	ldr	r1, [pc, #176]	; (8013a50 <udp_connect+0xcc>)
 80139a0:	482c      	ldr	r0, [pc, #176]	; (8013a54 <udp_connect+0xd0>)
 80139a2:	f004 fc8b 	bl	80182bc <iprintf>
 80139a6:	f06f 030f 	mvn.w	r3, #15
 80139aa:	e04b      	b.n	8013a44 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d109      	bne.n	80139c6 <udp_connect+0x42>
 80139b2:	4b26      	ldr	r3, [pc, #152]	; (8013a4c <udp_connect+0xc8>)
 80139b4:	f240 4236 	movw	r2, #1078	; 0x436
 80139b8:	4927      	ldr	r1, [pc, #156]	; (8013a58 <udp_connect+0xd4>)
 80139ba:	4826      	ldr	r0, [pc, #152]	; (8013a54 <udp_connect+0xd0>)
 80139bc:	f004 fc7e 	bl	80182bc <iprintf>
 80139c0:	f06f 030f 	mvn.w	r3, #15
 80139c4:	e03e      	b.n	8013a44 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	8a5b      	ldrh	r3, [r3, #18]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10f      	bne.n	80139ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80139ce:	68f9      	ldr	r1, [r7, #12]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	8a5b      	ldrh	r3, [r3, #18]
 80139d4:	461a      	mov	r2, r3
 80139d6:	68f8      	ldr	r0, [r7, #12]
 80139d8:	f7ff ff4c 	bl	8013874 <udp_bind>
 80139dc:	4603      	mov	r3, r0
 80139de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80139e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d002      	beq.n	80139ee <udp_connect+0x6a>
      return err;
 80139e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139ec:	e02a      	b.n	8013a44 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d002      	beq.n	80139fa <udp_connect+0x76>
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	e000      	b.n	80139fc <udp_connect+0x78>
 80139fa:	2300      	movs	r3, #0
 80139fc:	68fa      	ldr	r2, [r7, #12]
 80139fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	88fa      	ldrh	r2, [r7, #6]
 8013a04:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	7c1b      	ldrb	r3, [r3, #16]
 8013a0a:	f043 0304 	orr.w	r3, r3, #4
 8013a0e:	b2da      	uxtb	r2, r3
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a14:	4b11      	ldr	r3, [pc, #68]	; (8013a5c <udp_connect+0xd8>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	617b      	str	r3, [r7, #20]
 8013a1a:	e008      	b.n	8013a2e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013a1c:	68fa      	ldr	r2, [r7, #12]
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d101      	bne.n	8013a28 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	e00d      	b.n	8013a44 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	617b      	str	r3, [r7, #20]
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d1f3      	bne.n	8013a1c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013a34:	4b09      	ldr	r3, [pc, #36]	; (8013a5c <udp_connect+0xd8>)
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013a3c:	4a07      	ldr	r2, [pc, #28]	; (8013a5c <udp_connect+0xd8>)
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013a42:	2300      	movs	r3, #0
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3718      	adds	r7, #24
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	0801c090 	.word	0x0801c090
 8013a50:	0801c370 	.word	0x0801c370
 8013a54:	0801c0e4 	.word	0x0801c0e4
 8013a58:	0801c38c 	.word	0x0801c38c
 8013a5c:	2000faf0 	.word	0x2000faf0

08013a60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d107      	bne.n	8013a82 <udp_recv+0x22>
 8013a72:	4b08      	ldr	r3, [pc, #32]	; (8013a94 <udp_recv+0x34>)
 8013a74:	f240 428a 	movw	r2, #1162	; 0x48a
 8013a78:	4907      	ldr	r1, [pc, #28]	; (8013a98 <udp_recv+0x38>)
 8013a7a:	4808      	ldr	r0, [pc, #32]	; (8013a9c <udp_recv+0x3c>)
 8013a7c:	f004 fc1e 	bl	80182bc <iprintf>
 8013a80:	e005      	b.n	8013a8e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	61da      	str	r2, [r3, #28]
}
 8013a8e:	3710      	adds	r7, #16
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	0801c090 	.word	0x0801c090
 8013a98:	0801c3c4 	.word	0x0801c3c4
 8013a9c:	0801c0e4 	.word	0x0801c0e4

08013aa0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d107      	bne.n	8013abe <udp_remove+0x1e>
 8013aae:	4b19      	ldr	r3, [pc, #100]	; (8013b14 <udp_remove+0x74>)
 8013ab0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013ab4:	4918      	ldr	r1, [pc, #96]	; (8013b18 <udp_remove+0x78>)
 8013ab6:	4819      	ldr	r0, [pc, #100]	; (8013b1c <udp_remove+0x7c>)
 8013ab8:	f004 fc00 	bl	80182bc <iprintf>
 8013abc:	e026      	b.n	8013b0c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013abe:	4b18      	ldr	r3, [pc, #96]	; (8013b20 <udp_remove+0x80>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d105      	bne.n	8013ad4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013ac8:	4b15      	ldr	r3, [pc, #84]	; (8013b20 <udp_remove+0x80>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	68db      	ldr	r3, [r3, #12]
 8013ace:	4a14      	ldr	r2, [pc, #80]	; (8013b20 <udp_remove+0x80>)
 8013ad0:	6013      	str	r3, [r2, #0]
 8013ad2:	e017      	b.n	8013b04 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013ad4:	4b12      	ldr	r3, [pc, #72]	; (8013b20 <udp_remove+0x80>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	60fb      	str	r3, [r7, #12]
 8013ada:	e010      	b.n	8013afe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	68db      	ldr	r3, [r3, #12]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d009      	beq.n	8013af8 <udp_remove+0x58>
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d104      	bne.n	8013af8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	68da      	ldr	r2, [r3, #12]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	60da      	str	r2, [r3, #12]
        break;
 8013af6:	e005      	b.n	8013b04 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	60fb      	str	r3, [r7, #12]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d1eb      	bne.n	8013adc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013b04:	6879      	ldr	r1, [r7, #4]
 8013b06:	2000      	movs	r0, #0
 8013b08:	f7f8 f894 	bl	800bc34 <memp_free>
}
 8013b0c:	3710      	adds	r7, #16
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	0801c090 	.word	0x0801c090
 8013b18:	0801c3dc 	.word	0x0801c3dc
 8013b1c:	0801c0e4 	.word	0x0801c0e4
 8013b20:	2000faf0 	.word	0x2000faf0

08013b24 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013b2a:	2000      	movs	r0, #0
 8013b2c:	f7f8 f830 	bl	800bb90 <memp_malloc>
 8013b30:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d007      	beq.n	8013b48 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013b38:	2220      	movs	r2, #32
 8013b3a:	2100      	movs	r1, #0
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f004 fbb5 	bl	80182ac <memset>
    pcb->ttl = UDP_TTL;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	22ff      	movs	r2, #255	; 0xff
 8013b46:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013b48:	687b      	ldr	r3, [r7, #4]
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3708      	adds	r7, #8
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b084      	sub	sp, #16
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	4603      	mov	r3, r0
 8013b5a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013b5c:	f7ff ffe2 	bl	8013b24 <udp_new>
 8013b60:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013b62:	68fb      	ldr	r3, [r7, #12]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3710      	adds	r7, #16
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b085      	sub	sp, #20
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d01e      	beq.n	8013bba <udp_netif_ip_addr_changed+0x4e>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d01a      	beq.n	8013bba <udp_netif_ip_addr_changed+0x4e>
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d017      	beq.n	8013bba <udp_netif_ip_addr_changed+0x4e>
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d013      	beq.n	8013bba <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b92:	4b0d      	ldr	r3, [pc, #52]	; (8013bc8 <udp_netif_ip_addr_changed+0x5c>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	e00c      	b.n	8013bb4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d103      	bne.n	8013bae <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	68db      	ldr	r3, [r3, #12]
 8013bb2:	60fb      	str	r3, [r7, #12]
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1ef      	bne.n	8013b9a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013bba:	bf00      	nop
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop
 8013bc8:	2000faf0 	.word	0x2000faf0

08013bcc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013bd0:	4b20      	ldr	r3, [pc, #128]	; (8013c54 <dhcp_inc_pcb_refcount+0x88>)
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d133      	bne.n	8013c40 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013bd8:	4b1f      	ldr	r3, [pc, #124]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d005      	beq.n	8013bec <dhcp_inc_pcb_refcount+0x20>
 8013be0:	4b1e      	ldr	r3, [pc, #120]	; (8013c5c <dhcp_inc_pcb_refcount+0x90>)
 8013be2:	22e5      	movs	r2, #229	; 0xe5
 8013be4:	491e      	ldr	r1, [pc, #120]	; (8013c60 <dhcp_inc_pcb_refcount+0x94>)
 8013be6:	481f      	ldr	r0, [pc, #124]	; (8013c64 <dhcp_inc_pcb_refcount+0x98>)
 8013be8:	f004 fb68 	bl	80182bc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013bec:	f7ff ff9a 	bl	8013b24 <udp_new>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	4b19      	ldr	r3, [pc, #100]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013bf4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013bf6:	4b18      	ldr	r3, [pc, #96]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d102      	bne.n	8013c04 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8013c02:	e024      	b.n	8013c4e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013c04:	4b14      	ldr	r3, [pc, #80]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	7a5a      	ldrb	r2, [r3, #9]
 8013c0a:	4b13      	ldr	r3, [pc, #76]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	f042 0220 	orr.w	r2, r2, #32
 8013c12:	b2d2      	uxtb	r2, r2
 8013c14:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013c16:	4b10      	ldr	r3, [pc, #64]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2244      	movs	r2, #68	; 0x44
 8013c1c:	4912      	ldr	r1, [pc, #72]	; (8013c68 <dhcp_inc_pcb_refcount+0x9c>)
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7ff fe28 	bl	8013874 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013c24:	4b0c      	ldr	r3, [pc, #48]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2243      	movs	r2, #67	; 0x43
 8013c2a:	490f      	ldr	r1, [pc, #60]	; (8013c68 <dhcp_inc_pcb_refcount+0x9c>)
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7ff fea9 	bl	8013984 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013c32:	4b09      	ldr	r3, [pc, #36]	; (8013c58 <dhcp_inc_pcb_refcount+0x8c>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2200      	movs	r2, #0
 8013c38:	490c      	ldr	r1, [pc, #48]	; (8013c6c <dhcp_inc_pcb_refcount+0xa0>)
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7ff ff10 	bl	8013a60 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013c40:	4b04      	ldr	r3, [pc, #16]	; (8013c54 <dhcp_inc_pcb_refcount+0x88>)
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	3301      	adds	r3, #1
 8013c46:	b2da      	uxtb	r2, r3
 8013c48:	4b02      	ldr	r3, [pc, #8]	; (8013c54 <dhcp_inc_pcb_refcount+0x88>)
 8013c4a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013c4c:	2300      	movs	r3, #0
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	20008c9c 	.word	0x20008c9c
 8013c58:	20008c98 	.word	0x20008c98
 8013c5c:	0801c3f4 	.word	0x0801c3f4
 8013c60:	0801c42c 	.word	0x0801c42c
 8013c64:	0801c454 	.word	0x0801c454
 8013c68:	08028368 	.word	0x08028368
 8013c6c:	08015489 	.word	0x08015489

08013c70 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013c74:	4b0e      	ldr	r3, [pc, #56]	; (8013cb0 <dhcp_dec_pcb_refcount+0x40>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d105      	bne.n	8013c88 <dhcp_dec_pcb_refcount+0x18>
 8013c7c:	4b0d      	ldr	r3, [pc, #52]	; (8013cb4 <dhcp_dec_pcb_refcount+0x44>)
 8013c7e:	22ff      	movs	r2, #255	; 0xff
 8013c80:	490d      	ldr	r1, [pc, #52]	; (8013cb8 <dhcp_dec_pcb_refcount+0x48>)
 8013c82:	480e      	ldr	r0, [pc, #56]	; (8013cbc <dhcp_dec_pcb_refcount+0x4c>)
 8013c84:	f004 fb1a 	bl	80182bc <iprintf>
  dhcp_pcb_refcount--;
 8013c88:	4b09      	ldr	r3, [pc, #36]	; (8013cb0 <dhcp_dec_pcb_refcount+0x40>)
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	3b01      	subs	r3, #1
 8013c8e:	b2da      	uxtb	r2, r3
 8013c90:	4b07      	ldr	r3, [pc, #28]	; (8013cb0 <dhcp_dec_pcb_refcount+0x40>)
 8013c92:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013c94:	4b06      	ldr	r3, [pc, #24]	; (8013cb0 <dhcp_dec_pcb_refcount+0x40>)
 8013c96:	781b      	ldrb	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d107      	bne.n	8013cac <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013c9c:	4b08      	ldr	r3, [pc, #32]	; (8013cc0 <dhcp_dec_pcb_refcount+0x50>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ff fefd 	bl	8013aa0 <udp_remove>
    dhcp_pcb = NULL;
 8013ca6:	4b06      	ldr	r3, [pc, #24]	; (8013cc0 <dhcp_dec_pcb_refcount+0x50>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	601a      	str	r2, [r3, #0]
  }
}
 8013cac:	bf00      	nop
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	20008c9c 	.word	0x20008c9c
 8013cb4:	0801c3f4 	.word	0x0801c3f4
 8013cb8:	0801c47c 	.word	0x0801c47c
 8013cbc:	0801c454 	.word	0x0801c454
 8013cc0:	20008c98 	.word	0x20008c98

08013cc4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6a1b      	ldr	r3, [r3, #32]
 8013cd0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013cd2:	210c      	movs	r1, #12
 8013cd4:	68f8      	ldr	r0, [r7, #12]
 8013cd6:	f001 f819 	bl	8014d0c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013cda:	4b06      	ldr	r3, [pc, #24]	; (8013cf4 <dhcp_handle_nak+0x30>)
 8013cdc:	4a05      	ldr	r2, [pc, #20]	; (8013cf4 <dhcp_handle_nak+0x30>)
 8013cde:	4905      	ldr	r1, [pc, #20]	; (8013cf4 <dhcp_handle_nak+0x30>)
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7f8 f945 	bl	800bf70 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fc0c 	bl	8014504 <dhcp_discover>
}
 8013cec:	bf00      	nop
 8013cee:	3710      	adds	r7, #16
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	08028368 	.word	0x08028368

08013cf8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6a1b      	ldr	r3, [r3, #32]
 8013d04:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013d06:	2108      	movs	r1, #8
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	f000 ffff 	bl	8014d0c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	331c      	adds	r3, #28
 8013d12:	2200      	movs	r2, #0
 8013d14:	4619      	mov	r1, r3
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f002 fafe 	bl	8016318 <etharp_query>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	799b      	ldrb	r3, [r3, #6]
 8013d24:	2bff      	cmp	r3, #255	; 0xff
 8013d26:	d005      	beq.n	8013d34 <dhcp_check+0x3c>
    dhcp->tries++;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	799b      	ldrb	r3, [r3, #6]
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013d34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013d38:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013d3a:	893b      	ldrh	r3, [r7, #8]
 8013d3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013d40:	4a06      	ldr	r2, [pc, #24]	; (8013d5c <dhcp_check+0x64>)
 8013d42:	fb82 1203 	smull	r1, r2, r2, r3
 8013d46:	1152      	asrs	r2, r2, #5
 8013d48:	17db      	asrs	r3, r3, #31
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	b29a      	uxth	r2, r3
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013d52:	bf00      	nop
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	10624dd3 	.word	0x10624dd3

08013d60 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6a1b      	ldr	r3, [r3, #32]
 8013d6e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013d70:	4b0c      	ldr	r3, [pc, #48]	; (8013da4 <dhcp_handle_offer+0x44>)
 8013d72:	789b      	ldrb	r3, [r3, #2]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d011      	beq.n	8013d9c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013d7e:	4b0a      	ldr	r3, [pc, #40]	; (8013da8 <dhcp_handle_offer+0x48>)
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7f7 fa2d 	bl	800b1e2 <lwip_htonl>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	691a      	ldr	r2, [r3, #16]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f000 f808 	bl	8013dac <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013d9c:	bf00      	nop
 8013d9e:	3710      	adds	r7, #16
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	2000faf4 	.word	0x2000faf4
 8013da8:	2000fafc 	.word	0x2000fafc

08013dac <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013dac:	b5b0      	push	{r4, r5, r7, lr}
 8013dae:	b08a      	sub	sp, #40	; 0x28
 8013db0:	af02      	add	r7, sp, #8
 8013db2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d109      	bne.n	8013dce <dhcp_select+0x22>
 8013dba:	4b71      	ldr	r3, [pc, #452]	; (8013f80 <dhcp_select+0x1d4>)
 8013dbc:	f240 1277 	movw	r2, #375	; 0x177
 8013dc0:	4970      	ldr	r1, [pc, #448]	; (8013f84 <dhcp_select+0x1d8>)
 8013dc2:	4871      	ldr	r0, [pc, #452]	; (8013f88 <dhcp_select+0x1dc>)
 8013dc4:	f004 fa7a 	bl	80182bc <iprintf>
 8013dc8:	f06f 030f 	mvn.w	r3, #15
 8013dcc:	e0d3      	b.n	8013f76 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a1b      	ldr	r3, [r3, #32]
 8013dd2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013dd4:	69bb      	ldr	r3, [r7, #24]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d109      	bne.n	8013dee <dhcp_select+0x42>
 8013dda:	4b69      	ldr	r3, [pc, #420]	; (8013f80 <dhcp_select+0x1d4>)
 8013ddc:	f240 1279 	movw	r2, #377	; 0x179
 8013de0:	496a      	ldr	r1, [pc, #424]	; (8013f8c <dhcp_select+0x1e0>)
 8013de2:	4869      	ldr	r0, [pc, #420]	; (8013f88 <dhcp_select+0x1dc>)
 8013de4:	f004 fa6a 	bl	80182bc <iprintf>
 8013de8:	f06f 0305 	mvn.w	r3, #5
 8013dec:	e0c3      	b.n	8013f76 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013dee:	2101      	movs	r1, #1
 8013df0:	69b8      	ldr	r0, [r7, #24]
 8013df2:	f000 ff8b 	bl	8014d0c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013df6:	f107 030c 	add.w	r3, r7, #12
 8013dfa:	2203      	movs	r2, #3
 8013dfc:	69b9      	ldr	r1, [r7, #24]
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f001 fc0e 	bl	8015620 <dhcp_create_msg>
 8013e04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f000 8085 	beq.w	8013f18 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013e14:	89b8      	ldrh	r0, [r7, #12]
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	2239      	movs	r2, #57	; 0x39
 8013e20:	f000 ff8e 	bl	8014d40 <dhcp_option>
 8013e24:	4603      	mov	r3, r0
 8013e26:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013e28:	89b8      	ldrh	r0, [r7, #12]
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e34:	461a      	mov	r2, r3
 8013e36:	f000 ffdd 	bl	8014df4 <dhcp_option_short>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013e3e:	89b8      	ldrh	r0, [r7, #12]
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e46:	2304      	movs	r3, #4
 8013e48:	2232      	movs	r2, #50	; 0x32
 8013e4a:	f000 ff79 	bl	8014d40 <dhcp_option>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013e52:	89bc      	ldrh	r4, [r7, #12]
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013e5a:	69bb      	ldr	r3, [r7, #24]
 8013e5c:	69db      	ldr	r3, [r3, #28]
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7f7 f9bf 	bl	800b1e2 <lwip_htonl>
 8013e64:	4603      	mov	r3, r0
 8013e66:	461a      	mov	r2, r3
 8013e68:	4629      	mov	r1, r5
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f000 fff4 	bl	8014e58 <dhcp_option_long>
 8013e70:	4603      	mov	r3, r0
 8013e72:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013e74:	89b8      	ldrh	r0, [r7, #12]
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e7c:	2304      	movs	r3, #4
 8013e7e:	2236      	movs	r2, #54	; 0x36
 8013e80:	f000 ff5e 	bl	8014d40 <dhcp_option>
 8013e84:	4603      	mov	r3, r0
 8013e86:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013e88:	89bc      	ldrh	r4, [r7, #12]
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	699b      	ldr	r3, [r3, #24]
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7f7 f9a4 	bl	800b1e2 <lwip_htonl>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f000 ffd9 	bl	8014e58 <dhcp_option_long>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013eaa:	89b8      	ldrh	r0, [r7, #12]
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013eb2:	2303      	movs	r3, #3
 8013eb4:	2237      	movs	r2, #55	; 0x37
 8013eb6:	f000 ff43 	bl	8014d40 <dhcp_option>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	77bb      	strb	r3, [r7, #30]
 8013ec2:	e00e      	b.n	8013ee2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013ec4:	89b8      	ldrh	r0, [r7, #12]
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ecc:	7fbb      	ldrb	r3, [r7, #30]
 8013ece:	4a30      	ldr	r2, [pc, #192]	; (8013f90 <dhcp_select+0x1e4>)
 8013ed0:	5cd3      	ldrb	r3, [r2, r3]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	f000 ff68 	bl	8014da8 <dhcp_option_byte>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013edc:	7fbb      	ldrb	r3, [r7, #30]
 8013ede:	3301      	adds	r3, #1
 8013ee0:	77bb      	strb	r3, [r7, #30]
 8013ee2:	7fbb      	ldrb	r3, [r7, #30]
 8013ee4:	2b02      	cmp	r3, #2
 8013ee6:	d9ed      	bls.n	8013ec4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013ee8:	89b8      	ldrh	r0, [r7, #12]
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	33f0      	adds	r3, #240	; 0xf0
 8013eee:	697a      	ldr	r2, [r7, #20]
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	f001 fc6b 	bl	80157cc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013ef6:	4b27      	ldr	r3, [pc, #156]	; (8013f94 <dhcp_select+0x1e8>)
 8013ef8:	6818      	ldr	r0, [r3, #0]
 8013efa:	4b27      	ldr	r3, [pc, #156]	; (8013f98 <dhcp_select+0x1ec>)
 8013efc:	9301      	str	r3, [sp, #4]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	9300      	str	r3, [sp, #0]
 8013f02:	2343      	movs	r3, #67	; 0x43
 8013f04:	4a25      	ldr	r2, [pc, #148]	; (8013f9c <dhcp_select+0x1f0>)
 8013f06:	6979      	ldr	r1, [r7, #20]
 8013f08:	f7ff fbce 	bl	80136a8 <udp_sendto_if_src>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013f10:	6978      	ldr	r0, [r7, #20]
 8013f12:	f7f8 fcbd 	bl	800c890 <pbuf_free>
 8013f16:	e001      	b.n	8013f1c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013f18:	23ff      	movs	r3, #255	; 0xff
 8013f1a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	799b      	ldrb	r3, [r3, #6]
 8013f20:	2bff      	cmp	r3, #255	; 0xff
 8013f22:	d005      	beq.n	8013f30 <dhcp_select+0x184>
    dhcp->tries++;
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	799b      	ldrb	r3, [r3, #6]
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	799b      	ldrb	r3, [r3, #6]
 8013f34:	2b05      	cmp	r3, #5
 8013f36:	d80d      	bhi.n	8013f54 <dhcp_select+0x1a8>
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	799b      	ldrb	r3, [r3, #6]
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	2301      	movs	r3, #1
 8013f40:	4093      	lsls	r3, r2
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	461a      	mov	r2, r3
 8013f46:	0152      	lsls	r2, r2, #5
 8013f48:	1ad2      	subs	r2, r2, r3
 8013f4a:	0092      	lsls	r2, r2, #2
 8013f4c:	4413      	add	r3, r2
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	e001      	b.n	8013f58 <dhcp_select+0x1ac>
 8013f54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013f58:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013f5a:	89fb      	ldrh	r3, [r7, #14]
 8013f5c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f60:	4a0f      	ldr	r2, [pc, #60]	; (8013fa0 <dhcp_select+0x1f4>)
 8013f62:	fb82 1203 	smull	r1, r2, r2, r3
 8013f66:	1152      	asrs	r2, r2, #5
 8013f68:	17db      	asrs	r3, r3, #31
 8013f6a:	1ad3      	subs	r3, r2, r3
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013f72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3720      	adds	r7, #32
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	0801c3f4 	.word	0x0801c3f4
 8013f84:	0801c4a0 	.word	0x0801c4a0
 8013f88:	0801c454 	.word	0x0801c454
 8013f8c:	0801c4bc 	.word	0x0801c4bc
 8013f90:	2000001c 	.word	0x2000001c
 8013f94:	20008c98 	.word	0x20008c98
 8013f98:	08028368 	.word	0x08028368
 8013f9c:	0802836c 	.word	0x0802836c
 8013fa0:	10624dd3 	.word	0x10624dd3

08013fa4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013faa:	4b27      	ldr	r3, [pc, #156]	; (8014048 <dhcp_coarse_tmr+0xa4>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	607b      	str	r3, [r7, #4]
 8013fb0:	e042      	b.n	8014038 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6a1b      	ldr	r3, [r3, #32]
 8013fb6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d039      	beq.n	8014032 <dhcp_coarse_tmr+0x8e>
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	795b      	ldrb	r3, [r3, #5]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d035      	beq.n	8014032 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	8a9b      	ldrh	r3, [r3, #20]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d012      	beq.n	8013ff4 <dhcp_coarse_tmr+0x50>
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	8a5b      	ldrh	r3, [r3, #18]
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	825a      	strh	r2, [r3, #18]
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	8a5a      	ldrh	r2, [r3, #18]
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	8a9b      	ldrh	r3, [r3, #20]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d106      	bne.n	8013ff4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f000 fdf6 	bl	8014bd8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f969 	bl	80142c4 <dhcp_start>
 8013ff2:	e01e      	b.n	8014032 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	8a1b      	ldrh	r3, [r3, #16]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00b      	beq.n	8014014 <dhcp_coarse_tmr+0x70>
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	8a1b      	ldrh	r3, [r3, #16]
 8014000:	1e5a      	subs	r2, r3, #1
 8014002:	b291      	uxth	r1, r2
 8014004:	683a      	ldr	r2, [r7, #0]
 8014006:	8211      	strh	r1, [r2, #16]
 8014008:	2b01      	cmp	r3, #1
 801400a:	d103      	bne.n	8014014 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 f8c6 	bl	801419e <dhcp_t2_timeout>
 8014012:	e00e      	b.n	8014032 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	89db      	ldrh	r3, [r3, #14]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00a      	beq.n	8014032 <dhcp_coarse_tmr+0x8e>
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	89db      	ldrh	r3, [r3, #14]
 8014020:	1e5a      	subs	r2, r3, #1
 8014022:	b291      	uxth	r1, r2
 8014024:	683a      	ldr	r2, [r7, #0]
 8014026:	81d1      	strh	r1, [r2, #14]
 8014028:	2b01      	cmp	r3, #1
 801402a:	d102      	bne.n	8014032 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f000 f888 	bl	8014142 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	607b      	str	r3, [r7, #4]
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d1b9      	bne.n	8013fb2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801403e:	bf00      	nop
 8014040:	3708      	adds	r7, #8
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	2000fac8 	.word	0x2000fac8

0801404c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014052:	4b16      	ldr	r3, [pc, #88]	; (80140ac <dhcp_fine_tmr+0x60>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	607b      	str	r3, [r7, #4]
 8014058:	e020      	b.n	801409c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a1b      	ldr	r3, [r3, #32]
 801405e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d017      	beq.n	8014096 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	891b      	ldrh	r3, [r3, #8]
 801406a:	2b01      	cmp	r3, #1
 801406c:	d906      	bls.n	801407c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	891b      	ldrh	r3, [r3, #8]
 8014072:	3b01      	subs	r3, #1
 8014074:	b29a      	uxth	r2, r3
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	811a      	strh	r2, [r3, #8]
 801407a:	e00c      	b.n	8014096 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	891b      	ldrh	r3, [r3, #8]
 8014080:	2b01      	cmp	r3, #1
 8014082:	d108      	bne.n	8014096 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	891b      	ldrh	r3, [r3, #8]
 8014088:	3b01      	subs	r3, #1
 801408a:	b29a      	uxth	r2, r3
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f000 f80d 	bl	80140b0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	607b      	str	r3, [r7, #4]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d1db      	bne.n	801405a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80140a2:	bf00      	nop
 80140a4:	3708      	adds	r7, #8
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	2000fac8 	.word	0x2000fac8

080140b0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6a1b      	ldr	r3, [r3, #32]
 80140bc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	795b      	ldrb	r3, [r3, #5]
 80140c2:	2b0c      	cmp	r3, #12
 80140c4:	d003      	beq.n	80140ce <dhcp_timeout+0x1e>
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	795b      	ldrb	r3, [r3, #5]
 80140ca:	2b06      	cmp	r3, #6
 80140cc:	d103      	bne.n	80140d6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f000 fa18 	bl	8014504 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80140d4:	e031      	b.n	801413a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	795b      	ldrb	r3, [r3, #5]
 80140da:	2b01      	cmp	r3, #1
 80140dc:	d10e      	bne.n	80140fc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	799b      	ldrb	r3, [r3, #6]
 80140e2:	2b05      	cmp	r3, #5
 80140e4:	d803      	bhi.n	80140ee <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7ff fe60 	bl	8013dac <dhcp_select>
}
 80140ec:	e025      	b.n	801413a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f000 fd72 	bl	8014bd8 <dhcp_release_and_stop>
      dhcp_start(netif);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 f8e5 	bl	80142c4 <dhcp_start>
}
 80140fa:	e01e      	b.n	801413a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	795b      	ldrb	r3, [r3, #5]
 8014100:	2b08      	cmp	r3, #8
 8014102:	d10b      	bne.n	801411c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	799b      	ldrb	r3, [r3, #6]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d803      	bhi.n	8014114 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f7ff fdf3 	bl	8013cf8 <dhcp_check>
}
 8014112:	e012      	b.n	801413a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 fa97 	bl	8014648 <dhcp_bind>
}
 801411a:	e00e      	b.n	801413a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	795b      	ldrb	r3, [r3, #5]
 8014120:	2b03      	cmp	r3, #3
 8014122:	d10a      	bne.n	801413a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	799b      	ldrb	r3, [r3, #6]
 8014128:	2b01      	cmp	r3, #1
 801412a:	d803      	bhi.n	8014134 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 fc9d 	bl	8014a6c <dhcp_reboot>
}
 8014132:	e002      	b.n	801413a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 f9e5 	bl	8014504 <dhcp_discover>
}
 801413a:	bf00      	nop
 801413c:	3710      	adds	r7, #16
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}

08014142 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014142:	b580      	push	{r7, lr}
 8014144:	b084      	sub	sp, #16
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	795b      	ldrb	r3, [r3, #5]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d007      	beq.n	8014168 <dhcp_t1_timeout+0x26>
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	795b      	ldrb	r3, [r3, #5]
 801415c:	2b0a      	cmp	r3, #10
 801415e:	d003      	beq.n	8014168 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014164:	2b05      	cmp	r3, #5
 8014166:	d116      	bne.n	8014196 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 fb47 	bl	80147fc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	899b      	ldrh	r3, [r3, #12]
 8014172:	461a      	mov	r2, r3
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	8a5b      	ldrh	r3, [r3, #18]
 8014178:	1ad3      	subs	r3, r2, r3
 801417a:	2b01      	cmp	r3, #1
 801417c:	dd0b      	ble.n	8014196 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	899b      	ldrh	r3, [r3, #12]
 8014182:	461a      	mov	r2, r3
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	8a5b      	ldrh	r3, [r3, #18]
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	0fda      	lsrs	r2, r3, #31
 801418c:	4413      	add	r3, r2
 801418e:	105b      	asrs	r3, r3, #1
 8014190:	b29a      	uxth	r2, r3
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014196:	bf00      	nop
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}

0801419e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801419e:	b580      	push	{r7, lr}
 80141a0:	b084      	sub	sp, #16
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6a1b      	ldr	r3, [r3, #32]
 80141aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	795b      	ldrb	r3, [r3, #5]
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d00b      	beq.n	80141cc <dhcp_t2_timeout+0x2e>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	795b      	ldrb	r3, [r3, #5]
 80141b8:	2b0a      	cmp	r3, #10
 80141ba:	d007      	beq.n	80141cc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80141c0:	2b05      	cmp	r3, #5
 80141c2:	d003      	beq.n	80141cc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	795b      	ldrb	r3, [r3, #5]
 80141c8:	2b04      	cmp	r3, #4
 80141ca:	d116      	bne.n	80141fa <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 fbb1 	bl	8014934 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	8a9b      	ldrh	r3, [r3, #20]
 80141d6:	461a      	mov	r2, r3
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	8a5b      	ldrh	r3, [r3, #18]
 80141dc:	1ad3      	subs	r3, r2, r3
 80141de:	2b01      	cmp	r3, #1
 80141e0:	dd0b      	ble.n	80141fa <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	8a9b      	ldrh	r3, [r3, #20]
 80141e6:	461a      	mov	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	8a5b      	ldrh	r3, [r3, #18]
 80141ec:	1ad3      	subs	r3, r2, r3
 80141ee:	0fda      	lsrs	r2, r3, #31
 80141f0:	4413      	add	r3, r2
 80141f2:	105b      	asrs	r3, r3, #1
 80141f4:	b29a      	uxth	r2, r3
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80141fa:	bf00      	nop
 80141fc:	3710      	adds	r7, #16
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
	...

08014204 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6a1b      	ldr	r3, [r3, #32]
 8014212:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	2200      	movs	r2, #0
 8014218:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2200      	movs	r2, #0
 801421e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014220:	4b26      	ldr	r3, [pc, #152]	; (80142bc <dhcp_handle_ack+0xb8>)
 8014222:	78db      	ldrb	r3, [r3, #3]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d003      	beq.n	8014230 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014228:	4b25      	ldr	r3, [pc, #148]	; (80142c0 <dhcp_handle_ack+0xbc>)
 801422a:	68da      	ldr	r2, [r3, #12]
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014230:	4b22      	ldr	r3, [pc, #136]	; (80142bc <dhcp_handle_ack+0xb8>)
 8014232:	791b      	ldrb	r3, [r3, #4]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d004      	beq.n	8014242 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014238:	4b21      	ldr	r3, [pc, #132]	; (80142c0 <dhcp_handle_ack+0xbc>)
 801423a:	691a      	ldr	r2, [r3, #16]
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014240:	e004      	b.n	801424c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014246:	085a      	lsrs	r2, r3, #1
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801424c:	4b1b      	ldr	r3, [pc, #108]	; (80142bc <dhcp_handle_ack+0xb8>)
 801424e:	795b      	ldrb	r3, [r3, #5]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d004      	beq.n	801425e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014254:	4b1a      	ldr	r3, [pc, #104]	; (80142c0 <dhcp_handle_ack+0xbc>)
 8014256:	695a      	ldr	r2, [r3, #20]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	631a      	str	r2, [r3, #48]	; 0x30
 801425c:	e007      	b.n	801426e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014262:	4613      	mov	r3, r2
 8014264:	00db      	lsls	r3, r3, #3
 8014266:	1a9b      	subs	r3, r3, r2
 8014268:	08da      	lsrs	r2, r3, #3
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	691a      	ldr	r2, [r3, #16]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014276:	4b11      	ldr	r3, [pc, #68]	; (80142bc <dhcp_handle_ack+0xb8>)
 8014278:	799b      	ldrb	r3, [r3, #6]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00b      	beq.n	8014296 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801427e:	4b10      	ldr	r3, [pc, #64]	; (80142c0 <dhcp_handle_ack+0xbc>)
 8014280:	699b      	ldr	r3, [r3, #24]
 8014282:	4618      	mov	r0, r3
 8014284:	f7f6 ffad 	bl	800b1e2 <lwip_htonl>
 8014288:	4602      	mov	r2, r0
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2201      	movs	r2, #1
 8014292:	71da      	strb	r2, [r3, #7]
 8014294:	e002      	b.n	801429c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	2200      	movs	r2, #0
 801429a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801429c:	4b07      	ldr	r3, [pc, #28]	; (80142bc <dhcp_handle_ack+0xb8>)
 801429e:	79db      	ldrb	r3, [r3, #7]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d007      	beq.n	80142b4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80142a4:	4b06      	ldr	r3, [pc, #24]	; (80142c0 <dhcp_handle_ack+0xbc>)
 80142a6:	69db      	ldr	r3, [r3, #28]
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7f6 ff9a 	bl	800b1e2 <lwip_htonl>
 80142ae:	4602      	mov	r2, r0
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80142b4:	bf00      	nop
 80142b6:	3710      	adds	r7, #16
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	2000faf4 	.word	0x2000faf4
 80142c0:	2000fafc 	.word	0x2000fafc

080142c4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b084      	sub	sp, #16
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d109      	bne.n	80142e6 <dhcp_start+0x22>
 80142d2:	4b37      	ldr	r3, [pc, #220]	; (80143b0 <dhcp_start+0xec>)
 80142d4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80142d8:	4936      	ldr	r1, [pc, #216]	; (80143b4 <dhcp_start+0xf0>)
 80142da:	4837      	ldr	r0, [pc, #220]	; (80143b8 <dhcp_start+0xf4>)
 80142dc:	f003 ffee 	bl	80182bc <iprintf>
 80142e0:	f06f 030f 	mvn.w	r3, #15
 80142e4:	e060      	b.n	80143a8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142ec:	f003 0301 	and.w	r3, r3, #1
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d109      	bne.n	8014308 <dhcp_start+0x44>
 80142f4:	4b2e      	ldr	r3, [pc, #184]	; (80143b0 <dhcp_start+0xec>)
 80142f6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80142fa:	4930      	ldr	r1, [pc, #192]	; (80143bc <dhcp_start+0xf8>)
 80142fc:	482e      	ldr	r0, [pc, #184]	; (80143b8 <dhcp_start+0xf4>)
 80142fe:	f003 ffdd 	bl	80182bc <iprintf>
 8014302:	f06f 030f 	mvn.w	r3, #15
 8014306:	e04f      	b.n	80143a8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6a1b      	ldr	r3, [r3, #32]
 801430c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014312:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014316:	d202      	bcs.n	801431e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014318:	f04f 33ff 	mov.w	r3, #4294967295
 801431c:	e044      	b.n	80143a8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10d      	bne.n	8014340 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014324:	2034      	movs	r0, #52	; 0x34
 8014326:	f7f7 fab1 	bl	800b88c <mem_malloc>
 801432a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d102      	bne.n	8014338 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014332:	f04f 33ff 	mov.w	r3, #4294967295
 8014336:	e037      	b.n	80143a8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	621a      	str	r2, [r3, #32]
 801433e:	e005      	b.n	801434c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	791b      	ldrb	r3, [r3, #4]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d001      	beq.n	801434c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014348:	f7ff fc92 	bl	8013c70 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801434c:	2234      	movs	r2, #52	; 0x34
 801434e:	2100      	movs	r1, #0
 8014350:	68f8      	ldr	r0, [r7, #12]
 8014352:	f003 ffab 	bl	80182ac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014356:	f7ff fc39 	bl	8013bcc <dhcp_inc_pcb_refcount>
 801435a:	4603      	mov	r3, r0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d002      	beq.n	8014366 <dhcp_start+0xa2>
    return ERR_MEM;
 8014360:	f04f 33ff 	mov.w	r3, #4294967295
 8014364:	e020      	b.n	80143a8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	2201      	movs	r2, #1
 801436a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014372:	f003 0304 	and.w	r3, r3, #4
 8014376:	2b00      	cmp	r3, #0
 8014378:	d105      	bne.n	8014386 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801437a:	2102      	movs	r1, #2
 801437c:	68f8      	ldr	r0, [r7, #12]
 801437e:	f000 fcc5 	bl	8014d0c <dhcp_set_state>
    return ERR_OK;
 8014382:	2300      	movs	r3, #0
 8014384:	e010      	b.n	80143a8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f000 f8bc 	bl	8014504 <dhcp_discover>
 801438c:	4603      	mov	r3, r0
 801438e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014390:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d005      	beq.n	80143a4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f000 fc1d 	bl	8014bd8 <dhcp_release_and_stop>
    return ERR_MEM;
 801439e:	f04f 33ff 	mov.w	r3, #4294967295
 80143a2:	e001      	b.n	80143a8 <dhcp_start+0xe4>
  }
  return result;
 80143a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	0801c3f4 	.word	0x0801c3f4
 80143b4:	0801c4d8 	.word	0x0801c4d8
 80143b8:	0801c454 	.word	0x0801c454
 80143bc:	0801c51c 	.word	0x0801c51c

080143c0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d107      	bne.n	80143e0 <dhcp_arp_reply+0x20>
 80143d0:	4b0e      	ldr	r3, [pc, #56]	; (801440c <dhcp_arp_reply+0x4c>)
 80143d2:	f240 328b 	movw	r2, #907	; 0x38b
 80143d6:	490e      	ldr	r1, [pc, #56]	; (8014410 <dhcp_arp_reply+0x50>)
 80143d8:	480e      	ldr	r0, [pc, #56]	; (8014414 <dhcp_arp_reply+0x54>)
 80143da:	f003 ff6f 	bl	80182bc <iprintf>
 80143de:	e012      	b.n	8014406 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6a1b      	ldr	r3, [r3, #32]
 80143e4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d00c      	beq.n	8014406 <dhcp_arp_reply+0x46>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	795b      	ldrb	r3, [r3, #5]
 80143f0:	2b08      	cmp	r3, #8
 80143f2:	d108      	bne.n	8014406 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	681a      	ldr	r2, [r3, #0]
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	69db      	ldr	r3, [r3, #28]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d102      	bne.n	8014406 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f000 f809 	bl	8014418 <dhcp_decline>
    }
  }
}
 8014406:	3710      	adds	r7, #16
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	0801c3f4 	.word	0x0801c3f4
 8014410:	0801c4d8 	.word	0x0801c4d8
 8014414:	0801c454 	.word	0x0801c454

08014418 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014418:	b5b0      	push	{r4, r5, r7, lr}
 801441a:	b08a      	sub	sp, #40	; 0x28
 801441c:	af02      	add	r7, sp, #8
 801441e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6a1b      	ldr	r3, [r3, #32]
 8014424:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014426:	210c      	movs	r1, #12
 8014428:	69b8      	ldr	r0, [r7, #24]
 801442a:	f000 fc6f 	bl	8014d0c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801442e:	f107 030c 	add.w	r3, r7, #12
 8014432:	2204      	movs	r2, #4
 8014434:	69b9      	ldr	r1, [r7, #24]
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f001 f8f2 	bl	8015620 <dhcp_create_msg>
 801443c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d035      	beq.n	80144b0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801444a:	89b8      	ldrh	r0, [r7, #12]
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014452:	2304      	movs	r3, #4
 8014454:	2232      	movs	r2, #50	; 0x32
 8014456:	f000 fc73 	bl	8014d40 <dhcp_option>
 801445a:	4603      	mov	r3, r0
 801445c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801445e:	89bc      	ldrh	r4, [r7, #12]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	69db      	ldr	r3, [r3, #28]
 801446a:	4618      	mov	r0, r3
 801446c:	f7f6 feb9 	bl	800b1e2 <lwip_htonl>
 8014470:	4603      	mov	r3, r0
 8014472:	461a      	mov	r2, r3
 8014474:	4629      	mov	r1, r5
 8014476:	4620      	mov	r0, r4
 8014478:	f000 fcee 	bl	8014e58 <dhcp_option_long>
 801447c:	4603      	mov	r3, r0
 801447e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014480:	89b8      	ldrh	r0, [r7, #12]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	33f0      	adds	r3, #240	; 0xf0
 8014486:	697a      	ldr	r2, [r7, #20]
 8014488:	4619      	mov	r1, r3
 801448a:	f001 f99f 	bl	80157cc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801448e:	4b19      	ldr	r3, [pc, #100]	; (80144f4 <dhcp_decline+0xdc>)
 8014490:	6818      	ldr	r0, [r3, #0]
 8014492:	4b19      	ldr	r3, [pc, #100]	; (80144f8 <dhcp_decline+0xe0>)
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	2343      	movs	r3, #67	; 0x43
 801449c:	4a17      	ldr	r2, [pc, #92]	; (80144fc <dhcp_decline+0xe4>)
 801449e:	6979      	ldr	r1, [r7, #20]
 80144a0:	f7ff f902 	bl	80136a8 <udp_sendto_if_src>
 80144a4:	4603      	mov	r3, r0
 80144a6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80144a8:	6978      	ldr	r0, [r7, #20]
 80144aa:	f7f8 f9f1 	bl	800c890 <pbuf_free>
 80144ae:	e001      	b.n	80144b4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80144b0:	23ff      	movs	r3, #255	; 0xff
 80144b2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	799b      	ldrb	r3, [r3, #6]
 80144b8:	2bff      	cmp	r3, #255	; 0xff
 80144ba:	d005      	beq.n	80144c8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	799b      	ldrb	r3, [r3, #6]
 80144c0:	3301      	adds	r3, #1
 80144c2:	b2da      	uxtb	r2, r3
 80144c4:	69bb      	ldr	r3, [r7, #24]
 80144c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80144c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80144cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144ce:	89fb      	ldrh	r3, [r7, #14]
 80144d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144d4:	4a0a      	ldr	r2, [pc, #40]	; (8014500 <dhcp_decline+0xe8>)
 80144d6:	fb82 1203 	smull	r1, r2, r2, r3
 80144da:	1152      	asrs	r2, r2, #5
 80144dc:	17db      	asrs	r3, r3, #31
 80144de:	1ad3      	subs	r3, r2, r3
 80144e0:	b29a      	uxth	r2, r3
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3720      	adds	r7, #32
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bdb0      	pop	{r4, r5, r7, pc}
 80144f2:	bf00      	nop
 80144f4:	20008c98 	.word	0x20008c98
 80144f8:	08028368 	.word	0x08028368
 80144fc:	0802836c 	.word	0x0802836c
 8014500:	10624dd3 	.word	0x10624dd3

08014504 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08a      	sub	sp, #40	; 0x28
 8014508:	af02      	add	r7, sp, #8
 801450a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6a1b      	ldr	r3, [r3, #32]
 8014510:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014512:	2300      	movs	r3, #0
 8014514:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014516:	69bb      	ldr	r3, [r7, #24]
 8014518:	2200      	movs	r2, #0
 801451a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801451c:	2106      	movs	r1, #6
 801451e:	69b8      	ldr	r0, [r7, #24]
 8014520:	f000 fbf4 	bl	8014d0c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014524:	f107 0308 	add.w	r3, r7, #8
 8014528:	2201      	movs	r2, #1
 801452a:	69b9      	ldr	r1, [r7, #24]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f001 f877 	bl	8015620 <dhcp_create_msg>
 8014532:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d04b      	beq.n	80145d2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014540:	8938      	ldrh	r0, [r7, #8]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014548:	2302      	movs	r3, #2
 801454a:	2239      	movs	r2, #57	; 0x39
 801454c:	f000 fbf8 	bl	8014d40 <dhcp_option>
 8014550:	4603      	mov	r3, r0
 8014552:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014554:	8938      	ldrh	r0, [r7, #8]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014560:	461a      	mov	r2, r3
 8014562:	f000 fc47 	bl	8014df4 <dhcp_option_short>
 8014566:	4603      	mov	r3, r0
 8014568:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801456a:	8938      	ldrh	r0, [r7, #8]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014572:	2303      	movs	r3, #3
 8014574:	2237      	movs	r2, #55	; 0x37
 8014576:	f000 fbe3 	bl	8014d40 <dhcp_option>
 801457a:	4603      	mov	r3, r0
 801457c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801457e:	2300      	movs	r3, #0
 8014580:	77fb      	strb	r3, [r7, #31]
 8014582:	e00e      	b.n	80145a2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014584:	8938      	ldrh	r0, [r7, #8]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801458c:	7ffb      	ldrb	r3, [r7, #31]
 801458e:	4a29      	ldr	r2, [pc, #164]	; (8014634 <dhcp_discover+0x130>)
 8014590:	5cd3      	ldrb	r3, [r2, r3]
 8014592:	461a      	mov	r2, r3
 8014594:	f000 fc08 	bl	8014da8 <dhcp_option_byte>
 8014598:	4603      	mov	r3, r0
 801459a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801459c:	7ffb      	ldrb	r3, [r7, #31]
 801459e:	3301      	adds	r3, #1
 80145a0:	77fb      	strb	r3, [r7, #31]
 80145a2:	7ffb      	ldrb	r3, [r7, #31]
 80145a4:	2b02      	cmp	r3, #2
 80145a6:	d9ed      	bls.n	8014584 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145a8:	8938      	ldrh	r0, [r7, #8]
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	33f0      	adds	r3, #240	; 0xf0
 80145ae:	693a      	ldr	r2, [r7, #16]
 80145b0:	4619      	mov	r1, r3
 80145b2:	f001 f90b 	bl	80157cc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80145b6:	4b20      	ldr	r3, [pc, #128]	; (8014638 <dhcp_discover+0x134>)
 80145b8:	6818      	ldr	r0, [r3, #0]
 80145ba:	4b20      	ldr	r3, [pc, #128]	; (801463c <dhcp_discover+0x138>)
 80145bc:	9301      	str	r3, [sp, #4]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	9300      	str	r3, [sp, #0]
 80145c2:	2343      	movs	r3, #67	; 0x43
 80145c4:	4a1e      	ldr	r2, [pc, #120]	; (8014640 <dhcp_discover+0x13c>)
 80145c6:	6939      	ldr	r1, [r7, #16]
 80145c8:	f7ff f86e 	bl	80136a8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80145cc:	6938      	ldr	r0, [r7, #16]
 80145ce:	f7f8 f95f 	bl	800c890 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	799b      	ldrb	r3, [r3, #6]
 80145d6:	2bff      	cmp	r3, #255	; 0xff
 80145d8:	d005      	beq.n	80145e6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	799b      	ldrb	r3, [r3, #6]
 80145de:	3301      	adds	r3, #1
 80145e0:	b2da      	uxtb	r2, r3
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	799b      	ldrb	r3, [r3, #6]
 80145ea:	2b05      	cmp	r3, #5
 80145ec:	d80d      	bhi.n	801460a <dhcp_discover+0x106>
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	799b      	ldrb	r3, [r3, #6]
 80145f2:	461a      	mov	r2, r3
 80145f4:	2301      	movs	r3, #1
 80145f6:	4093      	lsls	r3, r2
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	461a      	mov	r2, r3
 80145fc:	0152      	lsls	r2, r2, #5
 80145fe:	1ad2      	subs	r2, r2, r3
 8014600:	0092      	lsls	r2, r2, #2
 8014602:	4413      	add	r3, r2
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	b29b      	uxth	r3, r3
 8014608:	e001      	b.n	801460e <dhcp_discover+0x10a>
 801460a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801460e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014610:	897b      	ldrh	r3, [r7, #10]
 8014612:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014616:	4a0b      	ldr	r2, [pc, #44]	; (8014644 <dhcp_discover+0x140>)
 8014618:	fb82 1203 	smull	r1, r2, r2, r3
 801461c:	1152      	asrs	r2, r2, #5
 801461e:	17db      	asrs	r3, r3, #31
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	b29a      	uxth	r2, r3
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801462c:	4618      	mov	r0, r3
 801462e:	3720      	adds	r7, #32
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	2000001c 	.word	0x2000001c
 8014638:	20008c98 	.word	0x20008c98
 801463c:	08028368 	.word	0x08028368
 8014640:	0802836c 	.word	0x0802836c
 8014644:	10624dd3 	.word	0x10624dd3

08014648 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b088      	sub	sp, #32
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d107      	bne.n	8014666 <dhcp_bind+0x1e>
 8014656:	4b64      	ldr	r3, [pc, #400]	; (80147e8 <dhcp_bind+0x1a0>)
 8014658:	f240 4215 	movw	r2, #1045	; 0x415
 801465c:	4963      	ldr	r1, [pc, #396]	; (80147ec <dhcp_bind+0x1a4>)
 801465e:	4864      	ldr	r0, [pc, #400]	; (80147f0 <dhcp_bind+0x1a8>)
 8014660:	f003 fe2c 	bl	80182bc <iprintf>
 8014664:	e0bc      	b.n	80147e0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6a1b      	ldr	r3, [r3, #32]
 801466a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d107      	bne.n	8014682 <dhcp_bind+0x3a>
 8014672:	4b5d      	ldr	r3, [pc, #372]	; (80147e8 <dhcp_bind+0x1a0>)
 8014674:	f240 4217 	movw	r2, #1047	; 0x417
 8014678:	495e      	ldr	r1, [pc, #376]	; (80147f4 <dhcp_bind+0x1ac>)
 801467a:	485d      	ldr	r0, [pc, #372]	; (80147f0 <dhcp_bind+0x1a8>)
 801467c:	f003 fe1e 	bl	80182bc <iprintf>
 8014680:	e0ae      	b.n	80147e0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	2200      	movs	r2, #0
 8014686:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014690:	d019      	beq.n	80146c6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014696:	331e      	adds	r3, #30
 8014698:	4a57      	ldr	r2, [pc, #348]	; (80147f8 <dhcp_bind+0x1b0>)
 801469a:	fba2 2303 	umull	r2, r3, r2, r3
 801469e:	095b      	lsrs	r3, r3, #5
 80146a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146a8:	d302      	bcc.n	80146b0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80146aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80146b8:	69bb      	ldr	r3, [r7, #24]
 80146ba:	8a9b      	ldrh	r3, [r3, #20]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d102      	bne.n	80146c6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80146c0:	69bb      	ldr	r3, [r7, #24]
 80146c2:	2201      	movs	r2, #1
 80146c4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ce:	d01d      	beq.n	801470c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80146d0:	69bb      	ldr	r3, [r7, #24]
 80146d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146d4:	331e      	adds	r3, #30
 80146d6:	4a48      	ldr	r2, [pc, #288]	; (80147f8 <dhcp_bind+0x1b0>)
 80146d8:	fba2 2303 	umull	r2, r3, r2, r3
 80146dc:	095b      	lsrs	r3, r3, #5
 80146de:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146e6:	d302      	bcc.n	80146ee <dhcp_bind+0xa6>
      timeout = 0xffff;
 80146e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80146ec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	69bb      	ldr	r3, [r7, #24]
 80146f4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	895b      	ldrh	r3, [r3, #10]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d102      	bne.n	8014704 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	2201      	movs	r2, #1
 8014702:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014704:	69bb      	ldr	r3, [r7, #24]
 8014706:	895a      	ldrh	r2, [r3, #10]
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014714:	d01d      	beq.n	8014752 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801471a:	331e      	adds	r3, #30
 801471c:	4a36      	ldr	r2, [pc, #216]	; (80147f8 <dhcp_bind+0x1b0>)
 801471e:	fba2 2303 	umull	r2, r3, r2, r3
 8014722:	095b      	lsrs	r3, r3, #5
 8014724:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014726:	69fb      	ldr	r3, [r7, #28]
 8014728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801472c:	d302      	bcc.n	8014734 <dhcp_bind+0xec>
      timeout = 0xffff;
 801472e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014732:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	b29a      	uxth	r2, r3
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801473c:	69bb      	ldr	r3, [r7, #24]
 801473e:	899b      	ldrh	r3, [r3, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d102      	bne.n	801474a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	2201      	movs	r2, #1
 8014748:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801474a:	69bb      	ldr	r3, [r7, #24]
 801474c:	899a      	ldrh	r2, [r3, #12]
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014752:	69bb      	ldr	r3, [r7, #24]
 8014754:	895a      	ldrh	r2, [r3, #10]
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	899b      	ldrh	r3, [r3, #12]
 801475a:	429a      	cmp	r2, r3
 801475c:	d306      	bcc.n	801476c <dhcp_bind+0x124>
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	899b      	ldrh	r3, [r3, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d002      	beq.n	801476c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014766:	69bb      	ldr	r3, [r7, #24]
 8014768:	2200      	movs	r2, #0
 801476a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	79db      	ldrb	r3, [r3, #7]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d003      	beq.n	801477c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014774:	69bb      	ldr	r3, [r7, #24]
 8014776:	6a1b      	ldr	r3, [r3, #32]
 8014778:	613b      	str	r3, [r7, #16]
 801477a:	e014      	b.n	80147a6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801477c:	69bb      	ldr	r3, [r7, #24]
 801477e:	331c      	adds	r3, #28
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014788:	2b00      	cmp	r3, #0
 801478a:	db02      	blt.n	8014792 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801478c:	23ff      	movs	r3, #255	; 0xff
 801478e:	613b      	str	r3, [r7, #16]
 8014790:	e009      	b.n	80147a6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014792:	7dfb      	ldrb	r3, [r7, #23]
 8014794:	2bbf      	cmp	r3, #191	; 0xbf
 8014796:	d903      	bls.n	80147a0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014798:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801479c:	613b      	str	r3, [r7, #16]
 801479e:	e002      	b.n	80147a6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80147a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147a4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80147a6:	69bb      	ldr	r3, [r7, #24]
 80147a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147aa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d108      	bne.n	80147c4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	69da      	ldr	r2, [r3, #28]
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	4013      	ands	r3, r2
 80147ba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80147c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80147c4:	210a      	movs	r1, #10
 80147c6:	69b8      	ldr	r0, [r7, #24]
 80147c8:	f000 faa0 	bl	8014d0c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80147cc:	69bb      	ldr	r3, [r7, #24]
 80147ce:	f103 011c 	add.w	r1, r3, #28
 80147d2:	f107 030c 	add.w	r3, r7, #12
 80147d6:	f107 0210 	add.w	r2, r7, #16
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7f7 fbc8 	bl	800bf70 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80147e0:	3720      	adds	r7, #32
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	0801c3f4 	.word	0x0801c3f4
 80147ec:	0801c554 	.word	0x0801c554
 80147f0:	0801c454 	.word	0x0801c454
 80147f4:	0801c570 	.word	0x0801c570
 80147f8:	88888889 	.word	0x88888889

080147fc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	; 0x28
 8014800:	af02      	add	r7, sp, #8
 8014802:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6a1b      	ldr	r3, [r3, #32]
 8014808:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801480a:	2105      	movs	r1, #5
 801480c:	69b8      	ldr	r0, [r7, #24]
 801480e:	f000 fa7d 	bl	8014d0c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014812:	f107 030c 	add.w	r3, r7, #12
 8014816:	2203      	movs	r2, #3
 8014818:	69b9      	ldr	r1, [r7, #24]
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f000 ff00 	bl	8015620 <dhcp_create_msg>
 8014820:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d04e      	beq.n	80148c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801482e:	89b8      	ldrh	r0, [r7, #12]
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014836:	2302      	movs	r3, #2
 8014838:	2239      	movs	r2, #57	; 0x39
 801483a:	f000 fa81 	bl	8014d40 <dhcp_option>
 801483e:	4603      	mov	r3, r0
 8014840:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014842:	89b8      	ldrh	r0, [r7, #12]
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801484e:	461a      	mov	r2, r3
 8014850:	f000 fad0 	bl	8014df4 <dhcp_option_short>
 8014854:	4603      	mov	r3, r0
 8014856:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014858:	89b8      	ldrh	r0, [r7, #12]
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014860:	2303      	movs	r3, #3
 8014862:	2237      	movs	r2, #55	; 0x37
 8014864:	f000 fa6c 	bl	8014d40 <dhcp_option>
 8014868:	4603      	mov	r3, r0
 801486a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801486c:	2300      	movs	r3, #0
 801486e:	77bb      	strb	r3, [r7, #30]
 8014870:	e00e      	b.n	8014890 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014872:	89b8      	ldrh	r0, [r7, #12]
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801487a:	7fbb      	ldrb	r3, [r7, #30]
 801487c:	4a2a      	ldr	r2, [pc, #168]	; (8014928 <dhcp_renew+0x12c>)
 801487e:	5cd3      	ldrb	r3, [r2, r3]
 8014880:	461a      	mov	r2, r3
 8014882:	f000 fa91 	bl	8014da8 <dhcp_option_byte>
 8014886:	4603      	mov	r3, r0
 8014888:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801488a:	7fbb      	ldrb	r3, [r7, #30]
 801488c:	3301      	adds	r3, #1
 801488e:	77bb      	strb	r3, [r7, #30]
 8014890:	7fbb      	ldrb	r3, [r7, #30]
 8014892:	2b02      	cmp	r3, #2
 8014894:	d9ed      	bls.n	8014872 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014896:	89b8      	ldrh	r0, [r7, #12]
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	33f0      	adds	r3, #240	; 0xf0
 801489c:	697a      	ldr	r2, [r7, #20]
 801489e:	4619      	mov	r1, r3
 80148a0:	f000 ff94 	bl	80157cc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80148a4:	4b21      	ldr	r3, [pc, #132]	; (801492c <dhcp_renew+0x130>)
 80148a6:	6818      	ldr	r0, [r3, #0]
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	f103 0218 	add.w	r2, r3, #24
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	9300      	str	r3, [sp, #0]
 80148b2:	2343      	movs	r3, #67	; 0x43
 80148b4:	6979      	ldr	r1, [r7, #20]
 80148b6:	f7fe fe83 	bl	80135c0 <udp_sendto_if>
 80148ba:	4603      	mov	r3, r0
 80148bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80148be:	6978      	ldr	r0, [r7, #20]
 80148c0:	f7f7 ffe6 	bl	800c890 <pbuf_free>
 80148c4:	e001      	b.n	80148ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80148c6:	23ff      	movs	r3, #255	; 0xff
 80148c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80148ca:	69bb      	ldr	r3, [r7, #24]
 80148cc:	799b      	ldrb	r3, [r3, #6]
 80148ce:	2bff      	cmp	r3, #255	; 0xff
 80148d0:	d005      	beq.n	80148de <dhcp_renew+0xe2>
    dhcp->tries++;
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	799b      	ldrb	r3, [r3, #6]
 80148d6:	3301      	adds	r3, #1
 80148d8:	b2da      	uxtb	r2, r3
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	799b      	ldrb	r3, [r3, #6]
 80148e2:	2b09      	cmp	r3, #9
 80148e4:	d80a      	bhi.n	80148fc <dhcp_renew+0x100>
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	799b      	ldrb	r3, [r3, #6]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	461a      	mov	r2, r3
 80148ee:	0152      	lsls	r2, r2, #5
 80148f0:	1ad2      	subs	r2, r2, r3
 80148f2:	0092      	lsls	r2, r2, #2
 80148f4:	4413      	add	r3, r2
 80148f6:	011b      	lsls	r3, r3, #4
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	e001      	b.n	8014900 <dhcp_renew+0x104>
 80148fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014900:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014902:	89fb      	ldrh	r3, [r7, #14]
 8014904:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014908:	4a09      	ldr	r2, [pc, #36]	; (8014930 <dhcp_renew+0x134>)
 801490a:	fb82 1203 	smull	r1, r2, r2, r3
 801490e:	1152      	asrs	r2, r2, #5
 8014910:	17db      	asrs	r3, r3, #31
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	b29a      	uxth	r2, r3
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801491a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801491e:	4618      	mov	r0, r3
 8014920:	3720      	adds	r7, #32
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	2000001c 	.word	0x2000001c
 801492c:	20008c98 	.word	0x20008c98
 8014930:	10624dd3 	.word	0x10624dd3

08014934 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b08a      	sub	sp, #40	; 0x28
 8014938:	af02      	add	r7, sp, #8
 801493a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6a1b      	ldr	r3, [r3, #32]
 8014940:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014942:	2104      	movs	r1, #4
 8014944:	69b8      	ldr	r0, [r7, #24]
 8014946:	f000 f9e1 	bl	8014d0c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801494a:	f107 030c 	add.w	r3, r7, #12
 801494e:	2203      	movs	r2, #3
 8014950:	69b9      	ldr	r1, [r7, #24]
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f000 fe64 	bl	8015620 <dhcp_create_msg>
 8014958:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d04c      	beq.n	80149fa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014966:	89b8      	ldrh	r0, [r7, #12]
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801496e:	2302      	movs	r3, #2
 8014970:	2239      	movs	r2, #57	; 0x39
 8014972:	f000 f9e5 	bl	8014d40 <dhcp_option>
 8014976:	4603      	mov	r3, r0
 8014978:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801497a:	89b8      	ldrh	r0, [r7, #12]
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014986:	461a      	mov	r2, r3
 8014988:	f000 fa34 	bl	8014df4 <dhcp_option_short>
 801498c:	4603      	mov	r3, r0
 801498e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014990:	89b8      	ldrh	r0, [r7, #12]
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014998:	2303      	movs	r3, #3
 801499a:	2237      	movs	r2, #55	; 0x37
 801499c:	f000 f9d0 	bl	8014d40 <dhcp_option>
 80149a0:	4603      	mov	r3, r0
 80149a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149a4:	2300      	movs	r3, #0
 80149a6:	77bb      	strb	r3, [r7, #30]
 80149a8:	e00e      	b.n	80149c8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80149aa:	89b8      	ldrh	r0, [r7, #12]
 80149ac:	693b      	ldr	r3, [r7, #16]
 80149ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149b2:	7fbb      	ldrb	r3, [r7, #30]
 80149b4:	4a29      	ldr	r2, [pc, #164]	; (8014a5c <dhcp_rebind+0x128>)
 80149b6:	5cd3      	ldrb	r3, [r2, r3]
 80149b8:	461a      	mov	r2, r3
 80149ba:	f000 f9f5 	bl	8014da8 <dhcp_option_byte>
 80149be:	4603      	mov	r3, r0
 80149c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149c2:	7fbb      	ldrb	r3, [r7, #30]
 80149c4:	3301      	adds	r3, #1
 80149c6:	77bb      	strb	r3, [r7, #30]
 80149c8:	7fbb      	ldrb	r3, [r7, #30]
 80149ca:	2b02      	cmp	r3, #2
 80149cc:	d9ed      	bls.n	80149aa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80149ce:	89b8      	ldrh	r0, [r7, #12]
 80149d0:	693b      	ldr	r3, [r7, #16]
 80149d2:	33f0      	adds	r3, #240	; 0xf0
 80149d4:	697a      	ldr	r2, [r7, #20]
 80149d6:	4619      	mov	r1, r3
 80149d8:	f000 fef8 	bl	80157cc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80149dc:	4b20      	ldr	r3, [pc, #128]	; (8014a60 <dhcp_rebind+0x12c>)
 80149de:	6818      	ldr	r0, [r3, #0]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	2343      	movs	r3, #67	; 0x43
 80149e6:	4a1f      	ldr	r2, [pc, #124]	; (8014a64 <dhcp_rebind+0x130>)
 80149e8:	6979      	ldr	r1, [r7, #20]
 80149ea:	f7fe fde9 	bl	80135c0 <udp_sendto_if>
 80149ee:	4603      	mov	r3, r0
 80149f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80149f2:	6978      	ldr	r0, [r7, #20]
 80149f4:	f7f7 ff4c 	bl	800c890 <pbuf_free>
 80149f8:	e001      	b.n	80149fe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80149fa:	23ff      	movs	r3, #255	; 0xff
 80149fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	799b      	ldrb	r3, [r3, #6]
 8014a02:	2bff      	cmp	r3, #255	; 0xff
 8014a04:	d005      	beq.n	8014a12 <dhcp_rebind+0xde>
    dhcp->tries++;
 8014a06:	69bb      	ldr	r3, [r7, #24]
 8014a08:	799b      	ldrb	r3, [r3, #6]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	b2da      	uxtb	r2, r3
 8014a0e:	69bb      	ldr	r3, [r7, #24]
 8014a10:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	799b      	ldrb	r3, [r3, #6]
 8014a16:	2b09      	cmp	r3, #9
 8014a18:	d80a      	bhi.n	8014a30 <dhcp_rebind+0xfc>
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	799b      	ldrb	r3, [r3, #6]
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	461a      	mov	r2, r3
 8014a22:	0152      	lsls	r2, r2, #5
 8014a24:	1ad2      	subs	r2, r2, r3
 8014a26:	0092      	lsls	r2, r2, #2
 8014a28:	4413      	add	r3, r2
 8014a2a:	00db      	lsls	r3, r3, #3
 8014a2c:	b29b      	uxth	r3, r3
 8014a2e:	e001      	b.n	8014a34 <dhcp_rebind+0x100>
 8014a30:	f242 7310 	movw	r3, #10000	; 0x2710
 8014a34:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a36:	89fb      	ldrh	r3, [r7, #14]
 8014a38:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a3c:	4a0a      	ldr	r2, [pc, #40]	; (8014a68 <dhcp_rebind+0x134>)
 8014a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8014a42:	1152      	asrs	r2, r2, #5
 8014a44:	17db      	asrs	r3, r3, #31
 8014a46:	1ad3      	subs	r3, r2, r3
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	69bb      	ldr	r3, [r7, #24]
 8014a4c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3720      	adds	r7, #32
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	2000001c 	.word	0x2000001c
 8014a60:	20008c98 	.word	0x20008c98
 8014a64:	0802836c 	.word	0x0802836c
 8014a68:	10624dd3 	.word	0x10624dd3

08014a6c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014a6c:	b5b0      	push	{r4, r5, r7, lr}
 8014a6e:	b08a      	sub	sp, #40	; 0x28
 8014a70:	af02      	add	r7, sp, #8
 8014a72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6a1b      	ldr	r3, [r3, #32]
 8014a78:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014a7a:	2103      	movs	r1, #3
 8014a7c:	69b8      	ldr	r0, [r7, #24]
 8014a7e:	f000 f945 	bl	8014d0c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014a82:	f107 030c 	add.w	r3, r7, #12
 8014a86:	2203      	movs	r2, #3
 8014a88:	69b9      	ldr	r1, [r7, #24]
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f000 fdc8 	bl	8015620 <dhcp_create_msg>
 8014a90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d066      	beq.n	8014b66 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014a9e:	89b8      	ldrh	r0, [r7, #12]
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014aa6:	2302      	movs	r3, #2
 8014aa8:	2239      	movs	r2, #57	; 0x39
 8014aaa:	f000 f949 	bl	8014d40 <dhcp_option>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014ab2:	89b8      	ldrh	r0, [r7, #12]
 8014ab4:	693b      	ldr	r3, [r7, #16]
 8014ab6:	33f0      	adds	r3, #240	; 0xf0
 8014ab8:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014abc:	4619      	mov	r1, r3
 8014abe:	f000 f999 	bl	8014df4 <dhcp_option_short>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014ac6:	89b8      	ldrh	r0, [r7, #12]
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ace:	2304      	movs	r3, #4
 8014ad0:	2232      	movs	r2, #50	; 0x32
 8014ad2:	f000 f935 	bl	8014d40 <dhcp_option>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014ada:	89bc      	ldrh	r4, [r7, #12]
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014ae2:	69bb      	ldr	r3, [r7, #24]
 8014ae4:	69db      	ldr	r3, [r3, #28]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7f6 fb7b 	bl	800b1e2 <lwip_htonl>
 8014aec:	4603      	mov	r3, r0
 8014aee:	461a      	mov	r2, r3
 8014af0:	4629      	mov	r1, r5
 8014af2:	4620      	mov	r0, r4
 8014af4:	f000 f9b0 	bl	8014e58 <dhcp_option_long>
 8014af8:	4603      	mov	r3, r0
 8014afa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014afc:	89b8      	ldrh	r0, [r7, #12]
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b04:	2303      	movs	r3, #3
 8014b06:	2237      	movs	r2, #55	; 0x37
 8014b08:	f000 f91a 	bl	8014d40 <dhcp_option>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b10:	2300      	movs	r3, #0
 8014b12:	77bb      	strb	r3, [r7, #30]
 8014b14:	e00e      	b.n	8014b34 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014b16:	89b8      	ldrh	r0, [r7, #12]
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b1e:	7fbb      	ldrb	r3, [r7, #30]
 8014b20:	4a29      	ldr	r2, [pc, #164]	; (8014bc8 <dhcp_reboot+0x15c>)
 8014b22:	5cd3      	ldrb	r3, [r2, r3]
 8014b24:	461a      	mov	r2, r3
 8014b26:	f000 f93f 	bl	8014da8 <dhcp_option_byte>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b2e:	7fbb      	ldrb	r3, [r7, #30]
 8014b30:	3301      	adds	r3, #1
 8014b32:	77bb      	strb	r3, [r7, #30]
 8014b34:	7fbb      	ldrb	r3, [r7, #30]
 8014b36:	2b02      	cmp	r3, #2
 8014b38:	d9ed      	bls.n	8014b16 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b3a:	89b8      	ldrh	r0, [r7, #12]
 8014b3c:	693b      	ldr	r3, [r7, #16]
 8014b3e:	33f0      	adds	r3, #240	; 0xf0
 8014b40:	697a      	ldr	r2, [r7, #20]
 8014b42:	4619      	mov	r1, r3
 8014b44:	f000 fe42 	bl	80157cc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014b48:	4b20      	ldr	r3, [pc, #128]	; (8014bcc <dhcp_reboot+0x160>)
 8014b4a:	6818      	ldr	r0, [r3, #0]
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	9300      	str	r3, [sp, #0]
 8014b50:	2343      	movs	r3, #67	; 0x43
 8014b52:	4a1f      	ldr	r2, [pc, #124]	; (8014bd0 <dhcp_reboot+0x164>)
 8014b54:	6979      	ldr	r1, [r7, #20]
 8014b56:	f7fe fd33 	bl	80135c0 <udp_sendto_if>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014b5e:	6978      	ldr	r0, [r7, #20]
 8014b60:	f7f7 fe96 	bl	800c890 <pbuf_free>
 8014b64:	e001      	b.n	8014b6a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014b66:	23ff      	movs	r3, #255	; 0xff
 8014b68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	799b      	ldrb	r3, [r3, #6]
 8014b6e:	2bff      	cmp	r3, #255	; 0xff
 8014b70:	d005      	beq.n	8014b7e <dhcp_reboot+0x112>
    dhcp->tries++;
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	799b      	ldrb	r3, [r3, #6]
 8014b76:	3301      	adds	r3, #1
 8014b78:	b2da      	uxtb	r2, r3
 8014b7a:	69bb      	ldr	r3, [r7, #24]
 8014b7c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014b7e:	69bb      	ldr	r3, [r7, #24]
 8014b80:	799b      	ldrb	r3, [r3, #6]
 8014b82:	2b09      	cmp	r3, #9
 8014b84:	d80a      	bhi.n	8014b9c <dhcp_reboot+0x130>
 8014b86:	69bb      	ldr	r3, [r7, #24]
 8014b88:	799b      	ldrb	r3, [r3, #6]
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	0152      	lsls	r2, r2, #5
 8014b90:	1ad2      	subs	r2, r2, r3
 8014b92:	0092      	lsls	r2, r2, #2
 8014b94:	4413      	add	r3, r2
 8014b96:	00db      	lsls	r3, r3, #3
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	e001      	b.n	8014ba0 <dhcp_reboot+0x134>
 8014b9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014ba0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ba2:	89fb      	ldrh	r3, [r7, #14]
 8014ba4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014ba8:	4a0a      	ldr	r2, [pc, #40]	; (8014bd4 <dhcp_reboot+0x168>)
 8014baa:	fb82 1203 	smull	r1, r2, r2, r3
 8014bae:	1152      	asrs	r2, r2, #5
 8014bb0:	17db      	asrs	r3, r3, #31
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	b29a      	uxth	r2, r3
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014bba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3720      	adds	r7, #32
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	2000001c 	.word	0x2000001c
 8014bcc:	20008c98 	.word	0x20008c98
 8014bd0:	0802836c 	.word	0x0802836c
 8014bd4:	10624dd3 	.word	0x10624dd3

08014bd8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014bd8:	b5b0      	push	{r4, r5, r7, lr}
 8014bda:	b08a      	sub	sp, #40	; 0x28
 8014bdc:	af02      	add	r7, sp, #8
 8014bde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6a1b      	ldr	r3, [r3, #32]
 8014be4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	f000 8084 	beq.w	8014cf6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	795b      	ldrb	r3, [r3, #5]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f000 8081 	beq.w	8014cfa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014bf8:	69fb      	ldr	r3, [r7, #28]
 8014bfa:	699b      	ldr	r3, [r3, #24]
 8014bfc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	2200      	movs	r2, #0
 8014c02:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014c04:	69fb      	ldr	r3, [r7, #28]
 8014c06:	2200      	movs	r2, #0
 8014c08:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014c0a:	69fb      	ldr	r3, [r7, #28]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014c10:	69fb      	ldr	r3, [r7, #28]
 8014c12:	2200      	movs	r2, #0
 8014c14:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014c20:	69fb      	ldr	r3, [r7, #28]
 8014c22:	62da      	str	r2, [r3, #44]	; 0x2c
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c28:	69fb      	ldr	r3, [r7, #28]
 8014c2a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	829a      	strh	r2, [r3, #20]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	8a9a      	ldrh	r2, [r3, #20]
 8014c36:	69fb      	ldr	r3, [r7, #28]
 8014c38:	825a      	strh	r2, [r3, #18]
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	8a5a      	ldrh	r2, [r3, #18]
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	821a      	strh	r2, [r3, #16]
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	8a1a      	ldrh	r2, [r3, #16]
 8014c46:	69fb      	ldr	r3, [r7, #28]
 8014c48:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f000 fdec 	bl	8015828 <dhcp_supplied_address>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d03b      	beq.n	8014cce <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014c56:	f107 030e 	add.w	r3, r7, #14
 8014c5a:	2207      	movs	r2, #7
 8014c5c:	69f9      	ldr	r1, [r7, #28]
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 fcde 	bl	8015620 <dhcp_create_msg>
 8014c64:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014c66:	69bb      	ldr	r3, [r7, #24]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d030      	beq.n	8014cce <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014c72:	89f8      	ldrh	r0, [r7, #14]
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c7a:	2304      	movs	r3, #4
 8014c7c:	2236      	movs	r2, #54	; 0x36
 8014c7e:	f000 f85f 	bl	8014d40 <dhcp_option>
 8014c82:	4603      	mov	r3, r0
 8014c84:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014c86:	89fc      	ldrh	r4, [r7, #14]
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7f6 faa6 	bl	800b1e2 <lwip_htonl>
 8014c96:	4603      	mov	r3, r0
 8014c98:	461a      	mov	r2, r3
 8014c9a:	4629      	mov	r1, r5
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f000 f8db 	bl	8014e58 <dhcp_option_long>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ca6:	89f8      	ldrh	r0, [r7, #14]
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	33f0      	adds	r3, #240	; 0xf0
 8014cac:	69ba      	ldr	r2, [r7, #24]
 8014cae:	4619      	mov	r1, r3
 8014cb0:	f000 fd8c 	bl	80157cc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014cb4:	4b13      	ldr	r3, [pc, #76]	; (8014d04 <dhcp_release_and_stop+0x12c>)
 8014cb6:	6818      	ldr	r0, [r3, #0]
 8014cb8:	f107 0210 	add.w	r2, r7, #16
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	9300      	str	r3, [sp, #0]
 8014cc0:	2343      	movs	r3, #67	; 0x43
 8014cc2:	69b9      	ldr	r1, [r7, #24]
 8014cc4:	f7fe fc7c 	bl	80135c0 <udp_sendto_if>
      pbuf_free(p_out);
 8014cc8:	69b8      	ldr	r0, [r7, #24]
 8014cca:	f7f7 fde1 	bl	800c890 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014cce:	4b0e      	ldr	r3, [pc, #56]	; (8014d08 <dhcp_release_and_stop+0x130>)
 8014cd0:	4a0d      	ldr	r2, [pc, #52]	; (8014d08 <dhcp_release_and_stop+0x130>)
 8014cd2:	490d      	ldr	r1, [pc, #52]	; (8014d08 <dhcp_release_and_stop+0x130>)
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f7f7 f94b 	bl	800bf70 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014cda:	2100      	movs	r1, #0
 8014cdc:	69f8      	ldr	r0, [r7, #28]
 8014cde:	f000 f815 	bl	8014d0c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	791b      	ldrb	r3, [r3, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d008      	beq.n	8014cfc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014cea:	f7fe ffc1 	bl	8013c70 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	711a      	strb	r2, [r3, #4]
 8014cf4:	e002      	b.n	8014cfc <dhcp_release_and_stop+0x124>
    return;
 8014cf6:	bf00      	nop
 8014cf8:	e000      	b.n	8014cfc <dhcp_release_and_stop+0x124>
    return;
 8014cfa:	bf00      	nop
  }
}
 8014cfc:	3720      	adds	r7, #32
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bdb0      	pop	{r4, r5, r7, pc}
 8014d02:	bf00      	nop
 8014d04:	20008c98 	.word	0x20008c98
 8014d08:	08028368 	.word	0x08028368

08014d0c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b083      	sub	sp, #12
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	460b      	mov	r3, r1
 8014d16:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	795b      	ldrb	r3, [r3, #5]
 8014d1c:	78fa      	ldrb	r2, [r7, #3]
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	d008      	beq.n	8014d34 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	78fa      	ldrb	r2, [r7, #3]
 8014d26:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2200      	movs	r2, #0
 8014d32:	811a      	strh	r2, [r3, #8]
  }
}
 8014d34:	bf00      	nop
 8014d36:	370c      	adds	r7, #12
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr

08014d40 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6039      	str	r1, [r7, #0]
 8014d48:	4611      	mov	r1, r2
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	80fb      	strh	r3, [r7, #6]
 8014d50:	460b      	mov	r3, r1
 8014d52:	717b      	strb	r3, [r7, #5]
 8014d54:	4613      	mov	r3, r2
 8014d56:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014d58:	88fa      	ldrh	r2, [r7, #6]
 8014d5a:	793b      	ldrb	r3, [r7, #4]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	3302      	adds	r3, #2
 8014d60:	2b44      	cmp	r3, #68	; 0x44
 8014d62:	d906      	bls.n	8014d72 <dhcp_option+0x32>
 8014d64:	4b0d      	ldr	r3, [pc, #52]	; (8014d9c <dhcp_option+0x5c>)
 8014d66:	f240 529a 	movw	r2, #1434	; 0x59a
 8014d6a:	490d      	ldr	r1, [pc, #52]	; (8014da0 <dhcp_option+0x60>)
 8014d6c:	480d      	ldr	r0, [pc, #52]	; (8014da4 <dhcp_option+0x64>)
 8014d6e:	f003 faa5 	bl	80182bc <iprintf>
  options[options_out_len++] = option_type;
 8014d72:	88fb      	ldrh	r3, [r7, #6]
 8014d74:	1c5a      	adds	r2, r3, #1
 8014d76:	80fa      	strh	r2, [r7, #6]
 8014d78:	461a      	mov	r2, r3
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	797a      	ldrb	r2, [r7, #5]
 8014d80:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014d82:	88fb      	ldrh	r3, [r7, #6]
 8014d84:	1c5a      	adds	r2, r3, #1
 8014d86:	80fa      	strh	r2, [r7, #6]
 8014d88:	461a      	mov	r2, r3
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	4413      	add	r3, r2
 8014d8e:	793a      	ldrb	r2, [r7, #4]
 8014d90:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014d92:	88fb      	ldrh	r3, [r7, #6]
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	0801c3f4 	.word	0x0801c3f4
 8014da0:	0801c588 	.word	0x0801c588
 8014da4:	0801c454 	.word	0x0801c454

08014da8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	4603      	mov	r3, r0
 8014db0:	6039      	str	r1, [r7, #0]
 8014db2:	80fb      	strh	r3, [r7, #6]
 8014db4:	4613      	mov	r3, r2
 8014db6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014db8:	88fb      	ldrh	r3, [r7, #6]
 8014dba:	2b43      	cmp	r3, #67	; 0x43
 8014dbc:	d906      	bls.n	8014dcc <dhcp_option_byte+0x24>
 8014dbe:	4b0a      	ldr	r3, [pc, #40]	; (8014de8 <dhcp_option_byte+0x40>)
 8014dc0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014dc4:	4909      	ldr	r1, [pc, #36]	; (8014dec <dhcp_option_byte+0x44>)
 8014dc6:	480a      	ldr	r0, [pc, #40]	; (8014df0 <dhcp_option_byte+0x48>)
 8014dc8:	f003 fa78 	bl	80182bc <iprintf>
  options[options_out_len++] = value;
 8014dcc:	88fb      	ldrh	r3, [r7, #6]
 8014dce:	1c5a      	adds	r2, r3, #1
 8014dd0:	80fa      	strh	r2, [r7, #6]
 8014dd2:	461a      	mov	r2, r3
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	797a      	ldrb	r2, [r7, #5]
 8014dda:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014ddc:	88fb      	ldrh	r3, [r7, #6]
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3708      	adds	r7, #8
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	0801c3f4 	.word	0x0801c3f4
 8014dec:	0801c5cc 	.word	0x0801c5cc
 8014df0:	0801c454 	.word	0x0801c454

08014df4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	6039      	str	r1, [r7, #0]
 8014dfe:	80fb      	strh	r3, [r7, #6]
 8014e00:	4613      	mov	r3, r2
 8014e02:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014e04:	88fb      	ldrh	r3, [r7, #6]
 8014e06:	3302      	adds	r3, #2
 8014e08:	2b44      	cmp	r3, #68	; 0x44
 8014e0a:	d906      	bls.n	8014e1a <dhcp_option_short+0x26>
 8014e0c:	4b0f      	ldr	r3, [pc, #60]	; (8014e4c <dhcp_option_short+0x58>)
 8014e0e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014e12:	490f      	ldr	r1, [pc, #60]	; (8014e50 <dhcp_option_short+0x5c>)
 8014e14:	480f      	ldr	r0, [pc, #60]	; (8014e54 <dhcp_option_short+0x60>)
 8014e16:	f003 fa51 	bl	80182bc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014e1a:	88bb      	ldrh	r3, [r7, #4]
 8014e1c:	0a1b      	lsrs	r3, r3, #8
 8014e1e:	b29a      	uxth	r2, r3
 8014e20:	88fb      	ldrh	r3, [r7, #6]
 8014e22:	1c59      	adds	r1, r3, #1
 8014e24:	80f9      	strh	r1, [r7, #6]
 8014e26:	4619      	mov	r1, r3
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	440b      	add	r3, r1
 8014e2c:	b2d2      	uxtb	r2, r2
 8014e2e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014e30:	88fb      	ldrh	r3, [r7, #6]
 8014e32:	1c5a      	adds	r2, r3, #1
 8014e34:	80fa      	strh	r2, [r7, #6]
 8014e36:	461a      	mov	r2, r3
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	88ba      	ldrh	r2, [r7, #4]
 8014e3e:	b2d2      	uxtb	r2, r2
 8014e40:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014e42:	88fb      	ldrh	r3, [r7, #6]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3708      	adds	r7, #8
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	0801c3f4 	.word	0x0801c3f4
 8014e50:	0801c604 	.word	0x0801c604
 8014e54:	0801c454 	.word	0x0801c454

08014e58 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	4603      	mov	r3, r0
 8014e60:	60b9      	str	r1, [r7, #8]
 8014e62:	607a      	str	r2, [r7, #4]
 8014e64:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014e66:	89fb      	ldrh	r3, [r7, #14]
 8014e68:	3304      	adds	r3, #4
 8014e6a:	2b44      	cmp	r3, #68	; 0x44
 8014e6c:	d906      	bls.n	8014e7c <dhcp_option_long+0x24>
 8014e6e:	4b19      	ldr	r3, [pc, #100]	; (8014ed4 <dhcp_option_long+0x7c>)
 8014e70:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014e74:	4918      	ldr	r1, [pc, #96]	; (8014ed8 <dhcp_option_long+0x80>)
 8014e76:	4819      	ldr	r0, [pc, #100]	; (8014edc <dhcp_option_long+0x84>)
 8014e78:	f003 fa20 	bl	80182bc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	0e1a      	lsrs	r2, r3, #24
 8014e80:	89fb      	ldrh	r3, [r7, #14]
 8014e82:	1c59      	adds	r1, r3, #1
 8014e84:	81f9      	strh	r1, [r7, #14]
 8014e86:	4619      	mov	r1, r3
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	440b      	add	r3, r1
 8014e8c:	b2d2      	uxtb	r2, r2
 8014e8e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	0c1a      	lsrs	r2, r3, #16
 8014e94:	89fb      	ldrh	r3, [r7, #14]
 8014e96:	1c59      	adds	r1, r3, #1
 8014e98:	81f9      	strh	r1, [r7, #14]
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	440b      	add	r3, r1
 8014ea0:	b2d2      	uxtb	r2, r2
 8014ea2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	0a1a      	lsrs	r2, r3, #8
 8014ea8:	89fb      	ldrh	r3, [r7, #14]
 8014eaa:	1c59      	adds	r1, r3, #1
 8014eac:	81f9      	strh	r1, [r7, #14]
 8014eae:	4619      	mov	r1, r3
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	440b      	add	r3, r1
 8014eb4:	b2d2      	uxtb	r2, r2
 8014eb6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014eb8:	89fb      	ldrh	r3, [r7, #14]
 8014eba:	1c5a      	adds	r2, r3, #1
 8014ebc:	81fa      	strh	r2, [r7, #14]
 8014ebe:	461a      	mov	r2, r3
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	4413      	add	r3, r2
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	b2d2      	uxtb	r2, r2
 8014ec8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014eca:	89fb      	ldrh	r3, [r7, #14]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	0801c3f4 	.word	0x0801c3f4
 8014ed8:	0801c640 	.word	0x0801c640
 8014edc:	0801c454 	.word	0x0801c454

08014ee0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b090      	sub	sp, #64	; 0x40
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014eea:	2300      	movs	r3, #0
 8014eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014ef2:	2208      	movs	r2, #8
 8014ef4:	2100      	movs	r1, #0
 8014ef6:	48be      	ldr	r0, [pc, #760]	; (80151f0 <dhcp_parse_reply+0x310>)
 8014ef8:	f003 f9d8 	bl	80182ac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	895b      	ldrh	r3, [r3, #10]
 8014f00:	2b2b      	cmp	r3, #43	; 0x2b
 8014f02:	d802      	bhi.n	8014f0a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014f04:	f06f 0301 	mvn.w	r3, #1
 8014f08:	e2a8      	b.n	801545c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014f10:	23f0      	movs	r3, #240	; 0xf0
 8014f12:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	891b      	ldrh	r3, [r3, #8]
 8014f18:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014f1e:	e00c      	b.n	8014f3a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f22:	895b      	ldrh	r3, [r3, #10]
 8014f24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014f26:	1ad3      	subs	r3, r2, r3
 8014f28:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f2c:	895b      	ldrh	r3, [r3, #10]
 8014f2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014f30:	1ad3      	subs	r3, r2, r3
 8014f32:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d004      	beq.n	8014f4a <dhcp_parse_reply+0x6a>
 8014f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f42:	895b      	ldrh	r3, [r3, #10]
 8014f44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d2ea      	bcs.n	8014f20 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d102      	bne.n	8014f56 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014f50:	f06f 0301 	mvn.w	r3, #1
 8014f54:	e282      	b.n	801545c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014f56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014f58:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014f5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014f5c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014f64:	e23a      	b.n	80153dc <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014f66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f6a:	4413      	add	r3, r2
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014f70:	2300      	movs	r3, #0
 8014f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014f76:	f04f 33ff 	mov.w	r3, #4294967295
 8014f7a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014f7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f7e:	3302      	adds	r3, #2
 8014f80:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014f82:	8bfa      	ldrh	r2, [r7, #30]
 8014f84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d202      	bcs.n	8014f90 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014f8a:	f06f 0301 	mvn.w	r3, #1
 8014f8e:	e265      	b.n	801545c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014f90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f92:	3301      	adds	r3, #1
 8014f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f96:	8952      	ldrh	r2, [r2, #10]
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	da07      	bge.n	8014fac <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014f9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014fa2:	4413      	add	r3, r2
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014faa:	e00b      	b.n	8014fc4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d004      	beq.n	8014fbe <dhcp_parse_reply+0xde>
 8014fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	e000      	b.n	8014fc0 <dhcp_parse_reply+0xe0>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014fcc:	7dfb      	ldrb	r3, [r7, #23]
 8014fce:	2b3b      	cmp	r3, #59	; 0x3b
 8014fd0:	f200 812d 	bhi.w	801522e <dhcp_parse_reply+0x34e>
 8014fd4:	a201      	add	r2, pc, #4	; (adr r2, 8014fdc <dhcp_parse_reply+0xfc>)
 8014fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fda:	bf00      	nop
 8014fdc:	080150cd 	.word	0x080150cd
 8014fe0:	080150dd 	.word	0x080150dd
 8014fe4:	0801522f 	.word	0x0801522f
 8014fe8:	080150ff 	.word	0x080150ff
 8014fec:	0801522f 	.word	0x0801522f
 8014ff0:	0801522f 	.word	0x0801522f
 8014ff4:	0801522f 	.word	0x0801522f
 8014ff8:	0801522f 	.word	0x0801522f
 8014ffc:	0801522f 	.word	0x0801522f
 8015000:	0801522f 	.word	0x0801522f
 8015004:	0801522f 	.word	0x0801522f
 8015008:	0801522f 	.word	0x0801522f
 801500c:	0801522f 	.word	0x0801522f
 8015010:	0801522f 	.word	0x0801522f
 8015014:	0801522f 	.word	0x0801522f
 8015018:	0801522f 	.word	0x0801522f
 801501c:	0801522f 	.word	0x0801522f
 8015020:	0801522f 	.word	0x0801522f
 8015024:	0801522f 	.word	0x0801522f
 8015028:	0801522f 	.word	0x0801522f
 801502c:	0801522f 	.word	0x0801522f
 8015030:	0801522f 	.word	0x0801522f
 8015034:	0801522f 	.word	0x0801522f
 8015038:	0801522f 	.word	0x0801522f
 801503c:	0801522f 	.word	0x0801522f
 8015040:	0801522f 	.word	0x0801522f
 8015044:	0801522f 	.word	0x0801522f
 8015048:	0801522f 	.word	0x0801522f
 801504c:	0801522f 	.word	0x0801522f
 8015050:	0801522f 	.word	0x0801522f
 8015054:	0801522f 	.word	0x0801522f
 8015058:	0801522f 	.word	0x0801522f
 801505c:	0801522f 	.word	0x0801522f
 8015060:	0801522f 	.word	0x0801522f
 8015064:	0801522f 	.word	0x0801522f
 8015068:	0801522f 	.word	0x0801522f
 801506c:	0801522f 	.word	0x0801522f
 8015070:	0801522f 	.word	0x0801522f
 8015074:	0801522f 	.word	0x0801522f
 8015078:	0801522f 	.word	0x0801522f
 801507c:	0801522f 	.word	0x0801522f
 8015080:	0801522f 	.word	0x0801522f
 8015084:	0801522f 	.word	0x0801522f
 8015088:	0801522f 	.word	0x0801522f
 801508c:	0801522f 	.word	0x0801522f
 8015090:	0801522f 	.word	0x0801522f
 8015094:	0801522f 	.word	0x0801522f
 8015098:	0801522f 	.word	0x0801522f
 801509c:	0801522f 	.word	0x0801522f
 80150a0:	0801522f 	.word	0x0801522f
 80150a4:	0801522f 	.word	0x0801522f
 80150a8:	0801512b 	.word	0x0801512b
 80150ac:	0801514d 	.word	0x0801514d
 80150b0:	08015189 	.word	0x08015189
 80150b4:	080151ab 	.word	0x080151ab
 80150b8:	0801522f 	.word	0x0801522f
 80150bc:	0801522f 	.word	0x0801522f
 80150c0:	0801522f 	.word	0x0801522f
 80150c4:	080151cd 	.word	0x080151cd
 80150c8:	0801520d 	.word	0x0801520d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80150cc:	2300      	movs	r3, #0
 80150ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80150d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80150da:	e0ac      	b.n	8015236 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80150dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150e0:	2b04      	cmp	r3, #4
 80150e2:	d009      	beq.n	80150f8 <dhcp_parse_reply+0x218>
 80150e4:	4b43      	ldr	r3, [pc, #268]	; (80151f4 <dhcp_parse_reply+0x314>)
 80150e6:	f240 622e 	movw	r2, #1582	; 0x62e
 80150ea:	4943      	ldr	r1, [pc, #268]	; (80151f8 <dhcp_parse_reply+0x318>)
 80150ec:	4843      	ldr	r0, [pc, #268]	; (80151fc <dhcp_parse_reply+0x31c>)
 80150ee:	f003 f8e5 	bl	80182bc <iprintf>
 80150f2:	f06f 0305 	mvn.w	r3, #5
 80150f6:	e1b1      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80150f8:	2306      	movs	r3, #6
 80150fa:	623b      	str	r3, [r7, #32]
        break;
 80150fc:	e09b      	b.n	8015236 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80150fe:	2304      	movs	r3, #4
 8015100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015104:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801510c:	429a      	cmp	r2, r3
 801510e:	d209      	bcs.n	8015124 <dhcp_parse_reply+0x244>
 8015110:	4b38      	ldr	r3, [pc, #224]	; (80151f4 <dhcp_parse_reply+0x314>)
 8015112:	f240 6233 	movw	r2, #1587	; 0x633
 8015116:	493a      	ldr	r1, [pc, #232]	; (8015200 <dhcp_parse_reply+0x320>)
 8015118:	4838      	ldr	r0, [pc, #224]	; (80151fc <dhcp_parse_reply+0x31c>)
 801511a:	f003 f8cf 	bl	80182bc <iprintf>
 801511e:	f06f 0305 	mvn.w	r3, #5
 8015122:	e19b      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015124:	2307      	movs	r3, #7
 8015126:	623b      	str	r3, [r7, #32]
        break;
 8015128:	e085      	b.n	8015236 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801512a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801512e:	2b04      	cmp	r3, #4
 8015130:	d009      	beq.n	8015146 <dhcp_parse_reply+0x266>
 8015132:	4b30      	ldr	r3, [pc, #192]	; (80151f4 <dhcp_parse_reply+0x314>)
 8015134:	f240 6241 	movw	r2, #1601	; 0x641
 8015138:	492f      	ldr	r1, [pc, #188]	; (80151f8 <dhcp_parse_reply+0x318>)
 801513a:	4830      	ldr	r0, [pc, #192]	; (80151fc <dhcp_parse_reply+0x31c>)
 801513c:	f003 f8be 	bl	80182bc <iprintf>
 8015140:	f06f 0305 	mvn.w	r3, #5
 8015144:	e18a      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015146:	2303      	movs	r3, #3
 8015148:	623b      	str	r3, [r7, #32]
        break;
 801514a:	e074      	b.n	8015236 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801514c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015150:	2b01      	cmp	r3, #1
 8015152:	d009      	beq.n	8015168 <dhcp_parse_reply+0x288>
 8015154:	4b27      	ldr	r3, [pc, #156]	; (80151f4 <dhcp_parse_reply+0x314>)
 8015156:	f240 624f 	movw	r2, #1615	; 0x64f
 801515a:	492a      	ldr	r1, [pc, #168]	; (8015204 <dhcp_parse_reply+0x324>)
 801515c:	4827      	ldr	r0, [pc, #156]	; (80151fc <dhcp_parse_reply+0x31c>)
 801515e:	f003 f8ad 	bl	80182bc <iprintf>
 8015162:	f06f 0305 	mvn.w	r3, #5
 8015166:	e179      	b.n	801545c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801516a:	2bf0      	cmp	r3, #240	; 0xf0
 801516c:	d009      	beq.n	8015182 <dhcp_parse_reply+0x2a2>
 801516e:	4b21      	ldr	r3, [pc, #132]	; (80151f4 <dhcp_parse_reply+0x314>)
 8015170:	f240 6251 	movw	r2, #1617	; 0x651
 8015174:	4924      	ldr	r1, [pc, #144]	; (8015208 <dhcp_parse_reply+0x328>)
 8015176:	4821      	ldr	r0, [pc, #132]	; (80151fc <dhcp_parse_reply+0x31c>)
 8015178:	f003 f8a0 	bl	80182bc <iprintf>
 801517c:	f06f 0305 	mvn.w	r3, #5
 8015180:	e16c      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015182:	2300      	movs	r3, #0
 8015184:	623b      	str	r3, [r7, #32]
        break;
 8015186:	e056      	b.n	8015236 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801518c:	2b01      	cmp	r3, #1
 801518e:	d009      	beq.n	80151a4 <dhcp_parse_reply+0x2c4>
 8015190:	4b18      	ldr	r3, [pc, #96]	; (80151f4 <dhcp_parse_reply+0x314>)
 8015192:	f240 6255 	movw	r2, #1621	; 0x655
 8015196:	491b      	ldr	r1, [pc, #108]	; (8015204 <dhcp_parse_reply+0x324>)
 8015198:	4818      	ldr	r0, [pc, #96]	; (80151fc <dhcp_parse_reply+0x31c>)
 801519a:	f003 f88f 	bl	80182bc <iprintf>
 801519e:	f06f 0305 	mvn.w	r3, #5
 80151a2:	e15b      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80151a4:	2301      	movs	r3, #1
 80151a6:	623b      	str	r3, [r7, #32]
        break;
 80151a8:	e045      	b.n	8015236 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80151aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151ae:	2b04      	cmp	r3, #4
 80151b0:	d009      	beq.n	80151c6 <dhcp_parse_reply+0x2e6>
 80151b2:	4b10      	ldr	r3, [pc, #64]	; (80151f4 <dhcp_parse_reply+0x314>)
 80151b4:	f240 6259 	movw	r2, #1625	; 0x659
 80151b8:	490f      	ldr	r1, [pc, #60]	; (80151f8 <dhcp_parse_reply+0x318>)
 80151ba:	4810      	ldr	r0, [pc, #64]	; (80151fc <dhcp_parse_reply+0x31c>)
 80151bc:	f003 f87e 	bl	80182bc <iprintf>
 80151c0:	f06f 0305 	mvn.w	r3, #5
 80151c4:	e14a      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80151c6:	2302      	movs	r3, #2
 80151c8:	623b      	str	r3, [r7, #32]
        break;
 80151ca:	e034      	b.n	8015236 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80151cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151d0:	2b04      	cmp	r3, #4
 80151d2:	d009      	beq.n	80151e8 <dhcp_parse_reply+0x308>
 80151d4:	4b07      	ldr	r3, [pc, #28]	; (80151f4 <dhcp_parse_reply+0x314>)
 80151d6:	f240 625d 	movw	r2, #1629	; 0x65d
 80151da:	4907      	ldr	r1, [pc, #28]	; (80151f8 <dhcp_parse_reply+0x318>)
 80151dc:	4807      	ldr	r0, [pc, #28]	; (80151fc <dhcp_parse_reply+0x31c>)
 80151de:	f003 f86d 	bl	80182bc <iprintf>
 80151e2:	f06f 0305 	mvn.w	r3, #5
 80151e6:	e139      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80151e8:	2304      	movs	r3, #4
 80151ea:	623b      	str	r3, [r7, #32]
        break;
 80151ec:	e023      	b.n	8015236 <dhcp_parse_reply+0x356>
 80151ee:	bf00      	nop
 80151f0:	2000faf4 	.word	0x2000faf4
 80151f4:	0801c3f4 	.word	0x0801c3f4
 80151f8:	0801c67c 	.word	0x0801c67c
 80151fc:	0801c454 	.word	0x0801c454
 8015200:	0801c688 	.word	0x0801c688
 8015204:	0801c69c 	.word	0x0801c69c
 8015208:	0801c6a8 	.word	0x0801c6a8
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015210:	2b04      	cmp	r3, #4
 8015212:	d009      	beq.n	8015228 <dhcp_parse_reply+0x348>
 8015214:	4b93      	ldr	r3, [pc, #588]	; (8015464 <dhcp_parse_reply+0x584>)
 8015216:	f240 6261 	movw	r2, #1633	; 0x661
 801521a:	4993      	ldr	r1, [pc, #588]	; (8015468 <dhcp_parse_reply+0x588>)
 801521c:	4893      	ldr	r0, [pc, #588]	; (801546c <dhcp_parse_reply+0x58c>)
 801521e:	f003 f84d 	bl	80182bc <iprintf>
 8015222:	f06f 0305 	mvn.w	r3, #5
 8015226:	e119      	b.n	801545c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015228:	2305      	movs	r3, #5
 801522a:	623b      	str	r3, [r7, #32]
        break;
 801522c:	e003      	b.n	8015236 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801522e:	2300      	movs	r3, #0
 8015230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015234:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015236:	7dfb      	ldrb	r3, [r7, #23]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d103      	bne.n	8015244 <dhcp_parse_reply+0x364>
      offset++;
 801523c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801523e:	3301      	adds	r3, #1
 8015240:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015242:	e0a1      	b.n	8015388 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015244:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801524a:	4413      	add	r3, r2
 801524c:	3302      	adds	r3, #2
 801524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015252:	db02      	blt.n	801525a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8015254:	f06f 0301 	mvn.w	r3, #1
 8015258:	e100      	b.n	801545c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801525a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801525e:	b29a      	uxth	r2, r3
 8015260:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015262:	4413      	add	r3, r2
 8015264:	b29b      	uxth	r3, r3
 8015266:	3302      	adds	r3, #2
 8015268:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801526a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801526e:	2b00      	cmp	r3, #0
 8015270:	f000 808a 	beq.w	8015388 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8015274:	2300      	movs	r3, #0
 8015276:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015278:	6a3b      	ldr	r3, [r7, #32]
 801527a:	2b00      	cmp	r3, #0
 801527c:	db02      	blt.n	8015284 <dhcp_parse_reply+0x3a4>
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	2b07      	cmp	r3, #7
 8015282:	dd06      	ble.n	8015292 <dhcp_parse_reply+0x3b2>
 8015284:	4b77      	ldr	r3, [pc, #476]	; (8015464 <dhcp_parse_reply+0x584>)
 8015286:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801528a:	4979      	ldr	r1, [pc, #484]	; (8015470 <dhcp_parse_reply+0x590>)
 801528c:	4877      	ldr	r0, [pc, #476]	; (801546c <dhcp_parse_reply+0x58c>)
 801528e:	f003 f815 	bl	80182bc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015292:	4a78      	ldr	r2, [pc, #480]	; (8015474 <dhcp_parse_reply+0x594>)
 8015294:	6a3b      	ldr	r3, [r7, #32]
 8015296:	4413      	add	r3, r2
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d174      	bne.n	8015388 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801529e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152a2:	2b04      	cmp	r3, #4
 80152a4:	bf28      	it	cs
 80152a6:	2304      	movcs	r3, #4
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80152ac:	8bfb      	ldrh	r3, [r7, #30]
 80152ae:	8aba      	ldrh	r2, [r7, #20]
 80152b0:	f107 0108 	add.w	r1, r7, #8
 80152b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152b6:	f7f7 fcf1 	bl	800cc9c <pbuf_copy_partial>
 80152ba:	4603      	mov	r3, r0
 80152bc:	461a      	mov	r2, r3
 80152be:	8abb      	ldrh	r3, [r7, #20]
 80152c0:	4293      	cmp	r3, r2
 80152c2:	d002      	beq.n	80152ca <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80152c4:	f06f 0301 	mvn.w	r3, #1
 80152c8:	e0c8      	b.n	801545c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80152ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152ce:	2b04      	cmp	r3, #4
 80152d0:	d933      	bls.n	801533a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80152d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152d6:	f003 0303 	and.w	r3, r3, #3
 80152da:	b2db      	uxtb	r3, r3
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d009      	beq.n	80152f4 <dhcp_parse_reply+0x414>
 80152e0:	4b60      	ldr	r3, [pc, #384]	; (8015464 <dhcp_parse_reply+0x584>)
 80152e2:	f240 6281 	movw	r2, #1665	; 0x681
 80152e6:	4964      	ldr	r1, [pc, #400]	; (8015478 <dhcp_parse_reply+0x598>)
 80152e8:	4860      	ldr	r0, [pc, #384]	; (801546c <dhcp_parse_reply+0x58c>)
 80152ea:	f002 ffe7 	bl	80182bc <iprintf>
 80152ee:	f06f 0305 	mvn.w	r3, #5
 80152f2:	e0b3      	b.n	801545c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80152f4:	4a5f      	ldr	r2, [pc, #380]	; (8015474 <dhcp_parse_reply+0x594>)
 80152f6:	6a3b      	ldr	r3, [r7, #32]
 80152f8:	4413      	add	r3, r2
 80152fa:	2201      	movs	r2, #1
 80152fc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	4618      	mov	r0, r3
 8015302:	f7f5 ff6e 	bl	800b1e2 <lwip_htonl>
 8015306:	4601      	mov	r1, r0
 8015308:	4a5c      	ldr	r2, [pc, #368]	; (801547c <dhcp_parse_reply+0x59c>)
 801530a:	6a3b      	ldr	r3, [r7, #32]
 801530c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015314:	3b04      	subs	r3, #4
 8015316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801531a:	8bfb      	ldrh	r3, [r7, #30]
 801531c:	3304      	adds	r3, #4
 801531e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015320:	8a7a      	ldrh	r2, [r7, #18]
 8015322:	8bfb      	ldrh	r3, [r7, #30]
 8015324:	429a      	cmp	r2, r3
 8015326:	d202      	bcs.n	801532e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8015328:	f06f 0301 	mvn.w	r3, #1
 801532c:	e096      	b.n	801545c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801532e:	8a7b      	ldrh	r3, [r7, #18]
 8015330:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015332:	6a3b      	ldr	r3, [r7, #32]
 8015334:	3301      	adds	r3, #1
 8015336:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015338:	e79e      	b.n	8015278 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801533a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801533e:	2b04      	cmp	r3, #4
 8015340:	d106      	bne.n	8015350 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	4618      	mov	r0, r3
 8015346:	f7f5 ff4c 	bl	800b1e2 <lwip_htonl>
 801534a:	4603      	mov	r3, r0
 801534c:	60bb      	str	r3, [r7, #8]
 801534e:	e011      	b.n	8015374 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015354:	2b01      	cmp	r3, #1
 8015356:	d009      	beq.n	801536c <dhcp_parse_reply+0x48c>
 8015358:	4b42      	ldr	r3, [pc, #264]	; (8015464 <dhcp_parse_reply+0x584>)
 801535a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801535e:	4948      	ldr	r1, [pc, #288]	; (8015480 <dhcp_parse_reply+0x5a0>)
 8015360:	4842      	ldr	r0, [pc, #264]	; (801546c <dhcp_parse_reply+0x58c>)
 8015362:	f002 ffab 	bl	80182bc <iprintf>
 8015366:	f06f 0305 	mvn.w	r3, #5
 801536a:	e077      	b.n	801545c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801536c:	f107 0308 	add.w	r3, r7, #8
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015374:	4a3f      	ldr	r2, [pc, #252]	; (8015474 <dhcp_parse_reply+0x594>)
 8015376:	6a3b      	ldr	r3, [r7, #32]
 8015378:	4413      	add	r3, r2
 801537a:	2201      	movs	r2, #1
 801537c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	493e      	ldr	r1, [pc, #248]	; (801547c <dhcp_parse_reply+0x59c>)
 8015382:	6a3b      	ldr	r3, [r7, #32]
 8015384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538a:	895b      	ldrh	r3, [r3, #10]
 801538c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801538e:	429a      	cmp	r2, r3
 8015390:	d324      	bcc.n	80153dc <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015394:	895b      	ldrh	r3, [r3, #10]
 8015396:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801539e:	895b      	ldrh	r3, [r3, #10]
 80153a0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80153a2:	1ad3      	subs	r3, r2, r3
 80153a4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80153a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80153a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d213      	bcs.n	80153d6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80153ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80153b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d109      	bne.n	80153ce <dhcp_parse_reply+0x4ee>
 80153ba:	4b2a      	ldr	r3, [pc, #168]	; (8015464 <dhcp_parse_reply+0x584>)
 80153bc:	f240 629d 	movw	r2, #1693	; 0x69d
 80153c0:	4930      	ldr	r1, [pc, #192]	; (8015484 <dhcp_parse_reply+0x5a4>)
 80153c2:	482a      	ldr	r0, [pc, #168]	; (801546c <dhcp_parse_reply+0x58c>)
 80153c4:	f002 ff7a 	bl	80182bc <iprintf>
 80153c8:	f06f 0305 	mvn.w	r3, #5
 80153cc:	e046      	b.n	801545c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80153ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80153d4:	e002      	b.n	80153dc <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80153d6:	f06f 0301 	mvn.w	r3, #1
 80153da:	e03f      	b.n	801545c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80153dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d00a      	beq.n	80153f8 <dhcp_parse_reply+0x518>
 80153e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80153e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d206      	bcs.n	80153f8 <dhcp_parse_reply+0x518>
 80153ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153ee:	4413      	add	r3, r2
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	2bff      	cmp	r3, #255	; 0xff
 80153f4:	f47f adb7 	bne.w	8014f66 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80153f8:	4b1e      	ldr	r3, [pc, #120]	; (8015474 <dhcp_parse_reply+0x594>)
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d018      	beq.n	8015432 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015400:	4b1e      	ldr	r3, [pc, #120]	; (801547c <dhcp_parse_reply+0x59c>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015406:	4b1b      	ldr	r3, [pc, #108]	; (8015474 <dhcp_parse_reply+0x594>)
 8015408:	2200      	movs	r2, #0
 801540a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2b01      	cmp	r3, #1
 8015410:	d102      	bne.n	8015418 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8015412:	2301      	movs	r3, #1
 8015414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015416:	e00c      	b.n	8015432 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2b02      	cmp	r3, #2
 801541c:	d102      	bne.n	8015424 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801541e:	2301      	movs	r3, #1
 8015420:	62bb      	str	r3, [r7, #40]	; 0x28
 8015422:	e006      	b.n	8015432 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	2b03      	cmp	r3, #3
 8015428:	d103      	bne.n	8015432 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801542a:	2301      	movs	r3, #1
 801542c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801542e:	2301      	movs	r3, #1
 8015430:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015434:	2b00      	cmp	r3, #0
 8015436:	d006      	beq.n	8015446 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015438:	2300      	movs	r3, #0
 801543a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801543c:	236c      	movs	r3, #108	; 0x6c
 801543e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015440:	23ec      	movs	r3, #236	; 0xec
 8015442:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015444:	e569      	b.n	8014f1a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015448:	2b00      	cmp	r3, #0
 801544a:	d006      	beq.n	801545a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801544c:	2300      	movs	r3, #0
 801544e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015450:	232c      	movs	r3, #44	; 0x2c
 8015452:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015454:	236c      	movs	r3, #108	; 0x6c
 8015456:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015458:	e55f      	b.n	8014f1a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3740      	adds	r7, #64	; 0x40
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	0801c3f4 	.word	0x0801c3f4
 8015468:	0801c67c 	.word	0x0801c67c
 801546c:	0801c454 	.word	0x0801c454
 8015470:	0801c6c0 	.word	0x0801c6c0
 8015474:	2000faf4 	.word	0x2000faf4
 8015478:	0801c6d4 	.word	0x0801c6d4
 801547c:	2000fafc 	.word	0x2000fafc
 8015480:	0801c6ec 	.word	0x0801c6ec
 8015484:	0801c700 	.word	0x0801c700

08015488 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b08a      	sub	sp, #40	; 0x28
 801548c:	af00      	add	r7, sp, #0
 801548e:	60f8      	str	r0, [r7, #12]
 8015490:	60b9      	str	r1, [r7, #8]
 8015492:	607a      	str	r2, [r7, #4]
 8015494:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015496:	4b5f      	ldr	r3, [pc, #380]	; (8015614 <dhcp_recv+0x18c>)
 8015498:	685b      	ldr	r3, [r3, #4]
 801549a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801549c:	6a3b      	ldr	r3, [r7, #32]
 801549e:	6a1b      	ldr	r3, [r3, #32]
 80154a0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	f000 809d 	beq.w	80155ea <dhcp_recv+0x162>
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	791b      	ldrb	r3, [r3, #4]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	f000 8098 	beq.w	80155ea <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	895b      	ldrh	r3, [r3, #10]
 80154be:	2b2b      	cmp	r3, #43	; 0x2b
 80154c0:	f240 8095 	bls.w	80155ee <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80154c4:	69bb      	ldr	r3, [r7, #24]
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	2b02      	cmp	r3, #2
 80154ca:	f040 8092 	bne.w	80155f2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80154ce:	2300      	movs	r3, #0
 80154d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80154d4:	e012      	b.n	80154fc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80154d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154da:	6a3a      	ldr	r2, [r7, #32]
 80154dc:	4413      	add	r3, r2
 80154de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80154e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154e6:	69b9      	ldr	r1, [r7, #24]
 80154e8:	440b      	add	r3, r1
 80154ea:	7f1b      	ldrb	r3, [r3, #28]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	f040 8082 	bne.w	80155f6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80154f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154f6:	3301      	adds	r3, #1
 80154f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80154fc:	6a3b      	ldr	r3, [r7, #32]
 80154fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015502:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015506:	429a      	cmp	r2, r3
 8015508:	d203      	bcs.n	8015512 <dhcp_recv+0x8a>
 801550a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801550e:	2b05      	cmp	r3, #5
 8015510:	d9e1      	bls.n	80154d6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015512:	69bb      	ldr	r3, [r7, #24]
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	4618      	mov	r0, r3
 8015518:	f7f5 fe63 	bl	800b1e2 <lwip_htonl>
 801551c:	4602      	mov	r2, r0
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	429a      	cmp	r2, r3
 8015524:	d169      	bne.n	80155fa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015526:	69f9      	ldr	r1, [r7, #28]
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f7ff fcd9 	bl	8014ee0 <dhcp_parse_reply>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	d164      	bne.n	80155fe <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015534:	4b38      	ldr	r3, [pc, #224]	; (8015618 <dhcp_recv+0x190>)
 8015536:	785b      	ldrb	r3, [r3, #1]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d062      	beq.n	8015602 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015542:	4b36      	ldr	r3, [pc, #216]	; (801561c <dhcp_recv+0x194>)
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015548:	7cfb      	ldrb	r3, [r7, #19]
 801554a:	2b05      	cmp	r3, #5
 801554c:	d12a      	bne.n	80155a4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801554e:	69fb      	ldr	r3, [r7, #28]
 8015550:	795b      	ldrb	r3, [r3, #5]
 8015552:	2b01      	cmp	r3, #1
 8015554:	d112      	bne.n	801557c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015556:	6979      	ldr	r1, [r7, #20]
 8015558:	6a38      	ldr	r0, [r7, #32]
 801555a:	f7fe fe53 	bl	8014204 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801555e:	6a3b      	ldr	r3, [r7, #32]
 8015560:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015564:	f003 0308 	and.w	r3, r3, #8
 8015568:	2b00      	cmp	r3, #0
 801556a:	d003      	beq.n	8015574 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801556c:	6a38      	ldr	r0, [r7, #32]
 801556e:	f7fe fbc3 	bl	8013cf8 <dhcp_check>
 8015572:	e047      	b.n	8015604 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015574:	6a38      	ldr	r0, [r7, #32]
 8015576:	f7ff f867 	bl	8014648 <dhcp_bind>
 801557a:	e043      	b.n	8015604 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801557c:	69fb      	ldr	r3, [r7, #28]
 801557e:	795b      	ldrb	r3, [r3, #5]
 8015580:	2b03      	cmp	r3, #3
 8015582:	d007      	beq.n	8015594 <dhcp_recv+0x10c>
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	795b      	ldrb	r3, [r3, #5]
 8015588:	2b04      	cmp	r3, #4
 801558a:	d003      	beq.n	8015594 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015590:	2b05      	cmp	r3, #5
 8015592:	d137      	bne.n	8015604 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8015594:	6979      	ldr	r1, [r7, #20]
 8015596:	6a38      	ldr	r0, [r7, #32]
 8015598:	f7fe fe34 	bl	8014204 <dhcp_handle_ack>
      dhcp_bind(netif);
 801559c:	6a38      	ldr	r0, [r7, #32]
 801559e:	f7ff f853 	bl	8014648 <dhcp_bind>
 80155a2:	e02f      	b.n	8015604 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80155a4:	7cfb      	ldrb	r3, [r7, #19]
 80155a6:	2b06      	cmp	r3, #6
 80155a8:	d113      	bne.n	80155d2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80155ae:	2b03      	cmp	r3, #3
 80155b0:	d00b      	beq.n	80155ca <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80155b2:	69fb      	ldr	r3, [r7, #28]
 80155b4:	795b      	ldrb	r3, [r3, #5]
 80155b6:	2b01      	cmp	r3, #1
 80155b8:	d007      	beq.n	80155ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80155be:	2b04      	cmp	r3, #4
 80155c0:	d003      	beq.n	80155ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	795b      	ldrb	r3, [r3, #5]
 80155c6:	2b05      	cmp	r3, #5
 80155c8:	d103      	bne.n	80155d2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80155ca:	6a38      	ldr	r0, [r7, #32]
 80155cc:	f7fe fb7a 	bl	8013cc4 <dhcp_handle_nak>
 80155d0:	e018      	b.n	8015604 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80155d2:	7cfb      	ldrb	r3, [r7, #19]
 80155d4:	2b02      	cmp	r3, #2
 80155d6:	d108      	bne.n	80155ea <dhcp_recv+0x162>
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	795b      	ldrb	r3, [r3, #5]
 80155dc:	2b06      	cmp	r3, #6
 80155de:	d104      	bne.n	80155ea <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80155e0:	6979      	ldr	r1, [r7, #20]
 80155e2:	6a38      	ldr	r0, [r7, #32]
 80155e4:	f7fe fbbc 	bl	8013d60 <dhcp_handle_offer>
 80155e8:	e00c      	b.n	8015604 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80155ea:	bf00      	nop
 80155ec:	e00a      	b.n	8015604 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80155ee:	bf00      	nop
 80155f0:	e008      	b.n	8015604 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80155f2:	bf00      	nop
 80155f4:	e006      	b.n	8015604 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80155f6:	bf00      	nop
 80155f8:	e004      	b.n	8015604 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80155fa:	bf00      	nop
 80155fc:	e002      	b.n	8015604 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80155fe:	bf00      	nop
 8015600:	e000      	b.n	8015604 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8015602:	bf00      	nop
  pbuf_free(p);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7f7 f943 	bl	800c890 <pbuf_free>
}
 801560a:	bf00      	nop
 801560c:	3728      	adds	r7, #40	; 0x28
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	2000c3a4 	.word	0x2000c3a4
 8015618:	2000faf4 	.word	0x2000faf4
 801561c:	2000fafc 	.word	0x2000fafc

08015620 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b088      	sub	sp, #32
 8015624:	af00      	add	r7, sp, #0
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	603b      	str	r3, [r7, #0]
 801562c:	4613      	mov	r3, r2
 801562e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d108      	bne.n	8015648 <dhcp_create_msg+0x28>
 8015636:	4b5f      	ldr	r3, [pc, #380]	; (80157b4 <dhcp_create_msg+0x194>)
 8015638:	f240 7269 	movw	r2, #1897	; 0x769
 801563c:	495e      	ldr	r1, [pc, #376]	; (80157b8 <dhcp_create_msg+0x198>)
 801563e:	485f      	ldr	r0, [pc, #380]	; (80157bc <dhcp_create_msg+0x19c>)
 8015640:	f002 fe3c 	bl	80182bc <iprintf>
 8015644:	2300      	movs	r3, #0
 8015646:	e0b1      	b.n	80157ac <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d108      	bne.n	8015660 <dhcp_create_msg+0x40>
 801564e:	4b59      	ldr	r3, [pc, #356]	; (80157b4 <dhcp_create_msg+0x194>)
 8015650:	f240 726a 	movw	r2, #1898	; 0x76a
 8015654:	495a      	ldr	r1, [pc, #360]	; (80157c0 <dhcp_create_msg+0x1a0>)
 8015656:	4859      	ldr	r0, [pc, #356]	; (80157bc <dhcp_create_msg+0x19c>)
 8015658:	f002 fe30 	bl	80182bc <iprintf>
 801565c:	2300      	movs	r3, #0
 801565e:	e0a5      	b.n	80157ac <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015660:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015664:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015668:	2036      	movs	r0, #54	; 0x36
 801566a:	f7f6 fe31 	bl	800c2d0 <pbuf_alloc>
 801566e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d101      	bne.n	801567a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015676:	2300      	movs	r3, #0
 8015678:	e098      	b.n	80157ac <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	895b      	ldrh	r3, [r3, #10]
 801567e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015682:	d206      	bcs.n	8015692 <dhcp_create_msg+0x72>
 8015684:	4b4b      	ldr	r3, [pc, #300]	; (80157b4 <dhcp_create_msg+0x194>)
 8015686:	f240 7272 	movw	r2, #1906	; 0x772
 801568a:	494e      	ldr	r1, [pc, #312]	; (80157c4 <dhcp_create_msg+0x1a4>)
 801568c:	484b      	ldr	r0, [pc, #300]	; (80157bc <dhcp_create_msg+0x19c>)
 801568e:	f002 fe15 	bl	80182bc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015692:	79fb      	ldrb	r3, [r7, #7]
 8015694:	2b03      	cmp	r3, #3
 8015696:	d103      	bne.n	80156a0 <dhcp_create_msg+0x80>
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	795b      	ldrb	r3, [r3, #5]
 801569c:	2b03      	cmp	r3, #3
 801569e:	d10d      	bne.n	80156bc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	799b      	ldrb	r3, [r3, #6]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d105      	bne.n	80156b4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80156a8:	f002 fe20 	bl	80182ec <rand>
 80156ac:	4603      	mov	r3, r0
 80156ae:	461a      	mov	r2, r3
 80156b0:	4b45      	ldr	r3, [pc, #276]	; (80157c8 <dhcp_create_msg+0x1a8>)
 80156b2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80156b4:	4b44      	ldr	r3, [pc, #272]	; (80157c8 <dhcp_create_msg+0x1a8>)
 80156b6:	681a      	ldr	r2, [r3, #0]
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80156c2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80156c6:	2100      	movs	r1, #0
 80156c8:	6978      	ldr	r0, [r7, #20]
 80156ca:	f002 fdef 	bl	80182ac <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	2201      	movs	r2, #1
 80156d2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	2201      	movs	r2, #1
 80156d8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7f5 fd7a 	bl	800b1e2 <lwip_htonl>
 80156ee:	4602      	mov	r2, r0
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80156f4:	79fb      	ldrb	r3, [r7, #7]
 80156f6:	2b08      	cmp	r3, #8
 80156f8:	d010      	beq.n	801571c <dhcp_create_msg+0xfc>
 80156fa:	79fb      	ldrb	r3, [r7, #7]
 80156fc:	2b04      	cmp	r3, #4
 80156fe:	d00d      	beq.n	801571c <dhcp_create_msg+0xfc>
 8015700:	79fb      	ldrb	r3, [r7, #7]
 8015702:	2b07      	cmp	r3, #7
 8015704:	d00a      	beq.n	801571c <dhcp_create_msg+0xfc>
 8015706:	79fb      	ldrb	r3, [r7, #7]
 8015708:	2b03      	cmp	r3, #3
 801570a:	d10c      	bne.n	8015726 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015710:	2b05      	cmp	r3, #5
 8015712:	d003      	beq.n	801571c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	795b      	ldrb	r3, [r3, #5]
 8015718:	2b04      	cmp	r3, #4
 801571a:	d104      	bne.n	8015726 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	3304      	adds	r3, #4
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015726:	2300      	movs	r3, #0
 8015728:	83fb      	strh	r3, [r7, #30]
 801572a:	e00c      	b.n	8015746 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801572c:	8bfa      	ldrh	r2, [r7, #30]
 801572e:	8bfb      	ldrh	r3, [r7, #30]
 8015730:	68f9      	ldr	r1, [r7, #12]
 8015732:	440a      	add	r2, r1
 8015734:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8015738:	697a      	ldr	r2, [r7, #20]
 801573a:	4413      	add	r3, r2
 801573c:	460a      	mov	r2, r1
 801573e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015740:	8bfb      	ldrh	r3, [r7, #30]
 8015742:	3301      	adds	r3, #1
 8015744:	83fb      	strh	r3, [r7, #30]
 8015746:	8bfb      	ldrh	r3, [r7, #30]
 8015748:	2b05      	cmp	r3, #5
 801574a:	d9ef      	bls.n	801572c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	2200      	movs	r2, #0
 8015750:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015754:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015758:	2200      	movs	r2, #0
 801575a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801575e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015762:	2200      	movs	r2, #0
 8015764:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015768:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801576c:	2200      	movs	r2, #0
 801576e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015772:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801577c:	2301      	movs	r3, #1
 801577e:	2235      	movs	r2, #53	; 0x35
 8015780:	2000      	movs	r0, #0
 8015782:	f7ff fadd 	bl	8014d40 <dhcp_option>
 8015786:	4603      	mov	r3, r0
 8015788:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015790:	79fa      	ldrb	r2, [r7, #7]
 8015792:	8a7b      	ldrh	r3, [r7, #18]
 8015794:	4618      	mov	r0, r3
 8015796:	f7ff fb07 	bl	8014da8 <dhcp_option_byte>
 801579a:	4603      	mov	r3, r0
 801579c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801579e:	683b      	ldr	r3, [r7, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d002      	beq.n	80157aa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	8a7a      	ldrh	r2, [r7, #18]
 80157a8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80157aa:	69bb      	ldr	r3, [r7, #24]
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3720      	adds	r7, #32
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	0801c3f4 	.word	0x0801c3f4
 80157b8:	0801c714 	.word	0x0801c714
 80157bc:	0801c454 	.word	0x0801c454
 80157c0:	0801c734 	.word	0x0801c734
 80157c4:	0801c754 	.word	0x0801c754
 80157c8:	20008ca0 	.word	0x20008ca0

080157cc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	4603      	mov	r3, r0
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80157da:	89fb      	ldrh	r3, [r7, #14]
 80157dc:	1c5a      	adds	r2, r3, #1
 80157de:	81fa      	strh	r2, [r7, #14]
 80157e0:	461a      	mov	r2, r3
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	4413      	add	r3, r2
 80157e6:	22ff      	movs	r2, #255	; 0xff
 80157e8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80157ea:	e007      	b.n	80157fc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80157ec:	89fb      	ldrh	r3, [r7, #14]
 80157ee:	1c5a      	adds	r2, r3, #1
 80157f0:	81fa      	strh	r2, [r7, #14]
 80157f2:	461a      	mov	r2, r3
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	4413      	add	r3, r2
 80157f8:	2200      	movs	r2, #0
 80157fa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80157fc:	89fb      	ldrh	r3, [r7, #14]
 80157fe:	2b43      	cmp	r3, #67	; 0x43
 8015800:	d904      	bls.n	801580c <dhcp_option_trailer+0x40>
 8015802:	89fb      	ldrh	r3, [r7, #14]
 8015804:	f003 0303 	and.w	r3, r3, #3
 8015808:	2b00      	cmp	r3, #0
 801580a:	d002      	beq.n	8015812 <dhcp_option_trailer+0x46>
 801580c:	89fb      	ldrh	r3, [r7, #14]
 801580e:	2b43      	cmp	r3, #67	; 0x43
 8015810:	d9ec      	bls.n	80157ec <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015812:	89fb      	ldrh	r3, [r7, #14]
 8015814:	33f0      	adds	r3, #240	; 0xf0
 8015816:	b29b      	uxth	r3, r3
 8015818:	4619      	mov	r1, r3
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7f6 feb2 	bl	800c584 <pbuf_realloc>
}
 8015820:	bf00      	nop
 8015822:	3710      	adds	r7, #16
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015828:	b480      	push	{r7}
 801582a:	b085      	sub	sp, #20
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d017      	beq.n	8015866 <dhcp_supplied_address+0x3e>
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	6a1b      	ldr	r3, [r3, #32]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d013      	beq.n	8015866 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6a1b      	ldr	r3, [r3, #32]
 8015842:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	795b      	ldrb	r3, [r3, #5]
 8015848:	2b0a      	cmp	r3, #10
 801584a:	d007      	beq.n	801585c <dhcp_supplied_address+0x34>
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	795b      	ldrb	r3, [r3, #5]
 8015850:	2b05      	cmp	r3, #5
 8015852:	d003      	beq.n	801585c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015858:	2b04      	cmp	r3, #4
 801585a:	d101      	bne.n	8015860 <dhcp_supplied_address+0x38>
 801585c:	2301      	movs	r3, #1
 801585e:	e000      	b.n	8015862 <dhcp_supplied_address+0x3a>
 8015860:	2300      	movs	r3, #0
 8015862:	b2db      	uxtb	r3, r3
 8015864:	e000      	b.n	8015868 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015866:	2300      	movs	r3, #0
}
 8015868:	4618      	mov	r0, r3
 801586a:	3714      	adds	r7, #20
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr

08015874 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801587c:	4915      	ldr	r1, [pc, #84]	; (80158d4 <etharp_free_entry+0x60>)
 801587e:	687a      	ldr	r2, [r7, #4]
 8015880:	4613      	mov	r3, r2
 8015882:	005b      	lsls	r3, r3, #1
 8015884:	4413      	add	r3, r2
 8015886:	00db      	lsls	r3, r3, #3
 8015888:	440b      	add	r3, r1
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d013      	beq.n	80158b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015890:	4910      	ldr	r1, [pc, #64]	; (80158d4 <etharp_free_entry+0x60>)
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	4613      	mov	r3, r2
 8015896:	005b      	lsls	r3, r3, #1
 8015898:	4413      	add	r3, r2
 801589a:	00db      	lsls	r3, r3, #3
 801589c:	440b      	add	r3, r1
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7f6 fff5 	bl	800c890 <pbuf_free>
    arp_table[i].q = NULL;
 80158a6:	490b      	ldr	r1, [pc, #44]	; (80158d4 <etharp_free_entry+0x60>)
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	4613      	mov	r3, r2
 80158ac:	005b      	lsls	r3, r3, #1
 80158ae:	4413      	add	r3, r2
 80158b0:	00db      	lsls	r3, r3, #3
 80158b2:	440b      	add	r3, r1
 80158b4:	2200      	movs	r2, #0
 80158b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80158b8:	4906      	ldr	r1, [pc, #24]	; (80158d4 <etharp_free_entry+0x60>)
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	4613      	mov	r3, r2
 80158be:	005b      	lsls	r3, r3, #1
 80158c0:	4413      	add	r3, r2
 80158c2:	00db      	lsls	r3, r3, #3
 80158c4:	440b      	add	r3, r1
 80158c6:	3314      	adds	r3, #20
 80158c8:	2200      	movs	r2, #0
 80158ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80158cc:	bf00      	nop
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	20008ca4 	.word	0x20008ca4

080158d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158de:	2300      	movs	r3, #0
 80158e0:	607b      	str	r3, [r7, #4]
 80158e2:	e096      	b.n	8015a12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80158e4:	494f      	ldr	r1, [pc, #316]	; (8015a24 <etharp_tmr+0x14c>)
 80158e6:	687a      	ldr	r2, [r7, #4]
 80158e8:	4613      	mov	r3, r2
 80158ea:	005b      	lsls	r3, r3, #1
 80158ec:	4413      	add	r3, r2
 80158ee:	00db      	lsls	r3, r3, #3
 80158f0:	440b      	add	r3, r1
 80158f2:	3314      	adds	r3, #20
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80158f8:	78fb      	ldrb	r3, [r7, #3]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	f000 8086 	beq.w	8015a0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015900:	4948      	ldr	r1, [pc, #288]	; (8015a24 <etharp_tmr+0x14c>)
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	4613      	mov	r3, r2
 8015906:	005b      	lsls	r3, r3, #1
 8015908:	4413      	add	r3, r2
 801590a:	00db      	lsls	r3, r3, #3
 801590c:	440b      	add	r3, r1
 801590e:	3312      	adds	r3, #18
 8015910:	881b      	ldrh	r3, [r3, #0]
 8015912:	3301      	adds	r3, #1
 8015914:	b298      	uxth	r0, r3
 8015916:	4943      	ldr	r1, [pc, #268]	; (8015a24 <etharp_tmr+0x14c>)
 8015918:	687a      	ldr	r2, [r7, #4]
 801591a:	4613      	mov	r3, r2
 801591c:	005b      	lsls	r3, r3, #1
 801591e:	4413      	add	r3, r2
 8015920:	00db      	lsls	r3, r3, #3
 8015922:	440b      	add	r3, r1
 8015924:	3312      	adds	r3, #18
 8015926:	4602      	mov	r2, r0
 8015928:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801592a:	493e      	ldr	r1, [pc, #248]	; (8015a24 <etharp_tmr+0x14c>)
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	4613      	mov	r3, r2
 8015930:	005b      	lsls	r3, r3, #1
 8015932:	4413      	add	r3, r2
 8015934:	00db      	lsls	r3, r3, #3
 8015936:	440b      	add	r3, r1
 8015938:	3312      	adds	r3, #18
 801593a:	881b      	ldrh	r3, [r3, #0]
 801593c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015940:	d215      	bcs.n	801596e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015942:	4938      	ldr	r1, [pc, #224]	; (8015a24 <etharp_tmr+0x14c>)
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	4613      	mov	r3, r2
 8015948:	005b      	lsls	r3, r3, #1
 801594a:	4413      	add	r3, r2
 801594c:	00db      	lsls	r3, r3, #3
 801594e:	440b      	add	r3, r1
 8015950:	3314      	adds	r3, #20
 8015952:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015954:	2b01      	cmp	r3, #1
 8015956:	d10e      	bne.n	8015976 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015958:	4932      	ldr	r1, [pc, #200]	; (8015a24 <etharp_tmr+0x14c>)
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	4613      	mov	r3, r2
 801595e:	005b      	lsls	r3, r3, #1
 8015960:	4413      	add	r3, r2
 8015962:	00db      	lsls	r3, r3, #3
 8015964:	440b      	add	r3, r1
 8015966:	3312      	adds	r3, #18
 8015968:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801596a:	2b04      	cmp	r3, #4
 801596c:	d903      	bls.n	8015976 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7ff ff80 	bl	8015874 <etharp_free_entry>
 8015974:	e04a      	b.n	8015a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015976:	492b      	ldr	r1, [pc, #172]	; (8015a24 <etharp_tmr+0x14c>)
 8015978:	687a      	ldr	r2, [r7, #4]
 801597a:	4613      	mov	r3, r2
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	4413      	add	r3, r2
 8015980:	00db      	lsls	r3, r3, #3
 8015982:	440b      	add	r3, r1
 8015984:	3314      	adds	r3, #20
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	2b03      	cmp	r3, #3
 801598a:	d10a      	bne.n	80159a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801598c:	4925      	ldr	r1, [pc, #148]	; (8015a24 <etharp_tmr+0x14c>)
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	440b      	add	r3, r1
 801599a:	3314      	adds	r3, #20
 801599c:	2204      	movs	r2, #4
 801599e:	701a      	strb	r2, [r3, #0]
 80159a0:	e034      	b.n	8015a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80159a2:	4920      	ldr	r1, [pc, #128]	; (8015a24 <etharp_tmr+0x14c>)
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	4613      	mov	r3, r2
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	4413      	add	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	440b      	add	r3, r1
 80159b0:	3314      	adds	r3, #20
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	2b04      	cmp	r3, #4
 80159b6:	d10a      	bne.n	80159ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80159b8:	491a      	ldr	r1, [pc, #104]	; (8015a24 <etharp_tmr+0x14c>)
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	4613      	mov	r3, r2
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	4413      	add	r3, r2
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	440b      	add	r3, r1
 80159c6:	3314      	adds	r3, #20
 80159c8:	2202      	movs	r2, #2
 80159ca:	701a      	strb	r2, [r3, #0]
 80159cc:	e01e      	b.n	8015a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80159ce:	4915      	ldr	r1, [pc, #84]	; (8015a24 <etharp_tmr+0x14c>)
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	4613      	mov	r3, r2
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	4413      	add	r3, r2
 80159d8:	00db      	lsls	r3, r3, #3
 80159da:	440b      	add	r3, r1
 80159dc:	3314      	adds	r3, #20
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	2b01      	cmp	r3, #1
 80159e2:	d113      	bne.n	8015a0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80159e4:	490f      	ldr	r1, [pc, #60]	; (8015a24 <etharp_tmr+0x14c>)
 80159e6:	687a      	ldr	r2, [r7, #4]
 80159e8:	4613      	mov	r3, r2
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	4413      	add	r3, r2
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	440b      	add	r3, r1
 80159f2:	3308      	adds	r3, #8
 80159f4:	6818      	ldr	r0, [r3, #0]
 80159f6:	687a      	ldr	r2, [r7, #4]
 80159f8:	4613      	mov	r3, r2
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	4413      	add	r3, r2
 80159fe:	00db      	lsls	r3, r3, #3
 8015a00:	4a08      	ldr	r2, [pc, #32]	; (8015a24 <etharp_tmr+0x14c>)
 8015a02:	4413      	add	r3, r2
 8015a04:	3304      	adds	r3, #4
 8015a06:	4619      	mov	r1, r3
 8015a08:	f000 fe72 	bl	80166f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	607b      	str	r3, [r7, #4]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2b09      	cmp	r3, #9
 8015a16:	f77f af65 	ble.w	80158e4 <etharp_tmr+0xc>
      }
    }
  }
}
 8015a1a:	bf00      	nop
 8015a1c:	3708      	adds	r7, #8
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	20008ca4 	.word	0x20008ca4

08015a28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b08a      	sub	sp, #40	; 0x28
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	460b      	mov	r3, r1
 8015a32:	607a      	str	r2, [r7, #4]
 8015a34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015a36:	230a      	movs	r3, #10
 8015a38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015a3a:	230a      	movs	r3, #10
 8015a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015a3e:	230a      	movs	r3, #10
 8015a40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015a42:	2300      	movs	r3, #0
 8015a44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015a46:	230a      	movs	r3, #10
 8015a48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	83bb      	strh	r3, [r7, #28]
 8015a4e:	2300      	movs	r3, #0
 8015a50:	837b      	strh	r3, [r7, #26]
 8015a52:	2300      	movs	r3, #0
 8015a54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a56:	2300      	movs	r3, #0
 8015a58:	843b      	strh	r3, [r7, #32]
 8015a5a:	e0ae      	b.n	8015bba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a60:	49a6      	ldr	r1, [pc, #664]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015a62:	4613      	mov	r3, r2
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	4413      	add	r3, r2
 8015a68:	00db      	lsls	r3, r3, #3
 8015a6a:	440b      	add	r3, r1
 8015a6c:	3314      	adds	r3, #20
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015a72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a76:	2b0a      	cmp	r3, #10
 8015a78:	d105      	bne.n	8015a86 <etharp_find_entry+0x5e>
 8015a7a:	7dfb      	ldrb	r3, [r7, #23]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d102      	bne.n	8015a86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015a80:	8c3b      	ldrh	r3, [r7, #32]
 8015a82:	847b      	strh	r3, [r7, #34]	; 0x22
 8015a84:	e095      	b.n	8015bb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015a86:	7dfb      	ldrb	r3, [r7, #23]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	f000 8092 	beq.w	8015bb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015a8e:	7dfb      	ldrb	r3, [r7, #23]
 8015a90:	2b01      	cmp	r3, #1
 8015a92:	d009      	beq.n	8015aa8 <etharp_find_entry+0x80>
 8015a94:	7dfb      	ldrb	r3, [r7, #23]
 8015a96:	2b01      	cmp	r3, #1
 8015a98:	d806      	bhi.n	8015aa8 <etharp_find_entry+0x80>
 8015a9a:	4b99      	ldr	r3, [pc, #612]	; (8015d00 <etharp_find_entry+0x2d8>)
 8015a9c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8015aa0:	4998      	ldr	r1, [pc, #608]	; (8015d04 <etharp_find_entry+0x2dc>)
 8015aa2:	4899      	ldr	r0, [pc, #612]	; (8015d08 <etharp_find_entry+0x2e0>)
 8015aa4:	f002 fc0a 	bl	80182bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d020      	beq.n	8015af0 <etharp_find_entry+0xc8>
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	6819      	ldr	r1, [r3, #0]
 8015ab2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ab6:	4891      	ldr	r0, [pc, #580]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015ab8:	4613      	mov	r3, r2
 8015aba:	005b      	lsls	r3, r3, #1
 8015abc:	4413      	add	r3, r2
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	4403      	add	r3, r0
 8015ac2:	3304      	adds	r3, #4
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	4299      	cmp	r1, r3
 8015ac8:	d112      	bne.n	8015af0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d00c      	beq.n	8015aea <etharp_find_entry+0xc2>
 8015ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ad4:	4989      	ldr	r1, [pc, #548]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015ad6:	4613      	mov	r3, r2
 8015ad8:	005b      	lsls	r3, r3, #1
 8015ada:	4413      	add	r3, r2
 8015adc:	00db      	lsls	r3, r3, #3
 8015ade:	440b      	add	r3, r1
 8015ae0:	3308      	adds	r3, #8
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d102      	bne.n	8015af0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015aee:	e100      	b.n	8015cf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015af0:	7dfb      	ldrb	r3, [r7, #23]
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d140      	bne.n	8015b78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015afa:	4980      	ldr	r1, [pc, #512]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015afc:	4613      	mov	r3, r2
 8015afe:	005b      	lsls	r3, r3, #1
 8015b00:	4413      	add	r3, r2
 8015b02:	00db      	lsls	r3, r3, #3
 8015b04:	440b      	add	r3, r1
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d01a      	beq.n	8015b42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b10:	497a      	ldr	r1, [pc, #488]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015b12:	4613      	mov	r3, r2
 8015b14:	005b      	lsls	r3, r3, #1
 8015b16:	4413      	add	r3, r2
 8015b18:	00db      	lsls	r3, r3, #3
 8015b1a:	440b      	add	r3, r1
 8015b1c:	3312      	adds	r3, #18
 8015b1e:	881b      	ldrh	r3, [r3, #0]
 8015b20:	8bba      	ldrh	r2, [r7, #28]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d845      	bhi.n	8015bb2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015b26:	8c3b      	ldrh	r3, [r7, #32]
 8015b28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b2e:	4973      	ldr	r1, [pc, #460]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	440b      	add	r3, r1
 8015b3a:	3312      	adds	r3, #18
 8015b3c:	881b      	ldrh	r3, [r3, #0]
 8015b3e:	83bb      	strh	r3, [r7, #28]
 8015b40:	e037      	b.n	8015bb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b46:	496d      	ldr	r1, [pc, #436]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015b48:	4613      	mov	r3, r2
 8015b4a:	005b      	lsls	r3, r3, #1
 8015b4c:	4413      	add	r3, r2
 8015b4e:	00db      	lsls	r3, r3, #3
 8015b50:	440b      	add	r3, r1
 8015b52:	3312      	adds	r3, #18
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	8b7a      	ldrh	r2, [r7, #26]
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d82a      	bhi.n	8015bb2 <etharp_find_entry+0x18a>
            old_pending = i;
 8015b5c:	8c3b      	ldrh	r3, [r7, #32]
 8015b5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015b60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b64:	4965      	ldr	r1, [pc, #404]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015b66:	4613      	mov	r3, r2
 8015b68:	005b      	lsls	r3, r3, #1
 8015b6a:	4413      	add	r3, r2
 8015b6c:	00db      	lsls	r3, r3, #3
 8015b6e:	440b      	add	r3, r1
 8015b70:	3312      	adds	r3, #18
 8015b72:	881b      	ldrh	r3, [r3, #0]
 8015b74:	837b      	strh	r3, [r7, #26]
 8015b76:	e01c      	b.n	8015bb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015b78:	7dfb      	ldrb	r3, [r7, #23]
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d919      	bls.n	8015bb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015b7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b82:	495e      	ldr	r1, [pc, #376]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015b84:	4613      	mov	r3, r2
 8015b86:	005b      	lsls	r3, r3, #1
 8015b88:	4413      	add	r3, r2
 8015b8a:	00db      	lsls	r3, r3, #3
 8015b8c:	440b      	add	r3, r1
 8015b8e:	3312      	adds	r3, #18
 8015b90:	881b      	ldrh	r3, [r3, #0]
 8015b92:	8b3a      	ldrh	r2, [r7, #24]
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d80c      	bhi.n	8015bb2 <etharp_find_entry+0x18a>
            old_stable = i;
 8015b98:	8c3b      	ldrh	r3, [r7, #32]
 8015b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ba0:	4956      	ldr	r1, [pc, #344]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	005b      	lsls	r3, r3, #1
 8015ba6:	4413      	add	r3, r2
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	440b      	add	r3, r1
 8015bac:	3312      	adds	r3, #18
 8015bae:	881b      	ldrh	r3, [r3, #0]
 8015bb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bb2:	8c3b      	ldrh	r3, [r7, #32]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	b29b      	uxth	r3, r3
 8015bb8:	843b      	strh	r3, [r7, #32]
 8015bba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015bbe:	2b09      	cmp	r3, #9
 8015bc0:	f77f af4c 	ble.w	8015a5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015bc4:	7afb      	ldrb	r3, [r7, #11]
 8015bc6:	f003 0302 	and.w	r3, r3, #2
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d108      	bne.n	8015be0 <etharp_find_entry+0x1b8>
 8015bce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bd2:	2b0a      	cmp	r3, #10
 8015bd4:	d107      	bne.n	8015be6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015bd6:	7afb      	ldrb	r3, [r7, #11]
 8015bd8:	f003 0301 	and.w	r3, r3, #1
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d102      	bne.n	8015be6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015be0:	f04f 33ff 	mov.w	r3, #4294967295
 8015be4:	e085      	b.n	8015cf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015be6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bea:	2b09      	cmp	r3, #9
 8015bec:	dc02      	bgt.n	8015bf4 <etharp_find_entry+0x1cc>
    i = empty;
 8015bee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bf0:	843b      	strh	r3, [r7, #32]
 8015bf2:	e039      	b.n	8015c68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015bf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015bf8:	2b09      	cmp	r3, #9
 8015bfa:	dc14      	bgt.n	8015c26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bfe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c04:	493d      	ldr	r1, [pc, #244]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015c06:	4613      	mov	r3, r2
 8015c08:	005b      	lsls	r3, r3, #1
 8015c0a:	4413      	add	r3, r2
 8015c0c:	00db      	lsls	r3, r3, #3
 8015c0e:	440b      	add	r3, r1
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d018      	beq.n	8015c48 <etharp_find_entry+0x220>
 8015c16:	4b3a      	ldr	r3, [pc, #232]	; (8015d00 <etharp_find_entry+0x2d8>)
 8015c18:	f240 126d 	movw	r2, #365	; 0x16d
 8015c1c:	493b      	ldr	r1, [pc, #236]	; (8015d0c <etharp_find_entry+0x2e4>)
 8015c1e:	483a      	ldr	r0, [pc, #232]	; (8015d08 <etharp_find_entry+0x2e0>)
 8015c20:	f002 fb4c 	bl	80182bc <iprintf>
 8015c24:	e010      	b.n	8015c48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015c26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015c2a:	2b09      	cmp	r3, #9
 8015c2c:	dc02      	bgt.n	8015c34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015c2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015c30:	843b      	strh	r3, [r7, #32]
 8015c32:	e009      	b.n	8015c48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015c34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015c38:	2b09      	cmp	r3, #9
 8015c3a:	dc02      	bgt.n	8015c42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015c3c:	8bfb      	ldrh	r3, [r7, #30]
 8015c3e:	843b      	strh	r3, [r7, #32]
 8015c40:	e002      	b.n	8015c48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015c42:	f04f 33ff 	mov.w	r3, #4294967295
 8015c46:	e054      	b.n	8015cf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c4c:	2b09      	cmp	r3, #9
 8015c4e:	dd06      	ble.n	8015c5e <etharp_find_entry+0x236>
 8015c50:	4b2b      	ldr	r3, [pc, #172]	; (8015d00 <etharp_find_entry+0x2d8>)
 8015c52:	f240 127f 	movw	r2, #383	; 0x17f
 8015c56:	492e      	ldr	r1, [pc, #184]	; (8015d10 <etharp_find_entry+0x2e8>)
 8015c58:	482b      	ldr	r0, [pc, #172]	; (8015d08 <etharp_find_entry+0x2e0>)
 8015c5a:	f002 fb2f 	bl	80182bc <iprintf>
    etharp_free_entry(i);
 8015c5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7ff fe06 	bl	8015874 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015c68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c6c:	2b09      	cmp	r3, #9
 8015c6e:	dd06      	ble.n	8015c7e <etharp_find_entry+0x256>
 8015c70:	4b23      	ldr	r3, [pc, #140]	; (8015d00 <etharp_find_entry+0x2d8>)
 8015c72:	f240 1283 	movw	r2, #387	; 0x183
 8015c76:	4926      	ldr	r1, [pc, #152]	; (8015d10 <etharp_find_entry+0x2e8>)
 8015c78:	4823      	ldr	r0, [pc, #140]	; (8015d08 <etharp_find_entry+0x2e0>)
 8015c7a:	f002 fb1f 	bl	80182bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015c7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c82:	491e      	ldr	r1, [pc, #120]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015c84:	4613      	mov	r3, r2
 8015c86:	005b      	lsls	r3, r3, #1
 8015c88:	4413      	add	r3, r2
 8015c8a:	00db      	lsls	r3, r3, #3
 8015c8c:	440b      	add	r3, r1
 8015c8e:	3314      	adds	r3, #20
 8015c90:	781b      	ldrb	r3, [r3, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d006      	beq.n	8015ca4 <etharp_find_entry+0x27c>
 8015c96:	4b1a      	ldr	r3, [pc, #104]	; (8015d00 <etharp_find_entry+0x2d8>)
 8015c98:	f240 1285 	movw	r2, #389	; 0x185
 8015c9c:	491d      	ldr	r1, [pc, #116]	; (8015d14 <etharp_find_entry+0x2ec>)
 8015c9e:	481a      	ldr	r0, [pc, #104]	; (8015d08 <etharp_find_entry+0x2e0>)
 8015ca0:	f002 fb0c 	bl	80182bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00b      	beq.n	8015cc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015caa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	6819      	ldr	r1, [r3, #0]
 8015cb2:	4812      	ldr	r0, [pc, #72]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	005b      	lsls	r3, r3, #1
 8015cb8:	4413      	add	r3, r2
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	4403      	add	r3, r0
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015cc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cc6:	490d      	ldr	r1, [pc, #52]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015cc8:	4613      	mov	r3, r2
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	4413      	add	r3, r2
 8015cce:	00db      	lsls	r3, r3, #3
 8015cd0:	440b      	add	r3, r1
 8015cd2:	3312      	adds	r3, #18
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015cd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cdc:	4907      	ldr	r1, [pc, #28]	; (8015cfc <etharp_find_entry+0x2d4>)
 8015cde:	4613      	mov	r3, r2
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	4413      	add	r3, r2
 8015ce4:	00db      	lsls	r3, r3, #3
 8015ce6:	440b      	add	r3, r1
 8015ce8:	3308      	adds	r3, #8
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3728      	adds	r7, #40	; 0x28
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	bf00      	nop
 8015cfc:	20008ca4 	.word	0x20008ca4
 8015d00:	0801c794 	.word	0x0801c794
 8015d04:	0801c7cc 	.word	0x0801c7cc
 8015d08:	0801c80c 	.word	0x0801c80c
 8015d0c:	0801c834 	.word	0x0801c834
 8015d10:	0801c84c 	.word	0x0801c84c
 8015d14:	0801c860 	.word	0x0801c860

08015d18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b088      	sub	sp, #32
 8015d1c:	af02      	add	r7, sp, #8
 8015d1e:	60f8      	str	r0, [r7, #12]
 8015d20:	60b9      	str	r1, [r7, #8]
 8015d22:	607a      	str	r2, [r7, #4]
 8015d24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015d2c:	2b06      	cmp	r3, #6
 8015d2e:	d006      	beq.n	8015d3e <etharp_update_arp_entry+0x26>
 8015d30:	4b48      	ldr	r3, [pc, #288]	; (8015e54 <etharp_update_arp_entry+0x13c>)
 8015d32:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015d36:	4948      	ldr	r1, [pc, #288]	; (8015e58 <etharp_update_arp_entry+0x140>)
 8015d38:	4848      	ldr	r0, [pc, #288]	; (8015e5c <etharp_update_arp_entry+0x144>)
 8015d3a:	f002 fabf 	bl	80182bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d012      	beq.n	8015d6a <etharp_update_arp_entry+0x52>
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00e      	beq.n	8015d6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	68f9      	ldr	r1, [r7, #12]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f001 f91e 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 8015d58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d105      	bne.n	8015d6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d66:	2be0      	cmp	r3, #224	; 0xe0
 8015d68:	d102      	bne.n	8015d70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d6a:	f06f 030f 	mvn.w	r3, #15
 8015d6e:	e06c      	b.n	8015e4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015d70:	78fb      	ldrb	r3, [r7, #3]
 8015d72:	68fa      	ldr	r2, [r7, #12]
 8015d74:	4619      	mov	r1, r3
 8015d76:	68b8      	ldr	r0, [r7, #8]
 8015d78:	f7ff fe56 	bl	8015a28 <etharp_find_entry>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	da02      	bge.n	8015d8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015d88:	8afb      	ldrh	r3, [r7, #22]
 8015d8a:	b25b      	sxtb	r3, r3
 8015d8c:	e05d      	b.n	8015e4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015d8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015d92:	4933      	ldr	r1, [pc, #204]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015d94:	4613      	mov	r3, r2
 8015d96:	005b      	lsls	r3, r3, #1
 8015d98:	4413      	add	r3, r2
 8015d9a:	00db      	lsls	r3, r3, #3
 8015d9c:	440b      	add	r3, r1
 8015d9e:	3314      	adds	r3, #20
 8015da0:	2202      	movs	r2, #2
 8015da2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015da4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015da8:	492d      	ldr	r1, [pc, #180]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015daa:	4613      	mov	r3, r2
 8015dac:	005b      	lsls	r3, r3, #1
 8015dae:	4413      	add	r3, r2
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	440b      	add	r3, r1
 8015db4:	3308      	adds	r3, #8
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015dba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	005b      	lsls	r3, r3, #1
 8015dc2:	4413      	add	r3, r2
 8015dc4:	00db      	lsls	r3, r3, #3
 8015dc6:	3308      	adds	r3, #8
 8015dc8:	4a25      	ldr	r2, [pc, #148]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015dca:	4413      	add	r3, r2
 8015dcc:	3304      	adds	r3, #4
 8015dce:	2206      	movs	r2, #6
 8015dd0:	6879      	ldr	r1, [r7, #4]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f002 fa5f 	bl	8018296 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ddc:	4920      	ldr	r1, [pc, #128]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015dde:	4613      	mov	r3, r2
 8015de0:	005b      	lsls	r3, r3, #1
 8015de2:	4413      	add	r3, r2
 8015de4:	00db      	lsls	r3, r3, #3
 8015de6:	440b      	add	r3, r1
 8015de8:	3312      	adds	r3, #18
 8015dea:	2200      	movs	r2, #0
 8015dec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015dee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015df2:	491b      	ldr	r1, [pc, #108]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015df4:	4613      	mov	r3, r2
 8015df6:	005b      	lsls	r3, r3, #1
 8015df8:	4413      	add	r3, r2
 8015dfa:	00db      	lsls	r3, r3, #3
 8015dfc:	440b      	add	r3, r1
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d021      	beq.n	8015e48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e08:	4915      	ldr	r1, [pc, #84]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	4413      	add	r3, r2
 8015e10:	00db      	lsls	r3, r3, #3
 8015e12:	440b      	add	r3, r1
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015e18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e1c:	4910      	ldr	r1, [pc, #64]	; (8015e60 <etharp_update_arp_entry+0x148>)
 8015e1e:	4613      	mov	r3, r2
 8015e20:	005b      	lsls	r3, r3, #1
 8015e22:	4413      	add	r3, r2
 8015e24:	00db      	lsls	r3, r3, #3
 8015e26:	440b      	add	r3, r1
 8015e28:	2200      	movs	r2, #0
 8015e2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e36:	9300      	str	r3, [sp, #0]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	6939      	ldr	r1, [r7, #16]
 8015e3c:	68f8      	ldr	r0, [r7, #12]
 8015e3e:	f001 ffad 	bl	8017d9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015e42:	6938      	ldr	r0, [r7, #16]
 8015e44:	f7f6 fd24 	bl	800c890 <pbuf_free>
  }
  return ERR_OK;
 8015e48:	2300      	movs	r3, #0
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3718      	adds	r7, #24
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	0801c794 	.word	0x0801c794
 8015e58:	0801c88c 	.word	0x0801c88c
 8015e5c:	0801c80c 	.word	0x0801c80c
 8015e60:	20008ca4 	.word	0x20008ca4

08015e64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	60fb      	str	r3, [r7, #12]
 8015e70:	e01e      	b.n	8015eb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015e72:	4913      	ldr	r1, [pc, #76]	; (8015ec0 <etharp_cleanup_netif+0x5c>)
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	4613      	mov	r3, r2
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	4413      	add	r3, r2
 8015e7c:	00db      	lsls	r3, r3, #3
 8015e7e:	440b      	add	r3, r1
 8015e80:	3314      	adds	r3, #20
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015e86:	7afb      	ldrb	r3, [r7, #11]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d00e      	beq.n	8015eaa <etharp_cleanup_netif+0x46>
 8015e8c:	490c      	ldr	r1, [pc, #48]	; (8015ec0 <etharp_cleanup_netif+0x5c>)
 8015e8e:	68fa      	ldr	r2, [r7, #12]
 8015e90:	4613      	mov	r3, r2
 8015e92:	005b      	lsls	r3, r3, #1
 8015e94:	4413      	add	r3, r2
 8015e96:	00db      	lsls	r3, r3, #3
 8015e98:	440b      	add	r3, r1
 8015e9a:	3308      	adds	r3, #8
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d102      	bne.n	8015eaa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f7ff fce5 	bl	8015874 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	3301      	adds	r3, #1
 8015eae:	60fb      	str	r3, [r7, #12]
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	2b09      	cmp	r3, #9
 8015eb4:	dddd      	ble.n	8015e72 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015eb6:	bf00      	nop
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	20008ca4 	.word	0x20008ca4

08015ec4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015ec4:	b5b0      	push	{r4, r5, r7, lr}
 8015ec6:	b08a      	sub	sp, #40	; 0x28
 8015ec8:	af04      	add	r7, sp, #16
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d107      	bne.n	8015ee4 <etharp_input+0x20>
 8015ed4:	4b3f      	ldr	r3, [pc, #252]	; (8015fd4 <etharp_input+0x110>)
 8015ed6:	f240 228a 	movw	r2, #650	; 0x28a
 8015eda:	493f      	ldr	r1, [pc, #252]	; (8015fd8 <etharp_input+0x114>)
 8015edc:	483f      	ldr	r0, [pc, #252]	; (8015fdc <etharp_input+0x118>)
 8015ede:	f002 f9ed 	bl	80182bc <iprintf>
 8015ee2:	e074      	b.n	8015fce <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	685b      	ldr	r3, [r3, #4]
 8015ee8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	881b      	ldrh	r3, [r3, #0]
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ef4:	d10c      	bne.n	8015f10 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015efa:	2b06      	cmp	r3, #6
 8015efc:	d108      	bne.n	8015f10 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015efe:	693b      	ldr	r3, [r7, #16]
 8015f00:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015f02:	2b04      	cmp	r3, #4
 8015f04:	d104      	bne.n	8015f10 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	885b      	ldrh	r3, [r3, #2]
 8015f0a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015f0c:	2b08      	cmp	r3, #8
 8015f0e:	d003      	beq.n	8015f18 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f7f6 fcbd 	bl	800c890 <pbuf_free>
    return;
 8015f16:	e05a      	b.n	8015fce <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	330e      	adds	r3, #14
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015f20:	693b      	ldr	r3, [r7, #16]
 8015f22:	3318      	adds	r3, #24
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	3304      	adds	r3, #4
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d102      	bne.n	8015f38 <etharp_input+0x74>
    for_us = 0;
 8015f32:	2300      	movs	r3, #0
 8015f34:	75fb      	strb	r3, [r7, #23]
 8015f36:	e009      	b.n	8015f4c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015f38:	68ba      	ldr	r2, [r7, #8]
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	3304      	adds	r3, #4
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	bf0c      	ite	eq
 8015f44:	2301      	moveq	r3, #1
 8015f46:	2300      	movne	r3, #0
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	f103 0208 	add.w	r2, r3, #8
 8015f52:	7dfb      	ldrb	r3, [r7, #23]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d001      	beq.n	8015f5c <etharp_input+0x98>
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e000      	b.n	8015f5e <etharp_input+0x9a>
 8015f5c:	2302      	movs	r3, #2
 8015f5e:	f107 010c 	add.w	r1, r7, #12
 8015f62:	6838      	ldr	r0, [r7, #0]
 8015f64:	f7ff fed8 	bl	8015d18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	88db      	ldrh	r3, [r3, #6]
 8015f6c:	b29b      	uxth	r3, r3
 8015f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f72:	d003      	beq.n	8015f7c <etharp_input+0xb8>
 8015f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015f78:	d01e      	beq.n	8015fb8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015f7a:	e025      	b.n	8015fc8 <etharp_input+0x104>
      if (for_us) {
 8015f7c:	7dfb      	ldrb	r3, [r7, #23]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d021      	beq.n	8015fc6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015f98:	693a      	ldr	r2, [r7, #16]
 8015f9a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015f9c:	2102      	movs	r1, #2
 8015f9e:	9103      	str	r1, [sp, #12]
 8015fa0:	f107 010c 	add.w	r1, r7, #12
 8015fa4:	9102      	str	r1, [sp, #8]
 8015fa6:	9201      	str	r2, [sp, #4]
 8015fa8:	9300      	str	r3, [sp, #0]
 8015faa:	462b      	mov	r3, r5
 8015fac:	4622      	mov	r2, r4
 8015fae:	4601      	mov	r1, r0
 8015fb0:	6838      	ldr	r0, [r7, #0]
 8015fb2:	f000 faef 	bl	8016594 <etharp_raw>
      break;
 8015fb6:	e006      	b.n	8015fc6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015fb8:	f107 030c 	add.w	r3, r7, #12
 8015fbc:	4619      	mov	r1, r3
 8015fbe:	6838      	ldr	r0, [r7, #0]
 8015fc0:	f7fe f9fe 	bl	80143c0 <dhcp_arp_reply>
      break;
 8015fc4:	e000      	b.n	8015fc8 <etharp_input+0x104>
      break;
 8015fc6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7f6 fc61 	bl	800c890 <pbuf_free>
}
 8015fce:	3718      	adds	r7, #24
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8015fd4:	0801c794 	.word	0x0801c794
 8015fd8:	0801c8e4 	.word	0x0801c8e4
 8015fdc:	0801c80c 	.word	0x0801c80c

08015fe0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b086      	sub	sp, #24
 8015fe4:	af02      	add	r7, sp, #8
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	4613      	mov	r3, r2
 8015fec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015fee:	79fa      	ldrb	r2, [r7, #7]
 8015ff0:	4944      	ldr	r1, [pc, #272]	; (8016104 <etharp_output_to_arp_index+0x124>)
 8015ff2:	4613      	mov	r3, r2
 8015ff4:	005b      	lsls	r3, r3, #1
 8015ff6:	4413      	add	r3, r2
 8015ff8:	00db      	lsls	r3, r3, #3
 8015ffa:	440b      	add	r3, r1
 8015ffc:	3314      	adds	r3, #20
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	2b01      	cmp	r3, #1
 8016002:	d806      	bhi.n	8016012 <etharp_output_to_arp_index+0x32>
 8016004:	4b40      	ldr	r3, [pc, #256]	; (8016108 <etharp_output_to_arp_index+0x128>)
 8016006:	f240 22ef 	movw	r2, #751	; 0x2ef
 801600a:	4940      	ldr	r1, [pc, #256]	; (801610c <etharp_output_to_arp_index+0x12c>)
 801600c:	4840      	ldr	r0, [pc, #256]	; (8016110 <etharp_output_to_arp_index+0x130>)
 801600e:	f002 f955 	bl	80182bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016012:	79fa      	ldrb	r2, [r7, #7]
 8016014:	493b      	ldr	r1, [pc, #236]	; (8016104 <etharp_output_to_arp_index+0x124>)
 8016016:	4613      	mov	r3, r2
 8016018:	005b      	lsls	r3, r3, #1
 801601a:	4413      	add	r3, r2
 801601c:	00db      	lsls	r3, r3, #3
 801601e:	440b      	add	r3, r1
 8016020:	3314      	adds	r3, #20
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	2b02      	cmp	r3, #2
 8016026:	d153      	bne.n	80160d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016028:	79fa      	ldrb	r2, [r7, #7]
 801602a:	4936      	ldr	r1, [pc, #216]	; (8016104 <etharp_output_to_arp_index+0x124>)
 801602c:	4613      	mov	r3, r2
 801602e:	005b      	lsls	r3, r3, #1
 8016030:	4413      	add	r3, r2
 8016032:	00db      	lsls	r3, r3, #3
 8016034:	440b      	add	r3, r1
 8016036:	3312      	adds	r3, #18
 8016038:	881b      	ldrh	r3, [r3, #0]
 801603a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801603e:	d919      	bls.n	8016074 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016040:	79fa      	ldrb	r2, [r7, #7]
 8016042:	4613      	mov	r3, r2
 8016044:	005b      	lsls	r3, r3, #1
 8016046:	4413      	add	r3, r2
 8016048:	00db      	lsls	r3, r3, #3
 801604a:	4a2e      	ldr	r2, [pc, #184]	; (8016104 <etharp_output_to_arp_index+0x124>)
 801604c:	4413      	add	r3, r2
 801604e:	3304      	adds	r3, #4
 8016050:	4619      	mov	r1, r3
 8016052:	68f8      	ldr	r0, [r7, #12]
 8016054:	f000 fb4c 	bl	80166f0 <etharp_request>
 8016058:	4603      	mov	r3, r0
 801605a:	2b00      	cmp	r3, #0
 801605c:	d138      	bne.n	80160d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801605e:	79fa      	ldrb	r2, [r7, #7]
 8016060:	4928      	ldr	r1, [pc, #160]	; (8016104 <etharp_output_to_arp_index+0x124>)
 8016062:	4613      	mov	r3, r2
 8016064:	005b      	lsls	r3, r3, #1
 8016066:	4413      	add	r3, r2
 8016068:	00db      	lsls	r3, r3, #3
 801606a:	440b      	add	r3, r1
 801606c:	3314      	adds	r3, #20
 801606e:	2203      	movs	r2, #3
 8016070:	701a      	strb	r2, [r3, #0]
 8016072:	e02d      	b.n	80160d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016074:	79fa      	ldrb	r2, [r7, #7]
 8016076:	4923      	ldr	r1, [pc, #140]	; (8016104 <etharp_output_to_arp_index+0x124>)
 8016078:	4613      	mov	r3, r2
 801607a:	005b      	lsls	r3, r3, #1
 801607c:	4413      	add	r3, r2
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	440b      	add	r3, r1
 8016082:	3312      	adds	r3, #18
 8016084:	881b      	ldrh	r3, [r3, #0]
 8016086:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801608a:	d321      	bcc.n	80160d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801608c:	79fa      	ldrb	r2, [r7, #7]
 801608e:	4613      	mov	r3, r2
 8016090:	005b      	lsls	r3, r3, #1
 8016092:	4413      	add	r3, r2
 8016094:	00db      	lsls	r3, r3, #3
 8016096:	4a1b      	ldr	r2, [pc, #108]	; (8016104 <etharp_output_to_arp_index+0x124>)
 8016098:	4413      	add	r3, r2
 801609a:	1d19      	adds	r1, r3, #4
 801609c:	79fa      	ldrb	r2, [r7, #7]
 801609e:	4613      	mov	r3, r2
 80160a0:	005b      	lsls	r3, r3, #1
 80160a2:	4413      	add	r3, r2
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	3308      	adds	r3, #8
 80160a8:	4a16      	ldr	r2, [pc, #88]	; (8016104 <etharp_output_to_arp_index+0x124>)
 80160aa:	4413      	add	r3, r2
 80160ac:	3304      	adds	r3, #4
 80160ae:	461a      	mov	r2, r3
 80160b0:	68f8      	ldr	r0, [r7, #12]
 80160b2:	f000 fafb 	bl	80166ac <etharp_request_dst>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d109      	bne.n	80160d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80160bc:	79fa      	ldrb	r2, [r7, #7]
 80160be:	4911      	ldr	r1, [pc, #68]	; (8016104 <etharp_output_to_arp_index+0x124>)
 80160c0:	4613      	mov	r3, r2
 80160c2:	005b      	lsls	r3, r3, #1
 80160c4:	4413      	add	r3, r2
 80160c6:	00db      	lsls	r3, r3, #3
 80160c8:	440b      	add	r3, r1
 80160ca:	3314      	adds	r3, #20
 80160cc:	2203      	movs	r2, #3
 80160ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80160d6:	79fa      	ldrb	r2, [r7, #7]
 80160d8:	4613      	mov	r3, r2
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	4413      	add	r3, r2
 80160de:	00db      	lsls	r3, r3, #3
 80160e0:	3308      	adds	r3, #8
 80160e2:	4a08      	ldr	r2, [pc, #32]	; (8016104 <etharp_output_to_arp_index+0x124>)
 80160e4:	4413      	add	r3, r2
 80160e6:	1d1a      	adds	r2, r3, #4
 80160e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	4613      	mov	r3, r2
 80160f0:	460a      	mov	r2, r1
 80160f2:	68b9      	ldr	r1, [r7, #8]
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	f001 fe51 	bl	8017d9c <ethernet_output>
 80160fa:	4603      	mov	r3, r0
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3710      	adds	r7, #16
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	20008ca4 	.word	0x20008ca4
 8016108:	0801c794 	.word	0x0801c794
 801610c:	0801c904 	.word	0x0801c904
 8016110:	0801c80c 	.word	0x0801c80c

08016114 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b08a      	sub	sp, #40	; 0x28
 8016118:	af02      	add	r7, sp, #8
 801611a:	60f8      	str	r0, [r7, #12]
 801611c:	60b9      	str	r1, [r7, #8]
 801611e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d106      	bne.n	8016138 <etharp_output+0x24>
 801612a:	4b73      	ldr	r3, [pc, #460]	; (80162f8 <etharp_output+0x1e4>)
 801612c:	f240 321e 	movw	r2, #798	; 0x31e
 8016130:	4972      	ldr	r1, [pc, #456]	; (80162fc <etharp_output+0x1e8>)
 8016132:	4873      	ldr	r0, [pc, #460]	; (8016300 <etharp_output+0x1ec>)
 8016134:	f002 f8c2 	bl	80182bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d106      	bne.n	801614c <etharp_output+0x38>
 801613e:	4b6e      	ldr	r3, [pc, #440]	; (80162f8 <etharp_output+0x1e4>)
 8016140:	f240 321f 	movw	r2, #799	; 0x31f
 8016144:	496f      	ldr	r1, [pc, #444]	; (8016304 <etharp_output+0x1f0>)
 8016146:	486e      	ldr	r0, [pc, #440]	; (8016300 <etharp_output+0x1ec>)
 8016148:	f002 f8b8 	bl	80182bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d106      	bne.n	8016160 <etharp_output+0x4c>
 8016152:	4b69      	ldr	r3, [pc, #420]	; (80162f8 <etharp_output+0x1e4>)
 8016154:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016158:	496b      	ldr	r1, [pc, #428]	; (8016308 <etharp_output+0x1f4>)
 801615a:	4869      	ldr	r0, [pc, #420]	; (8016300 <etharp_output+0x1ec>)
 801615c:	f002 f8ae 	bl	80182bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	68f9      	ldr	r1, [r7, #12]
 8016166:	4618      	mov	r0, r3
 8016168:	f000 ff14 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 801616c:	4603      	mov	r3, r0
 801616e:	2b00      	cmp	r3, #0
 8016170:	d002      	beq.n	8016178 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016172:	4b66      	ldr	r3, [pc, #408]	; (801630c <etharp_output+0x1f8>)
 8016174:	61fb      	str	r3, [r7, #28]
 8016176:	e0af      	b.n	80162d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016180:	2be0      	cmp	r3, #224	; 0xe0
 8016182:	d118      	bne.n	80161b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016184:	2301      	movs	r3, #1
 8016186:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016188:	2300      	movs	r3, #0
 801618a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801618c:	235e      	movs	r3, #94	; 0x5e
 801618e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	3301      	adds	r3, #1
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801619a:	b2db      	uxtb	r3, r3
 801619c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	3302      	adds	r3, #2
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	3303      	adds	r3, #3
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80161ae:	f107 0310 	add.w	r3, r7, #16
 80161b2:	61fb      	str	r3, [r7, #28]
 80161b4:	e090      	b.n	80162d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	3304      	adds	r3, #4
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	405a      	eors	r2, r3
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	3308      	adds	r3, #8
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	4013      	ands	r3, r2
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d012      	beq.n	80161f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80161d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80161d8:	4293      	cmp	r3, r2
 80161da:	d00b      	beq.n	80161f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	330c      	adds	r3, #12
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d003      	beq.n	80161ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	330c      	adds	r3, #12
 80161ea:	61bb      	str	r3, [r7, #24]
 80161ec:	e002      	b.n	80161f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80161ee:	f06f 0303 	mvn.w	r3, #3
 80161f2:	e07d      	b.n	80162f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80161f4:	4b46      	ldr	r3, [pc, #280]	; (8016310 <etharp_output+0x1fc>)
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	4619      	mov	r1, r3
 80161fa:	4a46      	ldr	r2, [pc, #280]	; (8016314 <etharp_output+0x200>)
 80161fc:	460b      	mov	r3, r1
 80161fe:	005b      	lsls	r3, r3, #1
 8016200:	440b      	add	r3, r1
 8016202:	00db      	lsls	r3, r3, #3
 8016204:	4413      	add	r3, r2
 8016206:	3314      	adds	r3, #20
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	2b01      	cmp	r3, #1
 801620c:	d925      	bls.n	801625a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801620e:	4b40      	ldr	r3, [pc, #256]	; (8016310 <etharp_output+0x1fc>)
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	4619      	mov	r1, r3
 8016214:	4a3f      	ldr	r2, [pc, #252]	; (8016314 <etharp_output+0x200>)
 8016216:	460b      	mov	r3, r1
 8016218:	005b      	lsls	r3, r3, #1
 801621a:	440b      	add	r3, r1
 801621c:	00db      	lsls	r3, r3, #3
 801621e:	4413      	add	r3, r2
 8016220:	3308      	adds	r3, #8
 8016222:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016224:	68fa      	ldr	r2, [r7, #12]
 8016226:	429a      	cmp	r2, r3
 8016228:	d117      	bne.n	801625a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801622a:	69bb      	ldr	r3, [r7, #24]
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	4b38      	ldr	r3, [pc, #224]	; (8016310 <etharp_output+0x1fc>)
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	4618      	mov	r0, r3
 8016234:	4937      	ldr	r1, [pc, #220]	; (8016314 <etharp_output+0x200>)
 8016236:	4603      	mov	r3, r0
 8016238:	005b      	lsls	r3, r3, #1
 801623a:	4403      	add	r3, r0
 801623c:	00db      	lsls	r3, r3, #3
 801623e:	440b      	add	r3, r1
 8016240:	3304      	adds	r3, #4
 8016242:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016244:	429a      	cmp	r2, r3
 8016246:	d108      	bne.n	801625a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016248:	4b31      	ldr	r3, [pc, #196]	; (8016310 <etharp_output+0x1fc>)
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	461a      	mov	r2, r3
 801624e:	68b9      	ldr	r1, [r7, #8]
 8016250:	68f8      	ldr	r0, [r7, #12]
 8016252:	f7ff fec5 	bl	8015fe0 <etharp_output_to_arp_index>
 8016256:	4603      	mov	r3, r0
 8016258:	e04a      	b.n	80162f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801625a:	2300      	movs	r3, #0
 801625c:	75fb      	strb	r3, [r7, #23]
 801625e:	e031      	b.n	80162c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016260:	7dfa      	ldrb	r2, [r7, #23]
 8016262:	492c      	ldr	r1, [pc, #176]	; (8016314 <etharp_output+0x200>)
 8016264:	4613      	mov	r3, r2
 8016266:	005b      	lsls	r3, r3, #1
 8016268:	4413      	add	r3, r2
 801626a:	00db      	lsls	r3, r3, #3
 801626c:	440b      	add	r3, r1
 801626e:	3314      	adds	r3, #20
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	2b01      	cmp	r3, #1
 8016274:	d923      	bls.n	80162be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016276:	7dfa      	ldrb	r2, [r7, #23]
 8016278:	4926      	ldr	r1, [pc, #152]	; (8016314 <etharp_output+0x200>)
 801627a:	4613      	mov	r3, r2
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	4413      	add	r3, r2
 8016280:	00db      	lsls	r3, r3, #3
 8016282:	440b      	add	r3, r1
 8016284:	3308      	adds	r3, #8
 8016286:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016288:	68fa      	ldr	r2, [r7, #12]
 801628a:	429a      	cmp	r2, r3
 801628c:	d117      	bne.n	80162be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	6819      	ldr	r1, [r3, #0]
 8016292:	7dfa      	ldrb	r2, [r7, #23]
 8016294:	481f      	ldr	r0, [pc, #124]	; (8016314 <etharp_output+0x200>)
 8016296:	4613      	mov	r3, r2
 8016298:	005b      	lsls	r3, r3, #1
 801629a:	4413      	add	r3, r2
 801629c:	00db      	lsls	r3, r3, #3
 801629e:	4403      	add	r3, r0
 80162a0:	3304      	adds	r3, #4
 80162a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80162a4:	4299      	cmp	r1, r3
 80162a6:	d10a      	bne.n	80162be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80162a8:	4a19      	ldr	r2, [pc, #100]	; (8016310 <etharp_output+0x1fc>)
 80162aa:	7dfb      	ldrb	r3, [r7, #23]
 80162ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80162ae:	7dfb      	ldrb	r3, [r7, #23]
 80162b0:	461a      	mov	r2, r3
 80162b2:	68b9      	ldr	r1, [r7, #8]
 80162b4:	68f8      	ldr	r0, [r7, #12]
 80162b6:	f7ff fe93 	bl	8015fe0 <etharp_output_to_arp_index>
 80162ba:	4603      	mov	r3, r0
 80162bc:	e018      	b.n	80162f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80162be:	7dfb      	ldrb	r3, [r7, #23]
 80162c0:	3301      	adds	r3, #1
 80162c2:	75fb      	strb	r3, [r7, #23]
 80162c4:	7dfb      	ldrb	r3, [r7, #23]
 80162c6:	2b09      	cmp	r3, #9
 80162c8:	d9ca      	bls.n	8016260 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80162ca:	68ba      	ldr	r2, [r7, #8]
 80162cc:	69b9      	ldr	r1, [r7, #24]
 80162ce:	68f8      	ldr	r0, [r7, #12]
 80162d0:	f000 f822 	bl	8016318 <etharp_query>
 80162d4:	4603      	mov	r3, r0
 80162d6:	e00b      	b.n	80162f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80162de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80162e2:	9300      	str	r3, [sp, #0]
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	68b9      	ldr	r1, [r7, #8]
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f001 fd57 	bl	8017d9c <ethernet_output>
 80162ee:	4603      	mov	r3, r0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3720      	adds	r7, #32
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	0801c794 	.word	0x0801c794
 80162fc:	0801c8e4 	.word	0x0801c8e4
 8016300:	0801c80c 	.word	0x0801c80c
 8016304:	0801c934 	.word	0x0801c934
 8016308:	0801c8d4 	.word	0x0801c8d4
 801630c:	08028370 	.word	0x08028370
 8016310:	20008d94 	.word	0x20008d94
 8016314:	20008ca4 	.word	0x20008ca4

08016318 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b08c      	sub	sp, #48	; 0x30
 801631c:	af02      	add	r7, sp, #8
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	3326      	adds	r3, #38	; 0x26
 8016328:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801632a:	23ff      	movs	r3, #255	; 0xff
 801632c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016330:	2300      	movs	r3, #0
 8016332:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	68f9      	ldr	r1, [r7, #12]
 801633a:	4618      	mov	r0, r3
 801633c:	f000 fe2a 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 8016340:	4603      	mov	r3, r0
 8016342:	2b00      	cmp	r3, #0
 8016344:	d10c      	bne.n	8016360 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016346:	68bb      	ldr	r3, [r7, #8]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801634e:	2be0      	cmp	r3, #224	; 0xe0
 8016350:	d006      	beq.n	8016360 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d003      	beq.n	8016360 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d102      	bne.n	8016366 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016360:	f06f 030f 	mvn.w	r3, #15
 8016364:	e102      	b.n	801656c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016366:	68fa      	ldr	r2, [r7, #12]
 8016368:	2101      	movs	r1, #1
 801636a:	68b8      	ldr	r0, [r7, #8]
 801636c:	f7ff fb5c 	bl	8015a28 <etharp_find_entry>
 8016370:	4603      	mov	r3, r0
 8016372:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016378:	2b00      	cmp	r3, #0
 801637a:	da02      	bge.n	8016382 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801637c:	8a7b      	ldrh	r3, [r7, #18]
 801637e:	b25b      	sxtb	r3, r3
 8016380:	e0f4      	b.n	801656c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016382:	8a7b      	ldrh	r3, [r7, #18]
 8016384:	2b7e      	cmp	r3, #126	; 0x7e
 8016386:	d906      	bls.n	8016396 <etharp_query+0x7e>
 8016388:	4b7a      	ldr	r3, [pc, #488]	; (8016574 <etharp_query+0x25c>)
 801638a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801638e:	497a      	ldr	r1, [pc, #488]	; (8016578 <etharp_query+0x260>)
 8016390:	487a      	ldr	r0, [pc, #488]	; (801657c <etharp_query+0x264>)
 8016392:	f001 ff93 	bl	80182bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016396:	8a7b      	ldrh	r3, [r7, #18]
 8016398:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801639a:	7c7a      	ldrb	r2, [r7, #17]
 801639c:	4978      	ldr	r1, [pc, #480]	; (8016580 <etharp_query+0x268>)
 801639e:	4613      	mov	r3, r2
 80163a0:	005b      	lsls	r3, r3, #1
 80163a2:	4413      	add	r3, r2
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	440b      	add	r3, r1
 80163a8:	3314      	adds	r3, #20
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d115      	bne.n	80163dc <etharp_query+0xc4>
    is_new_entry = 1;
 80163b0:	2301      	movs	r3, #1
 80163b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80163b4:	7c7a      	ldrb	r2, [r7, #17]
 80163b6:	4972      	ldr	r1, [pc, #456]	; (8016580 <etharp_query+0x268>)
 80163b8:	4613      	mov	r3, r2
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	4413      	add	r3, r2
 80163be:	00db      	lsls	r3, r3, #3
 80163c0:	440b      	add	r3, r1
 80163c2:	3314      	adds	r3, #20
 80163c4:	2201      	movs	r2, #1
 80163c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80163c8:	7c7a      	ldrb	r2, [r7, #17]
 80163ca:	496d      	ldr	r1, [pc, #436]	; (8016580 <etharp_query+0x268>)
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	3308      	adds	r3, #8
 80163d8:	68fa      	ldr	r2, [r7, #12]
 80163da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80163dc:	7c7a      	ldrb	r2, [r7, #17]
 80163de:	4968      	ldr	r1, [pc, #416]	; (8016580 <etharp_query+0x268>)
 80163e0:	4613      	mov	r3, r2
 80163e2:	005b      	lsls	r3, r3, #1
 80163e4:	4413      	add	r3, r2
 80163e6:	00db      	lsls	r3, r3, #3
 80163e8:	440b      	add	r3, r1
 80163ea:	3314      	adds	r3, #20
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d011      	beq.n	8016416 <etharp_query+0xfe>
 80163f2:	7c7a      	ldrb	r2, [r7, #17]
 80163f4:	4962      	ldr	r1, [pc, #392]	; (8016580 <etharp_query+0x268>)
 80163f6:	4613      	mov	r3, r2
 80163f8:	005b      	lsls	r3, r3, #1
 80163fa:	4413      	add	r3, r2
 80163fc:	00db      	lsls	r3, r3, #3
 80163fe:	440b      	add	r3, r1
 8016400:	3314      	adds	r3, #20
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	2b01      	cmp	r3, #1
 8016406:	d806      	bhi.n	8016416 <etharp_query+0xfe>
 8016408:	4b5a      	ldr	r3, [pc, #360]	; (8016574 <etharp_query+0x25c>)
 801640a:	f240 32cf 	movw	r2, #975	; 0x3cf
 801640e:	495d      	ldr	r1, [pc, #372]	; (8016584 <etharp_query+0x26c>)
 8016410:	485a      	ldr	r0, [pc, #360]	; (801657c <etharp_query+0x264>)
 8016412:	f001 ff53 	bl	80182bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016416:	6a3b      	ldr	r3, [r7, #32]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d102      	bne.n	8016422 <etharp_query+0x10a>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d10c      	bne.n	801643c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016422:	68b9      	ldr	r1, [r7, #8]
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f000 f963 	bl	80166f0 <etharp_request>
 801642a:	4603      	mov	r3, r0
 801642c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d102      	bne.n	801643c <etharp_query+0x124>
      return result;
 8016436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801643a:	e097      	b.n	801656c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d106      	bne.n	8016450 <etharp_query+0x138>
 8016442:	4b4c      	ldr	r3, [pc, #304]	; (8016574 <etharp_query+0x25c>)
 8016444:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016448:	494f      	ldr	r1, [pc, #316]	; (8016588 <etharp_query+0x270>)
 801644a:	484c      	ldr	r0, [pc, #304]	; (801657c <etharp_query+0x264>)
 801644c:	f001 ff36 	bl	80182bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016450:	7c7a      	ldrb	r2, [r7, #17]
 8016452:	494b      	ldr	r1, [pc, #300]	; (8016580 <etharp_query+0x268>)
 8016454:	4613      	mov	r3, r2
 8016456:	005b      	lsls	r3, r3, #1
 8016458:	4413      	add	r3, r2
 801645a:	00db      	lsls	r3, r3, #3
 801645c:	440b      	add	r3, r1
 801645e:	3314      	adds	r3, #20
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	2b01      	cmp	r3, #1
 8016464:	d918      	bls.n	8016498 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016466:	4a49      	ldr	r2, [pc, #292]	; (801658c <etharp_query+0x274>)
 8016468:	7c7b      	ldrb	r3, [r7, #17]
 801646a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801646c:	7c7a      	ldrb	r2, [r7, #17]
 801646e:	4613      	mov	r3, r2
 8016470:	005b      	lsls	r3, r3, #1
 8016472:	4413      	add	r3, r2
 8016474:	00db      	lsls	r3, r3, #3
 8016476:	3308      	adds	r3, #8
 8016478:	4a41      	ldr	r2, [pc, #260]	; (8016580 <etharp_query+0x268>)
 801647a:	4413      	add	r3, r2
 801647c:	1d1a      	adds	r2, r3, #4
 801647e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	4613      	mov	r3, r2
 8016486:	697a      	ldr	r2, [r7, #20]
 8016488:	6879      	ldr	r1, [r7, #4]
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f001 fc86 	bl	8017d9c <ethernet_output>
 8016490:	4603      	mov	r3, r0
 8016492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016496:	e067      	b.n	8016568 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016498:	7c7a      	ldrb	r2, [r7, #17]
 801649a:	4939      	ldr	r1, [pc, #228]	; (8016580 <etharp_query+0x268>)
 801649c:	4613      	mov	r3, r2
 801649e:	005b      	lsls	r3, r3, #1
 80164a0:	4413      	add	r3, r2
 80164a2:	00db      	lsls	r3, r3, #3
 80164a4:	440b      	add	r3, r1
 80164a6:	3314      	adds	r3, #20
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	2b01      	cmp	r3, #1
 80164ac:	d15c      	bne.n	8016568 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80164ae:	2300      	movs	r3, #0
 80164b0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80164b6:	e01c      	b.n	80164f2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80164b8:	69fb      	ldr	r3, [r7, #28]
 80164ba:	895a      	ldrh	r2, [r3, #10]
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	891b      	ldrh	r3, [r3, #8]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d10a      	bne.n	80164da <etharp_query+0x1c2>
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d006      	beq.n	80164da <etharp_query+0x1c2>
 80164cc:	4b29      	ldr	r3, [pc, #164]	; (8016574 <etharp_query+0x25c>)
 80164ce:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80164d2:	492f      	ldr	r1, [pc, #188]	; (8016590 <etharp_query+0x278>)
 80164d4:	4829      	ldr	r0, [pc, #164]	; (801657c <etharp_query+0x264>)
 80164d6:	f001 fef1 	bl	80182bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80164da:	69fb      	ldr	r3, [r7, #28]
 80164dc:	7b1b      	ldrb	r3, [r3, #12]
 80164de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d002      	beq.n	80164ec <etharp_query+0x1d4>
        copy_needed = 1;
 80164e6:	2301      	movs	r3, #1
 80164e8:	61bb      	str	r3, [r7, #24]
        break;
 80164ea:	e005      	b.n	80164f8 <etharp_query+0x1e0>
      }
      p = p->next;
 80164ec:	69fb      	ldr	r3, [r7, #28]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80164f2:	69fb      	ldr	r3, [r7, #28]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d1df      	bne.n	80164b8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80164f8:	69bb      	ldr	r3, [r7, #24]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d007      	beq.n	801650e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016504:	200e      	movs	r0, #14
 8016506:	f7f6 fc3b 	bl	800cd80 <pbuf_clone>
 801650a:	61f8      	str	r0, [r7, #28]
 801650c:	e004      	b.n	8016518 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016512:	69f8      	ldr	r0, [r7, #28]
 8016514:	f7f6 fa62 	bl	800c9dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016518:	69fb      	ldr	r3, [r7, #28]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d021      	beq.n	8016562 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801651e:	7c7a      	ldrb	r2, [r7, #17]
 8016520:	4917      	ldr	r1, [pc, #92]	; (8016580 <etharp_query+0x268>)
 8016522:	4613      	mov	r3, r2
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	4413      	add	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	440b      	add	r3, r1
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d00a      	beq.n	8016548 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016532:	7c7a      	ldrb	r2, [r7, #17]
 8016534:	4912      	ldr	r1, [pc, #72]	; (8016580 <etharp_query+0x268>)
 8016536:	4613      	mov	r3, r2
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	4413      	add	r3, r2
 801653c:	00db      	lsls	r3, r3, #3
 801653e:	440b      	add	r3, r1
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	4618      	mov	r0, r3
 8016544:	f7f6 f9a4 	bl	800c890 <pbuf_free>
      }
      arp_table[i].q = p;
 8016548:	7c7a      	ldrb	r2, [r7, #17]
 801654a:	490d      	ldr	r1, [pc, #52]	; (8016580 <etharp_query+0x268>)
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	440b      	add	r3, r1
 8016556:	69fa      	ldr	r2, [r7, #28]
 8016558:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801655a:	2300      	movs	r3, #0
 801655c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016560:	e002      	b.n	8016568 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016562:	23ff      	movs	r3, #255	; 0xff
 8016564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801656c:	4618      	mov	r0, r3
 801656e:	3728      	adds	r7, #40	; 0x28
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	0801c794 	.word	0x0801c794
 8016578:	0801c940 	.word	0x0801c940
 801657c:	0801c80c 	.word	0x0801c80c
 8016580:	20008ca4 	.word	0x20008ca4
 8016584:	0801c950 	.word	0x0801c950
 8016588:	0801c934 	.word	0x0801c934
 801658c:	20008d94 	.word	0x20008d94
 8016590:	0801c978 	.word	0x0801c978

08016594 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b08a      	sub	sp, #40	; 0x28
 8016598:	af02      	add	r7, sp, #8
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	60b9      	str	r1, [r7, #8]
 801659e:	607a      	str	r2, [r7, #4]
 80165a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80165a2:	2300      	movs	r3, #0
 80165a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d106      	bne.n	80165ba <etharp_raw+0x26>
 80165ac:	4b3a      	ldr	r3, [pc, #232]	; (8016698 <etharp_raw+0x104>)
 80165ae:	f240 4257 	movw	r2, #1111	; 0x457
 80165b2:	493a      	ldr	r1, [pc, #232]	; (801669c <etharp_raw+0x108>)
 80165b4:	483a      	ldr	r0, [pc, #232]	; (80166a0 <etharp_raw+0x10c>)
 80165b6:	f001 fe81 	bl	80182bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80165ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165be:	211c      	movs	r1, #28
 80165c0:	200e      	movs	r0, #14
 80165c2:	f7f5 fe85 	bl	800c2d0 <pbuf_alloc>
 80165c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d102      	bne.n	80165d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80165ce:	f04f 33ff 	mov.w	r3, #4294967295
 80165d2:	e05d      	b.n	8016690 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80165d4:	69bb      	ldr	r3, [r7, #24]
 80165d6:	895b      	ldrh	r3, [r3, #10]
 80165d8:	2b1b      	cmp	r3, #27
 80165da:	d806      	bhi.n	80165ea <etharp_raw+0x56>
 80165dc:	4b2e      	ldr	r3, [pc, #184]	; (8016698 <etharp_raw+0x104>)
 80165de:	f240 4263 	movw	r2, #1123	; 0x463
 80165e2:	4930      	ldr	r1, [pc, #192]	; (80166a4 <etharp_raw+0x110>)
 80165e4:	482e      	ldr	r0, [pc, #184]	; (80166a0 <etharp_raw+0x10c>)
 80165e6:	f001 fe69 	bl	80182bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80165ea:	69bb      	ldr	r3, [r7, #24]
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80165f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80165f2:	4618      	mov	r0, r3
 80165f4:	f7f4 fde0 	bl	800b1b8 <lwip_htons>
 80165f8:	4603      	mov	r3, r0
 80165fa:	461a      	mov	r2, r3
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016606:	2b06      	cmp	r3, #6
 8016608:	d006      	beq.n	8016618 <etharp_raw+0x84>
 801660a:	4b23      	ldr	r3, [pc, #140]	; (8016698 <etharp_raw+0x104>)
 801660c:	f240 426a 	movw	r2, #1130	; 0x46a
 8016610:	4925      	ldr	r1, [pc, #148]	; (80166a8 <etharp_raw+0x114>)
 8016612:	4823      	ldr	r0, [pc, #140]	; (80166a0 <etharp_raw+0x10c>)
 8016614:	f001 fe52 	bl	80182bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	3308      	adds	r3, #8
 801661c:	2206      	movs	r2, #6
 801661e:	6839      	ldr	r1, [r7, #0]
 8016620:	4618      	mov	r0, r3
 8016622:	f001 fe38 	bl	8018296 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016626:	697b      	ldr	r3, [r7, #20]
 8016628:	3312      	adds	r3, #18
 801662a:	2206      	movs	r2, #6
 801662c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801662e:	4618      	mov	r0, r3
 8016630:	f001 fe31 	bl	8018296 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	330e      	adds	r3, #14
 8016638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801663a:	6812      	ldr	r2, [r2, #0]
 801663c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	3318      	adds	r3, #24
 8016642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016644:	6812      	ldr	r2, [r2, #0]
 8016646:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	2200      	movs	r2, #0
 801664c:	701a      	strb	r2, [r3, #0]
 801664e:	2200      	movs	r2, #0
 8016650:	f042 0201 	orr.w	r2, r2, #1
 8016654:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016656:	697b      	ldr	r3, [r7, #20]
 8016658:	2200      	movs	r2, #0
 801665a:	f042 0208 	orr.w	r2, r2, #8
 801665e:	709a      	strb	r2, [r3, #2]
 8016660:	2200      	movs	r2, #0
 8016662:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	2206      	movs	r2, #6
 8016668:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	2204      	movs	r2, #4
 801666e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016670:	f640 0306 	movw	r3, #2054	; 0x806
 8016674:	9300      	str	r3, [sp, #0]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	69b9      	ldr	r1, [r7, #24]
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	f001 fb8d 	bl	8017d9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016682:	69b8      	ldr	r0, [r7, #24]
 8016684:	f7f6 f904 	bl	800c890 <pbuf_free>
  p = NULL;
 8016688:	2300      	movs	r3, #0
 801668a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801668c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016690:	4618      	mov	r0, r3
 8016692:	3720      	adds	r7, #32
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}
 8016698:	0801c794 	.word	0x0801c794
 801669c:	0801c8e4 	.word	0x0801c8e4
 80166a0:	0801c80c 	.word	0x0801c80c
 80166a4:	0801c994 	.word	0x0801c994
 80166a8:	0801c9c8 	.word	0x0801c9c8

080166ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b088      	sub	sp, #32
 80166b0:	af04      	add	r7, sp, #16
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	60b9      	str	r1, [r7, #8]
 80166b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80166c8:	2201      	movs	r2, #1
 80166ca:	9203      	str	r2, [sp, #12]
 80166cc:	68ba      	ldr	r2, [r7, #8]
 80166ce:	9202      	str	r2, [sp, #8]
 80166d0:	4a06      	ldr	r2, [pc, #24]	; (80166ec <etharp_request_dst+0x40>)
 80166d2:	9201      	str	r2, [sp, #4]
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	4603      	mov	r3, r0
 80166d8:	687a      	ldr	r2, [r7, #4]
 80166da:	68f8      	ldr	r0, [r7, #12]
 80166dc:	f7ff ff5a 	bl	8016594 <etharp_raw>
 80166e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	3710      	adds	r7, #16
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	08028378 	.word	0x08028378

080166f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80166fa:	4a05      	ldr	r2, [pc, #20]	; (8016710 <etharp_request+0x20>)
 80166fc:	6839      	ldr	r1, [r7, #0]
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f7ff ffd4 	bl	80166ac <etharp_request_dst>
 8016704:	4603      	mov	r3, r0
}
 8016706:	4618      	mov	r0, r3
 8016708:	3708      	adds	r7, #8
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop
 8016710:	08028370 	.word	0x08028370

08016714 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b08e      	sub	sp, #56	; 0x38
 8016718:	af04      	add	r7, sp, #16
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801671e:	4b79      	ldr	r3, [pc, #484]	; (8016904 <icmp_input+0x1f0>)
 8016720:	689b      	ldr	r3, [r3, #8]
 8016722:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	f003 030f 	and.w	r3, r3, #15
 801672c:	b2db      	uxtb	r3, r3
 801672e:	009b      	lsls	r3, r3, #2
 8016730:	b2db      	uxtb	r3, r3
 8016732:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016736:	2b13      	cmp	r3, #19
 8016738:	f240 80cd 	bls.w	80168d6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	895b      	ldrh	r3, [r3, #10]
 8016740:	2b03      	cmp	r3, #3
 8016742:	f240 80ca 	bls.w	80168da <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016750:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016754:	2b00      	cmp	r3, #0
 8016756:	f000 80b7 	beq.w	80168c8 <icmp_input+0x1b4>
 801675a:	2b08      	cmp	r3, #8
 801675c:	f040 80b7 	bne.w	80168ce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016760:	4b69      	ldr	r3, [pc, #420]	; (8016908 <icmp_input+0x1f4>)
 8016762:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016764:	4b67      	ldr	r3, [pc, #412]	; (8016904 <icmp_input+0x1f0>)
 8016766:	695b      	ldr	r3, [r3, #20]
 8016768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801676c:	2be0      	cmp	r3, #224	; 0xe0
 801676e:	f000 80bb 	beq.w	80168e8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016772:	4b64      	ldr	r3, [pc, #400]	; (8016904 <icmp_input+0x1f0>)
 8016774:	695a      	ldr	r2, [r3, #20]
 8016776:	4b63      	ldr	r3, [pc, #396]	; (8016904 <icmp_input+0x1f0>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4619      	mov	r1, r3
 801677c:	4610      	mov	r0, r2
 801677e:	f000 fc09 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 8016782:	4603      	mov	r3, r0
 8016784:	2b00      	cmp	r3, #0
 8016786:	f040 80b1 	bne.w	80168ec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	891b      	ldrh	r3, [r3, #8]
 801678e:	2b07      	cmp	r3, #7
 8016790:	f240 80a5 	bls.w	80168de <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016796:	330e      	adds	r3, #14
 8016798:	4619      	mov	r1, r3
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7f5 ffe2 	bl	800c764 <pbuf_add_header>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d04b      	beq.n	801683e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	891a      	ldrh	r2, [r3, #8]
 80167aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167ac:	4413      	add	r3, r2
 80167ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	891b      	ldrh	r3, [r3, #8]
 80167b4:	8b7a      	ldrh	r2, [r7, #26]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	f0c0 809a 	bcc.w	80168f0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80167bc:	8b7b      	ldrh	r3, [r7, #26]
 80167be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167c2:	4619      	mov	r1, r3
 80167c4:	200e      	movs	r0, #14
 80167c6:	f7f5 fd83 	bl	800c2d0 <pbuf_alloc>
 80167ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	f000 8090 	beq.w	80168f4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	895b      	ldrh	r3, [r3, #10]
 80167d8:	461a      	mov	r2, r3
 80167da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167dc:	3308      	adds	r3, #8
 80167de:	429a      	cmp	r2, r3
 80167e0:	d203      	bcs.n	80167ea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80167e2:	6978      	ldr	r0, [r7, #20]
 80167e4:	f7f6 f854 	bl	800c890 <pbuf_free>
          goto icmperr;
 80167e8:	e085      	b.n	80168f6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	685b      	ldr	r3, [r3, #4]
 80167ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80167f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167f2:	4618      	mov	r0, r3
 80167f4:	f001 fd4f 	bl	8018296 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80167f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80167fa:	4619      	mov	r1, r3
 80167fc:	6978      	ldr	r0, [r7, #20]
 80167fe:	f7f5 ffc1 	bl	800c784 <pbuf_remove_header>
 8016802:	4603      	mov	r3, r0
 8016804:	2b00      	cmp	r3, #0
 8016806:	d009      	beq.n	801681c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016808:	4b40      	ldr	r3, [pc, #256]	; (801690c <icmp_input+0x1f8>)
 801680a:	22b6      	movs	r2, #182	; 0xb6
 801680c:	4940      	ldr	r1, [pc, #256]	; (8016910 <icmp_input+0x1fc>)
 801680e:	4841      	ldr	r0, [pc, #260]	; (8016914 <icmp_input+0x200>)
 8016810:	f001 fd54 	bl	80182bc <iprintf>
          pbuf_free(r);
 8016814:	6978      	ldr	r0, [r7, #20]
 8016816:	f7f6 f83b 	bl	800c890 <pbuf_free>
          goto icmperr;
 801681a:	e06c      	b.n	80168f6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801681c:	6879      	ldr	r1, [r7, #4]
 801681e:	6978      	ldr	r0, [r7, #20]
 8016820:	f7f6 f96a 	bl	800caf8 <pbuf_copy>
 8016824:	4603      	mov	r3, r0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d003      	beq.n	8016832 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801682a:	6978      	ldr	r0, [r7, #20]
 801682c:	f7f6 f830 	bl	800c890 <pbuf_free>
          goto icmperr;
 8016830:	e061      	b.n	80168f6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f7f6 f82c 	bl	800c890 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	607b      	str	r3, [r7, #4]
 801683c:	e00f      	b.n	801685e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801683e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016840:	330e      	adds	r3, #14
 8016842:	4619      	mov	r1, r3
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f7f5 ff9d 	bl	800c784 <pbuf_remove_header>
 801684a:	4603      	mov	r3, r0
 801684c:	2b00      	cmp	r3, #0
 801684e:	d006      	beq.n	801685e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016850:	4b2e      	ldr	r3, [pc, #184]	; (801690c <icmp_input+0x1f8>)
 8016852:	22c7      	movs	r2, #199	; 0xc7
 8016854:	4930      	ldr	r1, [pc, #192]	; (8016918 <icmp_input+0x204>)
 8016856:	482f      	ldr	r0, [pc, #188]	; (8016914 <icmp_input+0x200>)
 8016858:	f001 fd30 	bl	80182bc <iprintf>
          goto icmperr;
 801685c:	e04b      	b.n	80168f6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016866:	4619      	mov	r1, r3
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7f5 ff7b 	bl	800c764 <pbuf_add_header>
 801686e:	4603      	mov	r3, r0
 8016870:	2b00      	cmp	r3, #0
 8016872:	d12b      	bne.n	80168cc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801687a:	69fb      	ldr	r3, [r7, #28]
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016882:	4b20      	ldr	r3, [pc, #128]	; (8016904 <icmp_input+0x1f0>)
 8016884:	691a      	ldr	r2, [r3, #16]
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801688a:	693b      	ldr	r3, [r7, #16]
 801688c:	2200      	movs	r2, #0
 801688e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	2200      	movs	r2, #0
 8016894:	709a      	strb	r2, [r3, #2]
 8016896:	2200      	movs	r2, #0
 8016898:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	22ff      	movs	r2, #255	; 0xff
 801689e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	2200      	movs	r2, #0
 80168a4:	729a      	strb	r2, [r3, #10]
 80168a6:	2200      	movs	r2, #0
 80168a8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	9302      	str	r3, [sp, #8]
 80168ae:	2301      	movs	r3, #1
 80168b0:	9301      	str	r3, [sp, #4]
 80168b2:	2300      	movs	r3, #0
 80168b4:	9300      	str	r3, [sp, #0]
 80168b6:	23ff      	movs	r3, #255	; 0xff
 80168b8:	2200      	movs	r2, #0
 80168ba:	69f9      	ldr	r1, [r7, #28]
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f000 fa91 	bl	8016de4 <ip4_output_if>
 80168c2:	4603      	mov	r3, r0
 80168c4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80168c6:	e001      	b.n	80168cc <icmp_input+0x1b8>
      break;
 80168c8:	bf00      	nop
 80168ca:	e000      	b.n	80168ce <icmp_input+0x1ba>
      break;
 80168cc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7f5 ffde 	bl	800c890 <pbuf_free>
  return;
 80168d4:	e013      	b.n	80168fe <icmp_input+0x1ea>
    goto lenerr;
 80168d6:	bf00      	nop
 80168d8:	e002      	b.n	80168e0 <icmp_input+0x1cc>
    goto lenerr;
 80168da:	bf00      	nop
 80168dc:	e000      	b.n	80168e0 <icmp_input+0x1cc>
        goto lenerr;
 80168de:	bf00      	nop
lenerr:
  pbuf_free(p);
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f7f5 ffd5 	bl	800c890 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80168e6:	e00a      	b.n	80168fe <icmp_input+0x1ea>
        goto icmperr;
 80168e8:	bf00      	nop
 80168ea:	e004      	b.n	80168f6 <icmp_input+0x1e2>
        goto icmperr;
 80168ec:	bf00      	nop
 80168ee:	e002      	b.n	80168f6 <icmp_input+0x1e2>
          goto icmperr;
 80168f0:	bf00      	nop
 80168f2:	e000      	b.n	80168f6 <icmp_input+0x1e2>
          goto icmperr;
 80168f4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f7f5 ffca 	bl	800c890 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80168fc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80168fe:	3728      	adds	r7, #40	; 0x28
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}
 8016904:	2000c3a4 	.word	0x2000c3a4
 8016908:	2000c3b8 	.word	0x2000c3b8
 801690c:	0801ca0c 	.word	0x0801ca0c
 8016910:	0801ca44 	.word	0x0801ca44
 8016914:	0801ca7c 	.word	0x0801ca7c
 8016918:	0801caa4 	.word	0x0801caa4

0801691c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
 8016924:	460b      	mov	r3, r1
 8016926:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016928:	78fb      	ldrb	r3, [r7, #3]
 801692a:	461a      	mov	r2, r3
 801692c:	2103      	movs	r1, #3
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f000 f814 	bl	801695c <icmp_send_response>
}
 8016934:	bf00      	nop
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}

0801693c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	460b      	mov	r3, r1
 8016946:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016948:	78fb      	ldrb	r3, [r7, #3]
 801694a:	461a      	mov	r2, r3
 801694c:	210b      	movs	r1, #11
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f000 f804 	bl	801695c <icmp_send_response>
}
 8016954:	bf00      	nop
 8016956:	3708      	adds	r7, #8
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}

0801695c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b08c      	sub	sp, #48	; 0x30
 8016960:	af04      	add	r7, sp, #16
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	460b      	mov	r3, r1
 8016966:	70fb      	strb	r3, [r7, #3]
 8016968:	4613      	mov	r3, r2
 801696a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801696c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016970:	2124      	movs	r1, #36	; 0x24
 8016972:	2022      	movs	r0, #34	; 0x22
 8016974:	f7f5 fcac 	bl	800c2d0 <pbuf_alloc>
 8016978:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801697a:	69fb      	ldr	r3, [r7, #28]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d04c      	beq.n	8016a1a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016980:	69fb      	ldr	r3, [r7, #28]
 8016982:	895b      	ldrh	r3, [r3, #10]
 8016984:	2b23      	cmp	r3, #35	; 0x23
 8016986:	d806      	bhi.n	8016996 <icmp_send_response+0x3a>
 8016988:	4b26      	ldr	r3, [pc, #152]	; (8016a24 <icmp_send_response+0xc8>)
 801698a:	f240 1269 	movw	r2, #361	; 0x169
 801698e:	4926      	ldr	r1, [pc, #152]	; (8016a28 <icmp_send_response+0xcc>)
 8016990:	4826      	ldr	r0, [pc, #152]	; (8016a2c <icmp_send_response+0xd0>)
 8016992:	f001 fc93 	bl	80182bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801699c:	69fb      	ldr	r3, [r7, #28]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	78fa      	ldrb	r2, [r7, #3]
 80169a6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	78ba      	ldrb	r2, [r7, #2]
 80169ac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	2200      	movs	r2, #0
 80169b2:	711a      	strb	r2, [r3, #4]
 80169b4:	2200      	movs	r2, #0
 80169b6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	2200      	movs	r2, #0
 80169bc:	719a      	strb	r2, [r3, #6]
 80169be:	2200      	movs	r2, #0
 80169c0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	f103 0008 	add.w	r0, r3, #8
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	685b      	ldr	r3, [r3, #4]
 80169ce:	221c      	movs	r2, #28
 80169d0:	4619      	mov	r1, r3
 80169d2:	f001 fc60 	bl	8018296 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80169d6:	69bb      	ldr	r3, [r7, #24]
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80169dc:	f107 030c 	add.w	r3, r7, #12
 80169e0:	4618      	mov	r0, r3
 80169e2:	f000 f825 	bl	8016a30 <ip4_route>
 80169e6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d011      	beq.n	8016a12 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	2200      	movs	r2, #0
 80169f2:	709a      	strb	r2, [r3, #2]
 80169f4:	2200      	movs	r2, #0
 80169f6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80169f8:	f107 020c 	add.w	r2, r7, #12
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	9302      	str	r3, [sp, #8]
 8016a00:	2301      	movs	r3, #1
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	2300      	movs	r3, #0
 8016a06:	9300      	str	r3, [sp, #0]
 8016a08:	23ff      	movs	r3, #255	; 0xff
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	69f8      	ldr	r0, [r7, #28]
 8016a0e:	f000 f9e9 	bl	8016de4 <ip4_output_if>
  }
  pbuf_free(q);
 8016a12:	69f8      	ldr	r0, [r7, #28]
 8016a14:	f7f5 ff3c 	bl	800c890 <pbuf_free>
 8016a18:	e000      	b.n	8016a1c <icmp_send_response+0xc0>
    return;
 8016a1a:	bf00      	nop
}
 8016a1c:	3720      	adds	r7, #32
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	0801ca0c 	.word	0x0801ca0c
 8016a28:	0801cad8 	.word	0x0801cad8
 8016a2c:	0801ca7c 	.word	0x0801ca7c

08016a30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016a30:	b480      	push	{r7}
 8016a32:	b085      	sub	sp, #20
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016a38:	4b33      	ldr	r3, [pc, #204]	; (8016b08 <ip4_route+0xd8>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	60fb      	str	r3, [r7, #12]
 8016a3e:	e036      	b.n	8016aae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a46:	f003 0301 	and.w	r3, r3, #1
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d02b      	beq.n	8016aa8 <ip4_route+0x78>
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a56:	089b      	lsrs	r3, r3, #2
 8016a58:	f003 0301 	and.w	r3, r3, #1
 8016a5c:	b2db      	uxtb	r3, r3
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d022      	beq.n	8016aa8 <ip4_route+0x78>
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	3304      	adds	r3, #4
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d01d      	beq.n	8016aa8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	3304      	adds	r3, #4
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	405a      	eors	r2, r3
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	3308      	adds	r3, #8
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4013      	ands	r3, r2
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d101      	bne.n	8016a88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	e038      	b.n	8016afa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a8e:	f003 0302 	and.w	r3, r3, #2
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d108      	bne.n	8016aa8 <ip4_route+0x78>
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681a      	ldr	r2, [r3, #0]
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	330c      	adds	r3, #12
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	d101      	bne.n	8016aa8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	e028      	b.n	8016afa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	60fb      	str	r3, [r7, #12]
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d1c5      	bne.n	8016a40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016ab4:	4b15      	ldr	r3, [pc, #84]	; (8016b0c <ip4_route+0xdc>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d01a      	beq.n	8016af2 <ip4_route+0xc2>
 8016abc:	4b13      	ldr	r3, [pc, #76]	; (8016b0c <ip4_route+0xdc>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ac4:	f003 0301 	and.w	r3, r3, #1
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d012      	beq.n	8016af2 <ip4_route+0xc2>
 8016acc:	4b0f      	ldr	r3, [pc, #60]	; (8016b0c <ip4_route+0xdc>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ad4:	f003 0304 	and.w	r3, r3, #4
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00a      	beq.n	8016af2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016adc:	4b0b      	ldr	r3, [pc, #44]	; (8016b0c <ip4_route+0xdc>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	3304      	adds	r3, #4
 8016ae2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d004      	beq.n	8016af2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	b2db      	uxtb	r3, r3
 8016aee:	2b7f      	cmp	r3, #127	; 0x7f
 8016af0:	d101      	bne.n	8016af6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016af2:	2300      	movs	r3, #0
 8016af4:	e001      	b.n	8016afa <ip4_route+0xca>
  }

  return netif_default;
 8016af6:	4b05      	ldr	r3, [pc, #20]	; (8016b0c <ip4_route+0xdc>)
 8016af8:	681b      	ldr	r3, [r3, #0]
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3714      	adds	r7, #20
 8016afe:	46bd      	mov	sp, r7
 8016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	2000fac8 	.word	0x2000fac8
 8016b0c:	2000facc 	.word	0x2000facc

08016b10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016b1e:	f003 0301 	and.w	r3, r3, #1
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d016      	beq.n	8016b56 <ip4_input_accept+0x46>
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	3304      	adds	r3, #4
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d011      	beq.n	8016b56 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b32:	4b0b      	ldr	r3, [pc, #44]	; (8016b60 <ip4_input_accept+0x50>)
 8016b34:	695a      	ldr	r2, [r3, #20]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	3304      	adds	r3, #4
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d008      	beq.n	8016b52 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016b40:	4b07      	ldr	r3, [pc, #28]	; (8016b60 <ip4_input_accept+0x50>)
 8016b42:	695b      	ldr	r3, [r3, #20]
 8016b44:	6879      	ldr	r1, [r7, #4]
 8016b46:	4618      	mov	r0, r3
 8016b48:	f000 fa24 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 8016b4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d001      	beq.n	8016b56 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016b52:	2301      	movs	r3, #1
 8016b54:	e000      	b.n	8016b58 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}
 8016b60:	2000c3a4 	.word	0x2000c3a4

08016b64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b088      	sub	sp, #32
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
 8016b6c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016b6e:	2301      	movs	r3, #1
 8016b70:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	685b      	ldr	r3, [r3, #4]
 8016b76:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	091b      	lsrs	r3, r3, #4
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	2b04      	cmp	r3, #4
 8016b82:	d004      	beq.n	8016b8e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7f5 fe83 	bl	800c890 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	e121      	b.n	8016dd2 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	f003 030f 	and.w	r3, r3, #15
 8016b96:	b2db      	uxtb	r3, r3
 8016b98:	009b      	lsls	r3, r3, #2
 8016b9a:	b2db      	uxtb	r3, r3
 8016b9c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	885b      	ldrh	r3, [r3, #2]
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7f4 fb07 	bl	800b1b8 <lwip_htons>
 8016baa:	4603      	mov	r3, r0
 8016bac:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	891b      	ldrh	r3, [r3, #8]
 8016bb2:	8a3a      	ldrh	r2, [r7, #16]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d204      	bcs.n	8016bc2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016bb8:	8a3b      	ldrh	r3, [r7, #16]
 8016bba:	4619      	mov	r1, r3
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f7f5 fce1 	bl	800c584 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	895b      	ldrh	r3, [r3, #10]
 8016bc6:	8a7a      	ldrh	r2, [r7, #18]
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	d807      	bhi.n	8016bdc <ip4_input+0x78>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	891b      	ldrh	r3, [r3, #8]
 8016bd0:	8a3a      	ldrh	r2, [r7, #16]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d802      	bhi.n	8016bdc <ip4_input+0x78>
 8016bd6:	8a7b      	ldrh	r3, [r7, #18]
 8016bd8:	2b13      	cmp	r3, #19
 8016bda:	d804      	bhi.n	8016be6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7f5 fe57 	bl	800c890 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016be2:	2300      	movs	r3, #0
 8016be4:	e0f5      	b.n	8016dd2 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	691b      	ldr	r3, [r3, #16]
 8016bea:	4a7c      	ldr	r2, [pc, #496]	; (8016ddc <ip4_input+0x278>)
 8016bec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	68db      	ldr	r3, [r3, #12]
 8016bf2:	4a7a      	ldr	r2, [pc, #488]	; (8016ddc <ip4_input+0x278>)
 8016bf4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016bf6:	4b79      	ldr	r3, [pc, #484]	; (8016ddc <ip4_input+0x278>)
 8016bf8:	695b      	ldr	r3, [r3, #20]
 8016bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016bfe:	2be0      	cmp	r3, #224	; 0xe0
 8016c00:	d112      	bne.n	8016c28 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c08:	f003 0301 	and.w	r3, r3, #1
 8016c0c:	b2db      	uxtb	r3, r3
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d007      	beq.n	8016c22 <ip4_input+0xbe>
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	3304      	adds	r3, #4
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d002      	beq.n	8016c22 <ip4_input+0xbe>
      netif = inp;
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	61bb      	str	r3, [r7, #24]
 8016c20:	e02a      	b.n	8016c78 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016c22:	2300      	movs	r3, #0
 8016c24:	61bb      	str	r3, [r7, #24]
 8016c26:	e027      	b.n	8016c78 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016c28:	6838      	ldr	r0, [r7, #0]
 8016c2a:	f7ff ff71 	bl	8016b10 <ip4_input_accept>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d002      	beq.n	8016c3a <ip4_input+0xd6>
      netif = inp;
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	61bb      	str	r3, [r7, #24]
 8016c38:	e01e      	b.n	8016c78 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016c3e:	4b67      	ldr	r3, [pc, #412]	; (8016ddc <ip4_input+0x278>)
 8016c40:	695b      	ldr	r3, [r3, #20]
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	2b7f      	cmp	r3, #127	; 0x7f
 8016c46:	d017      	beq.n	8016c78 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016c48:	4b65      	ldr	r3, [pc, #404]	; (8016de0 <ip4_input+0x27c>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	61bb      	str	r3, [r7, #24]
 8016c4e:	e00e      	b.n	8016c6e <ip4_input+0x10a>
          if (netif == inp) {
 8016c50:	69ba      	ldr	r2, [r7, #24]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d006      	beq.n	8016c66 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016c58:	69b8      	ldr	r0, [r7, #24]
 8016c5a:	f7ff ff59 	bl	8016b10 <ip4_input_accept>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d108      	bne.n	8016c76 <ip4_input+0x112>
 8016c64:	e000      	b.n	8016c68 <ip4_input+0x104>
            continue;
 8016c66:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016c68:	69bb      	ldr	r3, [r7, #24]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	61bb      	str	r3, [r7, #24]
 8016c6e:	69bb      	ldr	r3, [r7, #24]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d1ed      	bne.n	8016c50 <ip4_input+0xec>
 8016c74:	e000      	b.n	8016c78 <ip4_input+0x114>
            break;
 8016c76:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d111      	bne.n	8016ca2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016c7e:	69fb      	ldr	r3, [r7, #28]
 8016c80:	7a5b      	ldrb	r3, [r3, #9]
 8016c82:	2b11      	cmp	r3, #17
 8016c84:	d10d      	bne.n	8016ca2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016c86:	8a7b      	ldrh	r3, [r7, #18]
 8016c88:	69fa      	ldr	r2, [r7, #28]
 8016c8a:	4413      	add	r3, r2
 8016c8c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	885b      	ldrh	r3, [r3, #2]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016c98:	d103      	bne.n	8016ca2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d017      	beq.n	8016cd8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016ca8:	4b4c      	ldr	r3, [pc, #304]	; (8016ddc <ip4_input+0x278>)
 8016caa:	691b      	ldr	r3, [r3, #16]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d013      	beq.n	8016cd8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cb0:	4b4a      	ldr	r3, [pc, #296]	; (8016ddc <ip4_input+0x278>)
 8016cb2:	691b      	ldr	r3, [r3, #16]
 8016cb4:	6839      	ldr	r1, [r7, #0]
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f000 f96c 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d105      	bne.n	8016cce <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016cc2:	4b46      	ldr	r3, [pc, #280]	; (8016ddc <ip4_input+0x278>)
 8016cc4:	691b      	ldr	r3, [r3, #16]
 8016cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016cca:	2be0      	cmp	r3, #224	; 0xe0
 8016ccc:	d104      	bne.n	8016cd8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f7f5 fdde 	bl	800c890 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	e07c      	b.n	8016dd2 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016cd8:	69bb      	ldr	r3, [r7, #24]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d104      	bne.n	8016ce8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016cde:	6878      	ldr	r0, [r7, #4]
 8016ce0:	f7f5 fdd6 	bl	800c890 <pbuf_free>
    return ERR_OK;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	e074      	b.n	8016dd2 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	88db      	ldrh	r3, [r3, #6]
 8016cec:	b29b      	uxth	r3, r3
 8016cee:	461a      	mov	r2, r3
 8016cf0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016cf4:	4013      	ands	r3, r2
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d00b      	beq.n	8016d12 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016cfa:	6878      	ldr	r0, [r7, #4]
 8016cfc:	f000 fc90 	bl	8017620 <ip4_reass>
 8016d00:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d101      	bne.n	8016d0c <ip4_input+0x1a8>
      return ERR_OK;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	e062      	b.n	8016dd2 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d12:	4a32      	ldr	r2, [pc, #200]	; (8016ddc <ip4_input+0x278>)
 8016d14:	69bb      	ldr	r3, [r7, #24]
 8016d16:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d18:	4a30      	ldr	r2, [pc, #192]	; (8016ddc <ip4_input+0x278>)
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d1e:	4a2f      	ldr	r2, [pc, #188]	; (8016ddc <ip4_input+0x278>)
 8016d20:	69fb      	ldr	r3, [r7, #28]
 8016d22:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d24:	69fb      	ldr	r3, [r7, #28]
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	f003 030f 	and.w	r3, r3, #15
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	b29a      	uxth	r2, r3
 8016d34:	4b29      	ldr	r3, [pc, #164]	; (8016ddc <ip4_input+0x278>)
 8016d36:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016d38:	8a7b      	ldrh	r3, [r7, #18]
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7f5 fd21 	bl	800c784 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016d42:	69fb      	ldr	r3, [r7, #28]
 8016d44:	7a5b      	ldrb	r3, [r3, #9]
 8016d46:	2b06      	cmp	r3, #6
 8016d48:	d009      	beq.n	8016d5e <ip4_input+0x1fa>
 8016d4a:	2b11      	cmp	r3, #17
 8016d4c:	d002      	beq.n	8016d54 <ip4_input+0x1f0>
 8016d4e:	2b01      	cmp	r3, #1
 8016d50:	d00a      	beq.n	8016d68 <ip4_input+0x204>
 8016d52:	e00e      	b.n	8016d72 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016d54:	6839      	ldr	r1, [r7, #0]
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f7fc fb1e 	bl	8013398 <udp_input>
        break;
 8016d5c:	e026      	b.n	8016dac <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016d5e:	6839      	ldr	r1, [r7, #0]
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f7f7 fecd 	bl	800eb00 <tcp_input>
        break;
 8016d66:	e021      	b.n	8016dac <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016d68:	6839      	ldr	r1, [r7, #0]
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7ff fcd2 	bl	8016714 <icmp_input>
        break;
 8016d70:	e01c      	b.n	8016dac <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d72:	4b1a      	ldr	r3, [pc, #104]	; (8016ddc <ip4_input+0x278>)
 8016d74:	695b      	ldr	r3, [r3, #20]
 8016d76:	69b9      	ldr	r1, [r7, #24]
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f000 f90b 	bl	8016f94 <ip4_addr_isbroadcast_u32>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d10f      	bne.n	8016da4 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d84:	4b15      	ldr	r3, [pc, #84]	; (8016ddc <ip4_input+0x278>)
 8016d86:	695b      	ldr	r3, [r3, #20]
 8016d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016d8c:	2be0      	cmp	r3, #224	; 0xe0
 8016d8e:	d009      	beq.n	8016da4 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016d90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016d94:	4619      	mov	r1, r3
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f7f5 fd67 	bl	800c86a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016d9c:	2102      	movs	r1, #2
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f7ff fdbc 	bl	801691c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	f7f5 fd73 	bl	800c890 <pbuf_free>
        break;
 8016daa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016dac:	4b0b      	ldr	r3, [pc, #44]	; (8016ddc <ip4_input+0x278>)
 8016dae:	2200      	movs	r2, #0
 8016db0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016db2:	4b0a      	ldr	r3, [pc, #40]	; (8016ddc <ip4_input+0x278>)
 8016db4:	2200      	movs	r2, #0
 8016db6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016db8:	4b08      	ldr	r3, [pc, #32]	; (8016ddc <ip4_input+0x278>)
 8016dba:	2200      	movs	r2, #0
 8016dbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016dbe:	4b07      	ldr	r3, [pc, #28]	; (8016ddc <ip4_input+0x278>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016dc4:	4b05      	ldr	r3, [pc, #20]	; (8016ddc <ip4_input+0x278>)
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016dca:	4b04      	ldr	r3, [pc, #16]	; (8016ddc <ip4_input+0x278>)
 8016dcc:	2200      	movs	r2, #0
 8016dce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016dd0:	2300      	movs	r3, #0
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3720      	adds	r7, #32
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}
 8016dda:	bf00      	nop
 8016ddc:	2000c3a4 	.word	0x2000c3a4
 8016de0:	2000fac8 	.word	0x2000fac8

08016de4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b08a      	sub	sp, #40	; 0x28
 8016de8:	af04      	add	r7, sp, #16
 8016dea:	60f8      	str	r0, [r7, #12]
 8016dec:	60b9      	str	r1, [r7, #8]
 8016dee:	607a      	str	r2, [r7, #4]
 8016df0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d009      	beq.n	8016e10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d003      	beq.n	8016e0a <ip4_output_if+0x26>
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d102      	bne.n	8016e10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e0c:	3304      	adds	r3, #4
 8016e0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016e10:	78fa      	ldrb	r2, [r7, #3]
 8016e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e14:	9302      	str	r3, [sp, #8]
 8016e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016e1a:	9301      	str	r3, [sp, #4]
 8016e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	4613      	mov	r3, r2
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	6979      	ldr	r1, [r7, #20]
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f000 f805 	bl	8016e38 <ip4_output_if_src>
 8016e2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3718      	adds	r7, #24
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b088      	sub	sp, #32
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
 8016e44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	7b9b      	ldrb	r3, [r3, #14]
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d006      	beq.n	8016e5c <ip4_output_if_src+0x24>
 8016e4e:	4b4b      	ldr	r3, [pc, #300]	; (8016f7c <ip4_output_if_src+0x144>)
 8016e50:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016e54:	494a      	ldr	r1, [pc, #296]	; (8016f80 <ip4_output_if_src+0x148>)
 8016e56:	484b      	ldr	r0, [pc, #300]	; (8016f84 <ip4_output_if_src+0x14c>)
 8016e58:	f001 fa30 	bl	80182bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d060      	beq.n	8016f24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016e62:	2314      	movs	r3, #20
 8016e64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016e66:	2114      	movs	r1, #20
 8016e68:	68f8      	ldr	r0, [r7, #12]
 8016e6a:	f7f5 fc7b 	bl	800c764 <pbuf_add_header>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d002      	beq.n	8016e7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016e74:	f06f 0301 	mvn.w	r3, #1
 8016e78:	e07c      	b.n	8016f74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	895b      	ldrh	r3, [r3, #10]
 8016e84:	2b13      	cmp	r3, #19
 8016e86:	d806      	bhi.n	8016e96 <ip4_output_if_src+0x5e>
 8016e88:	4b3c      	ldr	r3, [pc, #240]	; (8016f7c <ip4_output_if_src+0x144>)
 8016e8a:	f240 3289 	movw	r2, #905	; 0x389
 8016e8e:	493e      	ldr	r1, [pc, #248]	; (8016f88 <ip4_output_if_src+0x150>)
 8016e90:	483c      	ldr	r0, [pc, #240]	; (8016f84 <ip4_output_if_src+0x14c>)
 8016e92:	f001 fa13 	bl	80182bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016e96:	69fb      	ldr	r3, [r7, #28]
 8016e98:	78fa      	ldrb	r2, [r7, #3]
 8016e9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016ea2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681a      	ldr	r2, [r3, #0]
 8016ea8:	69fb      	ldr	r3, [r7, #28]
 8016eaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016eac:	8b7b      	ldrh	r3, [r7, #26]
 8016eae:	089b      	lsrs	r3, r3, #2
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eb8:	b2da      	uxtb	r2, r3
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016ebe:	69fb      	ldr	r3, [r7, #28]
 8016ec0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016ec4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	891b      	ldrh	r3, [r3, #8]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7f4 f974 	bl	800b1b8 <lwip_htons>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	69fb      	ldr	r3, [r7, #28]
 8016ed6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016ed8:	69fb      	ldr	r3, [r7, #28]
 8016eda:	2200      	movs	r2, #0
 8016edc:	719a      	strb	r2, [r3, #6]
 8016ede:	2200      	movs	r2, #0
 8016ee0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016ee2:	4b2a      	ldr	r3, [pc, #168]	; (8016f8c <ip4_output_if_src+0x154>)
 8016ee4:	881b      	ldrh	r3, [r3, #0]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7f4 f966 	bl	800b1b8 <lwip_htons>
 8016eec:	4603      	mov	r3, r0
 8016eee:	461a      	mov	r2, r3
 8016ef0:	69fb      	ldr	r3, [r7, #28]
 8016ef2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ef4:	4b25      	ldr	r3, [pc, #148]	; (8016f8c <ip4_output_if_src+0x154>)
 8016ef6:	881b      	ldrh	r3, [r3, #0]
 8016ef8:	3301      	adds	r3, #1
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	4b23      	ldr	r3, [pc, #140]	; (8016f8c <ip4_output_if_src+0x154>)
 8016efe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016f00:	68bb      	ldr	r3, [r7, #8]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d104      	bne.n	8016f10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016f06:	4b22      	ldr	r3, [pc, #136]	; (8016f90 <ip4_output_if_src+0x158>)
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	69fb      	ldr	r3, [r7, #28]
 8016f0c:	60da      	str	r2, [r3, #12]
 8016f0e:	e003      	b.n	8016f18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	729a      	strb	r2, [r3, #10]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	72da      	strb	r2, [r3, #11]
 8016f22:	e00f      	b.n	8016f44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	895b      	ldrh	r3, [r3, #10]
 8016f28:	2b13      	cmp	r3, #19
 8016f2a:	d802      	bhi.n	8016f32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f2c:	f06f 0301 	mvn.w	r3, #1
 8016f30:	e020      	b.n	8016f74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	691b      	ldr	r3, [r3, #16]
 8016f3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016f3e:	f107 0314 	add.w	r3, r7, #20
 8016f42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d00c      	beq.n	8016f66 <ip4_output_if_src+0x12e>
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	891a      	ldrh	r2, [r3, #8]
 8016f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d906      	bls.n	8016f66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016f58:	687a      	ldr	r2, [r7, #4]
 8016f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016f5c:	68f8      	ldr	r0, [r7, #12]
 8016f5e:	f000 fd4b 	bl	80179f8 <ip4_frag>
 8016f62:	4603      	mov	r3, r0
 8016f64:	e006      	b.n	8016f74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f68:	695b      	ldr	r3, [r3, #20]
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	68f9      	ldr	r1, [r7, #12]
 8016f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f70:	4798      	blx	r3
 8016f72:	4603      	mov	r3, r0
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3720      	adds	r7, #32
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	0801cb04 	.word	0x0801cb04
 8016f80:	0801cb38 	.word	0x0801cb38
 8016f84:	0801cb44 	.word	0x0801cb44
 8016f88:	0801cb6c 	.word	0x0801cb6c
 8016f8c:	20008d96 	.word	0x20008d96
 8016f90:	08028368 	.word	0x08028368

08016f94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b085      	sub	sp, #20
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fa8:	d002      	beq.n	8016fb0 <ip4_addr_isbroadcast_u32+0x1c>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d101      	bne.n	8016fb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016fb0:	2301      	movs	r3, #1
 8016fb2:	e02a      	b.n	801700a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fba:	f003 0302 	and.w	r3, r3, #2
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d101      	bne.n	8016fc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	e021      	b.n	801700a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	3304      	adds	r3, #4
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	687a      	ldr	r2, [r7, #4]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d101      	bne.n	8016fd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	e019      	b.n	801700a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016fd6:	68fa      	ldr	r2, [r7, #12]
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	3304      	adds	r3, #4
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	405a      	eors	r2, r3
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	3308      	adds	r3, #8
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	4013      	ands	r3, r2
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d10d      	bne.n	8017008 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016fec:	683b      	ldr	r3, [r7, #0]
 8016fee:	3308      	adds	r3, #8
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	43da      	mvns	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	3308      	adds	r3, #8
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017000:	429a      	cmp	r2, r3
 8017002:	d101      	bne.n	8017008 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017004:	2301      	movs	r3, #1
 8017006:	e000      	b.n	801700a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017008:	2300      	movs	r3, #0
  }
}
 801700a:	4618      	mov	r0, r3
 801700c:	3714      	adds	r7, #20
 801700e:	46bd      	mov	sp, r7
 8017010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017014:	4770      	bx	lr
	...

08017018 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b084      	sub	sp, #16
 801701c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801701e:	2300      	movs	r3, #0
 8017020:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017022:	4b12      	ldr	r3, [pc, #72]	; (801706c <ip_reass_tmr+0x54>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017028:	e018      	b.n	801705c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	7fdb      	ldrb	r3, [r3, #31]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d00b      	beq.n	801704a <ip_reass_tmr+0x32>
      r->timer--;
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	7fdb      	ldrb	r3, [r3, #31]
 8017036:	3b01      	subs	r3, #1
 8017038:	b2da      	uxtb	r2, r3
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	60fb      	str	r3, [r7, #12]
 8017048:	e008      	b.n	801705c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017054:	68b9      	ldr	r1, [r7, #8]
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 f80a 	bl	8017070 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d1e3      	bne.n	801702a <ip_reass_tmr+0x12>
    }
  }
}
 8017062:	bf00      	nop
 8017064:	3710      	adds	r7, #16
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	20008d98 	.word	0x20008d98

08017070 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b088      	sub	sp, #32
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801707a:	2300      	movs	r3, #0
 801707c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801707e:	683a      	ldr	r2, [r7, #0]
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	429a      	cmp	r2, r3
 8017084:	d105      	bne.n	8017092 <ip_reass_free_complete_datagram+0x22>
 8017086:	4b45      	ldr	r3, [pc, #276]	; (801719c <ip_reass_free_complete_datagram+0x12c>)
 8017088:	22ab      	movs	r2, #171	; 0xab
 801708a:	4945      	ldr	r1, [pc, #276]	; (80171a0 <ip_reass_free_complete_datagram+0x130>)
 801708c:	4845      	ldr	r0, [pc, #276]	; (80171a4 <ip_reass_free_complete_datagram+0x134>)
 801708e:	f001 f915 	bl	80182bc <iprintf>
  if (prev != NULL) {
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d00a      	beq.n	80170ae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d005      	beq.n	80170ae <ip_reass_free_complete_datagram+0x3e>
 80170a2:	4b3e      	ldr	r3, [pc, #248]	; (801719c <ip_reass_free_complete_datagram+0x12c>)
 80170a4:	22ad      	movs	r2, #173	; 0xad
 80170a6:	4940      	ldr	r1, [pc, #256]	; (80171a8 <ip_reass_free_complete_datagram+0x138>)
 80170a8:	483e      	ldr	r0, [pc, #248]	; (80171a4 <ip_reass_free_complete_datagram+0x134>)
 80170aa:	f001 f907 	bl	80182bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	889b      	ldrh	r3, [r3, #4]
 80170ba:	b29b      	uxth	r3, r3
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d12a      	bne.n	8017116 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80170ce:	69bb      	ldr	r3, [r7, #24]
 80170d0:	6858      	ldr	r0, [r3, #4]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	3308      	adds	r3, #8
 80170d6:	2214      	movs	r2, #20
 80170d8:	4619      	mov	r1, r3
 80170da:	f001 f8dc 	bl	8018296 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80170de:	2101      	movs	r1, #1
 80170e0:	69b8      	ldr	r0, [r7, #24]
 80170e2:	f7ff fc2b 	bl	801693c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80170e6:	69b8      	ldr	r0, [r7, #24]
 80170e8:	f7f5 fc60 	bl	800c9ac <pbuf_clen>
 80170ec:	4603      	mov	r3, r0
 80170ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80170f0:	8bfa      	ldrh	r2, [r7, #30]
 80170f2:	8a7b      	ldrh	r3, [r7, #18]
 80170f4:	4413      	add	r3, r2
 80170f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170fa:	db05      	blt.n	8017108 <ip_reass_free_complete_datagram+0x98>
 80170fc:	4b27      	ldr	r3, [pc, #156]	; (801719c <ip_reass_free_complete_datagram+0x12c>)
 80170fe:	22bc      	movs	r2, #188	; 0xbc
 8017100:	492a      	ldr	r1, [pc, #168]	; (80171ac <ip_reass_free_complete_datagram+0x13c>)
 8017102:	4828      	ldr	r0, [pc, #160]	; (80171a4 <ip_reass_free_complete_datagram+0x134>)
 8017104:	f001 f8da 	bl	80182bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017108:	8bfa      	ldrh	r2, [r7, #30]
 801710a:	8a7b      	ldrh	r3, [r7, #18]
 801710c:	4413      	add	r3, r2
 801710e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017110:	69b8      	ldr	r0, [r7, #24]
 8017112:	f7f5 fbbd 	bl	800c890 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	685b      	ldr	r3, [r3, #4]
 801711a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801711c:	e01f      	b.n	801715e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801711e:	69bb      	ldr	r3, [r7, #24]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017124:	69bb      	ldr	r3, [r7, #24]
 8017126:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801712e:	68f8      	ldr	r0, [r7, #12]
 8017130:	f7f5 fc3c 	bl	800c9ac <pbuf_clen>
 8017134:	4603      	mov	r3, r0
 8017136:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017138:	8bfa      	ldrh	r2, [r7, #30]
 801713a:	8a7b      	ldrh	r3, [r7, #18]
 801713c:	4413      	add	r3, r2
 801713e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017142:	db05      	blt.n	8017150 <ip_reass_free_complete_datagram+0xe0>
 8017144:	4b15      	ldr	r3, [pc, #84]	; (801719c <ip_reass_free_complete_datagram+0x12c>)
 8017146:	22cc      	movs	r2, #204	; 0xcc
 8017148:	4918      	ldr	r1, [pc, #96]	; (80171ac <ip_reass_free_complete_datagram+0x13c>)
 801714a:	4816      	ldr	r0, [pc, #88]	; (80171a4 <ip_reass_free_complete_datagram+0x134>)
 801714c:	f001 f8b6 	bl	80182bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017150:	8bfa      	ldrh	r2, [r7, #30]
 8017152:	8a7b      	ldrh	r3, [r7, #18]
 8017154:	4413      	add	r3, r2
 8017156:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017158:	68f8      	ldr	r0, [r7, #12]
 801715a:	f7f5 fb99 	bl	800c890 <pbuf_free>
  while (p != NULL) {
 801715e:	69bb      	ldr	r3, [r7, #24]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d1dc      	bne.n	801711e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017164:	6839      	ldr	r1, [r7, #0]
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f000 f8c2 	bl	80172f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801716c:	4b10      	ldr	r3, [pc, #64]	; (80171b0 <ip_reass_free_complete_datagram+0x140>)
 801716e:	881b      	ldrh	r3, [r3, #0]
 8017170:	8bfa      	ldrh	r2, [r7, #30]
 8017172:	429a      	cmp	r2, r3
 8017174:	d905      	bls.n	8017182 <ip_reass_free_complete_datagram+0x112>
 8017176:	4b09      	ldr	r3, [pc, #36]	; (801719c <ip_reass_free_complete_datagram+0x12c>)
 8017178:	22d2      	movs	r2, #210	; 0xd2
 801717a:	490e      	ldr	r1, [pc, #56]	; (80171b4 <ip_reass_free_complete_datagram+0x144>)
 801717c:	4809      	ldr	r0, [pc, #36]	; (80171a4 <ip_reass_free_complete_datagram+0x134>)
 801717e:	f001 f89d 	bl	80182bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017182:	4b0b      	ldr	r3, [pc, #44]	; (80171b0 <ip_reass_free_complete_datagram+0x140>)
 8017184:	881a      	ldrh	r2, [r3, #0]
 8017186:	8bfb      	ldrh	r3, [r7, #30]
 8017188:	1ad3      	subs	r3, r2, r3
 801718a:	b29a      	uxth	r2, r3
 801718c:	4b08      	ldr	r3, [pc, #32]	; (80171b0 <ip_reass_free_complete_datagram+0x140>)
 801718e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017190:	8bfb      	ldrh	r3, [r7, #30]
}
 8017192:	4618      	mov	r0, r3
 8017194:	3720      	adds	r7, #32
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
 801719a:	bf00      	nop
 801719c:	0801cb9c 	.word	0x0801cb9c
 80171a0:	0801cbd8 	.word	0x0801cbd8
 80171a4:	0801cbe4 	.word	0x0801cbe4
 80171a8:	0801cc0c 	.word	0x0801cc0c
 80171ac:	0801cc20 	.word	0x0801cc20
 80171b0:	20008d9c 	.word	0x20008d9c
 80171b4:	0801cc40 	.word	0x0801cc40

080171b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b08a      	sub	sp, #40	; 0x28
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80171c2:	2300      	movs	r3, #0
 80171c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80171c6:	2300      	movs	r3, #0
 80171c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80171ca:	2300      	movs	r3, #0
 80171cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80171ce:	2300      	movs	r3, #0
 80171d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80171d2:	2300      	movs	r3, #0
 80171d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80171d6:	4b28      	ldr	r3, [pc, #160]	; (8017278 <ip_reass_remove_oldest_datagram+0xc0>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80171dc:	e030      	b.n	8017240 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80171de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e0:	695a      	ldr	r2, [r3, #20]
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	68db      	ldr	r3, [r3, #12]
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d10c      	bne.n	8017204 <ip_reass_remove_oldest_datagram+0x4c>
 80171ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ec:	699a      	ldr	r2, [r3, #24]
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	691b      	ldr	r3, [r3, #16]
 80171f2:	429a      	cmp	r2, r3
 80171f4:	d106      	bne.n	8017204 <ip_reass_remove_oldest_datagram+0x4c>
 80171f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f8:	899a      	ldrh	r2, [r3, #12]
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	889b      	ldrh	r3, [r3, #4]
 80171fe:	b29b      	uxth	r3, r3
 8017200:	429a      	cmp	r2, r3
 8017202:	d014      	beq.n	801722e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017204:	693b      	ldr	r3, [r7, #16]
 8017206:	3301      	adds	r3, #1
 8017208:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801720a:	6a3b      	ldr	r3, [r7, #32]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d104      	bne.n	801721a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017212:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017214:	69fb      	ldr	r3, [r7, #28]
 8017216:	61bb      	str	r3, [r7, #24]
 8017218:	e009      	b.n	801722e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721c:	7fda      	ldrb	r2, [r3, #31]
 801721e:	6a3b      	ldr	r3, [r7, #32]
 8017220:	7fdb      	ldrb	r3, [r3, #31]
 8017222:	429a      	cmp	r2, r3
 8017224:	d803      	bhi.n	801722e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801722a:	69fb      	ldr	r3, [r7, #28]
 801722c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d001      	beq.n	801723a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017238:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017242:	2b00      	cmp	r3, #0
 8017244:	d1cb      	bne.n	80171de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017246:	6a3b      	ldr	r3, [r7, #32]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d008      	beq.n	801725e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801724c:	69b9      	ldr	r1, [r7, #24]
 801724e:	6a38      	ldr	r0, [r7, #32]
 8017250:	f7ff ff0e 	bl	8017070 <ip_reass_free_complete_datagram>
 8017254:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017256:	697a      	ldr	r2, [r7, #20]
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	4413      	add	r3, r2
 801725c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801725e:	697a      	ldr	r2, [r7, #20]
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	429a      	cmp	r2, r3
 8017264:	da02      	bge.n	801726c <ip_reass_remove_oldest_datagram+0xb4>
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	2b01      	cmp	r3, #1
 801726a:	dcac      	bgt.n	80171c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801726c:	697b      	ldr	r3, [r7, #20]
}
 801726e:	4618      	mov	r0, r3
 8017270:	3728      	adds	r7, #40	; 0x28
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}
 8017276:	bf00      	nop
 8017278:	20008d98 	.word	0x20008d98

0801727c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b084      	sub	sp, #16
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017286:	2004      	movs	r0, #4
 8017288:	f7f4 fc82 	bl	800bb90 <memp_malloc>
 801728c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d110      	bne.n	80172b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017294:	6839      	ldr	r1, [r7, #0]
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f7ff ff8e 	bl	80171b8 <ip_reass_remove_oldest_datagram>
 801729c:	4602      	mov	r2, r0
 801729e:	683b      	ldr	r3, [r7, #0]
 80172a0:	4293      	cmp	r3, r2
 80172a2:	dc03      	bgt.n	80172ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80172a4:	2004      	movs	r0, #4
 80172a6:	f7f4 fc73 	bl	800bb90 <memp_malloc>
 80172aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d101      	bne.n	80172b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80172b2:	2300      	movs	r3, #0
 80172b4:	e016      	b.n	80172e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80172b6:	2220      	movs	r2, #32
 80172b8:	2100      	movs	r1, #0
 80172ba:	68f8      	ldr	r0, [r7, #12]
 80172bc:	f000 fff6 	bl	80182ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	220f      	movs	r2, #15
 80172c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80172c6:	4b09      	ldr	r3, [pc, #36]	; (80172ec <ip_reass_enqueue_new_datagram+0x70>)
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80172ce:	4a07      	ldr	r2, [pc, #28]	; (80172ec <ip_reass_enqueue_new_datagram+0x70>)
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	3308      	adds	r3, #8
 80172d8:	2214      	movs	r2, #20
 80172da:	6879      	ldr	r1, [r7, #4]
 80172dc:	4618      	mov	r0, r3
 80172de:	f000 ffda 	bl	8018296 <memcpy>
  return ipr;
 80172e2:	68fb      	ldr	r3, [r7, #12]
}
 80172e4:	4618      	mov	r0, r3
 80172e6:	3710      	adds	r7, #16
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}
 80172ec:	20008d98 	.word	0x20008d98

080172f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80172fa:	4b10      	ldr	r3, [pc, #64]	; (801733c <ip_reass_dequeue_datagram+0x4c>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	687a      	ldr	r2, [r7, #4]
 8017300:	429a      	cmp	r2, r3
 8017302:	d104      	bne.n	801730e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	4a0c      	ldr	r2, [pc, #48]	; (801733c <ip_reass_dequeue_datagram+0x4c>)
 801730a:	6013      	str	r3, [r2, #0]
 801730c:	e00d      	b.n	801732a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d106      	bne.n	8017322 <ip_reass_dequeue_datagram+0x32>
 8017314:	4b0a      	ldr	r3, [pc, #40]	; (8017340 <ip_reass_dequeue_datagram+0x50>)
 8017316:	f240 1245 	movw	r2, #325	; 0x145
 801731a:	490a      	ldr	r1, [pc, #40]	; (8017344 <ip_reass_dequeue_datagram+0x54>)
 801731c:	480a      	ldr	r0, [pc, #40]	; (8017348 <ip_reass_dequeue_datagram+0x58>)
 801731e:	f000 ffcd 	bl	80182bc <iprintf>
    prev->next = ipr->next;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801732a:	6879      	ldr	r1, [r7, #4]
 801732c:	2004      	movs	r0, #4
 801732e:	f7f4 fc81 	bl	800bc34 <memp_free>
}
 8017332:	bf00      	nop
 8017334:	3708      	adds	r7, #8
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	20008d98 	.word	0x20008d98
 8017340:	0801cb9c 	.word	0x0801cb9c
 8017344:	0801cc64 	.word	0x0801cc64
 8017348:	0801cbe4 	.word	0x0801cbe4

0801734c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b08c      	sub	sp, #48	; 0x30
 8017350:	af00      	add	r7, sp, #0
 8017352:	60f8      	str	r0, [r7, #12]
 8017354:	60b9      	str	r1, [r7, #8]
 8017356:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017358:	2300      	movs	r3, #0
 801735a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801735c:	2301      	movs	r3, #1
 801735e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017366:	69fb      	ldr	r3, [r7, #28]
 8017368:	885b      	ldrh	r3, [r3, #2]
 801736a:	b29b      	uxth	r3, r3
 801736c:	4618      	mov	r0, r3
 801736e:	f7f3 ff23 	bl	800b1b8 <lwip_htons>
 8017372:	4603      	mov	r3, r0
 8017374:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017376:	69fb      	ldr	r3, [r7, #28]
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	f003 030f 	and.w	r3, r3, #15
 801737e:	b2db      	uxtb	r3, r3
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017384:	7e7b      	ldrb	r3, [r7, #25]
 8017386:	b29b      	uxth	r3, r3
 8017388:	8b7a      	ldrh	r2, [r7, #26]
 801738a:	429a      	cmp	r2, r3
 801738c:	d202      	bcs.n	8017394 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801738e:	f04f 33ff 	mov.w	r3, #4294967295
 8017392:	e135      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017394:	7e7b      	ldrb	r3, [r7, #25]
 8017396:	b29b      	uxth	r3, r3
 8017398:	8b7a      	ldrh	r2, [r7, #26]
 801739a:	1ad3      	subs	r3, r2, r3
 801739c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	88db      	ldrh	r3, [r3, #6]
 80173a2:	b29b      	uxth	r3, r3
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7f3 ff07 	bl	800b1b8 <lwip_htons>
 80173aa:	4603      	mov	r3, r0
 80173ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	00db      	lsls	r3, r3, #3
 80173b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	685b      	ldr	r3, [r3, #4]
 80173ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80173bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173be:	2200      	movs	r2, #0
 80173c0:	701a      	strb	r2, [r3, #0]
 80173c2:	2200      	movs	r2, #0
 80173c4:	705a      	strb	r2, [r3, #1]
 80173c6:	2200      	movs	r2, #0
 80173c8:	709a      	strb	r2, [r3, #2]
 80173ca:	2200      	movs	r2, #0
 80173cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80173ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d0:	8afa      	ldrh	r2, [r7, #22]
 80173d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80173d4:	8afa      	ldrh	r2, [r7, #22]
 80173d6:	8b7b      	ldrh	r3, [r7, #26]
 80173d8:	4413      	add	r3, r2
 80173da:	b29a      	uxth	r2, r3
 80173dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80173e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e2:	88db      	ldrh	r3, [r3, #6]
 80173e4:	b29b      	uxth	r3, r3
 80173e6:	8afa      	ldrh	r2, [r7, #22]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d902      	bls.n	80173f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173ec:	f04f 33ff 	mov.w	r3, #4294967295
 80173f0:	e106      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	685b      	ldr	r3, [r3, #4]
 80173f6:	627b      	str	r3, [r7, #36]	; 0x24
 80173f8:	e068      	b.n	80174cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80173fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017402:	889b      	ldrh	r3, [r3, #4]
 8017404:	b29a      	uxth	r2, r3
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	889b      	ldrh	r3, [r3, #4]
 801740a:	b29b      	uxth	r3, r3
 801740c:	429a      	cmp	r2, r3
 801740e:	d235      	bcs.n	801747c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017414:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017418:	2b00      	cmp	r3, #0
 801741a:	d020      	beq.n	801745e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801741e:	889b      	ldrh	r3, [r3, #4]
 8017420:	b29a      	uxth	r2, r3
 8017422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017424:	88db      	ldrh	r3, [r3, #6]
 8017426:	b29b      	uxth	r3, r3
 8017428:	429a      	cmp	r2, r3
 801742a:	d307      	bcc.n	801743c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742e:	88db      	ldrh	r3, [r3, #6]
 8017430:	b29a      	uxth	r2, r3
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	889b      	ldrh	r3, [r3, #4]
 8017436:	b29b      	uxth	r3, r3
 8017438:	429a      	cmp	r2, r3
 801743a:	d902      	bls.n	8017442 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801743c:	f04f 33ff 	mov.w	r3, #4294967295
 8017440:	e0de      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017444:	68ba      	ldr	r2, [r7, #8]
 8017446:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801744a:	88db      	ldrh	r3, [r3, #6]
 801744c:	b29a      	uxth	r2, r3
 801744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017450:	889b      	ldrh	r3, [r3, #4]
 8017452:	b29b      	uxth	r3, r3
 8017454:	429a      	cmp	r2, r3
 8017456:	d03d      	beq.n	80174d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017458:	2300      	movs	r3, #0
 801745a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801745c:	e03a      	b.n	80174d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017460:	88db      	ldrh	r3, [r3, #6]
 8017462:	b29a      	uxth	r2, r3
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	889b      	ldrh	r3, [r3, #4]
 8017468:	b29b      	uxth	r3, r3
 801746a:	429a      	cmp	r2, r3
 801746c:	d902      	bls.n	8017474 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801746e:	f04f 33ff 	mov.w	r3, #4294967295
 8017472:	e0c5      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	68ba      	ldr	r2, [r7, #8]
 8017478:	605a      	str	r2, [r3, #4]
      break;
 801747a:	e02b      	b.n	80174d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747e:	889b      	ldrh	r3, [r3, #4]
 8017480:	b29a      	uxth	r2, r3
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	889b      	ldrh	r3, [r3, #4]
 8017486:	b29b      	uxth	r3, r3
 8017488:	429a      	cmp	r2, r3
 801748a:	d102      	bne.n	8017492 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801748c:	f04f 33ff 	mov.w	r3, #4294967295
 8017490:	e0b6      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017494:	889b      	ldrh	r3, [r3, #4]
 8017496:	b29a      	uxth	r2, r3
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	88db      	ldrh	r3, [r3, #6]
 801749c:	b29b      	uxth	r3, r3
 801749e:	429a      	cmp	r2, r3
 80174a0:	d202      	bcs.n	80174a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174a2:	f04f 33ff 	mov.w	r3, #4294967295
 80174a6:	e0ab      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80174a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d009      	beq.n	80174c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80174ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b0:	88db      	ldrh	r3, [r3, #6]
 80174b2:	b29a      	uxth	r2, r3
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	889b      	ldrh	r3, [r3, #4]
 80174b8:	b29b      	uxth	r3, r3
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d001      	beq.n	80174c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80174be:	2300      	movs	r3, #0
 80174c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80174c2:	693b      	ldr	r3, [r7, #16]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80174cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d193      	bne.n	80173fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80174d2:	e000      	b.n	80174d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80174d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80174d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d12d      	bne.n	8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80174dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d01c      	beq.n	801751c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80174e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e4:	88db      	ldrh	r3, [r3, #6]
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ea:	889b      	ldrh	r3, [r3, #4]
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d906      	bls.n	8017500 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80174f2:	4b45      	ldr	r3, [pc, #276]	; (8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80174f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80174f8:	4944      	ldr	r1, [pc, #272]	; (801760c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80174fa:	4845      	ldr	r0, [pc, #276]	; (8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80174fc:	f000 fede 	bl	80182bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017502:	68ba      	ldr	r2, [r7, #8]
 8017504:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017508:	88db      	ldrh	r3, [r3, #6]
 801750a:	b29a      	uxth	r2, r3
 801750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750e:	889b      	ldrh	r3, [r3, #4]
 8017510:	b29b      	uxth	r3, r3
 8017512:	429a      	cmp	r2, r3
 8017514:	d010      	beq.n	8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017516:	2300      	movs	r3, #0
 8017518:	623b      	str	r3, [r7, #32]
 801751a:	e00d      	b.n	8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d006      	beq.n	8017532 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017524:	4b38      	ldr	r3, [pc, #224]	; (8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017526:	f240 12bf 	movw	r2, #447	; 0x1bf
 801752a:	493a      	ldr	r1, [pc, #232]	; (8017614 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801752c:	4838      	ldr	r0, [pc, #224]	; (8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801752e:	f000 fec5 	bl	80182bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	68ba      	ldr	r2, [r7, #8]
 8017536:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d105      	bne.n	801754a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	7f9b      	ldrb	r3, [r3, #30]
 8017542:	f003 0301 	and.w	r3, r3, #1
 8017546:	2b00      	cmp	r3, #0
 8017548:	d059      	beq.n	80175fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801754a:	6a3b      	ldr	r3, [r7, #32]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d04f      	beq.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d006      	beq.n	8017566 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	685b      	ldr	r3, [r3, #4]
 801755e:	889b      	ldrh	r3, [r3, #4]
 8017560:	b29b      	uxth	r3, r3
 8017562:	2b00      	cmp	r3, #0
 8017564:	d002      	beq.n	801756c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017566:	2300      	movs	r3, #0
 8017568:	623b      	str	r3, [r7, #32]
 801756a:	e041      	b.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801756e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017576:	e012      	b.n	801759e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801757a:	685b      	ldr	r3, [r3, #4]
 801757c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017580:	88db      	ldrh	r3, [r3, #6]
 8017582:	b29a      	uxth	r2, r3
 8017584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017586:	889b      	ldrh	r3, [r3, #4]
 8017588:	b29b      	uxth	r3, r3
 801758a:	429a      	cmp	r2, r3
 801758c:	d002      	beq.n	8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801758e:	2300      	movs	r3, #0
 8017590:	623b      	str	r3, [r7, #32]
            break;
 8017592:	e007      	b.n	80175a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017596:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d1e9      	bne.n	8017578 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80175a4:	6a3b      	ldr	r3, [r7, #32]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d022      	beq.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d106      	bne.n	80175c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80175b2:	4b15      	ldr	r3, [pc, #84]	; (8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175b4:	f240 12df 	movw	r2, #479	; 0x1df
 80175b8:	4917      	ldr	r1, [pc, #92]	; (8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80175ba:	4815      	ldr	r0, [pc, #84]	; (8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175bc:	f000 fe7e 	bl	80182bc <iprintf>
          LWIP_ASSERT("sanity check",
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	685b      	ldr	r3, [r3, #4]
 80175c4:	685b      	ldr	r3, [r3, #4]
 80175c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d106      	bne.n	80175da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80175cc:	4b0e      	ldr	r3, [pc, #56]	; (8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80175d2:	4911      	ldr	r1, [pc, #68]	; (8017618 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80175d4:	480e      	ldr	r0, [pc, #56]	; (8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175d6:	f000 fe71 	bl	80182bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80175da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d006      	beq.n	80175f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80175e2:	4b09      	ldr	r3, [pc, #36]	; (8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80175e4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80175e8:	490c      	ldr	r1, [pc, #48]	; (801761c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80175ea:	4809      	ldr	r0, [pc, #36]	; (8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80175ec:	f000 fe66 	bl	80182bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80175f0:	6a3b      	ldr	r3, [r7, #32]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	bf14      	ite	ne
 80175f6:	2301      	movne	r3, #1
 80175f8:	2300      	moveq	r3, #0
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	e000      	b.n	8017600 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80175fe:	2300      	movs	r3, #0
}
 8017600:	4618      	mov	r0, r3
 8017602:	3730      	adds	r7, #48	; 0x30
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	0801cb9c 	.word	0x0801cb9c
 801760c:	0801cc80 	.word	0x0801cc80
 8017610:	0801cbe4 	.word	0x0801cbe4
 8017614:	0801cca0 	.word	0x0801cca0
 8017618:	0801ccd8 	.word	0x0801ccd8
 801761c:	0801cce8 	.word	0x0801cce8

08017620 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b08e      	sub	sp, #56	; 0x38
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	f003 030f 	and.w	r3, r3, #15
 8017636:	b2db      	uxtb	r3, r3
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	b2db      	uxtb	r3, r3
 801763c:	2b14      	cmp	r3, #20
 801763e:	f040 8167 	bne.w	8017910 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017644:	88db      	ldrh	r3, [r3, #6]
 8017646:	b29b      	uxth	r3, r3
 8017648:	4618      	mov	r0, r3
 801764a:	f7f3 fdb5 	bl	800b1b8 <lwip_htons>
 801764e:	4603      	mov	r3, r0
 8017650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017654:	b29b      	uxth	r3, r3
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765c:	885b      	ldrh	r3, [r3, #2]
 801765e:	b29b      	uxth	r3, r3
 8017660:	4618      	mov	r0, r3
 8017662:	f7f3 fda9 	bl	800b1b8 <lwip_htons>
 8017666:	4603      	mov	r3, r0
 8017668:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766c:	781b      	ldrb	r3, [r3, #0]
 801766e:	f003 030f 	and.w	r3, r3, #15
 8017672:	b2db      	uxtb	r3, r3
 8017674:	009b      	lsls	r3, r3, #2
 8017676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801767a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801767e:	b29b      	uxth	r3, r3
 8017680:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017682:	429a      	cmp	r2, r3
 8017684:	f0c0 8146 	bcc.w	8017914 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801768c:	b29b      	uxth	r3, r3
 801768e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017690:	1ad3      	subs	r3, r2, r3
 8017692:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f7f5 f989 	bl	800c9ac <pbuf_clen>
 801769a:	4603      	mov	r3, r0
 801769c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801769e:	4ba3      	ldr	r3, [pc, #652]	; (801792c <ip4_reass+0x30c>)
 80176a0:	881b      	ldrh	r3, [r3, #0]
 80176a2:	461a      	mov	r2, r3
 80176a4:	8c3b      	ldrh	r3, [r7, #32]
 80176a6:	4413      	add	r3, r2
 80176a8:	2b0a      	cmp	r3, #10
 80176aa:	dd10      	ble.n	80176ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176ac:	8c3b      	ldrh	r3, [r7, #32]
 80176ae:	4619      	mov	r1, r3
 80176b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176b2:	f7ff fd81 	bl	80171b8 <ip_reass_remove_oldest_datagram>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	f000 812d 	beq.w	8017918 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80176be:	4b9b      	ldr	r3, [pc, #620]	; (801792c <ip4_reass+0x30c>)
 80176c0:	881b      	ldrh	r3, [r3, #0]
 80176c2:	461a      	mov	r2, r3
 80176c4:	8c3b      	ldrh	r3, [r7, #32]
 80176c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176c8:	2b0a      	cmp	r3, #10
 80176ca:	f300 8125 	bgt.w	8017918 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176ce:	4b98      	ldr	r3, [pc, #608]	; (8017930 <ip4_reass+0x310>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	633b      	str	r3, [r7, #48]	; 0x30
 80176d4:	e015      	b.n	8017702 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80176d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d8:	695a      	ldr	r2, [r3, #20]
 80176da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176dc:	68db      	ldr	r3, [r3, #12]
 80176de:	429a      	cmp	r2, r3
 80176e0:	d10c      	bne.n	80176fc <ip4_reass+0xdc>
 80176e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e4:	699a      	ldr	r2, [r3, #24]
 80176e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e8:	691b      	ldr	r3, [r3, #16]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d106      	bne.n	80176fc <ip4_reass+0xdc>
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	899a      	ldrh	r2, [r3, #12]
 80176f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f4:	889b      	ldrh	r3, [r3, #4]
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d006      	beq.n	801770a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	633b      	str	r3, [r7, #48]	; 0x30
 8017702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017704:	2b00      	cmp	r3, #0
 8017706:	d1e6      	bne.n	80176d6 <ip4_reass+0xb6>
 8017708:	e000      	b.n	801770c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801770a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770e:	2b00      	cmp	r3, #0
 8017710:	d109      	bne.n	8017726 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017712:	8c3b      	ldrh	r3, [r7, #32]
 8017714:	4619      	mov	r1, r3
 8017716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017718:	f7ff fdb0 	bl	801727c <ip_reass_enqueue_new_datagram>
 801771c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017720:	2b00      	cmp	r3, #0
 8017722:	d11c      	bne.n	801775e <ip4_reass+0x13e>
      goto nullreturn;
 8017724:	e0f9      	b.n	801791a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017728:	88db      	ldrh	r3, [r3, #6]
 801772a:	b29b      	uxth	r3, r3
 801772c:	4618      	mov	r0, r3
 801772e:	f7f3 fd43 	bl	800b1b8 <lwip_htons>
 8017732:	4603      	mov	r3, r0
 8017734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017738:	2b00      	cmp	r3, #0
 801773a:	d110      	bne.n	801775e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773e:	89db      	ldrh	r3, [r3, #14]
 8017740:	4618      	mov	r0, r3
 8017742:	f7f3 fd39 	bl	800b1b8 <lwip_htons>
 8017746:	4603      	mov	r3, r0
 8017748:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801774c:	2b00      	cmp	r3, #0
 801774e:	d006      	beq.n	801775e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017752:	3308      	adds	r3, #8
 8017754:	2214      	movs	r2, #20
 8017756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017758:	4618      	mov	r0, r3
 801775a:	f000 fd9c 	bl	8018296 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	88db      	ldrh	r3, [r3, #6]
 8017762:	b29b      	uxth	r3, r3
 8017764:	f003 0320 	and.w	r3, r3, #32
 8017768:	2b00      	cmp	r3, #0
 801776a:	bf0c      	ite	eq
 801776c:	2301      	moveq	r3, #1
 801776e:	2300      	movne	r3, #0
 8017770:	b2db      	uxtb	r3, r3
 8017772:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017774:	69fb      	ldr	r3, [r7, #28]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00e      	beq.n	8017798 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801777a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801777c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801777e:	4413      	add	r3, r2
 8017780:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017782:	8b7a      	ldrh	r2, [r7, #26]
 8017784:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017786:	429a      	cmp	r2, r3
 8017788:	f0c0 80a0 	bcc.w	80178cc <ip4_reass+0x2ac>
 801778c:	8b7b      	ldrh	r3, [r7, #26]
 801778e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017792:	4293      	cmp	r3, r2
 8017794:	f200 809a 	bhi.w	80178cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017798:	69fa      	ldr	r2, [r7, #28]
 801779a:	6879      	ldr	r1, [r7, #4]
 801779c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801779e:	f7ff fdd5 	bl	801734c <ip_reass_chain_frag_into_datagram_and_validate>
 80177a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80177a4:	697b      	ldr	r3, [r7, #20]
 80177a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177aa:	f000 8091 	beq.w	80178d0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80177ae:	4b5f      	ldr	r3, [pc, #380]	; (801792c <ip4_reass+0x30c>)
 80177b0:	881a      	ldrh	r2, [r3, #0]
 80177b2:	8c3b      	ldrh	r3, [r7, #32]
 80177b4:	4413      	add	r3, r2
 80177b6:	b29a      	uxth	r2, r3
 80177b8:	4b5c      	ldr	r3, [pc, #368]	; (801792c <ip4_reass+0x30c>)
 80177ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80177bc:	69fb      	ldr	r3, [r7, #28]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d00d      	beq.n	80177de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80177c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80177c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177c6:	4413      	add	r3, r2
 80177c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80177ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177cc:	8a7a      	ldrh	r2, [r7, #18]
 80177ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80177d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d2:	7f9b      	ldrb	r3, [r3, #30]
 80177d4:	f043 0301 	orr.w	r3, r3, #1
 80177d8:	b2da      	uxtb	r2, r3
 80177da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	2b01      	cmp	r3, #1
 80177e2:	d171      	bne.n	80178c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80177e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e6:	8b9b      	ldrh	r3, [r3, #28]
 80177e8:	3314      	adds	r3, #20
 80177ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80177ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ee:	685b      	ldr	r3, [r3, #4]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80177f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f8:	685b      	ldr	r3, [r3, #4]
 80177fa:	685b      	ldr	r3, [r3, #4]
 80177fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80177fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017800:	3308      	adds	r3, #8
 8017802:	2214      	movs	r2, #20
 8017804:	4619      	mov	r1, r3
 8017806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017808:	f000 fd45 	bl	8018296 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801780c:	8a3b      	ldrh	r3, [r7, #16]
 801780e:	4618      	mov	r0, r3
 8017810:	f7f3 fcd2 	bl	800b1b8 <lwip_htons>
 8017814:	4603      	mov	r3, r0
 8017816:	461a      	mov	r2, r3
 8017818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801781a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801781e:	2200      	movs	r2, #0
 8017820:	719a      	strb	r2, [r3, #6]
 8017822:	2200      	movs	r2, #0
 8017824:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017828:	2200      	movs	r2, #0
 801782a:	729a      	strb	r2, [r3, #10]
 801782c:	2200      	movs	r2, #0
 801782e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017832:	685b      	ldr	r3, [r3, #4]
 8017834:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017836:	e00d      	b.n	8017854 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801783e:	2114      	movs	r1, #20
 8017840:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017842:	f7f4 ff9f 	bl	800c784 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017846:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f7f5 f8ef 	bl	800ca2c <pbuf_cat>
      r = iprh->next_pbuf;
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017856:	2b00      	cmp	r3, #0
 8017858:	d1ee      	bne.n	8017838 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801785a:	4b35      	ldr	r3, [pc, #212]	; (8017930 <ip4_reass+0x310>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017860:	429a      	cmp	r2, r3
 8017862:	d102      	bne.n	801786a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017864:	2300      	movs	r3, #0
 8017866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017868:	e010      	b.n	801788c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801786a:	4b31      	ldr	r3, [pc, #196]	; (8017930 <ip4_reass+0x310>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017870:	e007      	b.n	8017882 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017878:	429a      	cmp	r2, r3
 801787a:	d006      	beq.n	801788a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017884:	2b00      	cmp	r3, #0
 8017886:	d1f4      	bne.n	8017872 <ip4_reass+0x252>
 8017888:	e000      	b.n	801788c <ip4_reass+0x26c>
          break;
 801788a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801788c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801788e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017890:	f7ff fd2e 	bl	80172f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7f5 f889 	bl	800c9ac <pbuf_clen>
 801789a:	4603      	mov	r3, r0
 801789c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801789e:	4b23      	ldr	r3, [pc, #140]	; (801792c <ip4_reass+0x30c>)
 80178a0:	881b      	ldrh	r3, [r3, #0]
 80178a2:	8c3a      	ldrh	r2, [r7, #32]
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d906      	bls.n	80178b6 <ip4_reass+0x296>
 80178a8:	4b22      	ldr	r3, [pc, #136]	; (8017934 <ip4_reass+0x314>)
 80178aa:	f240 229b 	movw	r2, #667	; 0x29b
 80178ae:	4922      	ldr	r1, [pc, #136]	; (8017938 <ip4_reass+0x318>)
 80178b0:	4822      	ldr	r0, [pc, #136]	; (801793c <ip4_reass+0x31c>)
 80178b2:	f000 fd03 	bl	80182bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80178b6:	4b1d      	ldr	r3, [pc, #116]	; (801792c <ip4_reass+0x30c>)
 80178b8:	881a      	ldrh	r2, [r3, #0]
 80178ba:	8c3b      	ldrh	r3, [r7, #32]
 80178bc:	1ad3      	subs	r3, r2, r3
 80178be:	b29a      	uxth	r2, r3
 80178c0:	4b1a      	ldr	r3, [pc, #104]	; (801792c <ip4_reass+0x30c>)
 80178c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	e02c      	b.n	8017922 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80178c8:	2300      	movs	r3, #0
 80178ca:	e02a      	b.n	8017922 <ip4_reass+0x302>

nullreturn_ipr:
 80178cc:	bf00      	nop
 80178ce:	e000      	b.n	80178d2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80178d0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80178d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d106      	bne.n	80178e6 <ip4_reass+0x2c6>
 80178d8:	4b16      	ldr	r3, [pc, #88]	; (8017934 <ip4_reass+0x314>)
 80178da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80178de:	4918      	ldr	r1, [pc, #96]	; (8017940 <ip4_reass+0x320>)
 80178e0:	4816      	ldr	r0, [pc, #88]	; (801793c <ip4_reass+0x31c>)
 80178e2:	f000 fceb 	bl	80182bc <iprintf>
  if (ipr->p == NULL) {
 80178e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d114      	bne.n	8017918 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80178ee:	4b10      	ldr	r3, [pc, #64]	; (8017930 <ip4_reass+0x310>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d006      	beq.n	8017906 <ip4_reass+0x2e6>
 80178f8:	4b0e      	ldr	r3, [pc, #56]	; (8017934 <ip4_reass+0x314>)
 80178fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80178fe:	4911      	ldr	r1, [pc, #68]	; (8017944 <ip4_reass+0x324>)
 8017900:	480e      	ldr	r0, [pc, #56]	; (801793c <ip4_reass+0x31c>)
 8017902:	f000 fcdb 	bl	80182bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017906:	2100      	movs	r1, #0
 8017908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801790a:	f7ff fcf1 	bl	80172f0 <ip_reass_dequeue_datagram>
 801790e:	e004      	b.n	801791a <ip4_reass+0x2fa>
    goto nullreturn;
 8017910:	bf00      	nop
 8017912:	e002      	b.n	801791a <ip4_reass+0x2fa>
    goto nullreturn;
 8017914:	bf00      	nop
 8017916:	e000      	b.n	801791a <ip4_reass+0x2fa>
  }

nullreturn:
 8017918:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f7f4 ffb8 	bl	800c890 <pbuf_free>
  return NULL;
 8017920:	2300      	movs	r3, #0
}
 8017922:	4618      	mov	r0, r3
 8017924:	3738      	adds	r7, #56	; 0x38
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}
 801792a:	bf00      	nop
 801792c:	20008d9c 	.word	0x20008d9c
 8017930:	20008d98 	.word	0x20008d98
 8017934:	0801cb9c 	.word	0x0801cb9c
 8017938:	0801cd0c 	.word	0x0801cd0c
 801793c:	0801cbe4 	.word	0x0801cbe4
 8017940:	0801cd28 	.word	0x0801cd28
 8017944:	0801cd34 	.word	0x0801cd34

08017948 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801794c:	2005      	movs	r0, #5
 801794e:	f7f4 f91f 	bl	800bb90 <memp_malloc>
 8017952:	4603      	mov	r3, r0
}
 8017954:	4618      	mov	r0, r3
 8017956:	bd80      	pop	{r7, pc}

08017958 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d106      	bne.n	8017974 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017966:	4b07      	ldr	r3, [pc, #28]	; (8017984 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017968:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801796c:	4906      	ldr	r1, [pc, #24]	; (8017988 <ip_frag_free_pbuf_custom_ref+0x30>)
 801796e:	4807      	ldr	r0, [pc, #28]	; (801798c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017970:	f000 fca4 	bl	80182bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017974:	6879      	ldr	r1, [r7, #4]
 8017976:	2005      	movs	r0, #5
 8017978:	f7f4 f95c 	bl	800bc34 <memp_free>
}
 801797c:	bf00      	nop
 801797e:	3708      	adds	r7, #8
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	0801cb9c 	.word	0x0801cb9c
 8017988:	0801cd54 	.word	0x0801cd54
 801798c:	0801cbe4 	.word	0x0801cbe4

08017990 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b084      	sub	sp, #16
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d106      	bne.n	80179b0 <ipfrag_free_pbuf_custom+0x20>
 80179a2:	4b11      	ldr	r3, [pc, #68]	; (80179e8 <ipfrag_free_pbuf_custom+0x58>)
 80179a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80179a8:	4910      	ldr	r1, [pc, #64]	; (80179ec <ipfrag_free_pbuf_custom+0x5c>)
 80179aa:	4811      	ldr	r0, [pc, #68]	; (80179f0 <ipfrag_free_pbuf_custom+0x60>)
 80179ac:	f000 fc86 	bl	80182bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80179b0:	68fa      	ldr	r2, [r7, #12]
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d006      	beq.n	80179c6 <ipfrag_free_pbuf_custom+0x36>
 80179b8:	4b0b      	ldr	r3, [pc, #44]	; (80179e8 <ipfrag_free_pbuf_custom+0x58>)
 80179ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 80179be:	490d      	ldr	r1, [pc, #52]	; (80179f4 <ipfrag_free_pbuf_custom+0x64>)
 80179c0:	480b      	ldr	r0, [pc, #44]	; (80179f0 <ipfrag_free_pbuf_custom+0x60>)
 80179c2:	f000 fc7b 	bl	80182bc <iprintf>
  if (pcr->original != NULL) {
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	695b      	ldr	r3, [r3, #20]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d004      	beq.n	80179d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	695b      	ldr	r3, [r3, #20]
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7f4 ff5c 	bl	800c890 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	f7ff ffbd 	bl	8017958 <ip_frag_free_pbuf_custom_ref>
}
 80179de:	bf00      	nop
 80179e0:	3710      	adds	r7, #16
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
 80179e6:	bf00      	nop
 80179e8:	0801cb9c 	.word	0x0801cb9c
 80179ec:	0801cd60 	.word	0x0801cd60
 80179f0:	0801cbe4 	.word	0x0801cbe4
 80179f4:	0801cd6c 	.word	0x0801cd6c

080179f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b094      	sub	sp, #80	; 0x50
 80179fc:	af02      	add	r7, sp, #8
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017a04:	2300      	movs	r3, #0
 8017a06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017a0e:	3b14      	subs	r3, #20
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	da00      	bge.n	8017a16 <ip4_frag+0x1e>
 8017a14:	3307      	adds	r3, #7
 8017a16:	10db      	asrs	r3, r3, #3
 8017a18:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017a1a:	2314      	movs	r3, #20
 8017a1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	685b      	ldr	r3, [r3, #4]
 8017a22:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a26:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	f003 030f 	and.w	r3, r3, #15
 8017a30:	b2db      	uxtb	r3, r3
 8017a32:	009b      	lsls	r3, r3, #2
 8017a34:	b2db      	uxtb	r3, r3
 8017a36:	2b14      	cmp	r3, #20
 8017a38:	d002      	beq.n	8017a40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017a3a:	f06f 0305 	mvn.w	r3, #5
 8017a3e:	e10f      	b.n	8017c60 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	895b      	ldrh	r3, [r3, #10]
 8017a44:	2b13      	cmp	r3, #19
 8017a46:	d809      	bhi.n	8017a5c <ip4_frag+0x64>
 8017a48:	4b87      	ldr	r3, [pc, #540]	; (8017c68 <ip4_frag+0x270>)
 8017a4a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017a4e:	4987      	ldr	r1, [pc, #540]	; (8017c6c <ip4_frag+0x274>)
 8017a50:	4887      	ldr	r0, [pc, #540]	; (8017c70 <ip4_frag+0x278>)
 8017a52:	f000 fc33 	bl	80182bc <iprintf>
 8017a56:	f06f 0305 	mvn.w	r3, #5
 8017a5a:	e101      	b.n	8017c60 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a5e:	88db      	ldrh	r3, [r3, #6]
 8017a60:	b29b      	uxth	r3, r3
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7f3 fba8 	bl	800b1b8 <lwip_htons>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017a6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017a76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	891b      	ldrh	r3, [r3, #8]
 8017a82:	3b14      	subs	r3, #20
 8017a84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017a88:	e0e0      	b.n	8017c4c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017a8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017a8c:	00db      	lsls	r3, r3, #3
 8017a8e:	b29b      	uxth	r3, r3
 8017a90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a94:	4293      	cmp	r3, r2
 8017a96:	bf28      	it	cs
 8017a98:	4613      	movcs	r3, r2
 8017a9a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017a9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017aa0:	2114      	movs	r1, #20
 8017aa2:	200e      	movs	r0, #14
 8017aa4:	f7f4 fc14 	bl	800c2d0 <pbuf_alloc>
 8017aa8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 80d4 	beq.w	8017c5a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab4:	895b      	ldrh	r3, [r3, #10]
 8017ab6:	2b13      	cmp	r3, #19
 8017ab8:	d806      	bhi.n	8017ac8 <ip4_frag+0xd0>
 8017aba:	4b6b      	ldr	r3, [pc, #428]	; (8017c68 <ip4_frag+0x270>)
 8017abc:	f240 3225 	movw	r2, #805	; 0x325
 8017ac0:	496c      	ldr	r1, [pc, #432]	; (8017c74 <ip4_frag+0x27c>)
 8017ac2:	486b      	ldr	r0, [pc, #428]	; (8017c70 <ip4_frag+0x278>)
 8017ac4:	f000 fbfa 	bl	80182bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aca:	685b      	ldr	r3, [r3, #4]
 8017acc:	2214      	movs	r2, #20
 8017ace:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f000 fbe0 	bl	8018296 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017adc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ade:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017ae2:	e064      	b.n	8017bae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	895a      	ldrh	r2, [r3, #10]
 8017ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017aea:	1ad3      	subs	r3, r2, r3
 8017aec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	895b      	ldrh	r3, [r3, #10]
 8017af2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d906      	bls.n	8017b06 <ip4_frag+0x10e>
 8017af8:	4b5b      	ldr	r3, [pc, #364]	; (8017c68 <ip4_frag+0x270>)
 8017afa:	f240 322d 	movw	r2, #813	; 0x32d
 8017afe:	495e      	ldr	r1, [pc, #376]	; (8017c78 <ip4_frag+0x280>)
 8017b00:	485b      	ldr	r0, [pc, #364]	; (8017c70 <ip4_frag+0x278>)
 8017b02:	f000 fbdb 	bl	80182bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017b06:	8bfa      	ldrh	r2, [r7, #30]
 8017b08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017b0c:	4293      	cmp	r3, r2
 8017b0e:	bf28      	it	cs
 8017b10:	4613      	movcs	r3, r2
 8017b12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d105      	bne.n	8017b2a <ip4_frag+0x132>
        poff = 0;
 8017b1e:	2300      	movs	r3, #0
 8017b20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	60fb      	str	r3, [r7, #12]
        continue;
 8017b28:	e041      	b.n	8017bae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017b2a:	f7ff ff0d 	bl	8017948 <ip_frag_alloc_pbuf_custom_ref>
 8017b2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d103      	bne.n	8017b3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b38:	f7f4 feaa 	bl	800c890 <pbuf_free>
        goto memerr;
 8017b3c:	e08e      	b.n	8017c5c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017b3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017b44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b46:	4413      	add	r3, r2
 8017b48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017b4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017b50:	9201      	str	r2, [sp, #4]
 8017b52:	9300      	str	r3, [sp, #0]
 8017b54:	4603      	mov	r3, r0
 8017b56:	2241      	movs	r2, #65	; 0x41
 8017b58:	2000      	movs	r0, #0
 8017b5a:	f7f4 fcdf 	bl	800c51c <pbuf_alloced_custom>
 8017b5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d106      	bne.n	8017b74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017b66:	69b8      	ldr	r0, [r7, #24]
 8017b68:	f7ff fef6 	bl	8017958 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b6e:	f7f4 fe8f 	bl	800c890 <pbuf_free>
        goto memerr;
 8017b72:	e073      	b.n	8017c5c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017b74:	68f8      	ldr	r0, [r7, #12]
 8017b76:	f7f4 ff31 	bl	800c9dc <pbuf_ref>
      pcr->original = p;
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	68fa      	ldr	r2, [r7, #12]
 8017b7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017b80:	69bb      	ldr	r3, [r7, #24]
 8017b82:	4a3e      	ldr	r2, [pc, #248]	; (8017c7c <ip4_frag+0x284>)
 8017b84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017b86:	6979      	ldr	r1, [r7, #20]
 8017b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b8a:	f7f4 ff4f 	bl	800ca2c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017b8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017b92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017b9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d004      	beq.n	8017bae <ip4_frag+0x1b6>
        poff = 0;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017bae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d196      	bne.n	8017ae4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017bb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017bb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017bbc:	4413      	add	r3, r2
 8017bbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017bc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017bc8:	3b14      	subs	r3, #20
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	bfd4      	ite	le
 8017bce:	2301      	movle	r3, #1
 8017bd0:	2300      	movgt	r3, #0
 8017bd2:	b2db      	uxtb	r3, r3
 8017bd4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017bd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017bda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017bde:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017be0:	6a3b      	ldr	r3, [r7, #32]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d002      	beq.n	8017bec <ip4_frag+0x1f4>
 8017be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d003      	beq.n	8017bf4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017bec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017bf2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017bf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7f3 fade 	bl	800b1b8 <lwip_htons>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	461a      	mov	r2, r3
 8017c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c02:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017c04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c06:	3314      	adds	r3, #20
 8017c08:	b29b      	uxth	r3, r3
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7f3 fad4 	bl	800b1b8 <lwip_htons>
 8017c10:	4603      	mov	r3, r0
 8017c12:	461a      	mov	r2, r3
 8017c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c16:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	729a      	strb	r2, [r3, #10]
 8017c1e:	2200      	movs	r2, #0
 8017c20:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	695b      	ldr	r3, [r3, #20]
 8017c26:	687a      	ldr	r2, [r7, #4]
 8017c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c2a:	68b8      	ldr	r0, [r7, #8]
 8017c2c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c30:	f7f4 fe2e 	bl	800c890 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017c34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c3a:	1ad3      	subs	r3, r2, r3
 8017c3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017c40:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017c44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c46:	4413      	add	r3, r2
 8017c48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017c4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	f47f af1a 	bne.w	8017a8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017c56:	2300      	movs	r3, #0
 8017c58:	e002      	b.n	8017c60 <ip4_frag+0x268>
      goto memerr;
 8017c5a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	3748      	adds	r7, #72	; 0x48
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	0801cb9c 	.word	0x0801cb9c
 8017c6c:	0801cd78 	.word	0x0801cd78
 8017c70:	0801cbe4 	.word	0x0801cbe4
 8017c74:	0801cd94 	.word	0x0801cd94
 8017c78:	0801cdb4 	.word	0x0801cdb4
 8017c7c:	08017991 	.word	0x08017991

08017c80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b086      	sub	sp, #24
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017c8a:	230e      	movs	r3, #14
 8017c8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	895b      	ldrh	r3, [r3, #10]
 8017c92:	2b0e      	cmp	r3, #14
 8017c94:	d96e      	bls.n	8017d74 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	7bdb      	ldrb	r3, [r3, #15]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d106      	bne.n	8017cac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	b2da      	uxtb	r2, r3
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017cb2:	693b      	ldr	r3, [r7, #16]
 8017cb4:	7b1a      	ldrb	r2, [r3, #12]
 8017cb6:	7b5b      	ldrb	r3, [r3, #13]
 8017cb8:	021b      	lsls	r3, r3, #8
 8017cba:	4313      	orrs	r3, r2
 8017cbc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017cbe:	693b      	ldr	r3, [r7, #16]
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	f003 0301 	and.w	r3, r3, #1
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d023      	beq.n	8017d12 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017cca:	693b      	ldr	r3, [r7, #16]
 8017ccc:	781b      	ldrb	r3, [r3, #0]
 8017cce:	2b01      	cmp	r3, #1
 8017cd0:	d10f      	bne.n	8017cf2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	785b      	ldrb	r3, [r3, #1]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d11b      	bne.n	8017d12 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017cde:	2b5e      	cmp	r3, #94	; 0x5e
 8017ce0:	d117      	bne.n	8017d12 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	7b5b      	ldrb	r3, [r3, #13]
 8017ce6:	f043 0310 	orr.w	r3, r3, #16
 8017cea:	b2da      	uxtb	r2, r3
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	735a      	strb	r2, [r3, #13]
 8017cf0:	e00f      	b.n	8017d12 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	2206      	movs	r2, #6
 8017cf6:	4928      	ldr	r1, [pc, #160]	; (8017d98 <ethernet_input+0x118>)
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f000 fabd 	bl	8018278 <memcmp>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d106      	bne.n	8017d12 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	7b5b      	ldrb	r3, [r3, #13]
 8017d08:	f043 0308 	orr.w	r3, r3, #8
 8017d0c:	b2da      	uxtb	r2, r3
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017d12:	89fb      	ldrh	r3, [r7, #14]
 8017d14:	2b08      	cmp	r3, #8
 8017d16:	d003      	beq.n	8017d20 <ethernet_input+0xa0>
 8017d18:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017d1c:	d014      	beq.n	8017d48 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017d1e:	e032      	b.n	8017d86 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d26:	f003 0308 	and.w	r3, r3, #8
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d024      	beq.n	8017d78 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d2e:	8afb      	ldrh	r3, [r7, #22]
 8017d30:	4619      	mov	r1, r3
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f7f4 fd26 	bl	800c784 <pbuf_remove_header>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d11e      	bne.n	8017d7c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017d3e:	6839      	ldr	r1, [r7, #0]
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f7fe ff0f 	bl	8016b64 <ip4_input>
      break;
 8017d46:	e013      	b.n	8017d70 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d4e:	f003 0308 	and.w	r3, r3, #8
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d014      	beq.n	8017d80 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017d56:	8afb      	ldrh	r3, [r7, #22]
 8017d58:	4619      	mov	r1, r3
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f7f4 fd12 	bl	800c784 <pbuf_remove_header>
 8017d60:	4603      	mov	r3, r0
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d10e      	bne.n	8017d84 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017d66:	6839      	ldr	r1, [r7, #0]
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7fe f8ab 	bl	8015ec4 <etharp_input>
      break;
 8017d6e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017d70:	2300      	movs	r3, #0
 8017d72:	e00c      	b.n	8017d8e <ethernet_input+0x10e>
    goto free_and_return;
 8017d74:	bf00      	nop
 8017d76:	e006      	b.n	8017d86 <ethernet_input+0x106>
        goto free_and_return;
 8017d78:	bf00      	nop
 8017d7a:	e004      	b.n	8017d86 <ethernet_input+0x106>
        goto free_and_return;
 8017d7c:	bf00      	nop
 8017d7e:	e002      	b.n	8017d86 <ethernet_input+0x106>
        goto free_and_return;
 8017d80:	bf00      	nop
 8017d82:	e000      	b.n	8017d86 <ethernet_input+0x106>
        goto free_and_return;
 8017d84:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017d86:	6878      	ldr	r0, [r7, #4]
 8017d88:	f7f4 fd82 	bl	800c890 <pbuf_free>
  return ERR_OK;
 8017d8c:	2300      	movs	r3, #0
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3718      	adds	r7, #24
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	08028370 	.word	0x08028370

08017d9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b086      	sub	sp, #24
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	607a      	str	r2, [r7, #4]
 8017da8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017daa:	8c3b      	ldrh	r3, [r7, #32]
 8017dac:	4618      	mov	r0, r3
 8017dae:	f7f3 fa03 	bl	800b1b8 <lwip_htons>
 8017db2:	4603      	mov	r3, r0
 8017db4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017db6:	210e      	movs	r1, #14
 8017db8:	68b8      	ldr	r0, [r7, #8]
 8017dba:	f7f4 fcd3 	bl	800c764 <pbuf_add_header>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d125      	bne.n	8017e10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	685b      	ldr	r3, [r3, #4]
 8017dc8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	8afa      	ldrh	r2, [r7, #22]
 8017dce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	2206      	movs	r2, #6
 8017dd4:	6839      	ldr	r1, [r7, #0]
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f000 fa5d 	bl	8018296 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017ddc:	693b      	ldr	r3, [r7, #16]
 8017dde:	3306      	adds	r3, #6
 8017de0:	2206      	movs	r2, #6
 8017de2:	6879      	ldr	r1, [r7, #4]
 8017de4:	4618      	mov	r0, r3
 8017de6:	f000 fa56 	bl	8018296 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017df0:	2b06      	cmp	r3, #6
 8017df2:	d006      	beq.n	8017e02 <ethernet_output+0x66>
 8017df4:	4b0a      	ldr	r3, [pc, #40]	; (8017e20 <ethernet_output+0x84>)
 8017df6:	f240 1233 	movw	r2, #307	; 0x133
 8017dfa:	490a      	ldr	r1, [pc, #40]	; (8017e24 <ethernet_output+0x88>)
 8017dfc:	480a      	ldr	r0, [pc, #40]	; (8017e28 <ethernet_output+0x8c>)
 8017dfe:	f000 fa5d 	bl	80182bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	699b      	ldr	r3, [r3, #24]
 8017e06:	68b9      	ldr	r1, [r7, #8]
 8017e08:	68f8      	ldr	r0, [r7, #12]
 8017e0a:	4798      	blx	r3
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	e002      	b.n	8017e16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017e10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017e12:	f06f 0301 	mvn.w	r3, #1
}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3718      	adds	r7, #24
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}
 8017e1e:	bf00      	nop
 8017e20:	0801cdc4 	.word	0x0801cdc4
 8017e24:	0801cdfc 	.word	0x0801cdfc
 8017e28:	0801ce30 	.word	0x0801ce30

08017e2c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b086      	sub	sp, #24
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	60bb      	str	r3, [r7, #8]
 8017e3a:	2304      	movs	r3, #4
 8017e3c:	60fb      	str	r3, [r7, #12]
 8017e3e:	2300      	movs	r3, #0
 8017e40:	613b      	str	r3, [r7, #16]
 8017e42:	2300      	movs	r3, #0
 8017e44:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017e46:	f107 0308 	add.w	r3, r7, #8
 8017e4a:	2100      	movs	r1, #0
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7ed fa62 	bl	8005316 <osMessageCreate>
 8017e52:	4602      	mov	r2, r0
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d102      	bne.n	8017e66 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017e60:	f04f 33ff 	mov.w	r3, #4294967295
 8017e64:	e000      	b.n	8017e68 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017e66:	2300      	movs	r3, #0
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3718      	adds	r7, #24
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}

08017e70 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b082      	sub	sp, #8
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7ed fb27 	bl	80054d0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7ed fb38 	bl	80054fc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017e8c:	bf00      	nop
 8017e8e:	3708      	adds	r7, #8
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
 8017e9c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	6839      	ldr	r1, [r7, #0]
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7ed fa5e 	bl	8005368 <osMessagePut>
 8017eac:	4603      	mov	r3, r0
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d102      	bne.n	8017eb8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	73fb      	strb	r3, [r7, #15]
 8017eb6:	e001      	b.n	8017ebc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017eb8:	23ff      	movs	r3, #255	; 0xff
 8017eba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	3710      	adds	r7, #16
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd80      	pop	{r7, pc}

08017ec8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b08c      	sub	sp, #48	; 0x30
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	61f8      	str	r0, [r7, #28]
 8017ed0:	61b9      	str	r1, [r7, #24]
 8017ed2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017ed4:	f7ed f848 	bl	8004f68 <osKernelSysTick>
 8017ed8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d017      	beq.n	8017f10 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	6819      	ldr	r1, [r3, #0]
 8017ee4:	f107 0320 	add.w	r3, r7, #32
 8017ee8:	697a      	ldr	r2, [r7, #20]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7ed fa7c 	bl	80053e8 <osMessageGet>

    if(event.status == osEventMessage)
 8017ef0:	6a3b      	ldr	r3, [r7, #32]
 8017ef2:	2b10      	cmp	r3, #16
 8017ef4:	d109      	bne.n	8017f0a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef8:	461a      	mov	r2, r3
 8017efa:	69bb      	ldr	r3, [r7, #24]
 8017efc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017efe:	f7ed f833 	bl	8004f68 <osKernelSysTick>
 8017f02:	4602      	mov	r2, r0
 8017f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f06:	1ad3      	subs	r3, r2, r3
 8017f08:	e019      	b.n	8017f3e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8017f0e:	e016      	b.n	8017f3e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017f10:	69fb      	ldr	r3, [r7, #28]
 8017f12:	6819      	ldr	r1, [r3, #0]
 8017f14:	463b      	mov	r3, r7
 8017f16:	f04f 32ff 	mov.w	r2, #4294967295
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f7ed fa64 	bl	80053e8 <osMessageGet>
 8017f20:	f107 0320 	add.w	r3, r7, #32
 8017f24:	463a      	mov	r2, r7
 8017f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8017f28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f2e:	461a      	mov	r2, r3
 8017f30:	69bb      	ldr	r3, [r7, #24]
 8017f32:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017f34:	f7ed f818 	bl	8004f68 <osKernelSysTick>
 8017f38:	4602      	mov	r2, r0
 8017f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017f3e:	4618      	mov	r0, r3
 8017f40:	3730      	adds	r7, #48	; 0x30
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}

08017f46 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017f46:	b580      	push	{r7, lr}
 8017f48:	b086      	sub	sp, #24
 8017f4a:	af00      	add	r7, sp, #0
 8017f4c:	6078      	str	r0, [r7, #4]
 8017f4e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	6819      	ldr	r1, [r3, #0]
 8017f54:	f107 030c 	add.w	r3, r7, #12
 8017f58:	2200      	movs	r2, #0
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7ed fa44 	bl	80053e8 <osMessageGet>

  if(event.status == osEventMessage)
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	2b10      	cmp	r3, #16
 8017f64:	d105      	bne.n	8017f72 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017f66:	693b      	ldr	r3, [r7, #16]
 8017f68:	461a      	mov	r2, r3
 8017f6a:	683b      	ldr	r3, [r7, #0]
 8017f6c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017f6e:	2300      	movs	r3, #0
 8017f70:	e001      	b.n	8017f76 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017f72:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	3718      	adds	r7, #24
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}

08017f7e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017f7e:	b480      	push	{r7}
 8017f80:	b083      	sub	sp, #12
 8017f82:	af00      	add	r7, sp, #0
 8017f84:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d101      	bne.n	8017f92 <sys_mbox_valid+0x14>
    return 0;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	e000      	b.n	8017f94 <sys_mbox_valid+0x16>
  else
    return 1;
 8017f92:	2301      	movs	r3, #1
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	370c      	adds	r7, #12
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr

08017fa0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	b083      	sub	sp, #12
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2200      	movs	r2, #0
 8017fac:	601a      	str	r2, [r3, #0]
}
 8017fae:	bf00      	nop
 8017fb0:	370c      	adds	r7, #12
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr

08017fba <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017fba:	b580      	push	{r7, lr}
 8017fbc:	b084      	sub	sp, #16
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
 8017fc2:	460b      	mov	r3, r1
 8017fc4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	60bb      	str	r3, [r7, #8]
 8017fca:	2300      	movs	r3, #0
 8017fcc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017fce:	f107 0308 	add.w	r3, r7, #8
 8017fd2:	2101      	movs	r1, #1
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f7ed f8d3 	bl	8005180 <osSemaphoreCreate>
 8017fda:	4602      	mov	r2, r0
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d102      	bne.n	8017fee <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fec:	e009      	b.n	8018002 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017fee:	78fb      	ldrb	r3, [r7, #3]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d105      	bne.n	8018000 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2100      	movs	r1, #0
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7ed f8f4 	bl	80051e8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018000:	2300      	movs	r3, #0
}
 8018002:	4618      	mov	r0, r3
 8018004:	3710      	adds	r7, #16
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}

0801800a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801800a:	b580      	push	{r7, lr}
 801800c:	b084      	sub	sp, #16
 801800e:	af00      	add	r7, sp, #0
 8018010:	6078      	str	r0, [r7, #4]
 8018012:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018014:	f7ec ffa8 	bl	8004f68 <osKernelSysTick>
 8018018:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d011      	beq.n	8018044 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	6839      	ldr	r1, [r7, #0]
 8018026:	4618      	mov	r0, r3
 8018028:	f7ed f8de 	bl	80051e8 <osSemaphoreWait>
 801802c:	4603      	mov	r3, r0
 801802e:	2b00      	cmp	r3, #0
 8018030:	d105      	bne.n	801803e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018032:	f7ec ff99 	bl	8004f68 <osKernelSysTick>
 8018036:	4602      	mov	r2, r0
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	1ad3      	subs	r3, r2, r3
 801803c:	e012      	b.n	8018064 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801803e:	f04f 33ff 	mov.w	r3, #4294967295
 8018042:	e00f      	b.n	8018064 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018044:	bf00      	nop
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	f04f 31ff 	mov.w	r1, #4294967295
 801804e:	4618      	mov	r0, r3
 8018050:	f7ed f8ca 	bl	80051e8 <osSemaphoreWait>
 8018054:	4603      	mov	r3, r0
 8018056:	2b00      	cmp	r3, #0
 8018058:	d1f5      	bne.n	8018046 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801805a:	f7ec ff85 	bl	8004f68 <osKernelSysTick>
 801805e:	4602      	mov	r2, r0
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018064:	4618      	mov	r0, r3
 8018066:	3710      	adds	r7, #16
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}

0801806c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b082      	sub	sp, #8
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4618      	mov	r0, r3
 801807a:	f7ed f903 	bl	8005284 <osSemaphoreRelease>
}
 801807e:	bf00      	nop
 8018080:	3708      	adds	r7, #8
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018086:	b580      	push	{r7, lr}
 8018088:	b082      	sub	sp, #8
 801808a:	af00      	add	r7, sp, #0
 801808c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	4618      	mov	r0, r3
 8018094:	f7ed f92c 	bl	80052f0 <osSemaphoreDelete>
}
 8018098:	bf00      	nop
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}

080180a0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80180a0:	b480      	push	{r7}
 80180a2:	b083      	sub	sp, #12
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d101      	bne.n	80180b4 <sys_sem_valid+0x14>
    return 0;
 80180b0:	2300      	movs	r3, #0
 80180b2:	e000      	b.n	80180b6 <sys_sem_valid+0x16>
  else
    return 1;
 80180b4:	2301      	movs	r3, #1
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	370c      	adds	r7, #12
 80180ba:	46bd      	mov	sp, r7
 80180bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c0:	4770      	bx	lr

080180c2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80180c2:	b480      	push	{r7}
 80180c4:	b083      	sub	sp, #12
 80180c6:	af00      	add	r7, sp, #0
 80180c8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2200      	movs	r2, #0
 80180ce:	601a      	str	r2, [r3, #0]
}
 80180d0:	bf00      	nop
 80180d2:	370c      	adds	r7, #12
 80180d4:	46bd      	mov	sp, r7
 80180d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180da:	4770      	bx	lr

080180dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80180e0:	4803      	ldr	r0, [pc, #12]	; (80180f0 <sys_init+0x14>)
 80180e2:	f7ec ffb1 	bl	8005048 <osMutexCreate>
 80180e6:	4602      	mov	r2, r0
 80180e8:	4b02      	ldr	r3, [pc, #8]	; (80180f4 <sys_init+0x18>)
 80180ea:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80180ec:	bf00      	nop
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	08028380 	.word	0x08028380
 80180f4:	2000fb20 	.word	0x2000fb20

080180f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018100:	2300      	movs	r3, #0
 8018102:	60bb      	str	r3, [r7, #8]
 8018104:	2300      	movs	r3, #0
 8018106:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018108:	f107 0308 	add.w	r3, r7, #8
 801810c:	4618      	mov	r0, r3
 801810e:	f7ec ff9b 	bl	8005048 <osMutexCreate>
 8018112:	4602      	mov	r2, r0
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d102      	bne.n	8018126 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018120:	f04f 33ff 	mov.w	r3, #4294967295
 8018124:	e000      	b.n	8018128 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018126:	2300      	movs	r3, #0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3710      	adds	r7, #16
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}

08018130 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f04f 31ff 	mov.w	r1, #4294967295
 8018140:	4618      	mov	r0, r3
 8018142:	f7ec ff99 	bl	8005078 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018146:	bf00      	nop
 8018148:	3708      	adds	r7, #8
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}

0801814e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801814e:	b580      	push	{r7, lr}
 8018150:	b082      	sub	sp, #8
 8018152:	af00      	add	r7, sp, #0
 8018154:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	4618      	mov	r0, r3
 801815c:	f7ec ffda 	bl	8005114 <osMutexRelease>
}
 8018160:	bf00      	nop
 8018162:	3708      	adds	r7, #8
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}

08018168 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b08c      	sub	sp, #48	; 0x30
 801816c:	af00      	add	r7, sp, #0
 801816e:	60f8      	str	r0, [r7, #12]
 8018170:	60b9      	str	r1, [r7, #8]
 8018172:	607a      	str	r2, [r7, #4]
 8018174:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018176:	f107 0314 	add.w	r3, r7, #20
 801817a:	2200      	movs	r2, #0
 801817c:	601a      	str	r2, [r3, #0]
 801817e:	605a      	str	r2, [r3, #4]
 8018180:	609a      	str	r2, [r3, #8]
 8018182:	60da      	str	r2, [r3, #12]
 8018184:	611a      	str	r2, [r3, #16]
 8018186:	615a      	str	r2, [r3, #20]
 8018188:	619a      	str	r2, [r3, #24]
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	617b      	str	r3, [r7, #20]
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	61bb      	str	r3, [r7, #24]
 8018192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018194:	b21b      	sxth	r3, r3
 8018196:	83bb      	strh	r3, [r7, #28]
 8018198:	683b      	ldr	r3, [r7, #0]
 801819a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801819c:	f107 0314 	add.w	r3, r7, #20
 80181a0:	6879      	ldr	r1, [r7, #4]
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7ec fef0 	bl	8004f88 <osThreadCreate>
 80181a8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80181aa:	4618      	mov	r0, r3
 80181ac:	3730      	adds	r7, #48	; 0x30
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
	...

080181b4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80181b8:	4b04      	ldr	r3, [pc, #16]	; (80181cc <sys_arch_protect+0x18>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	f04f 31ff 	mov.w	r1, #4294967295
 80181c0:	4618      	mov	r0, r3
 80181c2:	f7ec ff59 	bl	8005078 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80181c6:	2301      	movs	r3, #1
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	bd80      	pop	{r7, pc}
 80181cc:	2000fb20 	.word	0x2000fb20

080181d0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80181d8:	4b04      	ldr	r3, [pc, #16]	; (80181ec <sys_arch_unprotect+0x1c>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	4618      	mov	r0, r3
 80181de:	f7ec ff99 	bl	8005114 <osMutexRelease>
}
 80181e2:	bf00      	nop
 80181e4:	3708      	adds	r7, #8
 80181e6:	46bd      	mov	sp, r7
 80181e8:	bd80      	pop	{r7, pc}
 80181ea:	bf00      	nop
 80181ec:	2000fb20 	.word	0x2000fb20

080181f0 <__libc_init_array>:
 80181f0:	b570      	push	{r4, r5, r6, lr}
 80181f2:	4e0d      	ldr	r6, [pc, #52]	; (8018228 <__libc_init_array+0x38>)
 80181f4:	4c0d      	ldr	r4, [pc, #52]	; (801822c <__libc_init_array+0x3c>)
 80181f6:	1ba4      	subs	r4, r4, r6
 80181f8:	10a4      	asrs	r4, r4, #2
 80181fa:	2500      	movs	r5, #0
 80181fc:	42a5      	cmp	r5, r4
 80181fe:	d109      	bne.n	8018214 <__libc_init_array+0x24>
 8018200:	4e0b      	ldr	r6, [pc, #44]	; (8018230 <__libc_init_array+0x40>)
 8018202:	4c0c      	ldr	r4, [pc, #48]	; (8018234 <__libc_init_array+0x44>)
 8018204:	f000 fff2 	bl	80191ec <_init>
 8018208:	1ba4      	subs	r4, r4, r6
 801820a:	10a4      	asrs	r4, r4, #2
 801820c:	2500      	movs	r5, #0
 801820e:	42a5      	cmp	r5, r4
 8018210:	d105      	bne.n	801821e <__libc_init_array+0x2e>
 8018212:	bd70      	pop	{r4, r5, r6, pc}
 8018214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018218:	4798      	blx	r3
 801821a:	3501      	adds	r5, #1
 801821c:	e7ee      	b.n	80181fc <__libc_init_array+0xc>
 801821e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018222:	4798      	blx	r3
 8018224:	3501      	adds	r5, #1
 8018226:	e7f2      	b.n	801820e <__libc_init_array+0x1e>
 8018228:	08028534 	.word	0x08028534
 801822c:	08028534 	.word	0x08028534
 8018230:	08028534 	.word	0x08028534
 8018234:	08028538 	.word	0x08028538

08018238 <__locale_ctype_ptr>:
 8018238:	4b04      	ldr	r3, [pc, #16]	; (801824c <__locale_ctype_ptr+0x14>)
 801823a:	4a05      	ldr	r2, [pc, #20]	; (8018250 <__locale_ctype_ptr+0x18>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	6a1b      	ldr	r3, [r3, #32]
 8018240:	2b00      	cmp	r3, #0
 8018242:	bf08      	it	eq
 8018244:	4613      	moveq	r3, r2
 8018246:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801824a:	4770      	bx	lr
 801824c:	20000020 	.word	0x20000020
 8018250:	20000084 	.word	0x20000084

08018254 <__ascii_mbtowc>:
 8018254:	b082      	sub	sp, #8
 8018256:	b901      	cbnz	r1, 801825a <__ascii_mbtowc+0x6>
 8018258:	a901      	add	r1, sp, #4
 801825a:	b142      	cbz	r2, 801826e <__ascii_mbtowc+0x1a>
 801825c:	b14b      	cbz	r3, 8018272 <__ascii_mbtowc+0x1e>
 801825e:	7813      	ldrb	r3, [r2, #0]
 8018260:	600b      	str	r3, [r1, #0]
 8018262:	7812      	ldrb	r2, [r2, #0]
 8018264:	1c10      	adds	r0, r2, #0
 8018266:	bf18      	it	ne
 8018268:	2001      	movne	r0, #1
 801826a:	b002      	add	sp, #8
 801826c:	4770      	bx	lr
 801826e:	4610      	mov	r0, r2
 8018270:	e7fb      	b.n	801826a <__ascii_mbtowc+0x16>
 8018272:	f06f 0001 	mvn.w	r0, #1
 8018276:	e7f8      	b.n	801826a <__ascii_mbtowc+0x16>

08018278 <memcmp>:
 8018278:	b530      	push	{r4, r5, lr}
 801827a:	2400      	movs	r4, #0
 801827c:	42a2      	cmp	r2, r4
 801827e:	d101      	bne.n	8018284 <memcmp+0xc>
 8018280:	2000      	movs	r0, #0
 8018282:	e007      	b.n	8018294 <memcmp+0x1c>
 8018284:	5d03      	ldrb	r3, [r0, r4]
 8018286:	3401      	adds	r4, #1
 8018288:	190d      	adds	r5, r1, r4
 801828a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801828e:	42ab      	cmp	r3, r5
 8018290:	d0f4      	beq.n	801827c <memcmp+0x4>
 8018292:	1b58      	subs	r0, r3, r5
 8018294:	bd30      	pop	{r4, r5, pc}

08018296 <memcpy>:
 8018296:	b510      	push	{r4, lr}
 8018298:	1e43      	subs	r3, r0, #1
 801829a:	440a      	add	r2, r1
 801829c:	4291      	cmp	r1, r2
 801829e:	d100      	bne.n	80182a2 <memcpy+0xc>
 80182a0:	bd10      	pop	{r4, pc}
 80182a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80182aa:	e7f7      	b.n	801829c <memcpy+0x6>

080182ac <memset>:
 80182ac:	4402      	add	r2, r0
 80182ae:	4603      	mov	r3, r0
 80182b0:	4293      	cmp	r3, r2
 80182b2:	d100      	bne.n	80182b6 <memset+0xa>
 80182b4:	4770      	bx	lr
 80182b6:	f803 1b01 	strb.w	r1, [r3], #1
 80182ba:	e7f9      	b.n	80182b0 <memset+0x4>

080182bc <iprintf>:
 80182bc:	b40f      	push	{r0, r1, r2, r3}
 80182be:	4b0a      	ldr	r3, [pc, #40]	; (80182e8 <iprintf+0x2c>)
 80182c0:	b513      	push	{r0, r1, r4, lr}
 80182c2:	681c      	ldr	r4, [r3, #0]
 80182c4:	b124      	cbz	r4, 80182d0 <iprintf+0x14>
 80182c6:	69a3      	ldr	r3, [r4, #24]
 80182c8:	b913      	cbnz	r3, 80182d0 <iprintf+0x14>
 80182ca:	4620      	mov	r0, r4
 80182cc:	f000 f8fa 	bl	80184c4 <__sinit>
 80182d0:	ab05      	add	r3, sp, #20
 80182d2:	9a04      	ldr	r2, [sp, #16]
 80182d4:	68a1      	ldr	r1, [r4, #8]
 80182d6:	9301      	str	r3, [sp, #4]
 80182d8:	4620      	mov	r0, r4
 80182da:	f000 fa57 	bl	801878c <_vfiprintf_r>
 80182de:	b002      	add	sp, #8
 80182e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182e4:	b004      	add	sp, #16
 80182e6:	4770      	bx	lr
 80182e8:	20000020 	.word	0x20000020

080182ec <rand>:
 80182ec:	b538      	push	{r3, r4, r5, lr}
 80182ee:	4b13      	ldr	r3, [pc, #76]	; (801833c <rand+0x50>)
 80182f0:	681c      	ldr	r4, [r3, #0]
 80182f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80182f4:	b97b      	cbnz	r3, 8018316 <rand+0x2a>
 80182f6:	2018      	movs	r0, #24
 80182f8:	f000 f96e 	bl	80185d8 <malloc>
 80182fc:	4a10      	ldr	r2, [pc, #64]	; (8018340 <rand+0x54>)
 80182fe:	4b11      	ldr	r3, [pc, #68]	; (8018344 <rand+0x58>)
 8018300:	63a0      	str	r0, [r4, #56]	; 0x38
 8018302:	e9c0 2300 	strd	r2, r3, [r0]
 8018306:	4b10      	ldr	r3, [pc, #64]	; (8018348 <rand+0x5c>)
 8018308:	6083      	str	r3, [r0, #8]
 801830a:	230b      	movs	r3, #11
 801830c:	8183      	strh	r3, [r0, #12]
 801830e:	2201      	movs	r2, #1
 8018310:	2300      	movs	r3, #0
 8018312:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018316:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018318:	480c      	ldr	r0, [pc, #48]	; (801834c <rand+0x60>)
 801831a:	690a      	ldr	r2, [r1, #16]
 801831c:	694b      	ldr	r3, [r1, #20]
 801831e:	4c0c      	ldr	r4, [pc, #48]	; (8018350 <rand+0x64>)
 8018320:	4350      	muls	r0, r2
 8018322:	fb04 0003 	mla	r0, r4, r3, r0
 8018326:	fba2 2304 	umull	r2, r3, r2, r4
 801832a:	4403      	add	r3, r0
 801832c:	1c54      	adds	r4, r2, #1
 801832e:	f143 0500 	adc.w	r5, r3, #0
 8018332:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8018336:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801833a:	bd38      	pop	{r3, r4, r5, pc}
 801833c:	20000020 	.word	0x20000020
 8018340:	abcd330e 	.word	0xabcd330e
 8018344:	e66d1234 	.word	0xe66d1234
 8018348:	0005deec 	.word	0x0005deec
 801834c:	5851f42d 	.word	0x5851f42d
 8018350:	4c957f2d 	.word	0x4c957f2d

08018354 <strcasecmp>:
 8018354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018356:	4606      	mov	r6, r0
 8018358:	460f      	mov	r7, r1
 801835a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801835e:	f7ff ff6b 	bl	8018238 <__locale_ctype_ptr>
 8018362:	4420      	add	r0, r4
 8018364:	f817 5b01 	ldrb.w	r5, [r7], #1
 8018368:	7843      	ldrb	r3, [r0, #1]
 801836a:	f003 0303 	and.w	r3, r3, #3
 801836e:	2b01      	cmp	r3, #1
 8018370:	bf08      	it	eq
 8018372:	3420      	addeq	r4, #32
 8018374:	f7ff ff60 	bl	8018238 <__locale_ctype_ptr>
 8018378:	4428      	add	r0, r5
 801837a:	7842      	ldrb	r2, [r0, #1]
 801837c:	f002 0203 	and.w	r2, r2, #3
 8018380:	2a01      	cmp	r2, #1
 8018382:	bf08      	it	eq
 8018384:	3520      	addeq	r5, #32
 8018386:	1b60      	subs	r0, r4, r5
 8018388:	d101      	bne.n	801838e <strcasecmp+0x3a>
 801838a:	2d00      	cmp	r5, #0
 801838c:	d1e5      	bne.n	801835a <strcasecmp+0x6>
 801838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018390 <strchr>:
 8018390:	b2c9      	uxtb	r1, r1
 8018392:	4603      	mov	r3, r0
 8018394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018398:	b11a      	cbz	r2, 80183a2 <strchr+0x12>
 801839a:	428a      	cmp	r2, r1
 801839c:	d1f9      	bne.n	8018392 <strchr+0x2>
 801839e:	4618      	mov	r0, r3
 80183a0:	4770      	bx	lr
 80183a2:	2900      	cmp	r1, #0
 80183a4:	bf18      	it	ne
 80183a6:	2300      	movne	r3, #0
 80183a8:	e7f9      	b.n	801839e <strchr+0xe>

080183aa <strncmp>:
 80183aa:	b510      	push	{r4, lr}
 80183ac:	b16a      	cbz	r2, 80183ca <strncmp+0x20>
 80183ae:	3901      	subs	r1, #1
 80183b0:	1884      	adds	r4, r0, r2
 80183b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80183b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80183ba:	4293      	cmp	r3, r2
 80183bc:	d103      	bne.n	80183c6 <strncmp+0x1c>
 80183be:	42a0      	cmp	r0, r4
 80183c0:	d001      	beq.n	80183c6 <strncmp+0x1c>
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d1f5      	bne.n	80183b2 <strncmp+0x8>
 80183c6:	1a98      	subs	r0, r3, r2
 80183c8:	bd10      	pop	{r4, pc}
 80183ca:	4610      	mov	r0, r2
 80183cc:	e7fc      	b.n	80183c8 <strncmp+0x1e>

080183ce <__strtok_r>:
 80183ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183d0:	b918      	cbnz	r0, 80183da <__strtok_r+0xc>
 80183d2:	6810      	ldr	r0, [r2, #0]
 80183d4:	b908      	cbnz	r0, 80183da <__strtok_r+0xc>
 80183d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183d8:	4620      	mov	r0, r4
 80183da:	4604      	mov	r4, r0
 80183dc:	460f      	mov	r7, r1
 80183de:	f814 5b01 	ldrb.w	r5, [r4], #1
 80183e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80183e6:	b91e      	cbnz	r6, 80183f0 <__strtok_r+0x22>
 80183e8:	b96d      	cbnz	r5, 8018406 <__strtok_r+0x38>
 80183ea:	6015      	str	r5, [r2, #0]
 80183ec:	4628      	mov	r0, r5
 80183ee:	e7f2      	b.n	80183d6 <__strtok_r+0x8>
 80183f0:	42b5      	cmp	r5, r6
 80183f2:	d1f6      	bne.n	80183e2 <__strtok_r+0x14>
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d1ef      	bne.n	80183d8 <__strtok_r+0xa>
 80183f8:	6014      	str	r4, [r2, #0]
 80183fa:	7003      	strb	r3, [r0, #0]
 80183fc:	e7eb      	b.n	80183d6 <__strtok_r+0x8>
 80183fe:	462b      	mov	r3, r5
 8018400:	e00d      	b.n	801841e <__strtok_r+0x50>
 8018402:	b926      	cbnz	r6, 801840e <__strtok_r+0x40>
 8018404:	461c      	mov	r4, r3
 8018406:	4623      	mov	r3, r4
 8018408:	460f      	mov	r7, r1
 801840a:	f813 5b01 	ldrb.w	r5, [r3], #1
 801840e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018412:	42b5      	cmp	r5, r6
 8018414:	d1f5      	bne.n	8018402 <__strtok_r+0x34>
 8018416:	2d00      	cmp	r5, #0
 8018418:	d0f1      	beq.n	80183fe <__strtok_r+0x30>
 801841a:	2100      	movs	r1, #0
 801841c:	7021      	strb	r1, [r4, #0]
 801841e:	6013      	str	r3, [r2, #0]
 8018420:	e7d9      	b.n	80183d6 <__strtok_r+0x8>

08018422 <strtok_r>:
 8018422:	2301      	movs	r3, #1
 8018424:	f7ff bfd3 	b.w	80183ce <__strtok_r>

08018428 <__ascii_wctomb>:
 8018428:	b149      	cbz	r1, 801843e <__ascii_wctomb+0x16>
 801842a:	2aff      	cmp	r2, #255	; 0xff
 801842c:	bf85      	ittet	hi
 801842e:	238a      	movhi	r3, #138	; 0x8a
 8018430:	6003      	strhi	r3, [r0, #0]
 8018432:	700a      	strbls	r2, [r1, #0]
 8018434:	f04f 30ff 	movhi.w	r0, #4294967295
 8018438:	bf98      	it	ls
 801843a:	2001      	movls	r0, #1
 801843c:	4770      	bx	lr
 801843e:	4608      	mov	r0, r1
 8018440:	4770      	bx	lr
	...

08018444 <std>:
 8018444:	2300      	movs	r3, #0
 8018446:	b510      	push	{r4, lr}
 8018448:	4604      	mov	r4, r0
 801844a:	e9c0 3300 	strd	r3, r3, [r0]
 801844e:	6083      	str	r3, [r0, #8]
 8018450:	8181      	strh	r1, [r0, #12]
 8018452:	6643      	str	r3, [r0, #100]	; 0x64
 8018454:	81c2      	strh	r2, [r0, #14]
 8018456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801845a:	6183      	str	r3, [r0, #24]
 801845c:	4619      	mov	r1, r3
 801845e:	2208      	movs	r2, #8
 8018460:	305c      	adds	r0, #92	; 0x5c
 8018462:	f7ff ff23 	bl	80182ac <memset>
 8018466:	4b05      	ldr	r3, [pc, #20]	; (801847c <std+0x38>)
 8018468:	6263      	str	r3, [r4, #36]	; 0x24
 801846a:	4b05      	ldr	r3, [pc, #20]	; (8018480 <std+0x3c>)
 801846c:	62a3      	str	r3, [r4, #40]	; 0x28
 801846e:	4b05      	ldr	r3, [pc, #20]	; (8018484 <std+0x40>)
 8018470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018472:	4b05      	ldr	r3, [pc, #20]	; (8018488 <std+0x44>)
 8018474:	6224      	str	r4, [r4, #32]
 8018476:	6323      	str	r3, [r4, #48]	; 0x30
 8018478:	bd10      	pop	{r4, pc}
 801847a:	bf00      	nop
 801847c:	08018ce9 	.word	0x08018ce9
 8018480:	08018d0b 	.word	0x08018d0b
 8018484:	08018d43 	.word	0x08018d43
 8018488:	08018d67 	.word	0x08018d67

0801848c <_cleanup_r>:
 801848c:	4901      	ldr	r1, [pc, #4]	; (8018494 <_cleanup_r+0x8>)
 801848e:	f000 b885 	b.w	801859c <_fwalk_reent>
 8018492:	bf00      	nop
 8018494:	08019041 	.word	0x08019041

08018498 <__sfmoreglue>:
 8018498:	b570      	push	{r4, r5, r6, lr}
 801849a:	1e4a      	subs	r2, r1, #1
 801849c:	2568      	movs	r5, #104	; 0x68
 801849e:	4355      	muls	r5, r2
 80184a0:	460e      	mov	r6, r1
 80184a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80184a6:	f000 f8ed 	bl	8018684 <_malloc_r>
 80184aa:	4604      	mov	r4, r0
 80184ac:	b140      	cbz	r0, 80184c0 <__sfmoreglue+0x28>
 80184ae:	2100      	movs	r1, #0
 80184b0:	e9c0 1600 	strd	r1, r6, [r0]
 80184b4:	300c      	adds	r0, #12
 80184b6:	60a0      	str	r0, [r4, #8]
 80184b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80184bc:	f7ff fef6 	bl	80182ac <memset>
 80184c0:	4620      	mov	r0, r4
 80184c2:	bd70      	pop	{r4, r5, r6, pc}

080184c4 <__sinit>:
 80184c4:	6983      	ldr	r3, [r0, #24]
 80184c6:	b510      	push	{r4, lr}
 80184c8:	4604      	mov	r4, r0
 80184ca:	bb33      	cbnz	r3, 801851a <__sinit+0x56>
 80184cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80184d0:	6503      	str	r3, [r0, #80]	; 0x50
 80184d2:	4b12      	ldr	r3, [pc, #72]	; (801851c <__sinit+0x58>)
 80184d4:	4a12      	ldr	r2, [pc, #72]	; (8018520 <__sinit+0x5c>)
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	6282      	str	r2, [r0, #40]	; 0x28
 80184da:	4298      	cmp	r0, r3
 80184dc:	bf04      	itt	eq
 80184de:	2301      	moveq	r3, #1
 80184e0:	6183      	streq	r3, [r0, #24]
 80184e2:	f000 f81f 	bl	8018524 <__sfp>
 80184e6:	6060      	str	r0, [r4, #4]
 80184e8:	4620      	mov	r0, r4
 80184ea:	f000 f81b 	bl	8018524 <__sfp>
 80184ee:	60a0      	str	r0, [r4, #8]
 80184f0:	4620      	mov	r0, r4
 80184f2:	f000 f817 	bl	8018524 <__sfp>
 80184f6:	2200      	movs	r2, #0
 80184f8:	60e0      	str	r0, [r4, #12]
 80184fa:	2104      	movs	r1, #4
 80184fc:	6860      	ldr	r0, [r4, #4]
 80184fe:	f7ff ffa1 	bl	8018444 <std>
 8018502:	2201      	movs	r2, #1
 8018504:	2109      	movs	r1, #9
 8018506:	68a0      	ldr	r0, [r4, #8]
 8018508:	f7ff ff9c 	bl	8018444 <std>
 801850c:	2202      	movs	r2, #2
 801850e:	2112      	movs	r1, #18
 8018510:	68e0      	ldr	r0, [r4, #12]
 8018512:	f7ff ff97 	bl	8018444 <std>
 8018516:	2301      	movs	r3, #1
 8018518:	61a3      	str	r3, [r4, #24]
 801851a:	bd10      	pop	{r4, pc}
 801851c:	08028388 	.word	0x08028388
 8018520:	0801848d 	.word	0x0801848d

08018524 <__sfp>:
 8018524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018526:	4b1b      	ldr	r3, [pc, #108]	; (8018594 <__sfp+0x70>)
 8018528:	681e      	ldr	r6, [r3, #0]
 801852a:	69b3      	ldr	r3, [r6, #24]
 801852c:	4607      	mov	r7, r0
 801852e:	b913      	cbnz	r3, 8018536 <__sfp+0x12>
 8018530:	4630      	mov	r0, r6
 8018532:	f7ff ffc7 	bl	80184c4 <__sinit>
 8018536:	3648      	adds	r6, #72	; 0x48
 8018538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801853c:	3b01      	subs	r3, #1
 801853e:	d503      	bpl.n	8018548 <__sfp+0x24>
 8018540:	6833      	ldr	r3, [r6, #0]
 8018542:	b133      	cbz	r3, 8018552 <__sfp+0x2e>
 8018544:	6836      	ldr	r6, [r6, #0]
 8018546:	e7f7      	b.n	8018538 <__sfp+0x14>
 8018548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801854c:	b16d      	cbz	r5, 801856a <__sfp+0x46>
 801854e:	3468      	adds	r4, #104	; 0x68
 8018550:	e7f4      	b.n	801853c <__sfp+0x18>
 8018552:	2104      	movs	r1, #4
 8018554:	4638      	mov	r0, r7
 8018556:	f7ff ff9f 	bl	8018498 <__sfmoreglue>
 801855a:	6030      	str	r0, [r6, #0]
 801855c:	2800      	cmp	r0, #0
 801855e:	d1f1      	bne.n	8018544 <__sfp+0x20>
 8018560:	230c      	movs	r3, #12
 8018562:	603b      	str	r3, [r7, #0]
 8018564:	4604      	mov	r4, r0
 8018566:	4620      	mov	r0, r4
 8018568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801856a:	4b0b      	ldr	r3, [pc, #44]	; (8018598 <__sfp+0x74>)
 801856c:	6665      	str	r5, [r4, #100]	; 0x64
 801856e:	e9c4 5500 	strd	r5, r5, [r4]
 8018572:	60a5      	str	r5, [r4, #8]
 8018574:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018578:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801857c:	2208      	movs	r2, #8
 801857e:	4629      	mov	r1, r5
 8018580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018584:	f7ff fe92 	bl	80182ac <memset>
 8018588:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801858c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018590:	e7e9      	b.n	8018566 <__sfp+0x42>
 8018592:	bf00      	nop
 8018594:	08028388 	.word	0x08028388
 8018598:	ffff0001 	.word	0xffff0001

0801859c <_fwalk_reent>:
 801859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185a0:	4680      	mov	r8, r0
 80185a2:	4689      	mov	r9, r1
 80185a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80185a8:	2600      	movs	r6, #0
 80185aa:	b914      	cbnz	r4, 80185b2 <_fwalk_reent+0x16>
 80185ac:	4630      	mov	r0, r6
 80185ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80185b6:	3f01      	subs	r7, #1
 80185b8:	d501      	bpl.n	80185be <_fwalk_reent+0x22>
 80185ba:	6824      	ldr	r4, [r4, #0]
 80185bc:	e7f5      	b.n	80185aa <_fwalk_reent+0xe>
 80185be:	89ab      	ldrh	r3, [r5, #12]
 80185c0:	2b01      	cmp	r3, #1
 80185c2:	d907      	bls.n	80185d4 <_fwalk_reent+0x38>
 80185c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80185c8:	3301      	adds	r3, #1
 80185ca:	d003      	beq.n	80185d4 <_fwalk_reent+0x38>
 80185cc:	4629      	mov	r1, r5
 80185ce:	4640      	mov	r0, r8
 80185d0:	47c8      	blx	r9
 80185d2:	4306      	orrs	r6, r0
 80185d4:	3568      	adds	r5, #104	; 0x68
 80185d6:	e7ee      	b.n	80185b6 <_fwalk_reent+0x1a>

080185d8 <malloc>:
 80185d8:	4b02      	ldr	r3, [pc, #8]	; (80185e4 <malloc+0xc>)
 80185da:	4601      	mov	r1, r0
 80185dc:	6818      	ldr	r0, [r3, #0]
 80185de:	f000 b851 	b.w	8018684 <_malloc_r>
 80185e2:	bf00      	nop
 80185e4:	20000020 	.word	0x20000020

080185e8 <_free_r>:
 80185e8:	b538      	push	{r3, r4, r5, lr}
 80185ea:	4605      	mov	r5, r0
 80185ec:	2900      	cmp	r1, #0
 80185ee:	d045      	beq.n	801867c <_free_r+0x94>
 80185f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185f4:	1f0c      	subs	r4, r1, #4
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	bfb8      	it	lt
 80185fa:	18e4      	addlt	r4, r4, r3
 80185fc:	f000 fdc0 	bl	8019180 <__malloc_lock>
 8018600:	4a1f      	ldr	r2, [pc, #124]	; (8018680 <_free_r+0x98>)
 8018602:	6813      	ldr	r3, [r2, #0]
 8018604:	4610      	mov	r0, r2
 8018606:	b933      	cbnz	r3, 8018616 <_free_r+0x2e>
 8018608:	6063      	str	r3, [r4, #4]
 801860a:	6014      	str	r4, [r2, #0]
 801860c:	4628      	mov	r0, r5
 801860e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018612:	f000 bdb6 	b.w	8019182 <__malloc_unlock>
 8018616:	42a3      	cmp	r3, r4
 8018618:	d90c      	bls.n	8018634 <_free_r+0x4c>
 801861a:	6821      	ldr	r1, [r4, #0]
 801861c:	1862      	adds	r2, r4, r1
 801861e:	4293      	cmp	r3, r2
 8018620:	bf04      	itt	eq
 8018622:	681a      	ldreq	r2, [r3, #0]
 8018624:	685b      	ldreq	r3, [r3, #4]
 8018626:	6063      	str	r3, [r4, #4]
 8018628:	bf04      	itt	eq
 801862a:	1852      	addeq	r2, r2, r1
 801862c:	6022      	streq	r2, [r4, #0]
 801862e:	6004      	str	r4, [r0, #0]
 8018630:	e7ec      	b.n	801860c <_free_r+0x24>
 8018632:	4613      	mov	r3, r2
 8018634:	685a      	ldr	r2, [r3, #4]
 8018636:	b10a      	cbz	r2, 801863c <_free_r+0x54>
 8018638:	42a2      	cmp	r2, r4
 801863a:	d9fa      	bls.n	8018632 <_free_r+0x4a>
 801863c:	6819      	ldr	r1, [r3, #0]
 801863e:	1858      	adds	r0, r3, r1
 8018640:	42a0      	cmp	r0, r4
 8018642:	d10b      	bne.n	801865c <_free_r+0x74>
 8018644:	6820      	ldr	r0, [r4, #0]
 8018646:	4401      	add	r1, r0
 8018648:	1858      	adds	r0, r3, r1
 801864a:	4282      	cmp	r2, r0
 801864c:	6019      	str	r1, [r3, #0]
 801864e:	d1dd      	bne.n	801860c <_free_r+0x24>
 8018650:	6810      	ldr	r0, [r2, #0]
 8018652:	6852      	ldr	r2, [r2, #4]
 8018654:	605a      	str	r2, [r3, #4]
 8018656:	4401      	add	r1, r0
 8018658:	6019      	str	r1, [r3, #0]
 801865a:	e7d7      	b.n	801860c <_free_r+0x24>
 801865c:	d902      	bls.n	8018664 <_free_r+0x7c>
 801865e:	230c      	movs	r3, #12
 8018660:	602b      	str	r3, [r5, #0]
 8018662:	e7d3      	b.n	801860c <_free_r+0x24>
 8018664:	6820      	ldr	r0, [r4, #0]
 8018666:	1821      	adds	r1, r4, r0
 8018668:	428a      	cmp	r2, r1
 801866a:	bf04      	itt	eq
 801866c:	6811      	ldreq	r1, [r2, #0]
 801866e:	6852      	ldreq	r2, [r2, #4]
 8018670:	6062      	str	r2, [r4, #4]
 8018672:	bf04      	itt	eq
 8018674:	1809      	addeq	r1, r1, r0
 8018676:	6021      	streq	r1, [r4, #0]
 8018678:	605c      	str	r4, [r3, #4]
 801867a:	e7c7      	b.n	801860c <_free_r+0x24>
 801867c:	bd38      	pop	{r3, r4, r5, pc}
 801867e:	bf00      	nop
 8018680:	20008da0 	.word	0x20008da0

08018684 <_malloc_r>:
 8018684:	b570      	push	{r4, r5, r6, lr}
 8018686:	1ccd      	adds	r5, r1, #3
 8018688:	f025 0503 	bic.w	r5, r5, #3
 801868c:	3508      	adds	r5, #8
 801868e:	2d0c      	cmp	r5, #12
 8018690:	bf38      	it	cc
 8018692:	250c      	movcc	r5, #12
 8018694:	2d00      	cmp	r5, #0
 8018696:	4606      	mov	r6, r0
 8018698:	db01      	blt.n	801869e <_malloc_r+0x1a>
 801869a:	42a9      	cmp	r1, r5
 801869c:	d903      	bls.n	80186a6 <_malloc_r+0x22>
 801869e:	230c      	movs	r3, #12
 80186a0:	6033      	str	r3, [r6, #0]
 80186a2:	2000      	movs	r0, #0
 80186a4:	bd70      	pop	{r4, r5, r6, pc}
 80186a6:	f000 fd6b 	bl	8019180 <__malloc_lock>
 80186aa:	4a21      	ldr	r2, [pc, #132]	; (8018730 <_malloc_r+0xac>)
 80186ac:	6814      	ldr	r4, [r2, #0]
 80186ae:	4621      	mov	r1, r4
 80186b0:	b991      	cbnz	r1, 80186d8 <_malloc_r+0x54>
 80186b2:	4c20      	ldr	r4, [pc, #128]	; (8018734 <_malloc_r+0xb0>)
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	b91b      	cbnz	r3, 80186c0 <_malloc_r+0x3c>
 80186b8:	4630      	mov	r0, r6
 80186ba:	f000 fb05 	bl	8018cc8 <_sbrk_r>
 80186be:	6020      	str	r0, [r4, #0]
 80186c0:	4629      	mov	r1, r5
 80186c2:	4630      	mov	r0, r6
 80186c4:	f000 fb00 	bl	8018cc8 <_sbrk_r>
 80186c8:	1c43      	adds	r3, r0, #1
 80186ca:	d124      	bne.n	8018716 <_malloc_r+0x92>
 80186cc:	230c      	movs	r3, #12
 80186ce:	6033      	str	r3, [r6, #0]
 80186d0:	4630      	mov	r0, r6
 80186d2:	f000 fd56 	bl	8019182 <__malloc_unlock>
 80186d6:	e7e4      	b.n	80186a2 <_malloc_r+0x1e>
 80186d8:	680b      	ldr	r3, [r1, #0]
 80186da:	1b5b      	subs	r3, r3, r5
 80186dc:	d418      	bmi.n	8018710 <_malloc_r+0x8c>
 80186de:	2b0b      	cmp	r3, #11
 80186e0:	d90f      	bls.n	8018702 <_malloc_r+0x7e>
 80186e2:	600b      	str	r3, [r1, #0]
 80186e4:	50cd      	str	r5, [r1, r3]
 80186e6:	18cc      	adds	r4, r1, r3
 80186e8:	4630      	mov	r0, r6
 80186ea:	f000 fd4a 	bl	8019182 <__malloc_unlock>
 80186ee:	f104 000b 	add.w	r0, r4, #11
 80186f2:	1d23      	adds	r3, r4, #4
 80186f4:	f020 0007 	bic.w	r0, r0, #7
 80186f8:	1ac3      	subs	r3, r0, r3
 80186fa:	d0d3      	beq.n	80186a4 <_malloc_r+0x20>
 80186fc:	425a      	negs	r2, r3
 80186fe:	50e2      	str	r2, [r4, r3]
 8018700:	e7d0      	b.n	80186a4 <_malloc_r+0x20>
 8018702:	428c      	cmp	r4, r1
 8018704:	684b      	ldr	r3, [r1, #4]
 8018706:	bf16      	itet	ne
 8018708:	6063      	strne	r3, [r4, #4]
 801870a:	6013      	streq	r3, [r2, #0]
 801870c:	460c      	movne	r4, r1
 801870e:	e7eb      	b.n	80186e8 <_malloc_r+0x64>
 8018710:	460c      	mov	r4, r1
 8018712:	6849      	ldr	r1, [r1, #4]
 8018714:	e7cc      	b.n	80186b0 <_malloc_r+0x2c>
 8018716:	1cc4      	adds	r4, r0, #3
 8018718:	f024 0403 	bic.w	r4, r4, #3
 801871c:	42a0      	cmp	r0, r4
 801871e:	d005      	beq.n	801872c <_malloc_r+0xa8>
 8018720:	1a21      	subs	r1, r4, r0
 8018722:	4630      	mov	r0, r6
 8018724:	f000 fad0 	bl	8018cc8 <_sbrk_r>
 8018728:	3001      	adds	r0, #1
 801872a:	d0cf      	beq.n	80186cc <_malloc_r+0x48>
 801872c:	6025      	str	r5, [r4, #0]
 801872e:	e7db      	b.n	80186e8 <_malloc_r+0x64>
 8018730:	20008da0 	.word	0x20008da0
 8018734:	20008da4 	.word	0x20008da4

08018738 <__sfputc_r>:
 8018738:	6893      	ldr	r3, [r2, #8]
 801873a:	3b01      	subs	r3, #1
 801873c:	2b00      	cmp	r3, #0
 801873e:	b410      	push	{r4}
 8018740:	6093      	str	r3, [r2, #8]
 8018742:	da08      	bge.n	8018756 <__sfputc_r+0x1e>
 8018744:	6994      	ldr	r4, [r2, #24]
 8018746:	42a3      	cmp	r3, r4
 8018748:	db01      	blt.n	801874e <__sfputc_r+0x16>
 801874a:	290a      	cmp	r1, #10
 801874c:	d103      	bne.n	8018756 <__sfputc_r+0x1e>
 801874e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018752:	f000 bb0d 	b.w	8018d70 <__swbuf_r>
 8018756:	6813      	ldr	r3, [r2, #0]
 8018758:	1c58      	adds	r0, r3, #1
 801875a:	6010      	str	r0, [r2, #0]
 801875c:	7019      	strb	r1, [r3, #0]
 801875e:	4608      	mov	r0, r1
 8018760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018764:	4770      	bx	lr

08018766 <__sfputs_r>:
 8018766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018768:	4606      	mov	r6, r0
 801876a:	460f      	mov	r7, r1
 801876c:	4614      	mov	r4, r2
 801876e:	18d5      	adds	r5, r2, r3
 8018770:	42ac      	cmp	r4, r5
 8018772:	d101      	bne.n	8018778 <__sfputs_r+0x12>
 8018774:	2000      	movs	r0, #0
 8018776:	e007      	b.n	8018788 <__sfputs_r+0x22>
 8018778:	463a      	mov	r2, r7
 801877a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801877e:	4630      	mov	r0, r6
 8018780:	f7ff ffda 	bl	8018738 <__sfputc_r>
 8018784:	1c43      	adds	r3, r0, #1
 8018786:	d1f3      	bne.n	8018770 <__sfputs_r+0xa>
 8018788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801878c <_vfiprintf_r>:
 801878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018790:	460c      	mov	r4, r1
 8018792:	b09d      	sub	sp, #116	; 0x74
 8018794:	4617      	mov	r7, r2
 8018796:	461d      	mov	r5, r3
 8018798:	4606      	mov	r6, r0
 801879a:	b118      	cbz	r0, 80187a4 <_vfiprintf_r+0x18>
 801879c:	6983      	ldr	r3, [r0, #24]
 801879e:	b90b      	cbnz	r3, 80187a4 <_vfiprintf_r+0x18>
 80187a0:	f7ff fe90 	bl	80184c4 <__sinit>
 80187a4:	4b7c      	ldr	r3, [pc, #496]	; (8018998 <_vfiprintf_r+0x20c>)
 80187a6:	429c      	cmp	r4, r3
 80187a8:	d158      	bne.n	801885c <_vfiprintf_r+0xd0>
 80187aa:	6874      	ldr	r4, [r6, #4]
 80187ac:	89a3      	ldrh	r3, [r4, #12]
 80187ae:	0718      	lsls	r0, r3, #28
 80187b0:	d55e      	bpl.n	8018870 <_vfiprintf_r+0xe4>
 80187b2:	6923      	ldr	r3, [r4, #16]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d05b      	beq.n	8018870 <_vfiprintf_r+0xe4>
 80187b8:	2300      	movs	r3, #0
 80187ba:	9309      	str	r3, [sp, #36]	; 0x24
 80187bc:	2320      	movs	r3, #32
 80187be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80187c2:	2330      	movs	r3, #48	; 0x30
 80187c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80187c8:	9503      	str	r5, [sp, #12]
 80187ca:	f04f 0b01 	mov.w	fp, #1
 80187ce:	46b8      	mov	r8, r7
 80187d0:	4645      	mov	r5, r8
 80187d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80187d6:	b10b      	cbz	r3, 80187dc <_vfiprintf_r+0x50>
 80187d8:	2b25      	cmp	r3, #37	; 0x25
 80187da:	d154      	bne.n	8018886 <_vfiprintf_r+0xfa>
 80187dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80187e0:	d00b      	beq.n	80187fa <_vfiprintf_r+0x6e>
 80187e2:	4653      	mov	r3, sl
 80187e4:	463a      	mov	r2, r7
 80187e6:	4621      	mov	r1, r4
 80187e8:	4630      	mov	r0, r6
 80187ea:	f7ff ffbc 	bl	8018766 <__sfputs_r>
 80187ee:	3001      	adds	r0, #1
 80187f0:	f000 80c2 	beq.w	8018978 <_vfiprintf_r+0x1ec>
 80187f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187f6:	4453      	add	r3, sl
 80187f8:	9309      	str	r3, [sp, #36]	; 0x24
 80187fa:	f898 3000 	ldrb.w	r3, [r8]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	f000 80ba 	beq.w	8018978 <_vfiprintf_r+0x1ec>
 8018804:	2300      	movs	r3, #0
 8018806:	f04f 32ff 	mov.w	r2, #4294967295
 801880a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801880e:	9304      	str	r3, [sp, #16]
 8018810:	9307      	str	r3, [sp, #28]
 8018812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018816:	931a      	str	r3, [sp, #104]	; 0x68
 8018818:	46a8      	mov	r8, r5
 801881a:	2205      	movs	r2, #5
 801881c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018820:	485e      	ldr	r0, [pc, #376]	; (801899c <_vfiprintf_r+0x210>)
 8018822:	f7e7 fcfd 	bl	8000220 <memchr>
 8018826:	9b04      	ldr	r3, [sp, #16]
 8018828:	bb78      	cbnz	r0, 801888a <_vfiprintf_r+0xfe>
 801882a:	06d9      	lsls	r1, r3, #27
 801882c:	bf44      	itt	mi
 801882e:	2220      	movmi	r2, #32
 8018830:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018834:	071a      	lsls	r2, r3, #28
 8018836:	bf44      	itt	mi
 8018838:	222b      	movmi	r2, #43	; 0x2b
 801883a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801883e:	782a      	ldrb	r2, [r5, #0]
 8018840:	2a2a      	cmp	r2, #42	; 0x2a
 8018842:	d02a      	beq.n	801889a <_vfiprintf_r+0x10e>
 8018844:	9a07      	ldr	r2, [sp, #28]
 8018846:	46a8      	mov	r8, r5
 8018848:	2000      	movs	r0, #0
 801884a:	250a      	movs	r5, #10
 801884c:	4641      	mov	r1, r8
 801884e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018852:	3b30      	subs	r3, #48	; 0x30
 8018854:	2b09      	cmp	r3, #9
 8018856:	d969      	bls.n	801892c <_vfiprintf_r+0x1a0>
 8018858:	b360      	cbz	r0, 80188b4 <_vfiprintf_r+0x128>
 801885a:	e024      	b.n	80188a6 <_vfiprintf_r+0x11a>
 801885c:	4b50      	ldr	r3, [pc, #320]	; (80189a0 <_vfiprintf_r+0x214>)
 801885e:	429c      	cmp	r4, r3
 8018860:	d101      	bne.n	8018866 <_vfiprintf_r+0xda>
 8018862:	68b4      	ldr	r4, [r6, #8]
 8018864:	e7a2      	b.n	80187ac <_vfiprintf_r+0x20>
 8018866:	4b4f      	ldr	r3, [pc, #316]	; (80189a4 <_vfiprintf_r+0x218>)
 8018868:	429c      	cmp	r4, r3
 801886a:	bf08      	it	eq
 801886c:	68f4      	ldreq	r4, [r6, #12]
 801886e:	e79d      	b.n	80187ac <_vfiprintf_r+0x20>
 8018870:	4621      	mov	r1, r4
 8018872:	4630      	mov	r0, r6
 8018874:	f000 fae0 	bl	8018e38 <__swsetup_r>
 8018878:	2800      	cmp	r0, #0
 801887a:	d09d      	beq.n	80187b8 <_vfiprintf_r+0x2c>
 801887c:	f04f 30ff 	mov.w	r0, #4294967295
 8018880:	b01d      	add	sp, #116	; 0x74
 8018882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018886:	46a8      	mov	r8, r5
 8018888:	e7a2      	b.n	80187d0 <_vfiprintf_r+0x44>
 801888a:	4a44      	ldr	r2, [pc, #272]	; (801899c <_vfiprintf_r+0x210>)
 801888c:	1a80      	subs	r0, r0, r2
 801888e:	fa0b f000 	lsl.w	r0, fp, r0
 8018892:	4318      	orrs	r0, r3
 8018894:	9004      	str	r0, [sp, #16]
 8018896:	4645      	mov	r5, r8
 8018898:	e7be      	b.n	8018818 <_vfiprintf_r+0x8c>
 801889a:	9a03      	ldr	r2, [sp, #12]
 801889c:	1d11      	adds	r1, r2, #4
 801889e:	6812      	ldr	r2, [r2, #0]
 80188a0:	9103      	str	r1, [sp, #12]
 80188a2:	2a00      	cmp	r2, #0
 80188a4:	db01      	blt.n	80188aa <_vfiprintf_r+0x11e>
 80188a6:	9207      	str	r2, [sp, #28]
 80188a8:	e004      	b.n	80188b4 <_vfiprintf_r+0x128>
 80188aa:	4252      	negs	r2, r2
 80188ac:	f043 0302 	orr.w	r3, r3, #2
 80188b0:	9207      	str	r2, [sp, #28]
 80188b2:	9304      	str	r3, [sp, #16]
 80188b4:	f898 3000 	ldrb.w	r3, [r8]
 80188b8:	2b2e      	cmp	r3, #46	; 0x2e
 80188ba:	d10e      	bne.n	80188da <_vfiprintf_r+0x14e>
 80188bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80188c0:	2b2a      	cmp	r3, #42	; 0x2a
 80188c2:	d138      	bne.n	8018936 <_vfiprintf_r+0x1aa>
 80188c4:	9b03      	ldr	r3, [sp, #12]
 80188c6:	1d1a      	adds	r2, r3, #4
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	9203      	str	r2, [sp, #12]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	bfb8      	it	lt
 80188d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80188d4:	f108 0802 	add.w	r8, r8, #2
 80188d8:	9305      	str	r3, [sp, #20]
 80188da:	4d33      	ldr	r5, [pc, #204]	; (80189a8 <_vfiprintf_r+0x21c>)
 80188dc:	f898 1000 	ldrb.w	r1, [r8]
 80188e0:	2203      	movs	r2, #3
 80188e2:	4628      	mov	r0, r5
 80188e4:	f7e7 fc9c 	bl	8000220 <memchr>
 80188e8:	b140      	cbz	r0, 80188fc <_vfiprintf_r+0x170>
 80188ea:	2340      	movs	r3, #64	; 0x40
 80188ec:	1b40      	subs	r0, r0, r5
 80188ee:	fa03 f000 	lsl.w	r0, r3, r0
 80188f2:	9b04      	ldr	r3, [sp, #16]
 80188f4:	4303      	orrs	r3, r0
 80188f6:	f108 0801 	add.w	r8, r8, #1
 80188fa:	9304      	str	r3, [sp, #16]
 80188fc:	f898 1000 	ldrb.w	r1, [r8]
 8018900:	482a      	ldr	r0, [pc, #168]	; (80189ac <_vfiprintf_r+0x220>)
 8018902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018906:	2206      	movs	r2, #6
 8018908:	f108 0701 	add.w	r7, r8, #1
 801890c:	f7e7 fc88 	bl	8000220 <memchr>
 8018910:	2800      	cmp	r0, #0
 8018912:	d037      	beq.n	8018984 <_vfiprintf_r+0x1f8>
 8018914:	4b26      	ldr	r3, [pc, #152]	; (80189b0 <_vfiprintf_r+0x224>)
 8018916:	bb1b      	cbnz	r3, 8018960 <_vfiprintf_r+0x1d4>
 8018918:	9b03      	ldr	r3, [sp, #12]
 801891a:	3307      	adds	r3, #7
 801891c:	f023 0307 	bic.w	r3, r3, #7
 8018920:	3308      	adds	r3, #8
 8018922:	9303      	str	r3, [sp, #12]
 8018924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018926:	444b      	add	r3, r9
 8018928:	9309      	str	r3, [sp, #36]	; 0x24
 801892a:	e750      	b.n	80187ce <_vfiprintf_r+0x42>
 801892c:	fb05 3202 	mla	r2, r5, r2, r3
 8018930:	2001      	movs	r0, #1
 8018932:	4688      	mov	r8, r1
 8018934:	e78a      	b.n	801884c <_vfiprintf_r+0xc0>
 8018936:	2300      	movs	r3, #0
 8018938:	f108 0801 	add.w	r8, r8, #1
 801893c:	9305      	str	r3, [sp, #20]
 801893e:	4619      	mov	r1, r3
 8018940:	250a      	movs	r5, #10
 8018942:	4640      	mov	r0, r8
 8018944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018948:	3a30      	subs	r2, #48	; 0x30
 801894a:	2a09      	cmp	r2, #9
 801894c:	d903      	bls.n	8018956 <_vfiprintf_r+0x1ca>
 801894e:	2b00      	cmp	r3, #0
 8018950:	d0c3      	beq.n	80188da <_vfiprintf_r+0x14e>
 8018952:	9105      	str	r1, [sp, #20]
 8018954:	e7c1      	b.n	80188da <_vfiprintf_r+0x14e>
 8018956:	fb05 2101 	mla	r1, r5, r1, r2
 801895a:	2301      	movs	r3, #1
 801895c:	4680      	mov	r8, r0
 801895e:	e7f0      	b.n	8018942 <_vfiprintf_r+0x1b6>
 8018960:	ab03      	add	r3, sp, #12
 8018962:	9300      	str	r3, [sp, #0]
 8018964:	4622      	mov	r2, r4
 8018966:	4b13      	ldr	r3, [pc, #76]	; (80189b4 <_vfiprintf_r+0x228>)
 8018968:	a904      	add	r1, sp, #16
 801896a:	4630      	mov	r0, r6
 801896c:	f3af 8000 	nop.w
 8018970:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018974:	4681      	mov	r9, r0
 8018976:	d1d5      	bne.n	8018924 <_vfiprintf_r+0x198>
 8018978:	89a3      	ldrh	r3, [r4, #12]
 801897a:	065b      	lsls	r3, r3, #25
 801897c:	f53f af7e 	bmi.w	801887c <_vfiprintf_r+0xf0>
 8018980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018982:	e77d      	b.n	8018880 <_vfiprintf_r+0xf4>
 8018984:	ab03      	add	r3, sp, #12
 8018986:	9300      	str	r3, [sp, #0]
 8018988:	4622      	mov	r2, r4
 801898a:	4b0a      	ldr	r3, [pc, #40]	; (80189b4 <_vfiprintf_r+0x228>)
 801898c:	a904      	add	r1, sp, #16
 801898e:	4630      	mov	r0, r6
 8018990:	f000 f888 	bl	8018aa4 <_printf_i>
 8018994:	e7ec      	b.n	8018970 <_vfiprintf_r+0x1e4>
 8018996:	bf00      	nop
 8018998:	080284b8 	.word	0x080284b8
 801899c:	080284f8 	.word	0x080284f8
 80189a0:	080284d8 	.word	0x080284d8
 80189a4:	08028498 	.word	0x08028498
 80189a8:	080284fe 	.word	0x080284fe
 80189ac:	08028502 	.word	0x08028502
 80189b0:	00000000 	.word	0x00000000
 80189b4:	08018767 	.word	0x08018767

080189b8 <_printf_common>:
 80189b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189bc:	4691      	mov	r9, r2
 80189be:	461f      	mov	r7, r3
 80189c0:	688a      	ldr	r2, [r1, #8]
 80189c2:	690b      	ldr	r3, [r1, #16]
 80189c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80189c8:	4293      	cmp	r3, r2
 80189ca:	bfb8      	it	lt
 80189cc:	4613      	movlt	r3, r2
 80189ce:	f8c9 3000 	str.w	r3, [r9]
 80189d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80189d6:	4606      	mov	r6, r0
 80189d8:	460c      	mov	r4, r1
 80189da:	b112      	cbz	r2, 80189e2 <_printf_common+0x2a>
 80189dc:	3301      	adds	r3, #1
 80189de:	f8c9 3000 	str.w	r3, [r9]
 80189e2:	6823      	ldr	r3, [r4, #0]
 80189e4:	0699      	lsls	r1, r3, #26
 80189e6:	bf42      	ittt	mi
 80189e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80189ec:	3302      	addmi	r3, #2
 80189ee:	f8c9 3000 	strmi.w	r3, [r9]
 80189f2:	6825      	ldr	r5, [r4, #0]
 80189f4:	f015 0506 	ands.w	r5, r5, #6
 80189f8:	d107      	bne.n	8018a0a <_printf_common+0x52>
 80189fa:	f104 0a19 	add.w	sl, r4, #25
 80189fe:	68e3      	ldr	r3, [r4, #12]
 8018a00:	f8d9 2000 	ldr.w	r2, [r9]
 8018a04:	1a9b      	subs	r3, r3, r2
 8018a06:	42ab      	cmp	r3, r5
 8018a08:	dc28      	bgt.n	8018a5c <_printf_common+0xa4>
 8018a0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018a0e:	6822      	ldr	r2, [r4, #0]
 8018a10:	3300      	adds	r3, #0
 8018a12:	bf18      	it	ne
 8018a14:	2301      	movne	r3, #1
 8018a16:	0692      	lsls	r2, r2, #26
 8018a18:	d42d      	bmi.n	8018a76 <_printf_common+0xbe>
 8018a1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018a1e:	4639      	mov	r1, r7
 8018a20:	4630      	mov	r0, r6
 8018a22:	47c0      	blx	r8
 8018a24:	3001      	adds	r0, #1
 8018a26:	d020      	beq.n	8018a6a <_printf_common+0xb2>
 8018a28:	6823      	ldr	r3, [r4, #0]
 8018a2a:	68e5      	ldr	r5, [r4, #12]
 8018a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8018a30:	f003 0306 	and.w	r3, r3, #6
 8018a34:	2b04      	cmp	r3, #4
 8018a36:	bf08      	it	eq
 8018a38:	1aad      	subeq	r5, r5, r2
 8018a3a:	68a3      	ldr	r3, [r4, #8]
 8018a3c:	6922      	ldr	r2, [r4, #16]
 8018a3e:	bf0c      	ite	eq
 8018a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018a44:	2500      	movne	r5, #0
 8018a46:	4293      	cmp	r3, r2
 8018a48:	bfc4      	itt	gt
 8018a4a:	1a9b      	subgt	r3, r3, r2
 8018a4c:	18ed      	addgt	r5, r5, r3
 8018a4e:	f04f 0900 	mov.w	r9, #0
 8018a52:	341a      	adds	r4, #26
 8018a54:	454d      	cmp	r5, r9
 8018a56:	d11a      	bne.n	8018a8e <_printf_common+0xd6>
 8018a58:	2000      	movs	r0, #0
 8018a5a:	e008      	b.n	8018a6e <_printf_common+0xb6>
 8018a5c:	2301      	movs	r3, #1
 8018a5e:	4652      	mov	r2, sl
 8018a60:	4639      	mov	r1, r7
 8018a62:	4630      	mov	r0, r6
 8018a64:	47c0      	blx	r8
 8018a66:	3001      	adds	r0, #1
 8018a68:	d103      	bne.n	8018a72 <_printf_common+0xba>
 8018a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a72:	3501      	adds	r5, #1
 8018a74:	e7c3      	b.n	80189fe <_printf_common+0x46>
 8018a76:	18e1      	adds	r1, r4, r3
 8018a78:	1c5a      	adds	r2, r3, #1
 8018a7a:	2030      	movs	r0, #48	; 0x30
 8018a7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018a80:	4422      	add	r2, r4
 8018a82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018a86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018a8a:	3302      	adds	r3, #2
 8018a8c:	e7c5      	b.n	8018a1a <_printf_common+0x62>
 8018a8e:	2301      	movs	r3, #1
 8018a90:	4622      	mov	r2, r4
 8018a92:	4639      	mov	r1, r7
 8018a94:	4630      	mov	r0, r6
 8018a96:	47c0      	blx	r8
 8018a98:	3001      	adds	r0, #1
 8018a9a:	d0e6      	beq.n	8018a6a <_printf_common+0xb2>
 8018a9c:	f109 0901 	add.w	r9, r9, #1
 8018aa0:	e7d8      	b.n	8018a54 <_printf_common+0x9c>
	...

08018aa4 <_printf_i>:
 8018aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018aa8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018aac:	460c      	mov	r4, r1
 8018aae:	7e09      	ldrb	r1, [r1, #24]
 8018ab0:	b085      	sub	sp, #20
 8018ab2:	296e      	cmp	r1, #110	; 0x6e
 8018ab4:	4617      	mov	r7, r2
 8018ab6:	4606      	mov	r6, r0
 8018ab8:	4698      	mov	r8, r3
 8018aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018abc:	f000 80b3 	beq.w	8018c26 <_printf_i+0x182>
 8018ac0:	d822      	bhi.n	8018b08 <_printf_i+0x64>
 8018ac2:	2963      	cmp	r1, #99	; 0x63
 8018ac4:	d036      	beq.n	8018b34 <_printf_i+0x90>
 8018ac6:	d80a      	bhi.n	8018ade <_printf_i+0x3a>
 8018ac8:	2900      	cmp	r1, #0
 8018aca:	f000 80b9 	beq.w	8018c40 <_printf_i+0x19c>
 8018ace:	2958      	cmp	r1, #88	; 0x58
 8018ad0:	f000 8083 	beq.w	8018bda <_printf_i+0x136>
 8018ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ad8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018adc:	e032      	b.n	8018b44 <_printf_i+0xa0>
 8018ade:	2964      	cmp	r1, #100	; 0x64
 8018ae0:	d001      	beq.n	8018ae6 <_printf_i+0x42>
 8018ae2:	2969      	cmp	r1, #105	; 0x69
 8018ae4:	d1f6      	bne.n	8018ad4 <_printf_i+0x30>
 8018ae6:	6820      	ldr	r0, [r4, #0]
 8018ae8:	6813      	ldr	r3, [r2, #0]
 8018aea:	0605      	lsls	r5, r0, #24
 8018aec:	f103 0104 	add.w	r1, r3, #4
 8018af0:	d52a      	bpl.n	8018b48 <_printf_i+0xa4>
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	6011      	str	r1, [r2, #0]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	da03      	bge.n	8018b02 <_printf_i+0x5e>
 8018afa:	222d      	movs	r2, #45	; 0x2d
 8018afc:	425b      	negs	r3, r3
 8018afe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018b02:	486f      	ldr	r0, [pc, #444]	; (8018cc0 <_printf_i+0x21c>)
 8018b04:	220a      	movs	r2, #10
 8018b06:	e039      	b.n	8018b7c <_printf_i+0xd8>
 8018b08:	2973      	cmp	r1, #115	; 0x73
 8018b0a:	f000 809d 	beq.w	8018c48 <_printf_i+0x1a4>
 8018b0e:	d808      	bhi.n	8018b22 <_printf_i+0x7e>
 8018b10:	296f      	cmp	r1, #111	; 0x6f
 8018b12:	d020      	beq.n	8018b56 <_printf_i+0xb2>
 8018b14:	2970      	cmp	r1, #112	; 0x70
 8018b16:	d1dd      	bne.n	8018ad4 <_printf_i+0x30>
 8018b18:	6823      	ldr	r3, [r4, #0]
 8018b1a:	f043 0320 	orr.w	r3, r3, #32
 8018b1e:	6023      	str	r3, [r4, #0]
 8018b20:	e003      	b.n	8018b2a <_printf_i+0x86>
 8018b22:	2975      	cmp	r1, #117	; 0x75
 8018b24:	d017      	beq.n	8018b56 <_printf_i+0xb2>
 8018b26:	2978      	cmp	r1, #120	; 0x78
 8018b28:	d1d4      	bne.n	8018ad4 <_printf_i+0x30>
 8018b2a:	2378      	movs	r3, #120	; 0x78
 8018b2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018b30:	4864      	ldr	r0, [pc, #400]	; (8018cc4 <_printf_i+0x220>)
 8018b32:	e055      	b.n	8018be0 <_printf_i+0x13c>
 8018b34:	6813      	ldr	r3, [r2, #0]
 8018b36:	1d19      	adds	r1, r3, #4
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	6011      	str	r1, [r2, #0]
 8018b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018b44:	2301      	movs	r3, #1
 8018b46:	e08c      	b.n	8018c62 <_printf_i+0x1be>
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	6011      	str	r1, [r2, #0]
 8018b4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018b50:	bf18      	it	ne
 8018b52:	b21b      	sxthne	r3, r3
 8018b54:	e7cf      	b.n	8018af6 <_printf_i+0x52>
 8018b56:	6813      	ldr	r3, [r2, #0]
 8018b58:	6825      	ldr	r5, [r4, #0]
 8018b5a:	1d18      	adds	r0, r3, #4
 8018b5c:	6010      	str	r0, [r2, #0]
 8018b5e:	0628      	lsls	r0, r5, #24
 8018b60:	d501      	bpl.n	8018b66 <_printf_i+0xc2>
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	e002      	b.n	8018b6c <_printf_i+0xc8>
 8018b66:	0668      	lsls	r0, r5, #25
 8018b68:	d5fb      	bpl.n	8018b62 <_printf_i+0xbe>
 8018b6a:	881b      	ldrh	r3, [r3, #0]
 8018b6c:	4854      	ldr	r0, [pc, #336]	; (8018cc0 <_printf_i+0x21c>)
 8018b6e:	296f      	cmp	r1, #111	; 0x6f
 8018b70:	bf14      	ite	ne
 8018b72:	220a      	movne	r2, #10
 8018b74:	2208      	moveq	r2, #8
 8018b76:	2100      	movs	r1, #0
 8018b78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018b7c:	6865      	ldr	r5, [r4, #4]
 8018b7e:	60a5      	str	r5, [r4, #8]
 8018b80:	2d00      	cmp	r5, #0
 8018b82:	f2c0 8095 	blt.w	8018cb0 <_printf_i+0x20c>
 8018b86:	6821      	ldr	r1, [r4, #0]
 8018b88:	f021 0104 	bic.w	r1, r1, #4
 8018b8c:	6021      	str	r1, [r4, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d13d      	bne.n	8018c0e <_printf_i+0x16a>
 8018b92:	2d00      	cmp	r5, #0
 8018b94:	f040 808e 	bne.w	8018cb4 <_printf_i+0x210>
 8018b98:	4665      	mov	r5, ip
 8018b9a:	2a08      	cmp	r2, #8
 8018b9c:	d10b      	bne.n	8018bb6 <_printf_i+0x112>
 8018b9e:	6823      	ldr	r3, [r4, #0]
 8018ba0:	07db      	lsls	r3, r3, #31
 8018ba2:	d508      	bpl.n	8018bb6 <_printf_i+0x112>
 8018ba4:	6923      	ldr	r3, [r4, #16]
 8018ba6:	6862      	ldr	r2, [r4, #4]
 8018ba8:	429a      	cmp	r2, r3
 8018baa:	bfde      	ittt	le
 8018bac:	2330      	movle	r3, #48	; 0x30
 8018bae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018bb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018bb6:	ebac 0305 	sub.w	r3, ip, r5
 8018bba:	6123      	str	r3, [r4, #16]
 8018bbc:	f8cd 8000 	str.w	r8, [sp]
 8018bc0:	463b      	mov	r3, r7
 8018bc2:	aa03      	add	r2, sp, #12
 8018bc4:	4621      	mov	r1, r4
 8018bc6:	4630      	mov	r0, r6
 8018bc8:	f7ff fef6 	bl	80189b8 <_printf_common>
 8018bcc:	3001      	adds	r0, #1
 8018bce:	d14d      	bne.n	8018c6c <_printf_i+0x1c8>
 8018bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8018bd4:	b005      	add	sp, #20
 8018bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bda:	4839      	ldr	r0, [pc, #228]	; (8018cc0 <_printf_i+0x21c>)
 8018bdc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018be0:	6813      	ldr	r3, [r2, #0]
 8018be2:	6821      	ldr	r1, [r4, #0]
 8018be4:	1d1d      	adds	r5, r3, #4
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	6015      	str	r5, [r2, #0]
 8018bea:	060a      	lsls	r2, r1, #24
 8018bec:	d50b      	bpl.n	8018c06 <_printf_i+0x162>
 8018bee:	07ca      	lsls	r2, r1, #31
 8018bf0:	bf44      	itt	mi
 8018bf2:	f041 0120 	orrmi.w	r1, r1, #32
 8018bf6:	6021      	strmi	r1, [r4, #0]
 8018bf8:	b91b      	cbnz	r3, 8018c02 <_printf_i+0x15e>
 8018bfa:	6822      	ldr	r2, [r4, #0]
 8018bfc:	f022 0220 	bic.w	r2, r2, #32
 8018c00:	6022      	str	r2, [r4, #0]
 8018c02:	2210      	movs	r2, #16
 8018c04:	e7b7      	b.n	8018b76 <_printf_i+0xd2>
 8018c06:	064d      	lsls	r5, r1, #25
 8018c08:	bf48      	it	mi
 8018c0a:	b29b      	uxthmi	r3, r3
 8018c0c:	e7ef      	b.n	8018bee <_printf_i+0x14a>
 8018c0e:	4665      	mov	r5, ip
 8018c10:	fbb3 f1f2 	udiv	r1, r3, r2
 8018c14:	fb02 3311 	mls	r3, r2, r1, r3
 8018c18:	5cc3      	ldrb	r3, [r0, r3]
 8018c1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018c1e:	460b      	mov	r3, r1
 8018c20:	2900      	cmp	r1, #0
 8018c22:	d1f5      	bne.n	8018c10 <_printf_i+0x16c>
 8018c24:	e7b9      	b.n	8018b9a <_printf_i+0xf6>
 8018c26:	6813      	ldr	r3, [r2, #0]
 8018c28:	6825      	ldr	r5, [r4, #0]
 8018c2a:	6961      	ldr	r1, [r4, #20]
 8018c2c:	1d18      	adds	r0, r3, #4
 8018c2e:	6010      	str	r0, [r2, #0]
 8018c30:	0628      	lsls	r0, r5, #24
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	d501      	bpl.n	8018c3a <_printf_i+0x196>
 8018c36:	6019      	str	r1, [r3, #0]
 8018c38:	e002      	b.n	8018c40 <_printf_i+0x19c>
 8018c3a:	066a      	lsls	r2, r5, #25
 8018c3c:	d5fb      	bpl.n	8018c36 <_printf_i+0x192>
 8018c3e:	8019      	strh	r1, [r3, #0]
 8018c40:	2300      	movs	r3, #0
 8018c42:	6123      	str	r3, [r4, #16]
 8018c44:	4665      	mov	r5, ip
 8018c46:	e7b9      	b.n	8018bbc <_printf_i+0x118>
 8018c48:	6813      	ldr	r3, [r2, #0]
 8018c4a:	1d19      	adds	r1, r3, #4
 8018c4c:	6011      	str	r1, [r2, #0]
 8018c4e:	681d      	ldr	r5, [r3, #0]
 8018c50:	6862      	ldr	r2, [r4, #4]
 8018c52:	2100      	movs	r1, #0
 8018c54:	4628      	mov	r0, r5
 8018c56:	f7e7 fae3 	bl	8000220 <memchr>
 8018c5a:	b108      	cbz	r0, 8018c60 <_printf_i+0x1bc>
 8018c5c:	1b40      	subs	r0, r0, r5
 8018c5e:	6060      	str	r0, [r4, #4]
 8018c60:	6863      	ldr	r3, [r4, #4]
 8018c62:	6123      	str	r3, [r4, #16]
 8018c64:	2300      	movs	r3, #0
 8018c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c6a:	e7a7      	b.n	8018bbc <_printf_i+0x118>
 8018c6c:	6923      	ldr	r3, [r4, #16]
 8018c6e:	462a      	mov	r2, r5
 8018c70:	4639      	mov	r1, r7
 8018c72:	4630      	mov	r0, r6
 8018c74:	47c0      	blx	r8
 8018c76:	3001      	adds	r0, #1
 8018c78:	d0aa      	beq.n	8018bd0 <_printf_i+0x12c>
 8018c7a:	6823      	ldr	r3, [r4, #0]
 8018c7c:	079b      	lsls	r3, r3, #30
 8018c7e:	d413      	bmi.n	8018ca8 <_printf_i+0x204>
 8018c80:	68e0      	ldr	r0, [r4, #12]
 8018c82:	9b03      	ldr	r3, [sp, #12]
 8018c84:	4298      	cmp	r0, r3
 8018c86:	bfb8      	it	lt
 8018c88:	4618      	movlt	r0, r3
 8018c8a:	e7a3      	b.n	8018bd4 <_printf_i+0x130>
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	464a      	mov	r2, r9
 8018c90:	4639      	mov	r1, r7
 8018c92:	4630      	mov	r0, r6
 8018c94:	47c0      	blx	r8
 8018c96:	3001      	adds	r0, #1
 8018c98:	d09a      	beq.n	8018bd0 <_printf_i+0x12c>
 8018c9a:	3501      	adds	r5, #1
 8018c9c:	68e3      	ldr	r3, [r4, #12]
 8018c9e:	9a03      	ldr	r2, [sp, #12]
 8018ca0:	1a9b      	subs	r3, r3, r2
 8018ca2:	42ab      	cmp	r3, r5
 8018ca4:	dcf2      	bgt.n	8018c8c <_printf_i+0x1e8>
 8018ca6:	e7eb      	b.n	8018c80 <_printf_i+0x1dc>
 8018ca8:	2500      	movs	r5, #0
 8018caa:	f104 0919 	add.w	r9, r4, #25
 8018cae:	e7f5      	b.n	8018c9c <_printf_i+0x1f8>
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d1ac      	bne.n	8018c0e <_printf_i+0x16a>
 8018cb4:	7803      	ldrb	r3, [r0, #0]
 8018cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018cba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018cbe:	e76c      	b.n	8018b9a <_printf_i+0xf6>
 8018cc0:	08028509 	.word	0x08028509
 8018cc4:	0802851a 	.word	0x0802851a

08018cc8 <_sbrk_r>:
 8018cc8:	b538      	push	{r3, r4, r5, lr}
 8018cca:	4c06      	ldr	r4, [pc, #24]	; (8018ce4 <_sbrk_r+0x1c>)
 8018ccc:	2300      	movs	r3, #0
 8018cce:	4605      	mov	r5, r0
 8018cd0:	4608      	mov	r0, r1
 8018cd2:	6023      	str	r3, [r4, #0]
 8018cd4:	f7e8 f812 	bl	8000cfc <_sbrk>
 8018cd8:	1c43      	adds	r3, r0, #1
 8018cda:	d102      	bne.n	8018ce2 <_sbrk_r+0x1a>
 8018cdc:	6823      	ldr	r3, [r4, #0]
 8018cde:	b103      	cbz	r3, 8018ce2 <_sbrk_r+0x1a>
 8018ce0:	602b      	str	r3, [r5, #0]
 8018ce2:	bd38      	pop	{r3, r4, r5, pc}
 8018ce4:	2000fb1c 	.word	0x2000fb1c

08018ce8 <__sread>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	460c      	mov	r4, r1
 8018cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cf0:	f000 fa48 	bl	8019184 <_read_r>
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	bfab      	itete	ge
 8018cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8018cfc:	181b      	addge	r3, r3, r0
 8018cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d02:	bfac      	ite	ge
 8018d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d06:	81a3      	strhlt	r3, [r4, #12]
 8018d08:	bd10      	pop	{r4, pc}

08018d0a <__swrite>:
 8018d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d0e:	461f      	mov	r7, r3
 8018d10:	898b      	ldrh	r3, [r1, #12]
 8018d12:	05db      	lsls	r3, r3, #23
 8018d14:	4605      	mov	r5, r0
 8018d16:	460c      	mov	r4, r1
 8018d18:	4616      	mov	r6, r2
 8018d1a:	d505      	bpl.n	8018d28 <__swrite+0x1e>
 8018d1c:	2302      	movs	r3, #2
 8018d1e:	2200      	movs	r2, #0
 8018d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d24:	f000 f9b6 	bl	8019094 <_lseek_r>
 8018d28:	89a3      	ldrh	r3, [r4, #12]
 8018d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d32:	81a3      	strh	r3, [r4, #12]
 8018d34:	4632      	mov	r2, r6
 8018d36:	463b      	mov	r3, r7
 8018d38:	4628      	mov	r0, r5
 8018d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d3e:	f000 b869 	b.w	8018e14 <_write_r>

08018d42 <__sseek>:
 8018d42:	b510      	push	{r4, lr}
 8018d44:	460c      	mov	r4, r1
 8018d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d4a:	f000 f9a3 	bl	8019094 <_lseek_r>
 8018d4e:	1c43      	adds	r3, r0, #1
 8018d50:	89a3      	ldrh	r3, [r4, #12]
 8018d52:	bf15      	itete	ne
 8018d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8018d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018d5e:	81a3      	strheq	r3, [r4, #12]
 8018d60:	bf18      	it	ne
 8018d62:	81a3      	strhne	r3, [r4, #12]
 8018d64:	bd10      	pop	{r4, pc}

08018d66 <__sclose>:
 8018d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d6a:	f000 b8d3 	b.w	8018f14 <_close_r>
	...

08018d70 <__swbuf_r>:
 8018d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d72:	460e      	mov	r6, r1
 8018d74:	4614      	mov	r4, r2
 8018d76:	4605      	mov	r5, r0
 8018d78:	b118      	cbz	r0, 8018d82 <__swbuf_r+0x12>
 8018d7a:	6983      	ldr	r3, [r0, #24]
 8018d7c:	b90b      	cbnz	r3, 8018d82 <__swbuf_r+0x12>
 8018d7e:	f7ff fba1 	bl	80184c4 <__sinit>
 8018d82:	4b21      	ldr	r3, [pc, #132]	; (8018e08 <__swbuf_r+0x98>)
 8018d84:	429c      	cmp	r4, r3
 8018d86:	d12a      	bne.n	8018dde <__swbuf_r+0x6e>
 8018d88:	686c      	ldr	r4, [r5, #4]
 8018d8a:	69a3      	ldr	r3, [r4, #24]
 8018d8c:	60a3      	str	r3, [r4, #8]
 8018d8e:	89a3      	ldrh	r3, [r4, #12]
 8018d90:	071a      	lsls	r2, r3, #28
 8018d92:	d52e      	bpl.n	8018df2 <__swbuf_r+0x82>
 8018d94:	6923      	ldr	r3, [r4, #16]
 8018d96:	b363      	cbz	r3, 8018df2 <__swbuf_r+0x82>
 8018d98:	6923      	ldr	r3, [r4, #16]
 8018d9a:	6820      	ldr	r0, [r4, #0]
 8018d9c:	1ac0      	subs	r0, r0, r3
 8018d9e:	6963      	ldr	r3, [r4, #20]
 8018da0:	b2f6      	uxtb	r6, r6
 8018da2:	4283      	cmp	r3, r0
 8018da4:	4637      	mov	r7, r6
 8018da6:	dc04      	bgt.n	8018db2 <__swbuf_r+0x42>
 8018da8:	4621      	mov	r1, r4
 8018daa:	4628      	mov	r0, r5
 8018dac:	f000 f948 	bl	8019040 <_fflush_r>
 8018db0:	bb28      	cbnz	r0, 8018dfe <__swbuf_r+0x8e>
 8018db2:	68a3      	ldr	r3, [r4, #8]
 8018db4:	3b01      	subs	r3, #1
 8018db6:	60a3      	str	r3, [r4, #8]
 8018db8:	6823      	ldr	r3, [r4, #0]
 8018dba:	1c5a      	adds	r2, r3, #1
 8018dbc:	6022      	str	r2, [r4, #0]
 8018dbe:	701e      	strb	r6, [r3, #0]
 8018dc0:	6963      	ldr	r3, [r4, #20]
 8018dc2:	3001      	adds	r0, #1
 8018dc4:	4283      	cmp	r3, r0
 8018dc6:	d004      	beq.n	8018dd2 <__swbuf_r+0x62>
 8018dc8:	89a3      	ldrh	r3, [r4, #12]
 8018dca:	07db      	lsls	r3, r3, #31
 8018dcc:	d519      	bpl.n	8018e02 <__swbuf_r+0x92>
 8018dce:	2e0a      	cmp	r6, #10
 8018dd0:	d117      	bne.n	8018e02 <__swbuf_r+0x92>
 8018dd2:	4621      	mov	r1, r4
 8018dd4:	4628      	mov	r0, r5
 8018dd6:	f000 f933 	bl	8019040 <_fflush_r>
 8018dda:	b190      	cbz	r0, 8018e02 <__swbuf_r+0x92>
 8018ddc:	e00f      	b.n	8018dfe <__swbuf_r+0x8e>
 8018dde:	4b0b      	ldr	r3, [pc, #44]	; (8018e0c <__swbuf_r+0x9c>)
 8018de0:	429c      	cmp	r4, r3
 8018de2:	d101      	bne.n	8018de8 <__swbuf_r+0x78>
 8018de4:	68ac      	ldr	r4, [r5, #8]
 8018de6:	e7d0      	b.n	8018d8a <__swbuf_r+0x1a>
 8018de8:	4b09      	ldr	r3, [pc, #36]	; (8018e10 <__swbuf_r+0xa0>)
 8018dea:	429c      	cmp	r4, r3
 8018dec:	bf08      	it	eq
 8018dee:	68ec      	ldreq	r4, [r5, #12]
 8018df0:	e7cb      	b.n	8018d8a <__swbuf_r+0x1a>
 8018df2:	4621      	mov	r1, r4
 8018df4:	4628      	mov	r0, r5
 8018df6:	f000 f81f 	bl	8018e38 <__swsetup_r>
 8018dfa:	2800      	cmp	r0, #0
 8018dfc:	d0cc      	beq.n	8018d98 <__swbuf_r+0x28>
 8018dfe:	f04f 37ff 	mov.w	r7, #4294967295
 8018e02:	4638      	mov	r0, r7
 8018e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e06:	bf00      	nop
 8018e08:	080284b8 	.word	0x080284b8
 8018e0c:	080284d8 	.word	0x080284d8
 8018e10:	08028498 	.word	0x08028498

08018e14 <_write_r>:
 8018e14:	b538      	push	{r3, r4, r5, lr}
 8018e16:	4c07      	ldr	r4, [pc, #28]	; (8018e34 <_write_r+0x20>)
 8018e18:	4605      	mov	r5, r0
 8018e1a:	4608      	mov	r0, r1
 8018e1c:	4611      	mov	r1, r2
 8018e1e:	2200      	movs	r2, #0
 8018e20:	6022      	str	r2, [r4, #0]
 8018e22:	461a      	mov	r2, r3
 8018e24:	f7e7 ff19 	bl	8000c5a <_write>
 8018e28:	1c43      	adds	r3, r0, #1
 8018e2a:	d102      	bne.n	8018e32 <_write_r+0x1e>
 8018e2c:	6823      	ldr	r3, [r4, #0]
 8018e2e:	b103      	cbz	r3, 8018e32 <_write_r+0x1e>
 8018e30:	602b      	str	r3, [r5, #0]
 8018e32:	bd38      	pop	{r3, r4, r5, pc}
 8018e34:	2000fb1c 	.word	0x2000fb1c

08018e38 <__swsetup_r>:
 8018e38:	4b32      	ldr	r3, [pc, #200]	; (8018f04 <__swsetup_r+0xcc>)
 8018e3a:	b570      	push	{r4, r5, r6, lr}
 8018e3c:	681d      	ldr	r5, [r3, #0]
 8018e3e:	4606      	mov	r6, r0
 8018e40:	460c      	mov	r4, r1
 8018e42:	b125      	cbz	r5, 8018e4e <__swsetup_r+0x16>
 8018e44:	69ab      	ldr	r3, [r5, #24]
 8018e46:	b913      	cbnz	r3, 8018e4e <__swsetup_r+0x16>
 8018e48:	4628      	mov	r0, r5
 8018e4a:	f7ff fb3b 	bl	80184c4 <__sinit>
 8018e4e:	4b2e      	ldr	r3, [pc, #184]	; (8018f08 <__swsetup_r+0xd0>)
 8018e50:	429c      	cmp	r4, r3
 8018e52:	d10f      	bne.n	8018e74 <__swsetup_r+0x3c>
 8018e54:	686c      	ldr	r4, [r5, #4]
 8018e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e5a:	b29a      	uxth	r2, r3
 8018e5c:	0715      	lsls	r5, r2, #28
 8018e5e:	d42c      	bmi.n	8018eba <__swsetup_r+0x82>
 8018e60:	06d0      	lsls	r0, r2, #27
 8018e62:	d411      	bmi.n	8018e88 <__swsetup_r+0x50>
 8018e64:	2209      	movs	r2, #9
 8018e66:	6032      	str	r2, [r6, #0]
 8018e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e6c:	81a3      	strh	r3, [r4, #12]
 8018e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018e72:	e03e      	b.n	8018ef2 <__swsetup_r+0xba>
 8018e74:	4b25      	ldr	r3, [pc, #148]	; (8018f0c <__swsetup_r+0xd4>)
 8018e76:	429c      	cmp	r4, r3
 8018e78:	d101      	bne.n	8018e7e <__swsetup_r+0x46>
 8018e7a:	68ac      	ldr	r4, [r5, #8]
 8018e7c:	e7eb      	b.n	8018e56 <__swsetup_r+0x1e>
 8018e7e:	4b24      	ldr	r3, [pc, #144]	; (8018f10 <__swsetup_r+0xd8>)
 8018e80:	429c      	cmp	r4, r3
 8018e82:	bf08      	it	eq
 8018e84:	68ec      	ldreq	r4, [r5, #12]
 8018e86:	e7e6      	b.n	8018e56 <__swsetup_r+0x1e>
 8018e88:	0751      	lsls	r1, r2, #29
 8018e8a:	d512      	bpl.n	8018eb2 <__swsetup_r+0x7a>
 8018e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e8e:	b141      	cbz	r1, 8018ea2 <__swsetup_r+0x6a>
 8018e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e94:	4299      	cmp	r1, r3
 8018e96:	d002      	beq.n	8018e9e <__swsetup_r+0x66>
 8018e98:	4630      	mov	r0, r6
 8018e9a:	f7ff fba5 	bl	80185e8 <_free_r>
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8018ea2:	89a3      	ldrh	r3, [r4, #12]
 8018ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ea8:	81a3      	strh	r3, [r4, #12]
 8018eaa:	2300      	movs	r3, #0
 8018eac:	6063      	str	r3, [r4, #4]
 8018eae:	6923      	ldr	r3, [r4, #16]
 8018eb0:	6023      	str	r3, [r4, #0]
 8018eb2:	89a3      	ldrh	r3, [r4, #12]
 8018eb4:	f043 0308 	orr.w	r3, r3, #8
 8018eb8:	81a3      	strh	r3, [r4, #12]
 8018eba:	6923      	ldr	r3, [r4, #16]
 8018ebc:	b94b      	cbnz	r3, 8018ed2 <__swsetup_r+0x9a>
 8018ebe:	89a3      	ldrh	r3, [r4, #12]
 8018ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ec8:	d003      	beq.n	8018ed2 <__swsetup_r+0x9a>
 8018eca:	4621      	mov	r1, r4
 8018ecc:	4630      	mov	r0, r6
 8018ece:	f000 f917 	bl	8019100 <__smakebuf_r>
 8018ed2:	89a2      	ldrh	r2, [r4, #12]
 8018ed4:	f012 0301 	ands.w	r3, r2, #1
 8018ed8:	d00c      	beq.n	8018ef4 <__swsetup_r+0xbc>
 8018eda:	2300      	movs	r3, #0
 8018edc:	60a3      	str	r3, [r4, #8]
 8018ede:	6963      	ldr	r3, [r4, #20]
 8018ee0:	425b      	negs	r3, r3
 8018ee2:	61a3      	str	r3, [r4, #24]
 8018ee4:	6923      	ldr	r3, [r4, #16]
 8018ee6:	b953      	cbnz	r3, 8018efe <__swsetup_r+0xc6>
 8018ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018eec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018ef0:	d1ba      	bne.n	8018e68 <__swsetup_r+0x30>
 8018ef2:	bd70      	pop	{r4, r5, r6, pc}
 8018ef4:	0792      	lsls	r2, r2, #30
 8018ef6:	bf58      	it	pl
 8018ef8:	6963      	ldrpl	r3, [r4, #20]
 8018efa:	60a3      	str	r3, [r4, #8]
 8018efc:	e7f2      	b.n	8018ee4 <__swsetup_r+0xac>
 8018efe:	2000      	movs	r0, #0
 8018f00:	e7f7      	b.n	8018ef2 <__swsetup_r+0xba>
 8018f02:	bf00      	nop
 8018f04:	20000020 	.word	0x20000020
 8018f08:	080284b8 	.word	0x080284b8
 8018f0c:	080284d8 	.word	0x080284d8
 8018f10:	08028498 	.word	0x08028498

08018f14 <_close_r>:
 8018f14:	b538      	push	{r3, r4, r5, lr}
 8018f16:	4c06      	ldr	r4, [pc, #24]	; (8018f30 <_close_r+0x1c>)
 8018f18:	2300      	movs	r3, #0
 8018f1a:	4605      	mov	r5, r0
 8018f1c:	4608      	mov	r0, r1
 8018f1e:	6023      	str	r3, [r4, #0]
 8018f20:	f7e7 feb7 	bl	8000c92 <_close>
 8018f24:	1c43      	adds	r3, r0, #1
 8018f26:	d102      	bne.n	8018f2e <_close_r+0x1a>
 8018f28:	6823      	ldr	r3, [r4, #0]
 8018f2a:	b103      	cbz	r3, 8018f2e <_close_r+0x1a>
 8018f2c:	602b      	str	r3, [r5, #0]
 8018f2e:	bd38      	pop	{r3, r4, r5, pc}
 8018f30:	2000fb1c 	.word	0x2000fb1c

08018f34 <__sflush_r>:
 8018f34:	898a      	ldrh	r2, [r1, #12]
 8018f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	0710      	lsls	r0, r2, #28
 8018f3e:	460c      	mov	r4, r1
 8018f40:	d458      	bmi.n	8018ff4 <__sflush_r+0xc0>
 8018f42:	684b      	ldr	r3, [r1, #4]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	dc05      	bgt.n	8018f54 <__sflush_r+0x20>
 8018f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	dc02      	bgt.n	8018f54 <__sflush_r+0x20>
 8018f4e:	2000      	movs	r0, #0
 8018f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f56:	2e00      	cmp	r6, #0
 8018f58:	d0f9      	beq.n	8018f4e <__sflush_r+0x1a>
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018f60:	682f      	ldr	r7, [r5, #0]
 8018f62:	6a21      	ldr	r1, [r4, #32]
 8018f64:	602b      	str	r3, [r5, #0]
 8018f66:	d032      	beq.n	8018fce <__sflush_r+0x9a>
 8018f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018f6a:	89a3      	ldrh	r3, [r4, #12]
 8018f6c:	075a      	lsls	r2, r3, #29
 8018f6e:	d505      	bpl.n	8018f7c <__sflush_r+0x48>
 8018f70:	6863      	ldr	r3, [r4, #4]
 8018f72:	1ac0      	subs	r0, r0, r3
 8018f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018f76:	b10b      	cbz	r3, 8018f7c <__sflush_r+0x48>
 8018f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018f7a:	1ac0      	subs	r0, r0, r3
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	4602      	mov	r2, r0
 8018f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f82:	6a21      	ldr	r1, [r4, #32]
 8018f84:	4628      	mov	r0, r5
 8018f86:	47b0      	blx	r6
 8018f88:	1c43      	adds	r3, r0, #1
 8018f8a:	89a3      	ldrh	r3, [r4, #12]
 8018f8c:	d106      	bne.n	8018f9c <__sflush_r+0x68>
 8018f8e:	6829      	ldr	r1, [r5, #0]
 8018f90:	291d      	cmp	r1, #29
 8018f92:	d848      	bhi.n	8019026 <__sflush_r+0xf2>
 8018f94:	4a29      	ldr	r2, [pc, #164]	; (801903c <__sflush_r+0x108>)
 8018f96:	40ca      	lsrs	r2, r1
 8018f98:	07d6      	lsls	r6, r2, #31
 8018f9a:	d544      	bpl.n	8019026 <__sflush_r+0xf2>
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	6062      	str	r2, [r4, #4]
 8018fa0:	04d9      	lsls	r1, r3, #19
 8018fa2:	6922      	ldr	r2, [r4, #16]
 8018fa4:	6022      	str	r2, [r4, #0]
 8018fa6:	d504      	bpl.n	8018fb2 <__sflush_r+0x7e>
 8018fa8:	1c42      	adds	r2, r0, #1
 8018faa:	d101      	bne.n	8018fb0 <__sflush_r+0x7c>
 8018fac:	682b      	ldr	r3, [r5, #0]
 8018fae:	b903      	cbnz	r3, 8018fb2 <__sflush_r+0x7e>
 8018fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8018fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fb4:	602f      	str	r7, [r5, #0]
 8018fb6:	2900      	cmp	r1, #0
 8018fb8:	d0c9      	beq.n	8018f4e <__sflush_r+0x1a>
 8018fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fbe:	4299      	cmp	r1, r3
 8018fc0:	d002      	beq.n	8018fc8 <__sflush_r+0x94>
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	f7ff fb10 	bl	80185e8 <_free_r>
 8018fc8:	2000      	movs	r0, #0
 8018fca:	6360      	str	r0, [r4, #52]	; 0x34
 8018fcc:	e7c0      	b.n	8018f50 <__sflush_r+0x1c>
 8018fce:	2301      	movs	r3, #1
 8018fd0:	4628      	mov	r0, r5
 8018fd2:	47b0      	blx	r6
 8018fd4:	1c41      	adds	r1, r0, #1
 8018fd6:	d1c8      	bne.n	8018f6a <__sflush_r+0x36>
 8018fd8:	682b      	ldr	r3, [r5, #0]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d0c5      	beq.n	8018f6a <__sflush_r+0x36>
 8018fde:	2b1d      	cmp	r3, #29
 8018fe0:	d001      	beq.n	8018fe6 <__sflush_r+0xb2>
 8018fe2:	2b16      	cmp	r3, #22
 8018fe4:	d101      	bne.n	8018fea <__sflush_r+0xb6>
 8018fe6:	602f      	str	r7, [r5, #0]
 8018fe8:	e7b1      	b.n	8018f4e <__sflush_r+0x1a>
 8018fea:	89a3      	ldrh	r3, [r4, #12]
 8018fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ff0:	81a3      	strh	r3, [r4, #12]
 8018ff2:	e7ad      	b.n	8018f50 <__sflush_r+0x1c>
 8018ff4:	690f      	ldr	r7, [r1, #16]
 8018ff6:	2f00      	cmp	r7, #0
 8018ff8:	d0a9      	beq.n	8018f4e <__sflush_r+0x1a>
 8018ffa:	0793      	lsls	r3, r2, #30
 8018ffc:	680e      	ldr	r6, [r1, #0]
 8018ffe:	bf08      	it	eq
 8019000:	694b      	ldreq	r3, [r1, #20]
 8019002:	600f      	str	r7, [r1, #0]
 8019004:	bf18      	it	ne
 8019006:	2300      	movne	r3, #0
 8019008:	eba6 0807 	sub.w	r8, r6, r7
 801900c:	608b      	str	r3, [r1, #8]
 801900e:	f1b8 0f00 	cmp.w	r8, #0
 8019012:	dd9c      	ble.n	8018f4e <__sflush_r+0x1a>
 8019014:	4643      	mov	r3, r8
 8019016:	463a      	mov	r2, r7
 8019018:	6a21      	ldr	r1, [r4, #32]
 801901a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801901c:	4628      	mov	r0, r5
 801901e:	47b0      	blx	r6
 8019020:	2800      	cmp	r0, #0
 8019022:	dc06      	bgt.n	8019032 <__sflush_r+0xfe>
 8019024:	89a3      	ldrh	r3, [r4, #12]
 8019026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801902a:	81a3      	strh	r3, [r4, #12]
 801902c:	f04f 30ff 	mov.w	r0, #4294967295
 8019030:	e78e      	b.n	8018f50 <__sflush_r+0x1c>
 8019032:	4407      	add	r7, r0
 8019034:	eba8 0800 	sub.w	r8, r8, r0
 8019038:	e7e9      	b.n	801900e <__sflush_r+0xda>
 801903a:	bf00      	nop
 801903c:	20400001 	.word	0x20400001

08019040 <_fflush_r>:
 8019040:	b538      	push	{r3, r4, r5, lr}
 8019042:	690b      	ldr	r3, [r1, #16]
 8019044:	4605      	mov	r5, r0
 8019046:	460c      	mov	r4, r1
 8019048:	b1db      	cbz	r3, 8019082 <_fflush_r+0x42>
 801904a:	b118      	cbz	r0, 8019054 <_fflush_r+0x14>
 801904c:	6983      	ldr	r3, [r0, #24]
 801904e:	b90b      	cbnz	r3, 8019054 <_fflush_r+0x14>
 8019050:	f7ff fa38 	bl	80184c4 <__sinit>
 8019054:	4b0c      	ldr	r3, [pc, #48]	; (8019088 <_fflush_r+0x48>)
 8019056:	429c      	cmp	r4, r3
 8019058:	d109      	bne.n	801906e <_fflush_r+0x2e>
 801905a:	686c      	ldr	r4, [r5, #4]
 801905c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019060:	b17b      	cbz	r3, 8019082 <_fflush_r+0x42>
 8019062:	4621      	mov	r1, r4
 8019064:	4628      	mov	r0, r5
 8019066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801906a:	f7ff bf63 	b.w	8018f34 <__sflush_r>
 801906e:	4b07      	ldr	r3, [pc, #28]	; (801908c <_fflush_r+0x4c>)
 8019070:	429c      	cmp	r4, r3
 8019072:	d101      	bne.n	8019078 <_fflush_r+0x38>
 8019074:	68ac      	ldr	r4, [r5, #8]
 8019076:	e7f1      	b.n	801905c <_fflush_r+0x1c>
 8019078:	4b05      	ldr	r3, [pc, #20]	; (8019090 <_fflush_r+0x50>)
 801907a:	429c      	cmp	r4, r3
 801907c:	bf08      	it	eq
 801907e:	68ec      	ldreq	r4, [r5, #12]
 8019080:	e7ec      	b.n	801905c <_fflush_r+0x1c>
 8019082:	2000      	movs	r0, #0
 8019084:	bd38      	pop	{r3, r4, r5, pc}
 8019086:	bf00      	nop
 8019088:	080284b8 	.word	0x080284b8
 801908c:	080284d8 	.word	0x080284d8
 8019090:	08028498 	.word	0x08028498

08019094 <_lseek_r>:
 8019094:	b538      	push	{r3, r4, r5, lr}
 8019096:	4c07      	ldr	r4, [pc, #28]	; (80190b4 <_lseek_r+0x20>)
 8019098:	4605      	mov	r5, r0
 801909a:	4608      	mov	r0, r1
 801909c:	4611      	mov	r1, r2
 801909e:	2200      	movs	r2, #0
 80190a0:	6022      	str	r2, [r4, #0]
 80190a2:	461a      	mov	r2, r3
 80190a4:	f7e7 fe1c 	bl	8000ce0 <_lseek>
 80190a8:	1c43      	adds	r3, r0, #1
 80190aa:	d102      	bne.n	80190b2 <_lseek_r+0x1e>
 80190ac:	6823      	ldr	r3, [r4, #0]
 80190ae:	b103      	cbz	r3, 80190b2 <_lseek_r+0x1e>
 80190b0:	602b      	str	r3, [r5, #0]
 80190b2:	bd38      	pop	{r3, r4, r5, pc}
 80190b4:	2000fb1c 	.word	0x2000fb1c

080190b8 <__swhatbuf_r>:
 80190b8:	b570      	push	{r4, r5, r6, lr}
 80190ba:	460e      	mov	r6, r1
 80190bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c0:	2900      	cmp	r1, #0
 80190c2:	b096      	sub	sp, #88	; 0x58
 80190c4:	4614      	mov	r4, r2
 80190c6:	461d      	mov	r5, r3
 80190c8:	da07      	bge.n	80190da <__swhatbuf_r+0x22>
 80190ca:	2300      	movs	r3, #0
 80190cc:	602b      	str	r3, [r5, #0]
 80190ce:	89b3      	ldrh	r3, [r6, #12]
 80190d0:	061a      	lsls	r2, r3, #24
 80190d2:	d410      	bmi.n	80190f6 <__swhatbuf_r+0x3e>
 80190d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190d8:	e00e      	b.n	80190f8 <__swhatbuf_r+0x40>
 80190da:	466a      	mov	r2, sp
 80190dc:	f000 f864 	bl	80191a8 <_fstat_r>
 80190e0:	2800      	cmp	r0, #0
 80190e2:	dbf2      	blt.n	80190ca <__swhatbuf_r+0x12>
 80190e4:	9a01      	ldr	r2, [sp, #4]
 80190e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80190ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80190ee:	425a      	negs	r2, r3
 80190f0:	415a      	adcs	r2, r3
 80190f2:	602a      	str	r2, [r5, #0]
 80190f4:	e7ee      	b.n	80190d4 <__swhatbuf_r+0x1c>
 80190f6:	2340      	movs	r3, #64	; 0x40
 80190f8:	2000      	movs	r0, #0
 80190fa:	6023      	str	r3, [r4, #0]
 80190fc:	b016      	add	sp, #88	; 0x58
 80190fe:	bd70      	pop	{r4, r5, r6, pc}

08019100 <__smakebuf_r>:
 8019100:	898b      	ldrh	r3, [r1, #12]
 8019102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019104:	079d      	lsls	r5, r3, #30
 8019106:	4606      	mov	r6, r0
 8019108:	460c      	mov	r4, r1
 801910a:	d507      	bpl.n	801911c <__smakebuf_r+0x1c>
 801910c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019110:	6023      	str	r3, [r4, #0]
 8019112:	6123      	str	r3, [r4, #16]
 8019114:	2301      	movs	r3, #1
 8019116:	6163      	str	r3, [r4, #20]
 8019118:	b002      	add	sp, #8
 801911a:	bd70      	pop	{r4, r5, r6, pc}
 801911c:	ab01      	add	r3, sp, #4
 801911e:	466a      	mov	r2, sp
 8019120:	f7ff ffca 	bl	80190b8 <__swhatbuf_r>
 8019124:	9900      	ldr	r1, [sp, #0]
 8019126:	4605      	mov	r5, r0
 8019128:	4630      	mov	r0, r6
 801912a:	f7ff faab 	bl	8018684 <_malloc_r>
 801912e:	b948      	cbnz	r0, 8019144 <__smakebuf_r+0x44>
 8019130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019134:	059a      	lsls	r2, r3, #22
 8019136:	d4ef      	bmi.n	8019118 <__smakebuf_r+0x18>
 8019138:	f023 0303 	bic.w	r3, r3, #3
 801913c:	f043 0302 	orr.w	r3, r3, #2
 8019140:	81a3      	strh	r3, [r4, #12]
 8019142:	e7e3      	b.n	801910c <__smakebuf_r+0xc>
 8019144:	4b0d      	ldr	r3, [pc, #52]	; (801917c <__smakebuf_r+0x7c>)
 8019146:	62b3      	str	r3, [r6, #40]	; 0x28
 8019148:	89a3      	ldrh	r3, [r4, #12]
 801914a:	6020      	str	r0, [r4, #0]
 801914c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019150:	81a3      	strh	r3, [r4, #12]
 8019152:	9b00      	ldr	r3, [sp, #0]
 8019154:	6163      	str	r3, [r4, #20]
 8019156:	9b01      	ldr	r3, [sp, #4]
 8019158:	6120      	str	r0, [r4, #16]
 801915a:	b15b      	cbz	r3, 8019174 <__smakebuf_r+0x74>
 801915c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019160:	4630      	mov	r0, r6
 8019162:	f000 f833 	bl	80191cc <_isatty_r>
 8019166:	b128      	cbz	r0, 8019174 <__smakebuf_r+0x74>
 8019168:	89a3      	ldrh	r3, [r4, #12]
 801916a:	f023 0303 	bic.w	r3, r3, #3
 801916e:	f043 0301 	orr.w	r3, r3, #1
 8019172:	81a3      	strh	r3, [r4, #12]
 8019174:	89a3      	ldrh	r3, [r4, #12]
 8019176:	431d      	orrs	r5, r3
 8019178:	81a5      	strh	r5, [r4, #12]
 801917a:	e7cd      	b.n	8019118 <__smakebuf_r+0x18>
 801917c:	0801848d 	.word	0x0801848d

08019180 <__malloc_lock>:
 8019180:	4770      	bx	lr

08019182 <__malloc_unlock>:
 8019182:	4770      	bx	lr

08019184 <_read_r>:
 8019184:	b538      	push	{r3, r4, r5, lr}
 8019186:	4c07      	ldr	r4, [pc, #28]	; (80191a4 <_read_r+0x20>)
 8019188:	4605      	mov	r5, r0
 801918a:	4608      	mov	r0, r1
 801918c:	4611      	mov	r1, r2
 801918e:	2200      	movs	r2, #0
 8019190:	6022      	str	r2, [r4, #0]
 8019192:	461a      	mov	r2, r3
 8019194:	f7e7 fd44 	bl	8000c20 <_read>
 8019198:	1c43      	adds	r3, r0, #1
 801919a:	d102      	bne.n	80191a2 <_read_r+0x1e>
 801919c:	6823      	ldr	r3, [r4, #0]
 801919e:	b103      	cbz	r3, 80191a2 <_read_r+0x1e>
 80191a0:	602b      	str	r3, [r5, #0]
 80191a2:	bd38      	pop	{r3, r4, r5, pc}
 80191a4:	2000fb1c 	.word	0x2000fb1c

080191a8 <_fstat_r>:
 80191a8:	b538      	push	{r3, r4, r5, lr}
 80191aa:	4c07      	ldr	r4, [pc, #28]	; (80191c8 <_fstat_r+0x20>)
 80191ac:	2300      	movs	r3, #0
 80191ae:	4605      	mov	r5, r0
 80191b0:	4608      	mov	r0, r1
 80191b2:	4611      	mov	r1, r2
 80191b4:	6023      	str	r3, [r4, #0]
 80191b6:	f7e7 fd78 	bl	8000caa <_fstat>
 80191ba:	1c43      	adds	r3, r0, #1
 80191bc:	d102      	bne.n	80191c4 <_fstat_r+0x1c>
 80191be:	6823      	ldr	r3, [r4, #0]
 80191c0:	b103      	cbz	r3, 80191c4 <_fstat_r+0x1c>
 80191c2:	602b      	str	r3, [r5, #0]
 80191c4:	bd38      	pop	{r3, r4, r5, pc}
 80191c6:	bf00      	nop
 80191c8:	2000fb1c 	.word	0x2000fb1c

080191cc <_isatty_r>:
 80191cc:	b538      	push	{r3, r4, r5, lr}
 80191ce:	4c06      	ldr	r4, [pc, #24]	; (80191e8 <_isatty_r+0x1c>)
 80191d0:	2300      	movs	r3, #0
 80191d2:	4605      	mov	r5, r0
 80191d4:	4608      	mov	r0, r1
 80191d6:	6023      	str	r3, [r4, #0]
 80191d8:	f7e7 fd77 	bl	8000cca <_isatty>
 80191dc:	1c43      	adds	r3, r0, #1
 80191de:	d102      	bne.n	80191e6 <_isatty_r+0x1a>
 80191e0:	6823      	ldr	r3, [r4, #0]
 80191e2:	b103      	cbz	r3, 80191e6 <_isatty_r+0x1a>
 80191e4:	602b      	str	r3, [r5, #0]
 80191e6:	bd38      	pop	{r3, r4, r5, pc}
 80191e8:	2000fb1c 	.word	0x2000fb1c

080191ec <_init>:
 80191ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191ee:	bf00      	nop
 80191f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191f2:	bc08      	pop	{r3}
 80191f4:	469e      	mov	lr, r3
 80191f6:	4770      	bx	lr

080191f8 <_fini>:
 80191f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191fa:	bf00      	nop
 80191fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191fe:	bc08      	pop	{r3}
 8019200:	469e      	mov	lr, r3
 8019202:	4770      	bx	lr
